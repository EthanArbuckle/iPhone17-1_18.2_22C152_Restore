void sub_23F5E3518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a29)
  {
    a30 = (uint64_t)a29;
    operator delete(a29);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a32);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v32 - 192);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result(v32 - 144);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result(v32 - 96);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a11);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a15);
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t _ZN9realityio29addIndexedBlendShapeAttributeIN32pxrInternal__aapl__pxrReserved__7GfVec3hEDv3_fEEbP21REGeomModelDescriptorRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKNS1_12UsdAttributeESH_(int a1, int a2, pxrInternal__aapl__pxrReserved__::UsdObject *this, pxrInternal__aapl__pxrReserved__::UsdObject *a4)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((uint64_t)v51, this);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a4, (uint64_t)v47);
  if (v51[0]) {
    BOOL v5 = v47[0] == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    long long v44 = v52;
    long long v45 = v53;
    v46 = v54;
    if (v54)
    {
      v7 = (atomic_ullong *)(v54 - 8);
      if (*((void *)&v45 + 1)) {
        v7 = (atomic_ullong *)*((void *)&v45 + 1);
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
    }
    long long v41 = v48;
    long long v42 = v49;
    uint64_t v43 = v50;
    if (v50)
    {
      v8 = (atomic_ullong *)(v50 - 16);
      if (*((void *)&v42 + 1)) {
        v8 = (atomic_ullong *)*((void *)&v42 + 1);
      }
      atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    unsigned int VertexCount = REGeomModelDescriptorGetVertexCount();
    uint64_t v6 = 0;
    if ((unint64_t)v41 <= VertexCount && (void)v44 == (void)v41)
    {
      __p = 0;
      v39 = 0;
      unint64_t v40 = 0;
      memset(&v37, 0, sizeof(v37));
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, v41 + 1);
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(&__p, v44);
      v11 = __p;
      if ((void)v44)
      {
        v12 = v46;
        v13 = &v46[3 * v44];
        uint64_t v14 = MEMORY[0x263F90640];
        do
        {
          LODWORD(v10) = *(_DWORD *)(v14 + 4 * *v12);
          DWORD1(v10) = *(_DWORD *)(v14 + 4 * v12[1]);
          DWORD2(v10) = *(_DWORD *)(v14 + 4 * v12[2]);
          *v11++ = v10;
          v12 += 3;
        }
        while (v12 != v13);
        v11 = __p;
      }
      v15 = v39;
      uint64_t v16 = v39 - v11;
      std::vector<unsigned int>::value_type __x = v16;
      if ((unint64_t)v39 >= v40)
      {
        if ((unint64_t)(v16 + 1) >> 60) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v40 - (void)v11;
        uint64_t v19 = v18 >> 3;
        if (v18 >> 3 <= (unint64_t)(v16 + 1)) {
          uint64_t v19 = v16 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v40, v20);
        }
        else {
          v21 = 0;
        }
        v22 = &v21[16 * v16];
        v23 = &v21[16 * v20];
        *(_OWORD *)v22 = 0u;
        v17 = v22 + 16;
        v25 = (char *)__p;
        v24 = (char *)v39;
        if (v39 != __p)
        {
          do
          {
            long long v26 = *((_OWORD *)v24 - 1);
            v24 -= 16;
            *((_OWORD *)v22 - 1) = v26;
            v22 -= 16;
          }
          while (v24 != v25);
          v24 = (char *)__p;
        }
        __p = v22;
        v39 = v17;
        unint64_t v40 = (unint64_t)v23;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        _OWORD *v39 = 0u;
        v17 = v15 + 1;
      }
      v39 = v17;
      std::vector<unsigned int>::resize(&v37, VertexCount, &__x);
      unint64_t v27 = v41;
      if ((void)v41)
      {
        uint64_t v28 = 0;
        uint64_t v29 = v43;
        unsigned int v30 = 1;
        std::vector<unsigned int>::pointer begin = v37.__begin_;
        while (1)
        {
          uint64_t v6 = 0;
          uint64_t v32 = *(unsigned int *)(v29 + 4 * v28);
          if ((v32 & 0x80000000) != 0 || v32 >= VertexCount) {
            break;
          }
          unsigned int v33 = v30 - 1;
          uint64_t v28 = v30;
          BOOL v34 = v27 > v30++;
          begin[v32] = v33;
          if (!v34) {
            goto LABEL_42;
          }
        }
      }
      else
      {
LABEL_42:
        uint64_t v6 = REGeomModelDescriptorAddIndexedAttributeVector3F();
      }
      if (v37.__begin_)
      {
        v37.__end_ = v37.__begin_;
        operator delete(v37.__begin_);
      }
      if (__p)
      {
        v39 = __p;
        operator delete(__p);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v41);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v44);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v47);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result((uint64_t)v51);
  return v6;
}

void sub_23F5E395C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a17);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a23);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)&a29);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result(v29 - 112);
  _Unwind_Resume(a1);
}

double std::__optional_storage_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (a1 != a2)
    {
      if (*(unsigned char *)(a1 + 40))
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)a1);
        long long v4 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v4;
        double result = 0.0;
        *(_OWORD *)a2 = 0u;
        *(_OWORD *)(a2 + 16) = 0u;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a2 + 32) = 0;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = 0;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return result;
}

void std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery::~UsdSkelSkinningQuery(pxrInternal__aapl__pxrReserved__::UsdSkelSkinningQuery *this)
{
  std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 352);
  std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 304);
  v2 = (std::__shared_weak_count *)*((void *)this + 37);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  v3 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 33);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 256);
  uint64_t v5 = *((void *)this + 31);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  uint64_t v6 = *((void *)this + 29);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 224);
  uint64_t v7 = *((void *)this + 27);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  uint64_t v8 = *((void *)this + 25);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 192);
  uint64_t v9 = *((void *)this + 23);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  uint64_t v10 = *((void *)this + 21);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 160);
  uint64_t v11 = *((void *)this + 19);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  uint64_t v12 = *((void *)this + 16);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 15);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 112);
  uint64_t v14 = *((void *)this + 13);
  if (v14) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
  }
  uint64_t v15 = *((void *)this + 10);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 9);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 64);
  uint64_t v17 = *((void *)this + 7);
  if (v17) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
  }
  uint64_t v18 = *((void *)this + 5);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 3);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v20 = *((void *)this + 1);
  if (v20) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
}

uint64_t std::__optional_destruct_base<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40)) {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)a1);
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E3E98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v37 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v36))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        int v7 = *(_DWORD *)(v6 + 8);
        *(unsigned char *)a3 = 1;
        *(void *)(a3 + 8) = *(void *)v6;
        *(_DWORD *)(a3 + 16) = v7;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
      {
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35, (const pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        if (v35.__r_.__value_.__l.__size_)
        {
          uint64_t v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(v14);
          int v16 = *(_DWORD *)(v15 + 8);
          *(unsigned char *)a3 = 1;
          *(void *)(a3 + 8) = *(void *)v15;
          *(_DWORD *)(a3 + 16) = v16;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v32;
          uint64_t v27 = v34;
          *(void *)(a3 + 24) = v33;
          *(void *)(a3 + 32) = v27;
          *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
          LOBYTE(v27) = HIBYTE(v34);
          long long v34 = 0uLL;
          uint64_t v33 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v27;
          if (SHIBYTE(v31) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      uint64_t v25 = v34;
      *(void *)(a3 + 24) = v33;
      *(void *)(a3 + 32) = v25;
      *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
      LOBYTE(v25) = HIBYTE(v34);
      long long v34 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v25;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        return;
      }
      v24 = __p[0];
    }
    else
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      }
      std::operator+<char>();
      uint64_t v17 = std::string::append(&v29, ") at the given time: ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, *a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = &v28;
      }
      else {
        uint64_t v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      v21 = std::string::append(&v35, (const std::string::value_type *)v19, size);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      std::string::size_type v31 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      uint64_t v23 = v34;
      *(void *)(a3 + 24) = v33;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
      LOBYTE(v23) = HIBYTE(v34);
      long long v34 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      v24 = (void *)v29.__r_.__value_.__r.__words[0];
    }
    operator delete(v24);
    goto LABEL_38;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v32;
  uint64_t v10 = v34;
  *(void *)(a3 + 24) = v33;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
  LOBYTE(v10) = HIBYTE(v34);
  long long v34 = 0uLL;
  uint64_t v33 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v10;
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E42CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      int v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E44E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        int v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        uint64_t v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      unsigned int v30 = __p[0];
    }
    else
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      uint64_t v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      unsigned int v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E4990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(void *a1, unint64_t a2)
{
  v3 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (uint64_t)&v4[-*a1] >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v20 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 3)
  {
    bzero(v4, 8 * v6);
    uint64_t v20 = &v4[8 * v6];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 >> 61) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v9 = v8 - (void)v3;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= a2) {
    uint64_t v10 = a2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  char v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v11);
  uint64_t v13 = &v12[8 * v5];
  long long v15 = &v12[8 * v14];
  bzero(v13, 8 * v6);
  int v16 = &v13[8 * v6];
  uint64_t v18 = (char *)*a1;
  uint64_t v17 = (char *)a1[1];
  if (v17 != (char *)*a1)
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 1);
      v17 -= 8;
      *((void *)v13 - 1) = v19;
      v13 -= 8;
    }
    while (v17 != v18);
    uint64_t v17 = (char *)*a1;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v15;
  if (v17)
  {
    operator delete(v17);
  }
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E4EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          char v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            char v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          uint64_t v25 = &v58;
        }
        else
        {
          uint64_t v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        }
        else
        {
          long long v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string v35 = __p[0];
    }
    else
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v52;
      }
      else {
        long long v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      unsigned int v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E5594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v37 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v36))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        uint64_t v7 = *(void *)(v6 + 16);
        *(unsigned char *)a3 = 1;
        *(_OWORD *)(a3 + 8) = *(_OWORD *)v6;
        *(void *)(a3 + 24) = v7;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
      {
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35, (const pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        if (v35.__r_.__value_.__l.__size_)
        {
          uint64_t v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(v14);
          uint64_t v16 = *(void *)(v15 + 16);
          *(unsigned char *)a3 = 1;
          *(_OWORD *)(a3 + 8) = *(_OWORD *)v15;
          *(void *)(a3 + 24) = v16;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v32;
          uint64_t v27 = v34;
          *(void *)(a3 + 24) = v33;
          *(void *)(a3 + 32) = v27;
          *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
          LOBYTE(v27) = HIBYTE(v34);
          long long v34 = 0uLL;
          uint64_t v33 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v27;
          if (SHIBYTE(v31) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v35);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      uint64_t v25 = v34;
      *(void *)(a3 + 24) = v33;
      *(void *)(a3 + 32) = v25;
      *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
      LOBYTE(v25) = HIBYTE(v34);
      long long v34 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v25;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        return;
      }
      long long v24 = __p[0];
    }
    else
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      }
      std::operator+<char>();
      std::string::size_type v17 = std::string::append(&v29, ") at the given time: ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, *a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v19 = &v28;
      }
      else {
        uint64_t v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      std::string::size_type v21 = std::string::append(&v35, (const std::string::value_type *)v19, size);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      std::string::size_type v31 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v32;
      uint64_t v23 = v34;
      *(void *)(a3 + 24) = v33;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
      LOBYTE(v23) = HIBYTE(v34);
      long long v34 = 0uLL;
      uint64_t v33 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      long long v24 = (void *)v29.__r_.__value_.__r.__words[0];
    }
    operator delete(v24);
    goto LABEL_38;
  }
  double v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v32;
  uint64_t v10 = v34;
  *(void *)(a3 + 24) = v33;
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 39) = *(void *)((char *)&v34 + 7);
  LOBYTE(v10) = HIBYTE(v34);
  long long v34 = 0uLL;
  uint64_t v33 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v10;
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E5A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          char v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            char v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          uint64_t v25 = &v58;
        }
        else
        {
          uint64_t v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        }
        else
        {
          long long v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string v35 = __p[0];
    }
    else
    {
      long long v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v28 = &v52;
      }
      else {
        std::string v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      unsigned int v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E645C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E6A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        char v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        std::string::size_type v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            std::string::size_type v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              std::string::size_type v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      unsigned int v30 = __p[0];
    }
    else
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      long long v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      unsigned int v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E6EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<int>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E7654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        int v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C258], v11))
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          int v14 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>(v13);
          *(unsigned char *)a3 = 1;
          *(_DWORD *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      long long v22 = __p[0];
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v17 = &v26;
      }
      else {
        std::string::size_type v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      long long v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      long long v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  long long v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E7A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back<int>(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        long long v7 = (uint64_t *)a1;
      }
      else {
        long long v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew(a1, v11);
    long long v13 = New;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      long long v15 = New;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)New + v4) = *a2;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void realityio::getAttributeValue<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<unsigned int>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E7DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E7FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        int v6 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(_DWORD *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C260], v11))
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned int>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          int v14 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned int>(v13);
          *(unsigned char *)a3 = 1;
          *(_DWORD *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      long long v22 = __p[0];
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v17 = &v26;
      }
      else {
        std::string::size_type v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      long long v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      long long v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  long long v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        long long v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        std::string::size_type v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            uint64_t v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              uint64_t v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      long long v30 = __p[0];
    }
    else
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      std::string v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      long long v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E88E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<unsigned char>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E8D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E8F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        char v6 = *(unsigned char *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        *(unsigned char *)a3 = 1;
        *(unsigned char *)(a3 + 8) = v6;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C250], v11))
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned char>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          char v14 = *(unsigned char *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned char>(v13);
          *(unsigned char *)a3 = 1;
          *(unsigned char *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      long long v22 = __p[0];
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v17 = &v26;
      }
      else {
        std::string::size_type v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      long long v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      long long v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  long long v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E9348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        long long v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        std::string::size_type v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            uint64_t v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              uint64_t v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      long long v30 = __p[0];
    }
    else
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      std::string v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      long long v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5E981C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back<float>(uint64_t a1, _DWORD *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_14;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        long long v7 = (uint64_t *)a1;
      }
      else {
        long long v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(void *)a1;
      return;
    }
LABEL_14:
    uint64_t v9 = *(int **)(a1 + 32);
    uint64_t v10 = 1;
    do
    {
      unint64_t v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew(a1, v11);
    uint64_t v13 = New;
    if (v4)
    {
      uint64_t v14 = 4 * v4;
      long long v15 = New;
      do
      {
        int v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)New + v4) = *a2;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1);
    *(void *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F5E9DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        int v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        std::string::size_type v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            uint64_t v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              uint64_t v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      long long v30 = __p[0];
    }
    else
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      std::string v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      long long v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5EA284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a1) & 1) == 0)
  {
    v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<double>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      uint64_t v14 = 0;
    }
    long long v15 = &v14[4 * v11];
    int v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    std::string::size_type v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  long long v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<unsigned int>::size_type v16 = 4 * __n;
      std::string::size_type v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    }
    else {
      long long v15 = 0;
    }
    int v18 = (unsigned int *)&v15[4 * v12];
    long long v19 = &v18[__n];
    std::vector<unsigned int>::size_type v20 = 4 * __n;
    uint64_t v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    long long v22 = (unsigned int *)&v15[4 * v14];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    for (std::vector<unsigned int>::pointer i = this->__end_; i != begin; --i)
    {
      unsigned int v25 = *(i - 1);
      *--int v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23F5EA7E8(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    double result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      long long v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  std::vector<unsigned int>::size_type v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    long long v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  pxrInternal__aapl__pxrReserved__::TfToken *v12 = &v9[v17];
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<unsigned int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_23F5EA978(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_23F5EA9F0(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_23F5EAA68(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        uint64_t v6 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        if ((v6 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v6 &= 0xFFFFFFFFFFFFFFF8;
        }
        *(unsigned char *)a3 = 1;
        *(void *)(a3 + 8) = v6;
        goto LABEL_44;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      {
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        uint64_t v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          uint64_t v14 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>(v13);
          if ((v14 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v14 &= 0xFFFFFFFFFFFFFFF8;
          }
          *(unsigned char *)a3 = 1;
          *(void *)(a3 + 8) = v14;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v30;
          uint64_t v25 = v32;
          *(void *)(a3 + 24) = v31;
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
          LOBYTE(v25) = HIBYTE(v32);
          long long v32 = 0uLL;
          uint64_t v31 = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v29) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_44;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v23 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v23) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v29) & 0x80000000) == 0)
      {
LABEL_44:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      long long v22 = __p[0];
    }
    else
    {
      std::vector<unsigned int>::size_type v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      unint64_t v15 = std::string::append(&v27, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v26, *a2);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v17 = &v26;
      }
      else {
        size_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v26.__r_.__value_.__l.__size_;
      }
      long long v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v29 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v30;
      uint64_t v21 = v32;
      *(void *)(a3 + 24) = v31;
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
      LOBYTE(v21) = HIBYTE(v32);
      long long v32 = 0uLL;
      uint64_t v31 = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_44;
      }
      long long v22 = (void *)v27.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_44;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v30, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v30;
  uint64_t v9 = v32;
  *(void *)(a3 + 24) = v31;
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v32 + 7);
  LOBYTE(v9) = HIBYTE(v32);
  long long v32 = 0uLL;
  uint64_t v31 = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5EAE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        long long v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        size_t v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            uint64_t v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              uint64_t v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      long long v30 = __p[0];
    }
    else
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      std::string v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      long long v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5EB438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<int>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        long long v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        size_t v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            uint64_t v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              uint64_t v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      long long v30 = __p[0];
    }
    else
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      std::string v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      long long v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5EBB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<float>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_23F5EBE68(_Unwind_Exception *exception_object)
{
  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        long long v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        size_t v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            uint64_t v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              uint64_t v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      long long v30 = __p[0];
    }
    else
    {
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      std::string v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      long long v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5EC2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(unsigned char *)a3)
      {
        long long v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v14 = *(void *)(a3 + 24);
          uint64_t v13 = a3 + 24;
          uint64_t v12 = v14;
          if (*(char *)(v13 + 23) >= 0) {
            uint64_t v12 = v13;
          }
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v15);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      uint64_t v11 = v21;
      *(void *)(a3 + 24) = *(void *)&buf[16];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      LOBYTE(v11) = HIBYTE(v21);
      long long v21 = 0uLL;
      *(void *)&buf[16] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v11;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    uint64_t v10 = v21;
    *(void *)(a3 + 24) = *(void *)&buf[16];
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
    LOBYTE(v10) = HIBYTE(v21);
    long long v21 = 0uLL;
    *(void *)&buf[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v10;
    if ((v18[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F5EC7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void *realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdAttribute>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdAttribute>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 6;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = a2[4];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = a2[3];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a2 + 2));
  uint64_t result = a2[1];
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v3, a2);
    long long v7 = &v6[v5];
    uint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t RIOPxrArAssetGetTypeID()
{
  if (qword_268C40510 != -1) {
    dispatch_once(&qword_268C40510, &__block_literal_global_9);
  }
  return _MergedGlobals_14;
}

void __RIOPxrArAssetGetTypeID_block_invoke()
{
  if (!_MergedGlobals_14) {
    _MergedGlobals_14 = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrArAssetCreate(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
    std::string::basic_string[abi:ne180100]<0>(v11, (char *)v1);
    *(_OWORD *)long long __p = *(_OWORD *)v11;
    uint64_t v16 = v12;
    v11[1] = 0;
    uint64_t v12 = 0;
    v11[0] = 0;
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
    if (v13)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v13 + 24))(__p);
      if (qword_268C40510 != -1) {
        dispatch_once(&qword_268C40510, &__block_literal_global_9);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v1 = Instance;
      if (Instance)
      {
        *(_OWORD *)(Instance + 16) = 0u;
        *(_OWORD *)(Instance + 32) = 0u;
      }
      uint64_t v4 = v13;
      uint64_t v3 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int64_t v5 = *(std::__shared_weak_count **)(Instance + 24);
      *(void *)(v1 + 16) = v4;
      *(void *)(v1 + 24) = v3;
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      long long v7 = __p[0];
      uint64_t v6 = __p[1];
      if (__p[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v1 + 40);
      *(void *)(v1 + 32) = v7;
      *(void *)(v1 + 40) = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(realityio::logObjects(0) + 32);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = (void *)v1;
        _os_log_impl(&dword_23F4EA000, v9, OS_LOG_TYPE_DEFAULT, "RIOPxrUtilsCFDataWithArAssetPath failed to resolve path %s", (uint8_t *)__p, 0xCu);
      }
      uint64_t v1 = 0;
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  return v1;
}

void sub_23F5ECD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

CFDataRef RIOPxrArAssetCreateCFDataNoCopy(CFDataRef result)
{
  if (result)
  {
    CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    uint64_t v2 = (const UInt8 *)*((void *)result + 4);
    CFIndex v3 = (*(uint64_t (**)(void))(**((void **)result + 2) + 16))(*((void *)result + 2));
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    return CFDataCreateWithBytesNoCopy(v1, v2, v3, v4);
  }
  return result;
}

uint64_t RIOPxrUtilsCFDataWithArAssetPath()
{
  return 0;
}

CFDataRef RIOPxrUtilsCopyCFDataWithArAssetPath(pxrInternal__aapl__pxrReserved__ *a1, _DWORD *a2)
{
  CFDataRef v2 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
    std::string::basic_string[abi:ne180100]<0>(v9, (char *)a1);
    *(_OWORD *)long long __p = *(_OWORD *)v9;
    uint64_t v14 = v10;
    v9[1] = 0;
    uint64_t v10 = 0;
    v9[0] = 0;
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
    if (v11)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v11 + 24))(__p);
      *a2 = (*(uint64_t (**)(realityio *))(*(void *)v11 + 16))(v11);
      int64_t v5 = (const UInt8 *)__p[0];
      CFIndex v6 = (*(uint64_t (**)(realityio *))(*(void *)v11 + 16))(v11);
      CFDataRef v2 = CFDataCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], v5, v6);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
    else
    {
      long long v7 = *(NSObject **)(realityio::logObjects(0) + 32);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = a1;
        _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_DEFAULT, "RIOPxrUtilsCopyCFDataWithArAssetPath failed to resolve path %s", (uint8_t *)__p, 0xCu);
      }
      CFDataRef v2 = 0;
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return v2;
}

void sub_23F5ED058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrArUtilsCopyExtension(pxrInternal__aapl__pxrReserved__ *a1)
{
  pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  std::string::basic_string[abi:ne180100]<0>(&v5, (char *)a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  if (v8 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  CFStringRef v3 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5);
  }
  return v3;
}

void sub_23F5ED150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUtilsResetDefaultArResolver()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ArDefaultResolver");
  pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver();
  if (v1 < 0) {
    operator delete(__p);
  }
}

void sub_23F5ED1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _RIOPxrArAssetCFFinalize(void *a1)
{
  CFDataRef v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  CFStringRef v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

BOOL _RIOPxrArAssetCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrArAssetCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrArAssetCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrArAsset %p>", a1);
}

CFStringRef _RIOPxrArAssetCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrArAsset %p>", a1);
}

uint64_t realityio::PhysicsColliderComponentBuilder::kOutputName(realityio::PhysicsColliderComponentBuilder *this)
{
  {
    operator new();
  }
  return realityio::PhysicsColliderComponentBuilder::kOutputName(void)::kOutputName;
}

void sub_23F5ED338(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::PhysicsColliderComponentBuilder *realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(realityio::PhysicsColliderComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__src, "PhysicsColliderComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsColliderComponentBuilderIdentifier);
  realityio::generatePhysicsColliderDirtyStageSubscription(&v5);
  v10[0] = &unk_26F33C1A0;
  v10[3] = v10;
  v9[0] = &unk_26F33C220;
  v9[3] = v9;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)&__src, (uint64_t)__p, &v5, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((v12[15] & 0x80000000) != 0) {
    operator delete(__src);
  }
  *(void *)this = &unk_26F33C128;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  __src = (void *)REColliderComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 280, (char *)&__src, (uint64_t)v12, 1uLL);
  return this;
}

void sub_23F5ED4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a18);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a22);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsColliderComponentBuilder::run(realityio::PhysicsColliderComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  CFAllocatorRef v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  PrimAtPath = (realityio *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v18, v5, v4);
  long long v7 = *(NSObject **)(realityio::logObjects(PrimAtPath) + 24);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v8)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_INFO, "Updating entity's rigid body collider", buf, 2u);
  }
  uint64_t v9 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v8);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v9, (uint64_t)buf);
  if (buf[0])
  {
    uint64_t v10 = v17;
    uint64_t v15 = v17;
    if (v17)
    {
      RERetain();
      uint64_t v11 = *((void *)a2 + 6);
      uint64_t v12 = operator new(0x20uLL);
      void *v12 = &unk_26F33C2A0;
      v12[1] = a2;
      v12[2] = this;
      v12[3] = &v15;
      uint64_t v23 = v12;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 16))(v11, v22);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v22);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v13 = *(NSObject **)(realityio::logObjects(v10) + 24);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the rigid body's collider component because entity no longer exists", v22, 2u);
  }
LABEL_9:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v15);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)buf);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  uint64_t result = v19;
  if (v19) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
  }
  return result;
}

void sub_23F5ED74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v2 - 80));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va2);
  _Unwind_Resume(a1);
}

void realityio::PhysicsColliderComponentBuilder::clear(realityio::PhysicsColliderComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v14 = a2;
  uint64_t v4 = *((void *)a2 + 6);
  uint64_t v17 = &unk_26F33C4A0;
  *(void *)&long long v18 = &v14;
  *((void *)&v18 + 1) = this;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 16))(v4, &v17);
  uint64_t v5 = (realityio::PhysicsColliderComponentBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v17);
  long long v7 = (std::mutex *)*((void *)this + 2);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (const void **)realityio::PhysicsColliderComponentBuilder::kOutputName(v5);
  realityio::Outputs::getRawValue<RECollisionShape *>(v7, v8, (uint64_t)&v17);
  int v10 = v17;
  if (!(_BYTE)v17)
  {
    long long v15 = v18;
    uint64_t v9 = (realityio::PhysicsColliderComponentBuilder *)&v16;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      long long v7 = (std::mutex *)v16.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v17 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v16 = __p;
      long long v7 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10)
  {
    uint64_t v12 = *((void *)this + 2);
    uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (const void **)realityio::PhysicsColliderComponentBuilder::kOutputName(v9);
    std::mutex::lock((std::mutex *)(v12 + 64));
    if (v12 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v12 + 40, v13))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v12 + 40), v13); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v12, (unsigned __int8 *)v13);
    }
    std::mutex::unlock((std::mutex *)(v12 + 64));
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else if (v2 < 0)
  {
    operator delete(v7);
  }
}

void sub_23F5ED99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (!a16 && a24 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

void realityio::PhysicsColliderComponentBuilder::~PhysicsColliderComponentBuilder(realityio::PhysicsColliderComponentBuilder *this)
{
  realityio::PhysicsColliderComponentBuilder::~PhysicsColliderComponentBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26F33C128;
  char v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  CFStringRef v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33C1A0;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33C1A0;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v12) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v12, &v14);
  uint64_t v6 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  long long v7 = (realityio::PhysicsColliderAssetBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v8 = realityio::PhysicsColliderAssetBuilder::kOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 136), &v11, &v12);
  int v10 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F5EDCFC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33C220;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33C220;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::PhysicsColliderComponentBuilder::kOutputName((realityio::PhysicsColliderComponentBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 144), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F5EDF20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsColliderComponentBuilder::PhysicsColliderComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = &unk_26F33C2A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33C2A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::PhysicsColliderAssetBuilder *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = realityio::PhysicsColliderAssetBuilder::kOutputName(a1);
  realityio::Inputs::_getValue<REAsset *>(v1, v3, (uint64_t)v16);
  if (v16[0])
  {
    uint64_t v15 = v17;
    if (v17)
    {
      uint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(std::__shared_weak_count **)(v2 + 24);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v7 = (const void **)realityio::PhysicsColliderComponentBuilder::kOutputName(v4);
      uint64_t CollisionShape = RECollisionShapeAssetGetCollisionShape();
      std::mutex::lock((std::mutex *)(v6 + 64));
      unint64_t v9 = operator new(0x28uLL);
      v9[1] = 0;
      v9[2] = 0;
      *unint64_t v9 = &unk_26F33C310;
      v9[3] = &unk_26F33C360;
      void v9[4] = CollisionShape;
      *(void *)buf = v7;
      int v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v6 + 40), v7, (uint64_t)&std::piecewise_construct, (long long **)buf);
      int v11 = (std::__shared_weak_count *)v10[8];
      v10[7] = (uint64_t)(v9 + 3);
      v10[8] = (uint64_t)v9;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v6, (unsigned __int8 *)v7, (uint64_t)v7);
      std::mutex::unlock((std::mutex *)(v6 + 64));
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v12 = *(NSObject **)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_ERROR, "No physics collider asset exists for the rigid body", buf, 2u);
  }
LABEL_12:
  REColliderComponentGetComponentType();
  *(void *)buf = &unk_26F33C390;
  uint64_t v22 = v2;
  uint64_t v23 = &v15;
  uint64_t v24 = buf;
  uint64_t v13 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)buf, v13);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](buf);
  RERigidBodyComponentGetComponentType();
  v20[0] = &unk_26F33C410;
  v20[1] = v2;
  v20[3] = v20;
  uint64_t v14 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v20, v14);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v20);
  if (!v16[0] && v19 < 0) {
    operator delete(__p);
  }
}

void sub_23F5EE2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::mutex::unlock(v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (!a11 && a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<RECollisionShape *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33C310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<RECollisionShape *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33C310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<RECollisionShape *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F33C390;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33C390;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);

  return REColliderComponentSetShape();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F33C410;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F33C410;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);

  return RERigidBodyComponentSetMotionType();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio31PhysicsColliderComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F33C4A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33C4A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v8);
  if (v8[0])
  {
    uint64_t v7 = v9;
    if (v9)
    {
      RERetain();
      uint64_t v4 = *(void *)(v1 + 280);
      uint64_t v5 = *(void *)(v1 + 288);
      while (v4 != v5)
      {
        REEntityRemoveComponentByClass();
        v4 += 8;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_23F5EE7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsColliderComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::getRawValue<RECollisionShape *>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    uint64_t v9 = std::string::append(&v12, "\" does not exist in the builder outputs");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v15, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v15;
    uint64_t v11 = v17;
    *(void *)(a3 + 24) = v16;
    *(void *)(a3 + 32) = v11;
    *(void *)(a3 + 39) = *(void *)((char *)&v17 + 7);
    LOBYTE(v11) = HIBYTE(v17);
    long long v17 = 0uLL;
    uint64_t v16 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v11;
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8);
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
  }
  std::mutex::unlock(v6);
}

void sub_23F5EE934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::tokens::LightBuilderTokens_StaticTokenType::~LightBuilderTokens_StaticTokenType(realityio::tokens::LightBuilderTokens_StaticTokenType *this)
{
  uint64_t v20 = (void **)((char *)this + 152);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v20);
  uint64_t v2 = *((void *)this + 18);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 17);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 16);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 15);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 14);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 13);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 12);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 11);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 10);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 8);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 7);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 6);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 5);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 3);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 2);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 1);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::LightBuilderTokens_StaticTokenType *realityio::tokens::LightBuilderTokens_StaticTokenType::LightBuilderTokens_StaticTokenType(realityio::tokens::LightBuilderTokens_StaticTokenType *this)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  std::string v27 = (uint64_t *)(MEMORY[0x2455CF820](this, "RectLight", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 80, "treatAsAmbient", 0);
  MEMORY[0x2455CF820]((char *)this + 88, "treatAsPoint", 0);
  MEMORY[0x2455CF820]((char *)this + 96, "radius", 0);
  MEMORY[0x2455CF820]((char *)this + 104, "width", 0);
  MEMORY[0x2455CF820]((char *)this + 112, "height", 0);
  MEMORY[0x2455CF820]((char *)this + 120, "shaping:cone:angle", 0);
  MEMORY[0x2455CF820]((char *)this + 128, "shaping:cone:softness", 0);
  MEMORY[0x2455CF820]((char *)this + 136, "realitykit:innerDegrees", 0);
  MEMORY[0x2455CF820]((char *)this + 144, "inputs:texture:file", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v28 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v27;
  uint64_t v29 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v30 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v31 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v32 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v33 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v34 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v35 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v36 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v37 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v38 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v39 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v40 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v41 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v42 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v43 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v44 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v45 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v46 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  uint64_t v21 = (char *)operator new(0x98uLL);
  uint64_t v22 = 0;
  *((void *)this + 19) = v21;
  *((void *)this + 20) = v21;
  *((void *)this + 21) = v21 + 152;
  do
  {
    uint64_t v23 = *(uint64_t *)((char *)&v28 + v22);
    *(void *)&v21[v22] = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v21[v22] &= 0xFFFFFFFFFFFFFFF8;
    }
    v22 += 8;
  }
  while (v22 != 152);
  *((void *)this + 20) = v21 + 152;
  for (uint64_t i = 144; i != -8; i -= 8)
  {
    uint64_t v25 = *(uint64_t *)((char *)&v28 + i);
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F5EF1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void **a20,uint64_t a21,char a22)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a20);
  uint64_t v32 = 144;
  while (1)
  {
    uint64_t v33 = *(void *)(&a22 + v32);
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v32 -= 8;
    if (v32 == -8)
    {
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F5EF410()
{
}

void sub_23F5EF418()
{
}

void sub_23F5EF420()
{
}

void sub_23F5EF428()
{
}

void sub_23F5EF430()
{
}

void sub_23F5EF438()
{
}

void sub_23F5EF440()
{
}

void sub_23F5EF448()
{
}

void sub_23F5EF450()
{
}

void sub_23F5EF458()
{
}

void realityio::tokens::ShadowBuilderTokens_StaticTokenType::~ShadowBuilderTokens_StaticTokenType(realityio::tokens::ShadowBuilderTokens_StaticTokenType *this)
{
  uint64_t v4 = (void **)((char *)this + 24);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::ShadowBuilderTokens_StaticTokenType *realityio::tokens::ShadowBuilderTokens_StaticTokenType::ShadowBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "shadow:enable", 0) + 8);
  MEMORY[0x2455CF820](v2, "shadow:bias", 0);
  MEMORY[0x2455CF820](this + 2, "shadow:distance", 0);
  uint64_t v3 = *this;
  uint64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::ShadowBuilderTokens_StaticTokenType *)this;
}

void sub_23F5EF68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

float realityio::scaleLightIntensityByStageUnits(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, float a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v11, this);
  uint64_t v4 = v12;
  if (v12)
  {
    if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v12)
                  + 14))
      uint64_t v4 = v11;
    else {
      uint64_t v4 = 0;
    }
  }
  uint64_t v13 = v4;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v13);
  uint64_t v5 = (uint64_t)v12;
  if (v12 && atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&v11, (uint64_t *)&v13);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  double v7 = v6;
  uint64_t v8 = (uint64_t)v12;
  if (v12 && atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  float v9 = v7 * v7 * a3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v13);
  return v9;
}

void sub_23F5EF844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, atomic_uint *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (atomic_fetch_add_explicit(a4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a4 + 8))(a4);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

realityio::mtlx::UsdMtlxTokens_StaticTokenType *realityio::mtlx::UsdMtlxTokens_StaticTokenType::UsdMtlxTokens_StaticTokenType(realityio::mtlx::UsdMtlxTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)MEMORY[0x2455CF820](this, "out", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  *uint64_t v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_23F5EF9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *realityio::mtlx::UsdMtlxStandardLibraryPaths(realityio::mtlx *this)
{
  {
    if (v2)
    {
      realityio::mtlx::_ComputeStdlibSearchPaths(v2);
    }
  }
  return &realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths;
}

void sub_23F5EFA50(_Unwind_Exception *a1)
{
}

void realityio::mtlx::_ComputeStdlibSearchPaths(realityio::mtlx *this)
{
  *(void *)&long long v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.CoreRealityIO"];
  uint64_t v2 = v1;
  realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths = 0;
  unk_268C3F400 = 0;
  qword_268C3F408 = 0;
  if (v1)
  {
    uint64_t v3 = [v1 resourceURL];
    uint64_t v4 = v3;
    if (!v3)
    {
LABEL_10:

      goto LABEL_11;
    }
    std::string::basic_string[abi:ne180100]<0>(&v12, (char *)[v3 fileSystemRepresentation]);
    uint64_t v5 = std::string::append(&v12, "/");
    double v6 = (std::string::value_type *)v5->__r_.__value_.__r.__words[0];
    std::string::size_type size = v5->__r_.__value_.__l.__size_;
    v13[0] = v5->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v13 + 3) = *(_DWORD *)((char *)&v5->__r_.__value_.__r.__words[2] + 3);
    int v8 = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v12.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_5;
      }
    }
    else if ((v8 & 0x80000000) == 0)
    {
LABEL_5:
      v16.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v16.__r_.__value_.__l.__size_ = size;
      LODWORD(v16.__r_.__value_.__r.__words[2]) = v13[0];
      *(_DWORD *)((char *)&v16.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v13 + 3);
      *((unsigned char *)&v16.__r_.__value_.__s + 23) = v8;
      goto LABEL_8;
    }
    std::string::__init_copy_ctor_external(&v16, v6, size);
LABEL_8:
    float v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v14 = (std::string *)&v9;
    char v15 = 0;
    float v9 = (std::string *)operator new(0x18uLL);
    uint64_t v10 = v9;
    uint64_t v11 = v9 + 1;
    uint64_t v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (long long *)&v16, &v17, v9);
    realityio::mtlx::_MergeSearchPaths((long long **)&realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths, (long long **)&v9, &v12);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths, (std::string *)v12.__r_.__value_.__l.__data_, (long long *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
    uint64_t v14 = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    uint64_t v14 = (std::string *)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_10;
      }
    }
    else if ((v8 & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(v6);
    goto LABEL_10;
  }
LABEL_11:
}

void sub_23F5EFC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  operator delete(v29);

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t *realityio::mtlx::UsdMtlxCustomSearchPaths(realityio::mtlx *this)
{
  {
    if (v2)
    {
      realityio::mtlx::_GetSearchPathsFromEnvVar(v2, v3);
    }
  }
  return &realityio::mtlx::UsdMtlxCustomSearchPaths(void)::materialxCustomSearchPaths;
}

void sub_23F5EFD74(_Unwind_Exception *a1)
{
}

void realityio::mtlx::_GetSearchPathsFromEnvVar(realityio::mtlx *this, const char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v5, "PXR_MTLX_PLUGIN_SEARCH_PATHS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv();
  if (v4 < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v2 = v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v2 = v8;
  }
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(v5, ":");
    pxrInternal__aapl__pxrReserved__::TfStringSplit();
    if (v6 < 0) {
      operator delete(v5[0]);
    }
    if ((v9 & 0x80) != 0) {
      goto LABEL_11;
    }
  }
  else
  {
    realityio::mtlx::UsdMtlxCustomSearchPaths(void)::materialxCustomSearchPaths = 0;
    unk_268C3F420 = 0;
    qword_268C3F428 = 0;
    if ((v9 & 0x80) != 0) {
LABEL_11:
    }
      operator delete(v7);
  }
}

void sub_23F5EFE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

std::string *realityio::mtlx::UsdMtlxSearchPaths(realityio::mtlx *this)
{
  {
    if (v2)
    {
      uint64_t v3 = realityio::mtlx::UsdMtlxCustomSearchPaths(v2);
      realityio::mtlx::UsdMtlxStandardLibraryPaths((realityio::mtlx *)v3);
      realityio::mtlx::_MergeSearchPaths((long long **)&realityio::mtlx::UsdMtlxCustomSearchPaths(void)::materialxCustomSearchPaths, (long long **)&realityio::mtlx::UsdMtlxStandardLibraryPaths(void)::materialxLibraryPaths, &realityio::mtlx::UsdMtlxSearchPaths(void)::materialxSearchPaths);
    }
  }
  return &realityio::mtlx::UsdMtlxSearchPaths(void)::materialxSearchPaths;
}

void sub_23F5EFF4C(_Unwind_Exception *a1)
{
}

std::__split_buffer<std::string>::pointer realityio::mtlx::_MergeSearchPaths@<X0>(long long **a1@<X0>, long long **a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  return std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((long long *)a3, a3->__r_.__value_.__l.__size_, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void sub_23F5EFFDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *realityio::mtlx::UsdMtlxStandardFileExtensions@<X0>(std::string *a1@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "mtlx");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&realityio::mtlx::UsdMtlxStandardFileExtensions(void)::extensions, (long long *)__p, 1uLL);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, (long long *)realityio::mtlx::UsdMtlxStandardFileExtensions(void)::extensions, unk_268C3F460, 0xAAAAAAAAAAAAAAABLL* ((unk_268C3F460 - realityio::mtlx::UsdMtlxStandardFileExtensions(void)::extensions) >> 3));
}

void sub_23F5F00DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_23F5F0194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void realityio::mtlx::UsdMtlxReadDocument(RIO_MTLX *a1)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(a1);
}

void sub_23F5F0684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  a32 = &a10;
  std::vector<RIO_MTLX::FilePath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  MEMORY[0x2455CE6C0](&a20);
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  _Unwind_Resume(a1);
}

void realityio::mtlx::UsdMtlxGetDocumentFromString(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v13, a1);
  uint64_t v4 = std::to_string(&v12, v3);
  char v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__find_equal<std::string>(&v15, (const void **)&v12.__r_.__value_.__l.__data_);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    uint64_t v8 = (uint64_t *)operator new(0x48uLL);
    v13[0] = (uint64_t)v8;
    v13[1] = (uint64_t)&qword_268C405D0;
    char v14 = 0;
    uint64_t v9 = (std::string *)(v8 + 4);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v9, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
      v8[6] = v12.__r_.__value_.__r.__words[2];
    }
    v8[7] = 0;
    unsigned char v8[8] = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__insert_node_at((uint64_t)v15, v7, v8);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>>>>::reset[abi:ne180100](v13);
    RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v10);
  }
  uint64_t v11 = *(void *)(v6 + 64);
  *a2 = *(void *)(v6 + 56);
  a2[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_23F5F0948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void realityio::mtlx::anonymous namespace'::_GetCache(realityio::mtlx::_anonymous_namespace_ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40540, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40540))
  {
    qword_268C405D8 = 0;
    qword_268C405D0 = 0;
    qword_268C405C8 = (uint64_t)&qword_268C405D0;
    __cxa_guard_release(&qword_268C40540);
  }
}

uint64_t *realityio::mtlx::UsdMtlxGetDocument@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __n128 result = std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__find_equal<std::string>(&v15, (const void **)a1);
  uint64_t v5 = *result;
  if (!*result)
  {
    uint64_t v8 = (uint64_t **)result;
    uint64_t v9 = (uint64_t *)operator new(0x48uLL);
    v13[0] = (uint64_t)v9;
    v13[1] = (uint64_t)&qword_268C405D0;
    char v14 = 0;
    uint64_t v10 = (std::string *)(v9 + 4);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v9[6] = *(void *)(a1 + 16);
    }
    v9[7] = 0;
    v9[8] = 0;
    char v14 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__insert_node_at((uint64_t)v15, v8, v9);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>>>>::reset[abi:ne180100](v13);
    uint64_t v11 = (RIO_MTLX *)MEMORY[0x2455CE6B0](&v15);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a1 + 8);
    }
    if (v12) {
      realityio::mtlx::UsdMtlxReadDocument((RIO_MTLX *)v13);
    }
    RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v11);
  }
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v6 = *(void *)(v5 + 64);
  *a2 = v7;
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_23F5F0CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MEMORY[0x2455CE6C0](va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::_ImportLibraries()
{
  realityio::mtlx::UsdMtlxStandardFileExtensions(&v1);
  pxrInternal__aapl__pxrReserved__::NdrFsHelpersDiscoverFiles();
  v0 = &v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v0);
  if (v2[0] != v2[1]) {
    realityio::mtlx::UsdMtlxReadDocument((RIO_MTLX *)&v1);
  }
  v1.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v1);
}

void sub_23F5F0E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t realityio::mtlx::UsdMtlxGetVersion(RIO_MTLX::InterfaceElement **a1, unsigned char *a2)
{
  MEMORY[0x2455CE6B0](v16);
  uint64_t VersionString = (uint64_t)RIO_MTLX::InterfaceElement::getVersionString(*a1);
  if (*(char *)(VersionString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)VersionString, *(void *)(VersionString + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)VersionString;
    v15.__r_.__value_.__r.__words[2] = *(void *)(VersionString + 16);
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  }
  std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v8 = 0;
    if (!a2) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t VersionString = pxrInternal__aapl__pxrReserved__::NdrVersion::NdrVersion();
  if (v14) {
    uint64_t v8 = v14;
  }
  else {
    uint64_t v8 = 0;
  }
  if (a2)
  {
LABEL_13:
    uint64_t v9 = *a1;
    uint64_t v10 = (unsigned __int8 *)RIO_MTLX::InterfaceElement::DEFAULT_VERSION_ATTRIBUTE((RIO_MTLX::InterfaceElement *)VersionString);
    *a2 = RIO_MTLX::Element::getTypedAttribute<BOOL>((uint64_t)v9, v10) ^ 1;
  }
LABEL_14:
  unint64_t v11 = atomic_load((unint64_t *)off_265071678);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t Begin = pxrInternal__aapl__pxrReserved__::TfErrorMark::GetBegin((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v16, v5);
  LOBYTE(v14) = 0;
  if (tbb::interface6::internal::ets_base<(tbb::ets_key_usage_type)1>::table_lookup((atomic_ullong *)(v11 + 152), &v14) != Begin) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange();
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  MEMORY[0x2455CE6C0](v16);
  return v8;
}

void sub_23F5F0FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  MEMORY[0x2455CE6C0](&a17);
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::UsdMtlxGetSourceURI(uint64_t *a1)
{
  uint64_t v4 = *a1;
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    while (1)
    {
      if (*(char *)(v4 + 95) < 0)
      {
        if (*(void *)(v4 + 80))
        {
LABEL_20:
          int v6 = 0;
          std::string v1 = (std::__shared_weak_count *)(v4 + 72);
          if (!v3) {
            goto LABEL_22;
          }
          goto LABEL_21;
        }
      }
      else if (*(unsigned char *)(v4 + 95))
      {
        goto LABEL_20;
      }
      uint64_t v5 = *(std::__shared_weak_count **)(v4 + 232);
      if (!v5) {
        break;
      }
      std::string v1 = std::__shared_weak_count::lock(v5);
      if (!v1)
      {
        uint64_t v4 = 0;
        if (!v3) {
          goto LABEL_12;
        }
LABEL_11:
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        goto LABEL_12;
      }
      uint64_t v4 = *(void *)(v4 + 224);
      if (v3) {
        goto LABEL_11;
      }
LABEL_12:
      unint64_t v3 = v1;
      if (!v4)
      {
        int v6 = 1;
        unint64_t v3 = v1;
        if (v1) {
          goto LABEL_21;
        }
        goto LABEL_22;
      }
    }
    uint64_t v4 = 0;
    std::string v1 = 0;
    if (!v3) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  int v6 = 1;
  if (v3) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_22:
  if (v6) {
    return *a1 + 72;
  }
  else {
    return (uint64_t)v1;
  }
}

unint64_t realityio::mtlx::UsdMtlxGetUsdType@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v191 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_15, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_15))
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v121);
    qword_268C40568 = v121;
    unk_268C40570 = 0;
    dword_268C40578 = 0;
    byte_268C4057C = 0;
    __cxa_guard_release(&_MergedGlobals_15);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40520, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40520))
  {
    uint64_t v110 = a2;
    v111 = a1;
    long long v17 = (unint64_t *)MEMORY[0x263F90560];
    Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!Data) {
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v19 = *(void *)Data;
    std::string::basic_string[abi:ne180100]<0>(v122, "BOOLean");
    v122[3] = v19;
    v122[4] = 0;
    int v123 = 0;
    char v124 = 1;
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v20) {
      uint64_t v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v21 = *((void *)v20 + 76);
    std::string::basic_string[abi:ne180100]<0>(v125, "color2array");
    v125[3] = v21;
    v125[4] = 0;
    int v126 = 0;
    char v127 = 0;
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v22) {
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v23 = *((void *)v22 + 19);
    unint64_t v24 = atomic_load(MEMORY[0x263F90558]);
    if (!v24) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v120 = *(void *)(v24 + 16);
    if ((v120 & 7) != 0)
    {
      unint64_t v25 = *(void *)(v24 + 16);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v25 = v120 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v120 = v25;
    }
    unint64_t v26 = v120;
    if ((v120 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v26 = v120;
      }
      else {
        unint64_t v26 = v120 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v128, "color2");
    v128[3] = v23;
    v128[4] = v26;
    int v129 = 2;
    char v130 = 0;
    std::string v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v27) {
      std::string v27 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v28 = *((void *)v27 + 92);
    unint64_t v29 = atomic_load(MEMORY[0x263F90558]);
    if (!v29) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v119 = *(void *)(v29 + 32);
    if ((v119 & 7) != 0)
    {
      unint64_t v30 = *(void *)(v29 + 32);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v30 = v119 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v119 = v30;
    }
    unint64_t v31 = v119;
    if ((v119 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v31 = v119;
      }
      else {
        unint64_t v31 = v119 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v131, "color3array");
    v131[3] = v28;
    v131[4] = v31;
    int v132 = 0;
    char v133 = 1;
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v32) {
      uint64_t v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v33 = *((void *)v32 + 35);
    unint64_t v34 = atomic_load(MEMORY[0x263F90558]);
    if (!v34) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v118 = *(void *)(v34 + 32);
    if ((v118 & 7) != 0)
    {
      unint64_t v35 = *(void *)(v34 + 32);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v118 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v35 = v118 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v118 = v35;
    }
    unint64_t v36 = v118;
    if ((v118 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v118 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v36 = v118;
      }
      else {
        unint64_t v36 = v118 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v134, "color3");
    v134[3] = v33;
    v134[4] = v36;
    int v135 = 0;
    char v136 = 1;
    uint64_t v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v37) {
      uint64_t v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v38 = *((void *)v37 + 12);
    unint64_t v39 = atomic_load(MEMORY[0x263F90558]);
    if (!v39) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v117 = *(void *)(v39 + 8);
    if ((v117 & 7) != 0)
    {
      unint64_t v40 = *(void *)(v39 + 8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v40 = v117 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v117 = v40;
    }
    unint64_t v41 = v117;
    if ((v117 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v41 = v117;
      }
      else {
        unint64_t v41 = v117 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v137, "filename");
    v137[3] = v38;
    v137[4] = v41;
    int v138 = 0;
    char v139 = 1;
    uint64_t v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v42) {
      uint64_t v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v43 = *((void *)v42 + 64);
    unint64_t v44 = atomic_load(MEMORY[0x263F90558]);
    if (!v44) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v116 = *(void *)(v44 + 16);
    if ((v116 & 7) != 0)
    {
      unint64_t v45 = *(void *)(v44 + 16);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v116 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v45 = v116 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v116 = v45;
    }
    unint64_t v46 = v116;
    if ((v116 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v116 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v46 = v116;
      }
      else {
        unint64_t v46 = v116 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v140, "floatarray");
    v140[3] = v43;
    v140[4] = v46;
    int v141 = 0;
    char v142 = 1;
    uint64_t v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v47) {
      uint64_t v47 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v48 = *((void *)v47 + 7);
    unint64_t v49 = atomic_load(MEMORY[0x263F90558]);
    if (!v49) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v115 = *(void *)(v49 + 16);
    if ((v115 & 7) != 0)
    {
      unint64_t v50 = *(void *)(v49 + 16);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v50 = v115 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v115 = v50;
    }
    unint64_t v51 = v115;
    if ((v115 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v51 = v115;
      }
      else {
        unint64_t v51 = v115 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v143, "float");
    v143[3] = v48;
    v143[4] = v51;
    int v144 = 0;
    char v145 = 1;
    std::string v52 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v52) {
      std::string v52 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v53 = *((void *)v52 + 67);
    std::string::basic_string[abi:ne180100]<0>(v146, "geomnamearray");
    v146[3] = v53;
    v146[4] = 0;
    int v147 = 0;
    char v148 = 0;
    std::string::size_type v54 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v54) {
      std::string::size_type v54 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v55 = *((void *)v54 + 10);
    std::string::basic_string[abi:ne180100]<0>(v149, "geomname");
    v149[3] = v55;
    v149[4] = 0;
    int v150 = 0;
    char v151 = 0;
    std::string v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v56) {
      std::string v56 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v57 = *((void *)v56 + 58);
    std::type_info v58 = (unint64_t *)atomic_load(MEMORY[0x263F90558]);
    if (!v58) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v114 = *v58;
    if ((*v58 & 7) != 0)
    {
      unint64_t v59 = *v58;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v59 = v114 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v114 = v59;
    }
    unint64_t v60 = v114;
    if ((v114 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v60 = v114;
      }
      else {
        unint64_t v60 = v114 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v152, "integerarray");
    v152[3] = v57;
    v152[4] = v60;
    int v153 = 0;
    char v154 = 1;
    uint64_t v61 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v61) {
      uint64_t v61 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v62 = *((void *)v61 + 2);
    v63 = (unint64_t *)atomic_load(MEMORY[0x263F90558]);
    if (!v63) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v113 = *v63;
    if ((*v63 & 7) != 0)
    {
      unint64_t v64 = *v63;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v64 = v113 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v113 = v64;
    }
    unint64_t v65 = v113;
    if ((v113 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v65 = v113;
      }
      else {
        unint64_t v65 = v113 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v155, "integer");
    v155[3] = v62;
    v155[4] = v65;
    int v156 = 0;
    char v157 = 1;
    v66 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v66) {
      v66 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v67 = *((void *)v66 + 44);
    std::string::basic_string[abi:ne180100]<0>(v158, "matrix33");
    v158[3] = v67;
    v158[4] = 0;
    int v159 = 0;
    char v160 = 1;
    v68 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v68) {
      v68 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v69 = *((void *)v68 + 45);
    unint64_t v70 = atomic_load(MEMORY[0x263F90558]);
    if (!v70) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v112 = *(void *)(v70 + 72);
    if ((v112 & 7) != 0)
    {
      unint64_t v71 = *(void *)(v70 + 72);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v112 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v71 = v112 & 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v112 = v71;
    }
    unint64_t v72 = v112;
    if ((v112 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v112 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v72 = v112;
      }
      else {
        unint64_t v72 = v112 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v161, "matrix44");
    v161[3] = v69;
    v161[4] = v72;
    int v162 = 0;
    char v163 = 1;
    v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v73) {
      v73 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v74 = *((void *)v73 + 67);
    unint64_t v75 = atomic_load(MEMORY[0x263F90558]);
    if (!v75) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v76 = *(void *)(v75 + 8);
    if ((v76 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v76 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v77 = v76;
    if ((v76 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v77 = v76;
      }
      else {
        unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v164, "stringarray");
    v164[3] = v74;
    v164[4] = v77;
    int v165 = 0;
    char v166 = 1;
    v78 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v78) {
      v78 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v79 = *((void *)v78 + 10);
    unint64_t v80 = atomic_load(MEMORY[0x263F90558]);
    if (!v80) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v81 = *(void *)(v80 + 8);
    if ((v81 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v81 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v82 = v81;
    if ((v81 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v82 = v81;
      }
      else {
        unint64_t v82 = v81 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v167, "string");
    v167[3] = v79;
    v167[4] = v82;
    int v168 = 0;
    char v169 = 1;
    v83 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v83) {
      v83 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v84 = *((void *)v83 + 11);
    unint64_t v85 = atomic_load(MEMORY[0x263F90558]);
    if (!v85) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v86 = *(void *)(v85 + 88);
    if ((v86 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v86 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v87 = v86;
    if ((v86 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v87 = v86;
      }
      else {
        unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v170, "surfaceshader");
    v170[3] = v84;
    v170[4] = v87;
    int v171 = 0;
    char v172 = 1;
    v88 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v88) {
      v88 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v89 = *((void *)v88 + 76);
    std::string::basic_string[abi:ne180100]<0>(v173, "vector2array");
    v173[3] = v89;
    v173[4] = 0;
    int v174 = 0;
    char v175 = 1;
    v90 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v90) {
      v90 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v91 = *((void *)v90 + 19);
    unint64_t v92 = atomic_load(MEMORY[0x263F90558]);
    if (!v92) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v93 = *(void *)(v92 + 16);
    if ((v93 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v93 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v94 = v93;
    if ((v93 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v94 = v93;
      }
      else {
        unint64_t v94 = v93 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v176, "vector2");
    v176[3] = v91;
    v176[4] = v94;
    int v177 = 2;
    char v178 = 1;
    v95 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v95) {
      v95 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v96 = *((void *)v95 + 77);
    std::string::basic_string[abi:ne180100]<0>(v179, "vector3array");
    v179[3] = v96;
    v179[4] = 0;
    int v180 = 0;
    char v181 = 1;
    v97 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v97) {
      v97 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v98 = *((void *)v97 + 20);
    unint64_t v99 = atomic_load(MEMORY[0x263F90558]);
    if (!v99) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v100 = *(void *)(v99 + 16);
    if ((v100 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v100 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v101 = v100;
    if ((v100 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v101 = v100;
      }
      else {
        unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v182, "vector3");
    v182[3] = v98;
    v182[4] = v101;
    int v183 = 3;
    char v184 = 1;
    v102 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v102) {
      v102 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v103 = *((void *)v102 + 78);
    std::string::basic_string[abi:ne180100]<0>(v185, "vector4array");
    v185[3] = v103;
    v185[4] = 0;
    int v186 = 0;
    char v187 = 1;
    v104 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v17);
    if (!v104) {
      v104 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v105 = *((void *)v104 + 21);
    unint64_t v106 = atomic_load(MEMORY[0x263F90558]);
    if (!v106) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v107 = *(void *)(v106 + 16);
    if ((v107 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v107 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v108 = v107;
    if ((v107 & 7) != 0)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
        unint64_t v108 = v107;
      }
      else {
        unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v188, "vector4");
    v188[3] = v105;
    v188[4] = v108;
    int v189 = 4;
    char v190 = 1;
    std::unordered_map<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>::unordered_map((uint64_t)v122, 23);
    for (uint64_t i = 132; i != -6; i -= 6)
      std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>::~pair((uint64_t)&v122[i]);
    if ((v107 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v100 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v81 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v76 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v112 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v112 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v113 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v114 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v115 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v116 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v116 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v117 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v118 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v118 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v119 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v120 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_guard_release(&qword_268C40520);
    a2 = v110;
    a1 = v111;
  }
  unint64_t result = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C40628, (uint64_t)a1);
  unint64_t v5 = *((void *)&xmmword_268C40610 + 1);
  if (!*((void *)&xmmword_268C40610 + 1)) {
    goto LABEL_20;
  }
  unint64_t v6 = result;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_268C40610 + 8));
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = result;
    if (result >= *((void *)&xmmword_268C40610 + 1)) {
      unint64_t v9 = result % *((void *)&xmmword_268C40610 + 1);
    }
  }
  else
  {
    unint64_t v9 = (*((void *)&xmmword_268C40610 + 1) - 1) & result;
  }
  uint64_t v10 = *(uint64_t ***)(xmmword_268C40610 + 8 * v9);
  if (v10)
  {
    for (j = *v10; j; j = (uint64_t *)*j)
    {
      unint64_t v12 = j[1];
      if (v6 == v12)
      {
        unint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C40630, (unsigned __int8 *)j + 16, a1);
        if (result) {
          break;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= v5) {
            v12 %= v5;
          }
        }
        else
        {
          v12 &= v5 - 1;
        }
        if (v12 != v9) {
          goto LABEL_20;
        }
      }
    }
  }
  else
  {
LABEL_20:
    j = 0;
  }
  uint64_t v13 = j + 5;
  if (!j) {
    uint64_t v13 = &qword_268C40568;
  }
  *(void *)a2 = *v13;
  uint64_t v14 = v13[1];
  *(void *)(a2 + 8) = v14;
  if ((v14 & 7) != 0)
  {
    std::string v15 = (atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
      *(void *)(a2 + 8) = v15;
    }
  }
  int v16 = *((_DWORD *)v13 + 4);
  *(unsigned char *)(a2 + 20) = *((unsigned char *)v13 + 20);
  *(_DWORD *)(a2 + 16) = v16;
  return result;
}

void sub_23F5F20E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a9) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a10) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a11) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a12) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a13) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a17) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a18) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a19) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a20) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a21) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a22) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a23) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a24) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  while (v35 != &a35)
  {
    v35 -= 48;
    std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>::~pair((uint64_t)v35);
  }
  __cxa_guard_abort(&qword_268C40520);
  _Unwind_Resume(a1);
}

void sub_23F5F260C()
{
}

uint64_t std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void realityio::mtlx::UsdMtlxGetUsdValue(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40528, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40528))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_268C40580, "default");
    __cxa_guard_release(&qword_268C40528);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40530, memory_order_acquire) & 1) == 0)
  {
    unint64_t v11 = (RIO_MTLX::TypedElement *)__cxa_guard_acquire(&qword_268C40530);
    if (v11)
    {
      unint64_t v12 = (const std::string::value_type **)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(v11);
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&xmmword_268C40598, *v12, (std::string::size_type)v12[1]);
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        qword_268C405A8 = (uint64_t)v12[2];
        xmmword_268C40598 = v13;
      }
      __cxa_guard_release(&qword_268C40530);
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40538, memory_order_acquire) & 1) == 0)
  {
    uint64_t v14 = (RIO_MTLX::ValueElement *)__cxa_guard_acquire(&qword_268C40538);
    if (v14)
    {
      std::string v15 = (const std::string::value_type **)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v14);
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&xmmword_268C405B0, *v15, (std::string::size_type)v15[1]);
      }
      else
      {
        long long v16 = *(_OWORD *)v15;
        qword_268C405C0 = (uint64_t)v15[2];
        xmmword_268C405B0 = v16;
      }
      __cxa_guard_release(&qword_268C40538);
    }
  }
  if (*(void *)a1)
  {
    if (a2) {
      unint64_t v6 = (unsigned __int8 *)qword_268C40580;
    }
    else {
      unint64_t v6 = (unsigned __int8 *)&xmmword_268C405B0;
    }
    uint8x8_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(*(void *)a1 + 160), v6);
    if (v7) {
      unint64_t v8 = (uint64_t *)(v7 + 40);
    }
    else {
      unint64_t v8 = RIO_MTLX::EMPTY_STRING(0);
    }
    unint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(*(void *)a1 + 160), (unsigned __int8 *)&xmmword_268C40598);
    if (v9) {
      uint64_t v10 = (uint64_t *)(v9 + 40);
    }
    else {
      uint64_t v10 = RIO_MTLX::EMPTY_STRING(0);
    }
  }
  else
  {
    *(void *)(a3 + 8) = 0;
  }
}

void sub_23F5F283C(_Unwind_Exception *a1)
{
}

void realityio::mtlx::anonymous namespace'::_GetUsdValue(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40548, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40548))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_268C405E0, "filename");
    __cxa_guard_release(&qword_268C40548);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40550, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40550))
  {
    std::string::basic_string[abi:ne180100]<0>(byte_268C405F8, "geomname");
    __cxa_guard_release(&qword_268C40550);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (!v6) {
    goto LABEL_122;
  }
  RIO_MTLX::Value::createValueFromStrings((RIO_MTLX::Value *)a2, a3, &lpsrc);
  uint8x8_t v7 = (const void *)lpsrc;
  if ((void)lpsrc)
  {
    {
      char v8 = 0;
      *(void *)(a1 + 8) = &unk_26F333523;
      *(unsigned char *)a1 = v9;
      goto LABEL_119;
    }
    if (RIO_MTLX::Value::isA<int>(v7))
    {
      char v8 = 0;
      *(void *)(a1 + 8) = &unk_26F33764B;
      *(_DWORD *)a1 = v10;
      goto LABEL_119;
    }
    if (RIO_MTLX::Value::isA<float>((const void *)lpsrc))
    {
      char v8 = 0;
LABEL_13:
      *(void *)(a1 + 8) = &unk_26F333A9B;
      *(float *)a1 = v11;
      goto LABEL_119;
    }
    if (RIO_MTLX::Value::isA<std::string>((const void *)lpsrc))
    {
      uint64_t v12 = a3[23];
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = a3[23];
      }
      else {
        uint64_t v13 = *((void *)a3 + 1);
      }
      uint64_t v14 = qword_268C405E8;
      if (byte_268C405F7 >= 0) {
        uint64_t v14 = byte_268C405F7;
      }
      if (v13 != v14) {
        goto LABEL_67;
      }
      if (byte_268C405F7 >= 0) {
        std::string v15 = &qword_268C405E0;
      }
      else {
        std::string v15 = (uint64_t *)qword_268C405E0;
      }
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a3, v15, *((void *)a3 + 1))) {
          goto LABEL_67;
        }
      }
      else if (a3[23])
      {
        long long v16 = a3;
        while (*v16 == *(unsigned __int8 *)v15)
        {
          ++v16;
          std::string v15 = (uint64_t *)((char *)v15 + 1);
          if (!--v12) {
            goto LABEL_68;
          }
        }
LABEL_67:
        std::operator==[abi:ne180100]<std::allocator<char>>(a3, byte_268C405F8);
        RIO_MTLX::Value::asA<std::string>((char *)lpsrc);
        *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy();
      }
LABEL_68:
      uint64_t v42 = RIO_MTLX::Value::asA<std::string>((char *)lpsrc);
      MEMORY[0x2455CE830](&v75, v42);
      *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy();
    }
    if (RIO_MTLX::Value::isA<std::vector<BOOL>>((const void *)lpsrc))
    {
      long long v17 = RIO_MTLX::Value::asA<std::vector<BOOL>>((char *)lpsrc);
      v73 = 0;
      long long v71 = 0u;
      long long v72 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::reserve((unint64_t *)&v71, *((void *)v17 + 1));
      uint64_t v19 = *(void **)v17;
      unint64_t v18 = *((void *)v17 + 1);
      int v20 = v18 & 0x3F;
      if (v18 <= 0x3F && (v18 & 0x3F) == 0)
      {
LABEL_33:
        *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
      }
      int v27 = 0;
      int v28 = 0;
      unint64_t v29 = &v19[v18 >> 6];
      while (1)
      {
        if (DWORD2(v71))
        {
          *(void *)&long long v75 = "vt/array.h";
          *((void *)&v75 + 1) = "emplace_back";
          *(void *)&long long v76 = 433;
          *((void *)&v76 + 1) = "void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::emplace_back(Args &&...) [T = bo"
                                  "ol, Args = <BOOL>]";
          LOBYTE(v77) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
          goto LABEL_52;
        }
        uint64_t v30 = (*v19 >> v28) & 1;
        uint64_t v31 = v71;
        uint64_t v32 = v73;
        if (*((void *)&v72 + 1)) {
          break;
        }
        if (v73)
        {
          unint64_t v33 = atomic_load((unint64_t *)v73 - 2);
          uint64_t v32 = v73;
          if (v33 != 1) {
            break;
          }
          uint64_t v34 = *((void *)v73 - 1);
        }
        else
        {
          uint64_t v34 = 0;
        }
        if ((void)v71 == v34) {
          break;
        }
        v32[v71] = v30;
LABEL_51:
        *(void *)&long long v71 = v71 + 1;
LABEL_52:
        v19 += v27 == 63;
        if (v27 == 63) {
          int v28 = 0;
        }
        else {
          ++v28;
        }
        int v27 = v28;
        if (v19 == v29 && v20 == v28) {
          goto LABEL_33;
        }
      }
      uint64_t v35 = 1;
      do
      {
        unint64_t v36 = v35;
        v35 *= 2;
      }
      while (v36 < (uint64_t)v71 + 1);
      New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)&v71, v36);
      if (v31)
      {
        uint64_t v38 = v31;
        uint64_t v39 = New;
        do
        {
          char v40 = *v32++;
          *v39++ = v40;
          --v38;
        }
        while (v38);
      }
      *((unsigned char *)New + v31) = v30;
      unint64_t v41 = (char *)New;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v71);
      v73 = v41;
      goto LABEL_51;
    }
    if (RIO_MTLX::Value::isA<std::vector<int>>((const void *)lpsrc))
    {
      uint64_t v21 = RIO_MTLX::Value::asA<std::vector<int>>((char *)lpsrc);
      *(void *)&long long v77 = 0;
      long long v75 = 0u;
      long long v76 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<int>::reserve((unint64_t *)&v75, (uint64_t)(*((void *)v21 + 1) - *(void *)v21) >> 2);
      uint64_t v23 = *(_DWORD **)v21;
      uint64_t v22 = (_DWORD *)*((void *)v21 + 1);
      while (v23 != v22)
      {
        LODWORD(v71) = *v23;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::emplace_back<int>((uint64_t)&v75, &v71);
        ++v23;
      }
      *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
    }
    if (RIO_MTLX::Value::isA<std::vector<float>>((const void *)lpsrc))
    {
      unint64_t v24 = RIO_MTLX::Value::asA<std::vector<float>>((char *)lpsrc);
      *(void *)&long long v77 = 0;
      long long v75 = 0u;
      long long v76 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<float>::reserve((unint64_t *)&v75, (uint64_t)(*((void *)v24 + 1) - *(void *)v24) >> 2);
      unint64_t v26 = *(_DWORD **)v24;
      unint64_t v25 = (_DWORD *)*((void *)v24 + 1);
      while (v26 != v25)
      {
        LODWORD(v71) = *v26;
        pxrInternal__aapl__pxrReserved__::VtArray<float>::emplace_back<float>((uint64_t)&v75, &v71);
        ++v26;
      }
      *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
    }
    if (RIO_MTLX::Value::isA<std::vector<std::string>>((const void *)lpsrc))
    {
      uint64_t v43 = RIO_MTLX::Value::asA<std::vector<std::string>>((char *)lpsrc);
      v73 = 0;
      long long v71 = 0u;
      long long v72 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::reserve((unint64_t *)&v71, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v43 + 1) - *(void *)v43) >> 3));
      unint64_t v44 = *(long long **)v43;
      unint64_t v45 = (long long *)*((void *)v43 + 1);
      if (*(long long **)v43 == v45)
      {
LABEL_94:
        *(void *)(a1 + 8) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
      while (1)
      {
        if (*((char *)v44 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v44, *((void *)v44 + 1));
        }
        else
        {
          long long v46 = *v44;
          v70.__r_.__value_.__r.__words[2] = *((void *)v44 + 2);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v46;
        }
        if (DWORD2(v71))
        {
          *(void *)&long long v75 = "vt/array.h";
          *((void *)&v75 + 1) = "emplace_back";
          *(void *)&long long v76 = 433;
          *((void *)&v76 + 1) = "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back(Args &&...) "
                                  "[T = std::string, Args = <std::string>]";
          LOBYTE(v77) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
          goto LABEL_83;
        }
        uint64_t v47 = v71;
        uint64_t v48 = (uint64_t)v73;
        if (*((void *)&v72 + 1)) {
          break;
        }
        if (v73)
        {
          unint64_t v49 = atomic_load((unint64_t *)v73 - 2);
          uint64_t v48 = (uint64_t)v73;
          if (v49 != 1) {
            break;
          }
          uint64_t v50 = *((void *)v73 - 1);
        }
        else
        {
          uint64_t v50 = 0;
        }
        if ((void)v71 == v50) {
          break;
        }
        long long v51 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
        uint64_t v52 = v48 + 24 * v71;
        *(void *)(v52 + 16) = *((void *)&v70.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v52 = v51;
        memset(&v70, 0, sizeof(v70));
LABEL_82:
        *(void *)&long long v71 = v71 + 1;
LABEL_83:
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v70.__r_.__value_.__l.__data_);
        }
        unint64_t v44 = (long long *)((char *)v44 + 24);
        if (v44 == v45) {
          goto LABEL_94;
        }
      }
      uint64_t v53 = v44;
      uint64_t v54 = 1;
      do
      {
        unint64_t v55 = v54;
        v54 *= 2;
      }
      while (v55 < (uint64_t)v71 + 1);
      std::string v56 = (char *)pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)&v71, v55);
      std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v48, v48 + 24 * v47, (uint64_t)v56);
      long long v57 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
      std::type_info v58 = &v56[24 * v47];
      *((void *)v58 + 2) = *((void *)&v70.__r_.__value_.__l + 2);
      *(_OWORD *)std::type_info v58 = v57;
      memset(&v70, 0, sizeof(v70));
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v71);
      v73 = v56;
      unint64_t v44 = v53;
      goto LABEL_82;
    }
    if (RIO_MTLX::Value::isA<RIO_MTLX::Color3>((const void *)lpsrc))
    {
      unint64_t v59 = RIO_MTLX::Value::asA<RIO_MTLX::Color3>((char *)lpsrc);
      *(void *)&long long v75 = *(void *)v59;
      DWORD2(v75) = *((_DWORD *)v59 + 2);
      *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                          + 2;
      operator new();
    }
    if (RIO_MTLX::Value::isA<RIO_MTLX::Color4>((const void *)lpsrc))
    {
      long long v75 = *(_OWORD *)RIO_MTLX::Value::asA<RIO_MTLX::Color4>((char *)lpsrc);
      *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
                          + 2;
      operator new();
    }
    if (RIO_MTLX::Value::isA<RIO_MTLX::Vector2>((const void *)lpsrc))
    {
      char v8 = 0;
      *(void *)a1 = *(void *)RIO_MTLX::Value::asA<RIO_MTLX::Vector2>((char *)lpsrc);
      *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
                          + 3;
      goto LABEL_119;
    }
    if (RIO_MTLX::Value::isA<RIO_MTLX::Vector3>((const void *)lpsrc))
    {
      unint64_t v60 = RIO_MTLX::Value::asA<RIO_MTLX::Vector3>((char *)lpsrc);
      *(void *)&long long v75 = *(void *)v60;
      DWORD2(v75) = *((_DWORD *)v60 + 2);
      *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                          + 2;
      operator new();
    }
    if (RIO_MTLX::Value::isA<RIO_MTLX::Vector4>((const void *)lpsrc))
    {
      long long v75 = *(_OWORD *)RIO_MTLX::Value::asA<RIO_MTLX::Vector4>((char *)lpsrc);
      *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
                          + 2;
      operator new();
    }
    if (RIO_MTLX::Value::isA<RIO_MTLX::Matrix33>((const void *)lpsrc))
    {
      uint64_t v61 = RIO_MTLX::Value::asA<RIO_MTLX::Matrix33>((char *)lpsrc);
      uint64_t v62 = 0;
      v63 = &v75;
      do
      {
        for (uint64_t i = 0; i != 3; ++i)
          *((double *)v63 + i) = *(float *)&v61[4 * i];
        ++v62;
        v63 = (long long *)((char *)v63 + 24);
        v61 += 12;
      }
      while (v62 != 3);
      *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
                          + 2;
      operator new();
    }
    if (RIO_MTLX::Value::isA<RIO_MTLX::Matrix44>((const void *)lpsrc))
    {
      unint64_t v65 = RIO_MTLX::Value::asA<RIO_MTLX::Matrix44>((char *)lpsrc);
      for (uint64_t j = 0; j != 4; ++j)
      {
        float32x4_t v67 = *(float32x4_t *)&v65[16 * j];
        v68 = (float64x2_t *)(&v75 + 2 * j);
        float64x2_t *v68 = vcvtq_f64_f32(*(float32x2_t *)v67.f32);
        v68[1] = vcvt_hight_f64_f32(v67);
      }
      *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
                          + 2;
      operator new();
    }
    if (RIO_MTLX::Value::isA<long>((const void *)lpsrc))
    {
      char v8 = 0;
      uint64_t v69 = *(void *)RIO_MTLX::Value::asA<long>((char *)lpsrc);
      *(void *)(a1 + 8) = &unk_26F33764B;
      *(_DWORD *)a1 = v69;
      goto LABEL_119;
    }
    if (RIO_MTLX::Value::isA<double>((const void *)lpsrc))
    {
      char v8 = 0;
      float v11 = *(double *)RIO_MTLX::Value::asA<double>((char *)lpsrc);
      goto LABEL_13;
    }
    *(void *)&long long v75 = "CoreRealityIO/mtlxToUsdShadeUtils.mm";
    *((void *)&v75 + 1) = "_GetUsdValue";
    *(void *)&long long v76 = 160;
    *((void *)&v76 + 1) = "VtValue realityio::mtlx::(anonymous namespace)::_GetUsdValue(const std::string &, const std::string &)";
    LOBYTE(v77) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
  }
  char v8 = 1;
LABEL_119:
  if (*((void *)&lpsrc + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&lpsrc + 1));
  }
  if (v8) {
LABEL_122:
  }
    *(void *)(a1 + 8) = 0;
}

void sub_23F5F3498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void realityio::mtlx::UsdMtlxGetPackedUsdValues(unsigned __int8 *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  unint64_t v4 = a1[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    unint64_t v4 = *((void *)a1 + 1);
  }
  if (v4 < 5 || (v5 >= 0 ? (uint64_t v6 = (const char *)a1) : (uint64_t v6 = *(const char **)a1), strcmp(&v6[v4 - 5], "array")))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, ",");
    pxrInternal__aapl__pxrReserved__::TfStringSplit();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint8x8_t v7 = v16;
    for (i = v17; v7 != i; uint8x8_t v7 = (long long *)((char *)v7 + 24))
    {
      if (*((char *)v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v9 = *v7;
        __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      pxrInternal__aapl__pxrReserved__::TfStringTrim();
      if (v14 < 0) {
        operator delete(v13);
      }
      uint64_t v10 = v19;
      if (v19)
      {
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::push_back[abi:ne180100](a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
      }
      else
      {
        uint64_t v12 = *a2;
        for (uint64_t j = a2[1];
              j != v12;
        a2[1] = v12;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v10) {
        break;
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_23F5F3798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(long long *a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 <= 0) {
    return (std::__split_buffer<std::string>::pointer)v5;
  }
  uint8x8_t v7 = a3;
  uint64_t v10 = (uint64_t)(a1 + 1);
  uint64_t v9 = *((void *)a1 + 2);
  float v11 = (std::string *)*((void *)a1 + 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) >= a5)
  {
    uint64_t v19 = (uint64_t)v11 - a2;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - a2) >> 3)) >= a5)
    {
      uint64_t v20 = (long long *)((char *)a3 + 24 * a5);
      uint64_t v21 = (std::string *)*((void *)a1 + 1);
    }
    else
    {
      uint64_t v20 = (long long *)((char *)a3 + 8 * (((uint64_t)v11 - a2) >> 3));
      uint64_t v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 1), v20, a4, v11);
      *((void *)a1 + 1) = v21;
      if (v19 < 1) {
        return (std::__split_buffer<std::string>::pointer)v5;
      }
    }
    uint64_t v22 = (std::string *)(v5 + 24 * a5);
    uint64_t v23 = &v21[-a5];
    unint64_t v24 = v21;
    if (v23 < v11)
    {
      unint64_t v24 = v21;
      do
      {
        long long v25 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        ++v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        ++v23;
      }
      while (v23 < v11);
    }
    *((void *)a1 + 1) = v24;
    if (v21 != v22)
    {
      unint64_t v26 = v21 - 1;
      uint64_t v27 = 8 * (((char *)v21 - (char *)v22) >> 3);
      do
      {
        if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26->__r_.__value_.__l.__data_);
        }
        int v28 = (long long *)(v5 + v27 - 24);
        long long v29 = *v28;
        v26->__r_.__value_.__r.__words[2] = *(void *)(v5 + v27 - 8);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
        --v26;
        *(unsigned char *)(v5 + v27 - 1) = 0;
        *(unsigned char *)int v28 = 0;
        v27 -= 24;
      }
      while (v27);
    }
    if (v20 != v7)
    {
      uint64_t v30 = (std::string *)v5;
      do
      {
        std::string::operator=(v30, (const std::string *)v7);
        uint8x8_t v7 = (long long *)((char *)v7 + 24);
        ++v30;
      }
      while (v7 != v20);
    }
    return (std::__split_buffer<std::string>::pointer)v5;
  }
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(void *)a1) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 3);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
  uint64_t v16 = 2 * v15;
  if (2 * v15 <= v13) {
    uint64_t v16 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(void *)a1) >> 3);
  }
  if (v15 >= 0x555555555555555) {
    unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v17 = v16;
  }
  v45.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 1);
  if (v17) {
    unint64_t v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a1 + 1), v17);
  }
  else {
    unint64_t v18 = 0;
  }
  uint64_t v32 = v18 + v14;
  v45.__first_ = v18;
  v45.__begin_ = v32;
  v45.__end_ = v32;
  v45.__end_cap_.__value_ = &v18[v17];
  uint64_t v33 = 3 * a5;
  uint64_t v34 = &v32[a5];
  uint64_t v35 = 8 * v33;
  do
  {
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v36 = *v7;
      v32->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v36;
    }
    ++v32;
    uint8x8_t v7 = (long long *)((char *)v7 + 24);
    v35 -= 24;
  }
  while (v35);
  v45.__end_ = v34;
  std::__split_buffer<std::string>::pointer begin = v45.__begin_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(v10, v5, v5, *(void *)a1, *(void *)a1, (uint64_t)v45.__begin_, (uint64_t)v45.__begin_);
  v45.__begin_ = v37;
  uint64_t v38 = *((void *)a1 + 1);
  uint64_t v39 = v34;
  uint64_t v48 = v34;
  unint64_t v49 = v34;
  v46[0] = v10;
  v46[1] = &v48;
  v46[2] = &v49;
  if (v38 != v5)
  {
    do
    {
      long long v40 = *(_OWORD *)v5;
      v39->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
      ++v39;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = 0;
      v5 += 24;
    }
    while (v5 != v38);
    unint64_t v49 = v39;
  }
  char v47 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v46);
  long long v41 = *a1;
  value = v45.__end_cap_.__value_;
  *(void *)a1 = v45.__begin_;
  *((void *)a1 + 1) = v39;
  *(_OWORD *)&v45.__begin_ = v41;
  uint64_t v43 = (std::string *)*((void *)a1 + 2);
  *((void *)a1 + 2) = value;
  v45.__end_cap_.__value_ = v43;
  v45.__first_ = (std::__split_buffer<std::string>::pointer)v41;
  std::__split_buffer<std::string>::~__split_buffer(&v45);
  return begin;
}

void sub_23F5F3B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::~__func()
{
}

void *std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26F33C520;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F33C520;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::operator()(uint64_t a1, void *a2, char **a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath())
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathInner();
    long long v16 = *(_OWORD *)v10;
    uint64_t v17 = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10[0]) = 0;
    *(_OWORD *)std::string __p = v12;
    uint64_t v15 = v13;
    pxrInternal__aapl__pxrReserved__::TfGetPathName();
    if (v11 >= 0) {
      uint64_t v5 = (void *)HIBYTE(v11);
    }
    else {
      uint64_t v5 = v10[1];
    }
    if (v5)
    {
      RIO_MTLX::FilePath::asString(a3, 1, &v6);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
    }
    else
    {
      RIO_MTLX::FilePath::asString(a3, 1, &v7);
    }
    pxrInternal__aapl__pxrReserved__::ArchNormPath();
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[0]);
    }
    *(_OWORD *)uint64_t v10 = v8;
    uint64_t v11 = v9;
    HIBYTE(v9) = 0;
    LOBYTE(v8) = 0;
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v7.__r_.__value_.__l.__data_);
    }
    if (v5 && SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath();
    long long v18 = v8;
    uint64_t v19 = v9;
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)v16);
    }
  }
  v10[0] = "CoreRealityIO/mtlxToUsdShadeUtils.mm";
  v10[1] = "operator()";
  uint64_t v11 = 316;
  *(void *)&long long v12 = "auto realityio::mtlx::_ReadFromAsset(mx::DocumentPtr, const ArResolvedPath &, const mx::FileSearchPa"
                    "th &, const mx::XmlReadOptions *)::(anonymous class)::operator()(mx::DocumentPtr, const mx::FilePath"
                    " &, const mx::FileSearchPath &, const mx::XmlReadOptions *) const";
  BYTE8(v12) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)v18);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_23F5F3F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0,std::allocator<realityio::mtlx::_ReadFromAsset(std::shared_ptr<RIO_MTLX::Document>,pxrInternal__aapl__pxrReserved__::ArResolvedPath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)::$_0>,void ()(std::shared_ptr<RIO_MTLX::Document>,RIO_MTLX::FilePath const&,RIO_MTLX::FileSearchPath const&,RIO_MTLX::XmlReadOptions const*)>::target_type()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfErrorMark::GetBegin(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, unint64_t *a2)
{
  if (!atomic_load((unint64_t *)off_265071678)) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }

  return MEMORY[0x270FA3540]();
}

uint64_t tbb::interface6::internal::ets_base<(tbb::ets_key_usage_type)1>::table_lookup(atomic_ullong *a1, unsigned char *a2)
{
  unint64_t v4 = MEMORY[0x2455D0570]();
  unint64_t v5 = v4;
  unint64_t v6 = v4 ^ (v4 >> 3);
  std::string v7 = (void *)a1[1];
  __dmb(0xBu);
  if (!v7)
  {
LABEL_7:
    *a2 = 0;
    uint64_t v13 = (*(uint64_t (**)(atomic_ullong *))*a1)(a1);
    unint64_t v14 = atomic_fetch_add(a1 + 2, 1uLL) + 1;
    atomic_ullong v15 = a1[1];
    __dmb(0xBu);
    if (v15)
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v14 <= (unint64_t)(1 << v16) >> 1)
      {
LABEL_24:
        atomic_ullong v23 = a1[1];
        __dmb(0xBu);
        uint64_t v24 = *(void *)(v23 + 8);
        uint64_t v25 = ~(-1 << v24);
        unint64_t v26 = v6 >> -(char)v24;
        atomic_ullong v27 = v23 + 16;
        while (1)
        {
          int v28 = (atomic_ullong *)(v27 + 16 * v26);
          if (!*v28) {
            break;
          }
LABEL_28:
          unint64_t v26 = (v26 + 1) & v25;
        }
        while (1)
        {
          uint64_t v29 = 0;
          atomic_compare_exchange_strong(v28, (unint64_t *)&v29, v5);
          if (!v29) {
            break;
          }
          if (atomic_fetch_add_explicit(v28, 0, memory_order_relaxed)) {
            goto LABEL_28;
          }
        }
        *(void *)(v27 + 16 * v26 + 8) = v13;
        return v13;
      }
    }
    else
    {
      uint64_t v16 = 2;
    }
    unint64_t v18 = v16 - 1;
    do
      unint64_t v19 = 1 << v18++;
    while (v14 > v19);
    uint64_t v20 = (atomic_ullong *)(*(uint64_t (**)(atomic_ullong *, uint64_t))(*a1 + 8))(a1, (16 << v18) + 16);
    v20[1] = v18;
    bzero(v20 + 2, 16 << v18);
    while (1)
    {
      *uint64_t v20 = v15;
      while (1)
      {
        atomic_ullong v21 = v15;
        atomic_compare_exchange_strong(a1 + 1, (unint64_t *)&v21, (unint64_t)v20);
        if (v21 == v15) {
          break;
        }
        unint64_t add_explicit = atomic_fetch_add_explicit(a1 + 1, 0, memory_order_relaxed);
        if (add_explicit != v15) {
          goto LABEL_21;
        }
      }
      unint64_t add_explicit = v15;
LABEL_21:
      if (v15 == add_explicit) {
        goto LABEL_24;
      }
      atomic_ullong v15 = add_explicit;
      if (*(void *)(add_explicit + 8) >= v18)
      {
        (*(void (**)(atomic_ullong *, atomic_ullong *, uint64_t))(*a1 + 16))(a1, v20, (16 << v20[1]) + 16);
        goto LABEL_24;
      }
    }
  }
  while (1)
  {
    uint64_t v8 = v7[1];
    unint64_t v9 = v6 >> -(char)v8;
    uint64_t v10 = v7 + 2;
    uint64_t v11 = v7[2 * v9 + 2];
    if (v11) {
      break;
    }
LABEL_6:
    std::string v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_7;
    }
  }
  uint64_t v12 = ~(-1 << v8);
  while (v11 != v4)
  {
    unint64_t v9 = (v9 + 1) & v12;
    uint64_t v11 = v10[2 * v9];
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t v17 = (void *)a1[1];
  __dmb(0xBu);
  *a2 = 1;
  uint64_t v13 = v10[2 * v9 + 1];
  if (v7 != v17) {
    goto LABEL_24;
  }
  return v13;
}

void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::reserve(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)a1, a2);
    New = v6;
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *((unsigned char *)v6 + i) = *(unsigned char *)(v3 + i);
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)New;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<int>::reserve(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    New = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::VtArray<int>::_AllocateNew((uint64_t)a1, a2);
    New = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)New;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<float>::reserve(unint64_t *a1, unint64_t a2)
{
  unint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    New = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_12;
  }
  if (a1[3]) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew((uint64_t)a1, a2);
    New = v6;
    if (v5)
    {
      uint64_t v8 = 0;
      do
      {
        *(_DWORD *)((char *)v6 + v8) = *(_DWORD *)(v3 + v8);
        v8 += 4;
      }
      while (4 * v5 != v8);
    }
LABEL_12:
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)a1);
    a1[4] = (unint64_t)New;
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::reserve(unint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[4];
  if (!v3)
  {
    if (!a2) {
      return;
    }
    New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3]) {
    unint64_t v4 = a1;
  }
  else {
    unint64_t v4 = (unint64_t *)(v3 - 8);
  }
  if (*v4 < a2)
  {
    unint64_t v5 = *a1;
    New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)a1, a2);
    std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v3, v3 + 24 * v5, (uint64_t)New);
LABEL_9:
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(a1);
    a1[4] = (unint64_t)New;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__find_equal<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = &qword_268C405D0;
  uint64_t v4 = qword_268C405D0;
  if (qword_268C405D0)
  {
    unint64_t v6 = &qword_268C405D0;
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t *)v4;
        std::string v7 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268C405D8, a2, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v3;
        unint64_t v6 = v3;
        if (!*v3) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268C405D8, v7, a2)) {
        break;
      }
      unint64_t v6 = v3 + 1;
      uint64_t v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = &qword_268C405D0;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_268C405C8)
  {
    qword_268C405C8 = *(void *)qword_268C405C8;
    a3 = *a2;
  }
  unint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_268C405D0, a3);
  ++qword_268C405D8;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::Document>>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v2 = *(std::__shared_weak_count **)(v1 + 64);
      if (v2) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v2);
      }
      if (*(char *)(v1 + 55) < 0) {
        operator delete(*(void **)(v1 + 32));
      }
    }
    operator delete((void *)v1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::NDR_DISCOVERY__DebugCodes>::nodes()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40560, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40560))
  {
    operator new();
  }
  return qword_268C40558;
}

void sub_23F5F4714(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdrPropertyTypes_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F5F47A8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C405FAED287);
  _Unwind_Resume(a1);
}

void std::unordered_map<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>::unordered_map(uint64_t a1, uint64_t a2)
{
  xmmword_268C40610 = 0u;
  *(_OWORD *)&qword_268C40620 = 0u;
  dword_268C40630 = 1065353216;
  if (a2)
  {
    uint64_t v2 = a1;
    uint64_t v37 = a1 + 48 * a2;
    while (1)
    {
      unint64_t v3 = (unint64_t)&xmmword_268C40610 + 8;
      unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&qword_268C40628, v2);
      unint64_t v5 = v4;
      unint64_t v6 = *((void *)&xmmword_268C40610 + 1);
      if (*((void *)&xmmword_268C40610 + 1))
      {
        uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_268C40610 + 8));
        v7.i16[0] = vaddlv_u8(v7);
        unint64_t v8 = v7.u32[0];
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v3 = v4;
          if (v4 >= *((void *)&xmmword_268C40610 + 1)) {
            unint64_t v3 = v4 % *((void *)&xmmword_268C40610 + 1);
          }
        }
        else
        {
          unint64_t v3 = (*((void *)&xmmword_268C40610 + 1) - 1) & v4;
        }
        unint64_t v9 = *(unsigned __int8 ***)(xmmword_268C40610 + 8 * v3);
        if (v9)
        {
          for (uint64_t i = *v9; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v11 = *((void *)i + 1);
            if (v11 == v5)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&dword_268C40630, i + 16, (unsigned __int8 *)v2))goto LABEL_81; {
            }
              }
            else
            {
              if (v8 > 1)
              {
                if (v11 >= v6) {
                  v11 %= v6;
                }
              }
              else
              {
                v11 &= v6 - 1;
              }
              if (v11 != v3) {
                break;
              }
            }
          }
        }
      }
      uint64_t v12 = (char *)operator new(0x40uLL);
      v38[0] = v12;
      v38[1] = &qword_268C40620;
      char v39 = 0;
      *(void *)uint64_t v12 = 0;
      *((void *)v12 + 1) = v5;
      uint64_t v13 = (std::string *)(v12 + 16);
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v14 = *(_OWORD *)v2;
        *((void *)v12 + 4) = *(void *)(v2 + 16);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
      }
      *((void *)v12 + 5) = *(void *)(v2 + 24);
      uint64_t v15 = *(void *)(v2 + 32);
      *((void *)v12 + 6) = v15;
      if ((v15 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)v12 + 6) &= 0xFFFFFFFFFFFFFFF8;
      }
      int v16 = *(_DWORD *)(v2 + 40);
      v12[60] = *(unsigned char *)(v2 + 44);
      *((_DWORD *)v12 + 14) = v16;
      char v39 = 1;
      float v17 = (float)(unint64_t)(qword_268C40628 + 1);
      if (!v6 || (float)(*(float *)&dword_268C40630 * (float)v6) < v17) {
        break;
      }
LABEL_71:
      uint64_t v33 = *(uint64_t **)(xmmword_268C40610 + 8 * v3);
      uint64_t v34 = v38[0];
      if (v33)
      {
        *(void *)v38[0] = *v33;
      }
      else
      {
        *(void *)v38[0] = qword_268C40620;
        qword_268C40620 = v34;
        *(void *)(xmmword_268C40610 + 8 * v3) = &qword_268C40620;
        if (!*(void *)v34) {
          goto LABEL_80;
        }
        unint64_t v35 = *(void *)(*(void *)v34 + 8);
        if ((v6 & (v6 - 1)) != 0)
        {
          if (v35 >= v6) {
            v35 %= v6;
          }
        }
        else
        {
          v35 &= v6 - 1;
        }
        uint64_t v33 = (uint64_t *)(xmmword_268C40610 + 8 * v35);
      }
      *uint64_t v33 = v34;
LABEL_80:
      v38[0] = 0;
      ++qword_268C40628;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v38);
LABEL_81:
      v2 += 48;
      if (v2 == v37) {
        return;
      }
    }
    BOOL v18 = (v6 & (v6 - 1)) != 0;
    if (v6 < 3) {
      BOOL v18 = 1;
    }
    unint64_t v19 = v18 | (2 * v6);
    unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&dword_268C40630);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v6 = *((void *)&xmmword_268C40610 + 1);
    if (*(void *)&prime > *((void *)&xmmword_268C40610 + 1)) {
      goto LABEL_37;
    }
    if (*(void *)&prime < *((void *)&xmmword_268C40610 + 1))
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)qword_268C40628 / *(float *)&dword_268C40630);
      if (*((void *)&xmmword_268C40610 + 1) < 3uLL
        || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_268C40610 + 8)),
            v29.i16[0] = vaddlv_u8(v29),
            v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&xmmword_268C40610 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v22 = operator new(8 * *(void *)&prime);
          atomic_ullong v23 = (void *)xmmword_268C40610;
          *(void *)&xmmword_268C40610 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)&xmmword_268C40610 + 1) = prime;
          do
            *(void *)(xmmword_268C40610 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          uint64_t v25 = (void **)qword_268C40620;
          if (qword_268C40620)
          {
            unint64_t v26 = *(void *)(qword_268C40620 + 8);
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_268C40610 + 8 * v26) = &qword_268C40620;
            for (j = *v25; j; unint64_t v26 = v32)
            {
              unint64_t v32 = j[1];
              if (v27.u32[0] > 1uLL)
              {
                if (v32 >= *(void *)&prime) {
                  v32 %= *(void *)&prime;
                }
              }
              else
              {
                v32 &= *(void *)&prime - 1;
              }
              if (v32 != v26)
              {
                if (!*(void *)(xmmword_268C40610 + 8 * v32))
                {
                  *(void *)(xmmword_268C40610 + 8 * v32) = v25;
                  goto LABEL_62;
                }
                _DWORD *v25 = (void *)*j;
                void *j = **(void **)(xmmword_268C40610 + 8 * v32);
                **(void **)(xmmword_268C40610 + 8 * v32) = j;
                uint64_t j = v25;
              }
              unint64_t v32 = v26;
LABEL_62:
              uint64_t v25 = (void **)j;
              uint64_t j = (void *)*j;
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_66;
        }
        long long v36 = (void *)xmmword_268C40610;
        *(void *)&xmmword_268C40610 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v6 = 0;
        *((void *)&xmmword_268C40610 + 1) = 0;
      }
    }
LABEL_66:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6) {
        unint64_t v3 = v5 % v6;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v6 - 1) & v5;
    }
    goto LABEL_71;
  }
}

void sub_23F5F4CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>>>::~__hash_table();
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>,0>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,realityio::mtlx::UsdMtlxUsdTypeInfo>>>::~__hash_table()
{
  v0 = (void *)qword_268C40620;
  if (qword_268C40620)
  {
    do
    {
      uint64_t v1 = (void *)*v0;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,realityio::mtlx::UsdMtlxUsdTypeInfo>,0>((uint64_t)(v0 + 2));
      operator delete(v0);
      v0 = v1;
    }
    while (v1);
  }
  uint64_t v2 = (void *)xmmword_268C40610;
  *(void *)&xmmword_268C40610 = 0;
  if (v2)
  {
    operator delete(v2);
  }
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor(uint64_t a1, void **a2)
{
  *(void *)a1 = &unk_26F33C5A0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((void *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(unsigned char *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return a1;
}

void sub_23F5F4E7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::validate()
{
  return 0;
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::_isEmpty(realityio::PrimitiveDirtyPropertyDescriptor *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 1);
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (v1 == v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *v1;
    unint64_t v3 = (std::__shared_weak_count *)v1[1];
    if (!v3) {
      break;
    }
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    int v5 = *(unsigned __int8 *)(v4 + 8);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (!v5) {
      return 0;
    }
LABEL_6:
    v1 += 2;
    if (v1 == v2) {
      return 1;
    }
  }
  if (*(unsigned char *)(v4 + 8)) {
    goto LABEL_6;
  }
  return 0;
}

const void **realityio::PrimitiveDirtyPropertyDescriptor::description@<X0>(uint64_t **this@<X0>, CFStringRef *a2@<X8>)
{
  CFTypeRef cf = 0;
  CFStringRef v4 = realityio::joinAsCFStringRef<realityio::DirtyMetadataDescriptor>(this + 1, (void (*)(void **__return_ptr, void *))realityio::DirtyMetadataDescriptor::description, 0, (const __CFArray *)", ");
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, @"<PrimitiveDirtyPropertyDescriptor: %p { dirtyPropertyMetadataContainAnyOf: (%lu) [ %@ ] } >", this, ((char *)this[2] - (char *)this[1]) >> 4, v4, v4);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F5F4FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

CFStringRef realityio::joinAsCFStringRef<realityio::DirtyMetadataDescriptor>(uint64_t **a1, void (*a2)(void **__return_ptr, void *), uint64_t a3, const __CFArray *a4)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (*a1 != v11)
  {
    do
    {
      uint64_t v12 = *v10;
      uint64_t v13 = (std::__shared_weak_count *)v10[1];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = (void *)(v12 + (a3 >> 1));
      if (a3) {
        (*(void (**)(void **__return_ptr, void *))(*v14 + a2))(&value, v14);
      }
      else {
        a2(&value, v14);
      }
      CFArrayAppendValue(Mutable, value);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      v10 += 2;
    }
    while (v10 != v11);
  }
  CFStringRef v15 = realityio::joinAsCFStringRef(Mutable, a4, v8);
  CFRelease(Mutable);
  return v15;
}

void sub_23F5F50E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(uint64_t a1, uint64_t *a2, void **a3)
{
  int v5 = (void *)realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor(a1, a3);
  *int v5 = &unk_26F33C5E0;
  uint64_t v6 = *a2;
  v5[5] = *a2;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a1 + 48) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return a1;
}

void sub_23F5F51B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = *(void *)(v10 + 40);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)uint64_t v10 = &unk_26F33C5A0;
  a10 = (void **)(v10 + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void realityio::AnyValueDirtyPropertyDescriptor::~AnyValueDirtyPropertyDescriptor(realityio::AnyValueDirtyPropertyDescriptor *this)
{
  *(void *)this = &unk_26F33C5E0;
  uint64_t v1 = *((void *)this + 5);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)this = &unk_26F33C5A0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  uint64_t vars8;

  realityio::AnyValueDirtyPropertyDescriptor::~AnyValueDirtyPropertyDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

realityio::AnyValueDirtyPropertyDescriptor *realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor(realityio::AnyValueDirtyPropertyDescriptor *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  memset(v4, 0, sizeof(v4));
  realityio::AnyValueDirtyPropertyDescriptor::AnyValueDirtyPropertyDescriptor((uint64_t)this, (uint64_t *)a2, v4);
  int v5 = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *((unsigned char *)this + 48) = (*(uint64_t (**)(realityio::AnyValueDirtyPropertyDescriptor *))(*(void *)this
                                                                                                  + 40))(this);
  return this;
}

void sub_23F5F5304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  realityio::AnyValueDirtyPropertyDescriptor::~AnyValueDirtyPropertyDescriptor(v12);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueDirtyPropertyDescriptor::validate(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v68, this, a2);
  if (!*(void *)(a5 + 24) || !*(void *)(a6 + 24)) {
    goto LABEL_68;
  }
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v68);
  char v12 = a3 ? IsValid : 1;
  if ((v12 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v53, a3, a2);
    char v13 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53);
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
    if (v54) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
    }
    if ((v13 & 1) == 0) {
      goto LABEL_68;
    }
  }
  long long v14 = a1 + 5;
  if (a1[5])
  {
    uint64_t v15 = *(void *)(a5 + 24);
    if (!v15) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    int v16 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, void *))(*(void *)v15 + 48))(v15, a2, a1 + 5);
  }
  else
  {
    int v16 = 1;
  }
  IsPseudoRoot = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68);
  if ((IsPseudoRoot & 1) == 0 && *v14)
  {
    unint64_t v18 = *v14 & 0xFFFFFFFFFFFFFFF8;
    if (v18) {
      uint64_t EmptyString = v18 + 16;
    }
    else {
      uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsPseudoRoot);
    }
    if (*(char *)(EmptyString + 23) < 0)
    {
      uint64_t v21 = EmptyString;
      uint64_t EmptyString = *(void *)EmptyString;
      unint64_t v20 = *(void *)(v21 + 8);
    }
    else
    {
      unint64_t v20 = *(unsigned __int8 *)(EmptyString + 23);
    }
    if (v20 >= 9) {
      unint64_t v20 = 9;
    }
    if (v20)
    {
      uint64_t v22 = (unsigned char *)(EmptyString + v20);
      atomic_ullong v23 = (unsigned char *)EmptyString;
      uint64_t v24 = v22;
      do
      {
        if (*v23 == 112)
        {
          uint64_t v25 = 1u;
          while (v25 != 9)
          {
            if (&v23[v25] == v22) {
              goto LABEL_37;
            }
            int v26 = v23[v25];
            int v27 = aPrimvars[v25++];
            if (v26 != v27) {
              goto LABEL_29;
            }
          }
          uint64_t v24 = v23;
        }
LABEL_29:
        ++v23;
      }
      while (v23 != v22);
LABEL_37:
      if (v24 != v22 && v24 == (unsigned char *)EmptyString)
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v67 = 0;
        uint64_t v64 = MEMORY[0x263F90778] + 16;
        pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(&v53, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v64, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 5));
        LODWORD(v59) = v53;
        uint64_t v60 = v54;
        if (v54) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v61, &v55);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v62, &v56);
        uint64_t v63 = v57;
        if ((v57 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v63 &= 0xFFFFFFFFFFFFFFF8;
        }
        if ((v58 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v57 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
        if (v54) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v59))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v53, &v60, &v61);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, &v50);
          uint64_t v28 = *(void *)(a5 + 24);
          if (!v28) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          int v16 = (*(uint64_t (**)(uint64_t, int *, void *))(*(void *)v28 + 48))(v28, &v50, a1 + 5);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
          if ((v57 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
          if (v54) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
          }
        }
        if ((v63 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v61);
        if (v60) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v60);
        }
        MEMORY[0x2455CF0D0](&v64);
      }
    }
  }
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v64, a3, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v64))
    {
      uint8x8_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v64);
      if ((v29 & 1) == 0)
      {
        if (*v14)
        {
          unint64_t v30 = *v14 & 0xFFFFFFFFFFFFFFF8;
          if (v30) {
            uint64_t v31 = v30 + 16;
          }
          else {
            uint64_t v31 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
          }
          if (*(char *)(v31 + 23) < 0)
          {
            uint64_t v35 = v31;
            uint64_t v31 = *(void *)v31;
            unint64_t v34 = *(void *)(v35 + 8);
          }
          else
          {
            unint64_t v34 = *(unsigned __int8 *)(v31 + 23);
          }
          if (v34 >= 9) {
            unint64_t v34 = 9;
          }
          if (v34)
          {
            long long v36 = (unsigned char *)(v31 + v34);
            uint64_t v37 = (unsigned char *)v31;
            uint64_t v38 = v36;
            do
            {
              if (*v37 == 112)
              {
                uint64_t v39 = 1u;
                while (v39 != 9)
                {
                  if (&v37[v39] == v36) {
                    goto LABEL_91;
                  }
                  int v40 = v37[v39];
                  int v41 = aPrimvars[v39++];
                  if (v40 != v41) {
                    goto LABEL_83;
                  }
                }
                uint64_t v38 = v37;
              }
LABEL_83:
              ++v37;
            }
            while (v37 != v36);
LABEL_91:
            if (v38 != v36 && v38 == (unsigned char *)v31)
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              uint64_t v63 = 0;
              uint64_t v59 = MEMORY[0x263F90778] + 16;
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(&v53, (pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *)&v59, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 5));
              pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::_PtrProxy((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v50, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v53);
              pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::~UsdGeomPrimvar((pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar *)&v53);
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v50))
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v53, &v51, v52);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, &v49);
                uint64_t v42 = *(void *)(a5 + 24);
                if (!v42) {
                  std::__throw_bad_function_call[abi:ne180100]();
                }
                LOBYTE(v16) = (*(uint64_t (**)(uint64_t, int *, void *))(*(void *)v42 + 48))(v42, &v49, a1 + 5);
                pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v49);
                pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v53);
              }
              pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v50);
              MEMORY[0x2455CF0D0](&v59);
            }
          }
        }
      }
    }
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    if (v65) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v65);
    }
    if (v16) {
      goto LABEL_102;
    }
LABEL_68:
    uint64_t v32 = 0;
    goto LABEL_69;
  }
  if (!v16) {
    goto LABEL_68;
  }
LABEL_102:
  uint64_t v43 = (uint64_t *)a1[1];
  unint64_t v44 = (uint64_t *)a1[2];
  if (v43 == v44)
  {
    uint64_t v32 = 1;
  }
  else
  {
    do
    {
      uint64_t v45 = *v43;
      long long v46 = (std::__shared_weak_count *)v43[1];
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v47 = *(void *)(a6 + 24);
      if (!v47) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v32 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, void *, uint64_t))(*(void *)v47 + 48))(v47, a2, v14, v45);
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      v43 += 2;
      if (v43 == v44) {
        int v48 = 1;
      }
      else {
        int v48 = v32;
      }
    }
    while (v48 != 1);
  }
LABEL_69:
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
  if (v69) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v69);
  }
  return v32;
}

void sub_23F5F5A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a16);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a12);
  MEMORY[0x2455CF0D0](&a22);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a26);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v26 - 120));
  _Unwind_Resume(a1);
}

BOOL realityio::AnyValueDirtyPropertyDescriptor::_isEmpty(realityio::AnyValueDirtyPropertyDescriptor *this)
{
  return !*((void *)this + 5) && *((unsigned char *)this + 32) != 0;
}

uint64_t realityio::PrimitiveDirtyPropertyDescriptor::isEmpty(realityio::PrimitiveDirtyPropertyDescriptor *this)
{
  return *((unsigned __int8 *)this + 32);
}

const void **realityio::AnyValueDirtyPropertyDescriptor::description@<X0>(uint64_t **this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef v4 = realityio::joinAsCFStringRef<realityio::DirtyMetadataDescriptor>(this + 1, (void (*)(void **__return_ptr, void *))realityio::DirtyMetadataDescriptor::description, 0, (const __CFArray *)", ");
  CFTypeRef cf = v4;
  *a2 = 0;
  unint64_t v5 = (unint64_t)this[5] & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    uint64_t v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    uint64_t v6 = "";
  }
  *a2 = CFStringCreateWithFormat(0, 0, @"<AnyValueDirtyPropertyDescriptor: %p { propertyName: %s, dirtyPropertyMetadataContainAnyOf: (%lu) [ %@ ] } >", this, v6, ((char *)this[2] - (char *)this[1]) >> 4, v4);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F5F5C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(uint64_t a1, long long *a2, void **a3)
{
  uint64_t v5 = realityio::PrimitiveDirtyPropertyDescriptor::PrimitiveDirtyPropertyDescriptor(a1, a3);
  uint64_t v6 = (uint64_t (**)(uint64_t))&unk_26F33C620;
  *(void *)uint64_t v5 = &unk_26F33C620;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 40), *(const std::string::value_type **)a2, *((void *)a2 + 1));
    uint64_t v6 = *(uint64_t (***)(uint64_t))a1;
  }
  else
  {
    long long v7 = *a2;
    *(void *)(v5 + 56) = *((void *)a2 + 2);
    *(_OWORD *)(v5 + 40) = v7;
  }
  *(unsigned char *)(a1 + 64) = v6[5](a1);
  return a1;
}

void sub_23F5F5D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)uint64_t v10 = &unk_26F33C5A0;
  a10 = (void **)(v10 + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void realityio::AnyValueNamedspacedDirtyPropertyDescriptor::~AnyValueNamedspacedDirtyPropertyDescriptor(void **this)
{
  *this = &unk_26F33C620;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_26F33C5A0;
  uint64_t v2 = this + 1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  uint64_t vars8;

  realityio::AnyValueNamedspacedDirtyPropertyDescriptor::~AnyValueNamedspacedDirtyPropertyDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

unsigned char *realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor(unsigned char *a1, long long *a2)
{
  memset(v4, 0, sizeof(v4));
  realityio::AnyValueNamedspacedDirtyPropertyDescriptor::AnyValueNamedspacedDirtyPropertyDescriptor((uint64_t)a1, a2, v4);
  uint64_t v5 = (void **)v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v5);
  a1[64] = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 40))(a1);
  return a1;
}

void sub_23F5F5E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  realityio::AnyValueNamedspacedDirtyPropertyDescriptor::~AnyValueNamedspacedDirtyPropertyDescriptor(v12);
  _Unwind_Resume(a1);
}

uint64_t realityio::AnyValueNamedspacedDirtyPropertyDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v38, this, a2);
  if (!*(void *)(a5 + 24) || !*(void *)(a6 + 24)) {
    goto LABEL_18;
  }
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v38);
  char v12 = a3 ? IsValid : 1;
  if ((v12 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v35, a3, a2);
    char v13 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v35);
    if ((BYTE8(v36) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v36 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v36);
    if (*((void *)&v35 + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v35 + 1));
    }
    if ((v13 & 1) == 0)
    {
LABEL_18:
      uint64_t v17 = 0;
      goto LABEL_48;
    }
  }
  long long v35 = 0u;
  long long v36 = 0u;
  int v37 = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace();
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::UsdObject *)v34[0];
        i != (pxrInternal__aapl__pxrReserved__::UsdObject *)v34[1];
        uint64_t i = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)i + 32))
  {
    Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(i);
    uint64_t v16 = *(void *)(a5 + 24);
    if (!v16) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(*(void *)v16 + 48))(v16, a2, Name))
    {
      std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v35, Name, Name);
    }
  }
  if (a3)
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v30, a3, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v30))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertiesInNamespace();
      for (uint64_t j = (pxrInternal__aapl__pxrReserved__::UsdObject *)v29[0];
            j != (pxrInternal__aapl__pxrReserved__::UsdObject *)v29[1];
            uint64_t j = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)j + 32))
      {
        unint64_t v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(j);
        uint64_t v20 = *(void *)(a5 + 24);
        if (!v20) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(*(void *)v20 + 48))(v20, a2, v19))
        {
          std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v35, v19, v19);
        }
      }
      uint64_t v42 = (void **)v29;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](&v42);
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
    if (v31) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
    }
  }
  if (*((void *)&v36 + 1))
  {
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16))
    {
LABEL_46:
      uint64_t v17 = 1;
      goto LABEL_47;
    }
    uint64_t v21 = (void *)v36;
    if ((void)v36)
    {
      while (1)
      {
        uint64_t v22 = *(uint64_t **)(a1 + 8);
        atomic_ullong v23 = *(uint64_t **)(a1 + 16);
        if (v22 != v23) {
          break;
        }
LABEL_43:
        uint64_t v17 = 0;
        uint64_t v21 = (void *)*v21;
        if (!v21) {
          goto LABEL_47;
        }
      }
      while (1)
      {
        uint64_t v24 = *v22;
        uint64_t v25 = (std::__shared_weak_count *)v22[1];
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = *(void *)(a6 + 24);
        if (!v26) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        char v27 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, void *, uint64_t))(*(void *)v26 + 48))(v26, a2, v21 + 2, v24);
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        if (v27) {
          goto LABEL_46;
        }
        v22 += 2;
        if (v22 == v23) {
          goto LABEL_43;
        }
      }
    }
  }
  uint64_t v17 = 0;
LABEL_47:
  unint64_t v30 = (void **)v34;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](&v30);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&v35);
LABEL_48:
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
  if (v39) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
  }
  return v17;
}

void sub_23F5F6238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  *(void *)(v4 - 96) = va1;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 96));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va3);
  _Unwind_Resume(a1);
}

BOOL realityio::AnyValueNamedspacedDirtyPropertyDescriptor::_isEmpty(realityio::AnyValueNamedspacedDirtyPropertyDescriptor *this)
{
  if (*((char *)this + 63) < 0)
  {
    if (*((void *)this + 6)) {
      return 0;
    }
  }
  else if (*((unsigned char *)this + 63))
  {
    return 0;
  }
  return *((unsigned char *)this + 32) != 0;
}

const void **realityio::AnyValueNamedspacedDirtyPropertyDescriptor::description@<X0>(uint64_t **this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef v4 = realityio::joinAsCFStringRef<realityio::DirtyMetadataDescriptor>(this + 1, (void (*)(void **__return_ptr, void *))realityio::DirtyMetadataDescriptor::description, 0, (const __CFArray *)", ");
  CFTypeRef cf = v4;
  *a2 = 0;
  uint64_t v5 = this + 5;
  if (*((char *)this + 63) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  *a2 = CFStringCreateWithFormat(0, 0, @"<AnyValueNamedspacedDirtyPropertyDescriptor: %p { namespacePrefix: %s, dirtyPropertyMetadataContainAnyOf: (%lu) [ %@ ] } >", this, v5, ((char *)this[2] - (char *)this[1]) >> 4, v4);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F5F63D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

void realityio::PrimitiveDirtyPropertyDescriptor::~PrimitiveDirtyPropertyDescriptor(realityio::PrimitiveDirtyPropertyDescriptor *this)
{
  *(void *)this = &unk_26F33C5A0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26F33C5A0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x2455D2BD0](this, 0x10A1C407F0BD61ELL);
}

uint64_t realityio::AnyValueDirtyPropertyDescriptor::isEmpty(realityio::AnyValueDirtyPropertyDescriptor *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t realityio::AnyValueNamedspacedDirtyPropertyDescriptor::isEmpty(realityio::AnyValueNamedspacedDirtyPropertyDescriptor *this)
{
  return *((unsigned __int8 *)this + 64);
}

void std::vector<pxrInternal__aapl__pxrReserved__::UsdProperty>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<pxrInternal__aapl__pxrReserved__::UsdProperty>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::UsdProperty>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 16);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

uint64_t realityio::EntityAction::operator()@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a6@<X8>)
{
  uint64_t v110 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  memset(&v100, 0, sizeof(v100));
  uint64_t v89 = a4;
  if (a4[1] != *a4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      char v12 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v105, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + v9));
      uint64_t v13 = *v89;
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>(v12)) {
        goto LABEL_170;
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + v10));
      unint64_t v15 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v15) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v15 + 176) & 0xFFFFFFFFFFFFFFF8))
      {
        if ((BYTE8(v105) & 4) != 0) {
          uint64_t v19 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v105 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v105);
        }
        else {
          uint64_t v19 = &v105;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v101, v19);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v102, (_DWORD *)v19 + 1);
      }
      else
      {
LABEL_170:
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v105))
        {
          uint64_t v16 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + v10));
          unint64_t v17 = atomic_load(&realityio::tokens::EcsTokens);
          if (!v17) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*v16 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v17 + 168) & 0xFFFFFFFFFFFFFFF8))
          {
            if ((BYTE8(v105) & 4) != 0) {
              uint64_t v18 = (const std::string *)(*(uint64_t (**)(long long *))((*((void *)&v105 + 1) & 0xFFFFFFFFFFFFFFF8)
            }
                                                                               + 168))(&v105);
            else {
              uint64_t v18 = (const std::string *)v105;
            }
            std::string::operator=(&v100, v18);
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v105);
      ++v11;
      v10 += 8;
      v9 += 16;
    }
    while (v11 < (v89[1] - *v89) >> 3);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, a3);
  uint64_t v99 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(a6))
  {
    uint64_t v22 = REEntityCreate();
    RENetworkComponentGetComponentType();
    *(void *)&long long v105 = &unk_26F33C750;
    *((void *)&v106 + 1) = &v105;
    uint64_t v23 = REEntityGetOrAddComponentByClass();
    std::function<void ()(REComponent *)>::operator()((uint64_t)&v105, v23);
    RENetworkMarkComponentDirty();
    std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&v105);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v108, a2);
    std::string::basic_string[abi:ne180100]<0>(&v105, "/__root");
    MEMORY[0x2455CF7A0](v103, &v105);
    uint64_t v24 = (uint64_t)v108;
    uint64_t v25 = v103[0];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v103);
    if (SBYTE7(v106) < 0) {
      operator delete((void *)v105);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v108);
    if (v24 == v25)
    {
LABEL_39:
      *(void *)&long long v105 = v22;
      if (v22)
      {
        RERetain();
        uint64_t v28 = v105;
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = v99;
      if (v99 != v28)
      {
        uint64_t v99 = v28;
        *(void *)&long long v105 = v29;
      }
      realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v105);
      *((void *)&v105 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REEntity *>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy();
    }
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v100.__r_.__value_.__l.__size_)
      {
LABEL_30:
        REEntitySetName();
LABEL_32:
        if (REComponentClassFromName())
        {
          if (REEntityGetOrAddComponentByClass())
          {
            Object = (char **)RECustomComponentGetObject();
            if (Object)
            {
              if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()) {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v105, (pxrInternal__aapl__pxrReserved__::SdfPath *)v101);
              }
              else {
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v105, a2);
              }
              Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v105);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
            }
          }
        }
        goto LABEL_39;
      }
    }
    else if (*((unsigned char *)&v100.__r_.__value_.__s + 23))
    {
      goto LABEL_30;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v105, a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v105);
    REEntitySetName();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v105);
    goto LABEL_32;
  }
  uint64_t v20 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REEntity *>>(a6);
  realityio::WrappedRERef<REAsset *>::operator=(&v99, v20);
  uint64_t v21 = v99;
  long long v105 = 0u;
  long long v106 = 0u;
  int v107 = 1065353216;
  unint64_t ChildCount = REEntityGetChildCount();
  if (ChildCount)
  {
    std::vector<REEntity *>::vector(&v108, ChildCount);
    REEntityGetChildren();
    uint64_t v31 = v108;
    uint64_t v32 = (void *)v109;
    if (v108 != (void *)v109)
    {
      do
      {
        std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>((uint64_t)&v105, v31, v31);
        ++v31;
      }
      while (v31 != v32);
      uint64_t v31 = v108;
    }
    if (v31)
    {
      unint64_t v109 = (unint64_t)v31;
      operator delete(v31);
    }
  }
  v83 = (void *)v21;
  if (v89[1] != *v89)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    long long v35 = 0;
    long long v36 = 0;
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    unint64_t v86 = 0;
    while (1)
    {
      uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v108, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v38));
      v88 = v33;
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v39))
      {
        if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v108)) {
          goto LABEL_125;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v89 + 8 * v38));
        MEMORY[0x2455CF810](v103, "__childEntities");
        int v41 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if ((v103[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v103[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!v41) {
          goto LABEL_125;
        }
        uint64_t v42 = (v109 & 4) != 0
            ? (void *)(*(uint64_t (**)(void **))((v109 & 0xFFFFFFFFFFFFFFF8) + 168))(&v108)
            : v108;
        if (!*v42) {
          goto LABEL_125;
        }
        uint64_t v43 = 0;
        unint64_t v44 = (pxrInternal__aapl__pxrReserved__::VtValue *)v42[4];
        uint64_t v45 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v44 + 16 * *v42);
        while (2)
        {
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(v44))
          {
            v103[0] = 0;
            uint64_t v46 = *((void *)v44 + 1);
            if ((v46 & 4) != 0) {
              uint64_t v47 = (void *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(v44);
            }
            else {
              uint64_t v47 = *(void **)v44;
            }
            v103[0] = *v47;
            int v48 = std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(&v105, v103);
            if (v48)
            {
              unint64_t v49 = *((void *)&v105 + 1);
              unint64_t v50 = v48[1];
              uint8x8_t v51 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v105 + 8));
              v51.i16[0] = vaddlv_u8(v51);
              if (v51.u32[0] > 1uLL)
              {
                if (v50 >= *((void *)&v105 + 1)) {
                  v50 %= *((void *)&v105 + 1);
                }
              }
              else
              {
                v50 &= *((void *)&v105 + 1) - 1;
              }
              uint64_t v52 = *v48;
              uint64_t v53 = *(uint64_t **)(v105 + 8 * v50);
              do
              {
                uint64_t v54 = (long long *)v53;
                uint64_t v53 = (uint64_t *)*v53;
              }
              while (v53 != v48);
              if (v54 == &v106) {
                goto LABEL_85;
              }
              unint64_t v55 = *((void *)v54 + 1);
              if (v51.u32[0] > 1uLL)
              {
                if (v55 >= *((void *)&v105 + 1)) {
                  v55 %= *((void *)&v105 + 1);
                }
              }
              else
              {
                v55 &= *((void *)&v105 + 1) - 1;
              }
              if (v55 == v50)
              {
LABEL_87:
                if (v52)
                {
                  unint64_t v56 = *(void *)(v52 + 8);
                  goto LABEL_89;
                }
              }
              else
              {
LABEL_85:
                if (!v52) {
                  goto LABEL_86;
                }
                unint64_t v56 = *(void *)(v52 + 8);
                if (v51.u32[0] > 1uLL)
                {
                  unint64_t v57 = *(void *)(v52 + 8);
                  if (v56 >= *((void *)&v105 + 1)) {
                    unint64_t v57 = v56 % *((void *)&v105 + 1);
                  }
                }
                else
                {
                  unint64_t v57 = v56 & (*((void *)&v105 + 1) - 1);
                }
                if (v57 != v50)
                {
LABEL_86:
                  *(void *)(v105 + 8 * v50) = 0;
                  uint64_t v52 = *v48;
                  goto LABEL_87;
                }
LABEL_89:
                if (v51.u32[0] > 1uLL)
                {
                  if (v56 >= v49) {
                    v56 %= v49;
                  }
                }
                else
                {
                  v56 &= v49 - 1;
                }
                if (v56 != v50)
                {
                  *(void *)(v105 + 8 * v56) = v54;
                  uint64_t v52 = *v48;
                }
              }
              *(void *)uint64_t v54 = v52;
              *int v48 = 0;
              --*((void *)&v106 + 1);
              operator delete(v48);
            }
            uint64_t v58 = v103[0];
            if ((unint64_t)v36 >= v37)
            {
              uint64_t v59 = (v36 - v35) >> 4;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 60) {
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v37 - (void)v35) >> 3 > v60) {
                unint64_t v60 = (uint64_t)(v37 - (void)v35) >> 3;
              }
              if (v37 - (unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v60;
              }
              if (v61) {
                unint64_t v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v61);
              }
              else {
                uint64_t v62 = 0;
              }
              uint64_t v63 = (void *)(v61 + 16 * v59);
              void *v63 = v58;
              v63[1] = v43;
              if (v36 == v35)
              {
                uint64_t v65 = (char *)(v61 + 16 * v59);
                uint64_t v33 = v88;
              }
              else
              {
                unint64_t v64 = v61 + 16 * v59;
                uint64_t v33 = v88;
                do
                {
                  uint64_t v65 = (char *)(v64 - 16);
                  *(_OWORD *)(v64 - 16) = *((_OWORD *)v36 - 1);
                  v36 -= 16;
                  v64 -= 16;
                }
                while (v36 != v35);
              }
              unint64_t v37 = v61 + 16 * v62;
              long long v36 = (char *)(v63 + 2);
              if (v35) {
                operator delete(v35);
              }
              long long v35 = v65;
            }
            else
            {
              *(void *)long long v36 = v103[0];
              *((void *)v36 + 1) = v43;
              v36 += 16;
              uint64_t v33 = v88;
            }
            ++v43;
          }
          unint64_t v44 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v44 + 16);
          if (v44 == v45) {
            goto LABEL_125;
          }
          continue;
        }
      }
      v103[0] = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v108);
      if (v103[0])
      {
        RERetain();
        uint64_t v40 = v103[0];
      }
      else
      {
        uint64_t v40 = 0;
      }
      if (!REComponentGetEntity())
      {
        if ((unint64_t)v34 >= v86)
        {
          uint64_t v67 = (v34 - v33) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v86 - (void)v33) >> 2 > v68) {
            unint64_t v68 = (uint64_t)(v86 - (void)v33) >> 2;
          }
          if (v86 - (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v69 = v68;
          }
          if (v69) {
            unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v69);
          }
          else {
            uint64_t v70 = 0;
          }
          uint64_t v71 = (char *)(v69 + 8 * v67);
          *(void *)uint64_t v71 = v40;
          uint64_t v66 = v71 + 8;
          while (v34 != v33)
          {
            uint64_t v72 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v71 - 1) = v72;
            v71 -= 8;
          }
          unint64_t v86 = v69 + 8 * v70;
          if (v33) {
            operator delete(v33);
          }
          uint64_t v33 = v71;
          goto LABEL_124;
        }
        *(void *)unint64_t v34 = v40;
        v34 += 8;
      }
      uint64_t v66 = v34;
LABEL_124:
      realityio::WrappedRERef<REComponent *>::~WrappedRERef(v103);
      unint64_t v34 = v66;
LABEL_125:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v108);
      if (++v38 >= (unint64_t)((v89[1] - *v89) >> 3)) {
        goto LABEL_144;
      }
    }
  }
  uint64_t v33 = 0;
  long long v35 = 0;
  long long v36 = 0;
  unint64_t v34 = 0;
LABEL_144:
  v90[1] = 0;
  uint64_t v91 = 0;
  v90[0] = 0;
  std::vector<REComponent *>::__init_with_size[abi:ne180100]<REComponent **,REComponent **>(v90, v33, (uint64_t)v34, (v34 - v33) >> 3);
  __p[0] = v83;
  __p[1] = 0;
  long long v93 = 0uLL;
  std::vector<std::pair<REEntity *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<REEntity *,unsigned long>*,std::pair<REEntity *,unsigned long>*>(&__p[1], (long long *)v35, (long long *)v36, (v36 - v35) >> 4);
  std::unordered_set<REEntity *>::unordered_set((uint64_t)&v94, (uint64_t)&v105);
  v104 = 0;
  v73 = (char *)operator new(0x68uLL);
  *(void *)v73 = &unk_26F33C898;
  *(_OWORD *)(v73 + 8) = *(_OWORD *)v90;
  *((void *)v73 + 3) = v91;
  v90[0] = 0;
  v90[1] = 0;
  long long v74 = v93;
  *((_OWORD *)v73 + 2) = *(_OWORD *)__p;
  *((_OWORD *)v73 + 3) = v74;
  long long v93 = 0uLL;
  __p[1] = 0;
  uint64_t v75 = v94;
  unint64_t v76 = v95;
  uint64_t v91 = 0;
  uint64_t v94 = 0;
  unint64_t v95 = 0;
  *((void *)v73 + 8) = v75;
  *((void *)v73 + 9) = v76;
  uint64_t v78 = v96;
  uint64_t v77 = v97;
  *((void *)v73 + 10) = v96;
  *((void *)v73 + 11) = v77;
  *((_DWORD *)v73 + 24) = v98;
  if (v77)
  {
    unint64_t v79 = *(void *)(v78 + 8);
    if ((v76 & (v76 - 1)) != 0)
    {
      if (v79 >= v76) {
        v79 %= v76;
      }
    }
    else
    {
      v79 &= v76 - 1;
    }
    *(void *)(v75 + 8 * v79) = v73 + 80;
    uint64_t v96 = 0;
    uint64_t v97 = 0;
  }
  v104 = v73;
  uint64_t v80 = *(void *)(a1 + 16);
  if (v80)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v108, (uint64_t)v103);
    uint64_t v81 = *(void *)(v80 + 56);
    if (!v81) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v81 + 48))(v81, &v108);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v108);
  }
  else
  {
    std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()((uint64_t)v73);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v103);
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v94);
  if (__p[1])
  {
    *(void **)&long long v93 = __p[1];
    operator delete(__p[1]);
  }
  if (v90[0])
  {
    v90[1] = v90[0];
    operator delete(v90[0]);
  }
  if (v35) {
    operator delete(v35);
  }
  if (v33) {
    operator delete(v33);
  }
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)&v105);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v99);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v101);
}

void sub_23F5F70F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::VtValue *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v41 - 128));
  if (v40) {
    operator delete(v40);
  }
  if (v39) {
    operator delete(v39);
  }
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(v41 - 176);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a32);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a12);
  if (a38 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a39);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP8REEntityEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REEntity *>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

char *anonymous namespace'::RIOPrimPathComponent::setPath(char **this, const char *__s)
{
  uint64_t result = *this;
  if (result)
  {
    uint64_t result = (char *)RECIntrospectionFree();
    *this = 0;
  }
  if (__s)
  {
    strlen(__s);
    uint64_t v5 = (char *)RECIntrospectionAlloc();
    *this = v5;
    return strcpy(v5, __s);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7VtValueEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_0::~$_0(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(a1 + 56);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void realityio::EntitySyncAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, void *a2@<X3>, void *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  v9[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9, a1);
  if (a2[1] == *a2)
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, v9);
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v7));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REEntity *>>(a4)) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(a4);
      ++v8;
      v7 += 16;
      if (v8 >= (uint64_t)(a2[1] - *a2) >> 3) {
        goto LABEL_5;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
}

void sub_23F5F763C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *realityio::RenderOptionsComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, void *a2@<X3>, void *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  uint64_t v20 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    RERenderOptionsComponentGetComponentType();
    uint64_t v21 = REComponentCreateByClass();
    if (v21)
    {
      RERetain();
      uint64_t v9 = v21;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v10 = v20;
    if (v20 != v9)
    {
      uint64_t v20 = v9;
      uint64_t v21 = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v21);
    unint64_t v22 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  unint64_t v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
  realityio::WrappedRERef<REAsset *>::operator=(&v20, v8);
  uint64_t v19 = 0;
  if (a2[1] != *a2)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v21, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v11));
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a2 + v12));
      MEMORY[0x2455CF810](&v18, "visibility");
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v18 & 0xFFFFFFFFFFFFFFF8))
      {
        int v15 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v15)
        {
          if ((v22 & 4) != 0) {
            uint64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
          }
          else {
            uint64_t v16 = &v21;
          }
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v19, v16);
        }
      }
      else if ((v18 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
      ++v13;
      v12 += 8;
      v11 += 16;
    }
    while (v13 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  MEMORY[0x2455CF810](&v21, "invisible");
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  RERenderOptionsComponentSetVisibilityMode();
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v20);
}

void sub_23F5F78DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::WrappedRERef<REComponent *>::~WrappedRERef((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v3);
  _Unwind_Resume(a1);
}

uint64_t realityio::EntityAction::supportsPartialInputs(realityio::EntityAction *this)
{
  return 1;
}

uint64_t realityio::RenderOptionsComponentAction::supportsPartialInputs(realityio::RenderOptionsComponentAction *this)
{
  return 1;
}

uint64_t realityio::EntitySyncAction::supportsPartialInputs(realityio::EntitySyncAction *this)
{
  return 1;
}

void _ZNSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33C750;
  return result;
}

void _ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE7__cloneEPNS0_6__baseIS9_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33C750;
}

uint64_t _ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN9realityio12createEntityEvEUlT_E_)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN9realityio12createEntityEvEUlT_E_NS_9allocatorIS4_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZN9realityio12createEntityEvEUlT_E_;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::WrappedRERef<REEntity *>>::Invoke()
{
}

void *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REEntity *>>(void *result)
{
  if (result)
  {
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_Equal(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_EqualPtr(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_StreamOut(void **a1, uint64_t a2)
{
  return MEMORY[0x270F98788](a2, **a1 != 0);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP8REEntityEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REEntity *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REEntity *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REEntity *>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)v2);
    MEMORY[0x2455D2BD0](v3, 0x1020C403A5D3213);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 8));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F5F7D34(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REEntity *>>::_PlaceCopy()
{
}

void sub_23F5F7DC4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

void *std::vector<REEntity *>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_23F5F7E44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<REComponent *>::__init_with_size[abi:ne180100]<REComponent **,REComponent **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23F5F7EDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::pair<REEntity *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<REEntity *,unsigned long>*,std::pair<REEntity *,unsigned long>*>(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(a4);
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v7];
    if (a2 != a3)
    {
      uint64_t v8 = result;
      do
      {
        long long v9 = *a2++;
        *v8++ = v9;
        result += 2;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_23F5F7F74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<REEntity *>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::__emplace_unique_key_args<REEntity *,REEntity * const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_23F5F7FF0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33C898;
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)(a1 + 8));
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33C898;
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)(a1 + 8));
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x68uLL);
  void *v2 = &unk_26F33C898;
  std::__compressed_pair_elem<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_23F5F8144(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33C898;
  return std::__compressed_pair_elem<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  while (v2 != v3)
  {
    v2 += 8;
    uint64_t result = REEntityAddExistingComponent();
  }
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  while (v4 != v5)
  {
    v4 += 16;
    uint64_t result = REEntityInsertChild();
  }
  for (uint64_t i = (void *)v1[10]; i; uint64_t i = (void *)*i)
    uint64_t result = REEntitySetParent();
  return result;
}

uint64_t std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target_type()
{
}

void *std::__compressed_pair_elem<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<REComponent *>::__init_with_size[abi:ne180100]<REComponent **,REComponent **>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v4 = *(void *)(a2 + 24);
  a1[4] = 0;
  a1[3] = v4;
  a1[5] = 0;
  a1[6] = 0;
  std::vector<std::pair<REEntity *,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<REEntity *,unsigned long>*,std::pair<REEntity *,unsigned long>*>(a1 + 4, *(long long **)(a2 + 32), *(long long **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  std::unordered_set<REEntity *>::unordered_set((uint64_t)(a1 + 7), a2 + 56);
  return a1;
}

void sub_23F5F8310(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::EntityAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table(a1 + 56);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
}

void *RIO_MTLX::DEFAULT_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::DEFAULT_TYPE_STRING(void)::v, "color3");
  }
  return RIO_MTLX::DEFAULT_TYPE_STRING(void)::v;
}

void sub_23F5F840C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::FILENAME_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::FILENAME_TYPE_STRING(void)::v, "filename");
  }
  return RIO_MTLX::FILENAME_TYPE_STRING(void)::v;
}

void sub_23F5F848C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::GEOMNAME_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::GEOMNAME_TYPE_STRING(void)::v, "geomname");
  }
  return RIO_MTLX::GEOMNAME_TYPE_STRING(void)::v;
}

void sub_23F5F850C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::STRING_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::STRING_TYPE_STRING(void)::v, "string");
  }
  return RIO_MTLX::STRING_TYPE_STRING(void)::v;
}

void sub_23F5F858C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::SURFACE_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::SURFACE_SHADER_TYPE_STRING(void)::v, "surfaceshader");
  }
  return RIO_MTLX::SURFACE_SHADER_TYPE_STRING(void)::v;
}

void sub_23F5F860C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(void)::v, "displacementshader");
  }
  return RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(void)::v;
}

void sub_23F5F868C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::VOLUME_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VOLUME_SHADER_TYPE_STRING(void)::v, "volumeshader");
  }
  return RIO_MTLX::VOLUME_SHADER_TYPE_STRING(void)::v;
}

void sub_23F5F870C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::LIGHT_SHADER_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::LIGHT_SHADER_TYPE_STRING(void)::v, "lightshader");
  }
  return RIO_MTLX::LIGHT_SHADER_TYPE_STRING(void)::v;
}

void sub_23F5F878C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::MATERIAL_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MATERIAL_TYPE_STRING(void)::v, "material");
  }
  return RIO_MTLX::MATERIAL_TYPE_STRING(void)::v;
}

void sub_23F5F880C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(void)::v, "surfacematerial");
  }
  return RIO_MTLX::SURFACE_MATERIAL_NODE_STRING(void)::v;
}

void sub_23F5F888C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::VOLUME_MATERIAL_NODE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VOLUME_MATERIAL_NODE_STRING(void)::v, "volumematerial");
  }
  return RIO_MTLX::VOLUME_MATERIAL_NODE_STRING(void)::v;
}

void sub_23F5F890C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(void)::v, "multioutput");
  }
  return RIO_MTLX::MULTI_OUTPUT_TYPE_STRING(void)::v;
}

void sub_23F5F898C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::VALUE_STRING_TRUE(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VALUE_STRING_TRUE(void)::v, "true");
  }
  return RIO_MTLX::VALUE_STRING_TRUE(void)::v;
}

void sub_23F5F8A0C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::VALUE_STRING_FALSE(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::VALUE_STRING_FALSE(void)::v, "false");
  }
  return RIO_MTLX::VALUE_STRING_FALSE(void)::v;
}

void sub_23F5F8A8C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::NAME_PREFIX_SEPARATOR(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NAME_PREFIX_SEPARATOR(void)::v, ":");
  }
  return RIO_MTLX::NAME_PREFIX_SEPARATOR(void)::v;
}

void sub_23F5F8B0C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::NAME_PATH_SEPARATOR(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::NAME_PATH_SEPARATOR(void)::v, "/");
  }
  return RIO_MTLX::NAME_PATH_SEPARATOR(void)::v;
}

void sub_23F5F8B8C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::ARRAY_VALID_SEPARATORS(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ARRAY_VALID_SEPARATORS(void)::v, ", ");
  }
  return RIO_MTLX::ARRAY_VALID_SEPARATORS(void)::v;
}

void sub_23F5F8C0C(_Unwind_Exception *a1)
{
}

void *RIO_MTLX::ARRAY_PREFERRED_SEPARATOR(RIO_MTLX *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(RIO_MTLX::ARRAY_PREFERRED_SEPARATOR(void)::v, ", ");
  }
  return RIO_MTLX::ARRAY_PREFERRED_SEPARATOR(void)::v;
}

void sub_23F5F8C8C(_Unwind_Exception *a1)
{
}

uint64_t RIOBuilderStageDeltaGetTypeID()
{
  if (RIOBuilderStageDeltaGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderStageDeltaGetTypeID::onceToken, &__block_literal_global_10);
  }
  return RIOBuilderStageDeltaGetTypeID::typeID;
}

void __RIOBuilderStageDeltaGetTypeID_block_invoke()
{
  if (!RIOBuilderStageDeltaGetTypeID::typeID) {
    RIOBuilderStageDeltaGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t *RIOBuilderStageDeltaCopyPrimDelta(uint64_t a1)
{
  if (RIOBuilderPrimDeltaGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderPrimDeltaGetTypeID::onceToken, &__block_literal_global);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = (uint64_t *)Instance;
  if (Instance)
  {
    std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set(Instance + 16, a1 + 56);
    v3[7] = 0;
    v3[8] = 0;
    v3[9] = 0;
    std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>(v3 + 7, *(uint64_t **)(a1 + 96), *(uint64_t **)(a1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 4));
  }
  return v3;
}

void sub_23F5F8DD8(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderStageDeltaCopyDirtyMetadata(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  for (uint64_t i = *(void **)(a1 + 32); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i + 2);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  return Mutable;
}

void _RIOBuilderStageDeltaCFFinalize(char *a1)
{
}

BOOL _RIOBuilderStageDeltaCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOBuilderStageDeltaCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOBuilderStageDeltaCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderStageDelta %p>", a1);
}

CFStringRef _RIOBuilderStageDeltaCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderStageDelta %p>", a1);
}

void realityio::StageDelta::~StageDelta(realityio::StageDelta *this)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (void **)((char *)this + 80);
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v2);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)this);
}

uint64_t *std::vector<realityio::PropertyDelta>::__init_with_size[abi:ne180100]<realityio::PropertyDelta*,realityio::PropertyDelta*>(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*,realityio::PropertyDelta*,realityio::PropertyDelta*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_23F5F8F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<realityio::PropertyDelta>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*,realityio::PropertyDelta*,realityio::PropertyDelta*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<realityio::PropertyDelta>::construct[abi:ne180100]<realityio::PropertyDelta,realityio::PropertyDelta&>(a1, v4, v6);
      v6 += 6;
      uint64_t v4 = v12 + 6;
      v12 += 6;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_23F5F9050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::allocator<realityio::PropertyDelta>::construct[abi:ne180100]<realityio::PropertyDelta,realityio::PropertyDelta&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)(a2 + 1), (uint64_t)(a3 + 1));
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<realityio::PropertyDelta>,realityio::PropertyDelta*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(uint64_t **)(result + 8);
  uint64_t v1 = *(uint64_t **)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  while (v3 != v4)
  {
    uint64_t result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table(v3 - 40);
    uint64_t v6 = *(void *)(v3 - 48);
    v3 -= 48;
    uint64_t v5 = v6;
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

realityio::SceneAssetBuilder *realityio::SceneAssetBuilder::SceneAssetBuilder(realityio::SceneAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "SceneAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSceneAssetBuilderIdentifier);
  realityio::generateSceneLibraryDirtyStageSubscription(&v5);
  v12[0] = &unk_26F33CA10;
  v12[3] = v12;
  v11[0] = &unk_26F33CA90;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F33C998;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 850045863;
  *((void *)this + 45) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  return this;
}

void sub_23F5F92DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::SceneAssetBuilder::run(realityio::SceneAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v48, v5, v4);
  isSceneLibrary = (realityio *)realityio::isSceneLibrary((realityio *)&v48, v6);
  if (isSceneLibrary)
  {
    char v8 = *(NSObject **)(realityio::logObjects(isSceneLibrary) + 24);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (v9)
    {
      __int16 buf = 0;
      _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_INFO, "Scene Library builder", (uint8_t *)&buf, 2u);
    }
    uint64_t v10 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)&buf);
    if ((_BYTE)buf)
    {
      uint64_t v11 = v47;
      uint64_t v45 = v47;
      if (v47)
      {
        RERetain();
        uint64_t ServiceLocator = REEngineGetServiceLocator();
        uint64_t v13 = MEMORY[0x2455CDC30](ServiceLocator);
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        uint64_t v14 = *((void *)a2 + 6);
        *(void *)&long long v34 = this;
        *((void *)&v34 + 1) = a2;
        long long v35 = v45;
        RERetain();
        int v36 = v48;
        uint64_t v37 = v49;
        if (v49) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 48), 1uLL, memory_order_relaxed);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v38, &v50);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v39, &v51);
        uint64_t v40 = v52;
        if ((v52 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v40 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v41 = &v42;
        unint64_t v57 = 0;
        int v15 = (char *)operator new(0x48uLL);
        *(void *)int v15 = &unk_26F33CB10;
        *(_OWORD *)(v15 + 8) = v34;
        *((void *)v15 + 3) = v35;
        *((_DWORD *)v15 + 8) = v36;
        *((void *)v15 + 5) = v37;
        long long v35 = 0;
        uint64_t v37 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 12, &v38);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 13, &v39);
        uint64_t v16 = v40;
        unint64_t v17 = v41;
        uint64_t v40 = 0;
        *((void *)v15 + 7) = v16;
        *((void *)v15 + 8) = v17;
        unint64_t v57 = v15;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 16))(v14, v56);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v56);
        if ((v40 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v38);
        if (v37) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v35);
        if (v43 != v42)
        {
          uint64_t v18 = *((void *)a2 + 5);
          std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::vector(&v30, &v42);
          *(void *)&long long v32 = this;
          *((void *)&v32 + 1) = v45;
          if (v45) {
            RERetain();
          }
          *(void *)&long long v33 = v18;
          *((void *)&v33 + 1) = v13;
          unint64_t v55 = 0;
          uint64_t v19 = (char *)operator new(0x40uLL);
          *(void *)uint64_t v19 = &unk_26F33CB90;
          *(_OWORD *)(v19 + 8) = v30;
          *((void *)v19 + 3) = v31;
          long long v30 = 0uLL;
          long long v20 = v32;
          uint64_t v31 = 0;
          *((void *)&v32 + 1) = 0;
          long long v21 = v33;
          *((_OWORD *)v19 + 2) = v20;
          *((_OWORD *)v19 + 3) = v21;
          unint64_t v55 = v19;
          realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v18, (uint64_t)v54);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v54);
          realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)&v32 + 1);
          *(void *)unint64_t v56 = &v30;
          std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
        }
        char v29 = 1;
        uint64_t v23 = *((void *)this + 2);
        unint64_t v22 = (std::__shared_weak_count *)*((void *)this + 3);
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v56, "scenes_assets");
        std::mutex::lock((std::mutex *)(v23 + 64));
        uint64_t v24 = operator new(0x28uLL);
        v24[1] = 0;
        v24[2] = 0;
        void *v24 = &unk_26F33CC10;
        v24[3] = &unk_26F33CC60;
        v24[4] = &v29;
        uint64_t v53 = v56;
        uint64_t v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v23 + 40), (const void **)v56, (uint64_t)&std::piecewise_construct, (long long **)&v53);
        uint64_t v26 = (std::__shared_weak_count *)v25[8];
        v25[7] = (uint64_t)(v24 + 3);
        v25[8] = (uint64_t)v24;
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v23, v56, (uint64_t)v56);
        std::mutex::unlock((std::mutex *)(v23 + 64));
        if ((char)v56[23] < 0) {
          operator delete(*(void **)v56);
        }
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        *(void *)unint64_t v56 = &v42;
        std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
LABEL_31:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v45);
        realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&buf);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v45 = 0;
    }
    char v27 = *(NSObject **)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v56 = 0;
      _os_log_impl(&dword_23F4EA000, v27, OS_LOG_TYPE_DEFAULT, "Stopping operation to create the scene because entity no longer exists", v56, 2u);
    }
    goto LABEL_31;
  }
LABEL_32:
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
  uint64_t result = v49;
  if (v49) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
  }
  return result;
}

void sub_23F5F984C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  *(void *)(v31 + 160) = &a11;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 128));
  *(void *)(v31 + 160) = v31;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 128));
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a30);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a31);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v32 - 208));
  _Unwind_Resume(a1);
}

void sub_23F5F9964()
{
}

void *realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0::~$_0(void *a1)
{
  uint64_t v2 = a1[6];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v3 = a1[4];
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 2);
  return a1;
}

void *std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v3) >> 4);
    if (v5 >= 0x333333333333334) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(v5);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[80 * v8];
    do
    {
      realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData::DeferredChildData((uint64_t)&v6[v7], v3 + v7);
      v7 += 80;
    }
    while (v3 + v7 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_23F5F9A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1::~$_1(uint64_t a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 32));
  uint64_t v3 = (void **)a1;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void realityio::SceneAssetBuilder::clear(realityio::SceneAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v3 = (std::mutex *)((char *)this + 304);
  std::mutex::lock((std::mutex *)((char *)this + 304));
  uint64_t v5 = *((void *)this + 35);
  for (uint64_t i = *((void *)this + 36);
        i != v5;
        std::allocator<realityio::ImportedScene>::destroy[abi:ne180100]((uint64_t)this + 296, i))
  {
    i -= 80;
  }
  *((void *)this + 36) = v5;
  uint64_t v7 = *((void *)this + 2);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scenes_assets");
  std::mutex::lock((std::mutex *)(v7 + 64));
  if (v7 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v7 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v7 + 40), (const void **)__p); {
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v7, (unsigned __int8 *)__p);
  }
  std::mutex::unlock((std::mutex *)(v7 + 64));
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::mutex::unlock(v3);
}

void sub_23F5F9C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex::unlock(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void realityio::SceneAssetBuilder::~SceneAssetBuilder(realityio::SceneAssetBuilder *this)
{
  realityio::SceneAssetBuilder::~SceneAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(void *)this = &unk_26F33C998;
  std::mutex::~mutex((std::mutex *)((char *)this + 304));
  uint64_t v5 = (void **)((char *)this + 280);
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100](&v5);
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33CA10;
  return result;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33CA10;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v11[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)v11, __p);
  uint64_t v6 = (std::__shared_weak_count *)__p[1];
  uint64_t v13 = __p[0];
  uint64_t v14 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::string::basic_string[abi:ne180100]<0>(v11, "end_of_update");
  unint64_t v8 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  char v9 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v7);
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x50uLL);
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332BC8;
  *(_OWORD *)std::string __p = *(_OWORD *)v11;
  uint64_t v18 = v12;
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, v9);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v16, v9 + 1);
  realityio::StaticPrimInputDescriptor::StaticPrimInputDescriptor((uint64_t)&v10[1], (uint64_t)__p, (uint64_t *)(v8 + 56), &v15, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  __p[0] = &v10[1];
  __p[1] = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F5FA000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, void *a18, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33CA90;
  return result;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33CA90;
}

void std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "scenes_assets");
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)(v4 + 168), &v7, &v11);
  uint64_t v6 = v11;
  unint64_t v5 = v12;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v10 < 0) {
    operator delete(__p);
  }
  std::string __p = v6;
  char v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F5FA290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SceneAssetBuilder::SceneAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

std::string *std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, std::string::size_type *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  unint64_t v8 = (std::string *)operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 1;
  a4[1] = v8;
  return result;
}

void sub_23F5FA38C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<realityio::OutputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,std::allocator<realityio::OutputDescriptor>,0>(std::string *a1, uint64_t a2, std::string::size_type *a3, int *a4)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F32FB70;
  std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>((int)&v6, a1 + 1, a2, a3, a4);
  return a1;
}

void sub_23F5FA404(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::OutputDescriptor>::construct[abi:ne180100]<realityio::OutputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality>(int a1, std::string *this, uint64_t a3, std::string::size_type *a4, int *a5)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  realityio::OutputDescriptor::OutputDescriptor(this, (long long *)__p, a4, *a5);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5FA47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<REEntity *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<REEntity *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<REEntity *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    char v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      char v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    char v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  unint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  char v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23F5FA7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(uint64_t a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 72));
  realityio::WrappedRERef<REScene *>::~WrappedRERef((void *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 56);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    unint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void *realityio::WrappedRERef<REScene *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33CB10;
  uint64_t v2 = a1[7];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  uint64_t v3 = a1[5];
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 3);
  return a1;
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33CB10;
  uint64_t v2 = a1[7];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  uint64_t v3 = a1[5];
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 3);

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_26F33CB10;
  std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23F5FAAE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33CB10;
  return std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if (REEntityGetChildCount())
  {
    unint64_t ChildCount = REEntityGetChildCount();
    std::vector<REEntity *>::vector(v58, ChildCount);
    uint64_t v4 = (uint64_t *)a1[8];
    uint64_t v5 = *v4;
    if (0xCCCCCCCCCCCCCCCDLL * ((v4[2] - *v4) >> 4) < ChildCount)
    {
      if (ChildCount > 0x333333333333333) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v6 = v4[1];
      *(void *)&v60[8] = v4 + 2;
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(ChildCount);
      v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0] + v6 - v5;
      v59.__r_.__value_.__r.__words[2] = v59.__r_.__value_.__l.__size_;
      *(void *)unint64_t v60 = v59.__r_.__value_.__r.__words[0] + 80 * v7;
      std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__swap_out_circular_buffer(v4, &v59);
      std::__split_buffer<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData> &>::~__split_buffer((uint64_t)&v59);
    }
    REEntityGetChildren();
    uint64_t v53 = a1;
    if (ChildCount)
    {
      uint64_t v8 = 0;
      char v9 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 4);
      do
      {
        uint64_t v10 = (void *)*((void *)v58[0] + v8);
        uint64_t Name = REEntityGetName();
        MEMORY[0x2455CF810](&v59, Name);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetChild((uint64_t *)&v56, v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v59);
        if ((v59.__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v59.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v56)
          || !realityio::isScene((realityio *)&v56, v12))
        {
          goto LABEL_74;
        }
        LOWORD(v59.__r_.__value_.__l.__data_) = 0;
        *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = 0u;
        memset(v60, 0, 32);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(void *)&v60[40] = 0;
        uint64_t v61 = 0;
        v59.__r_.__value_.__s.__data_[0] = 1;
        realityio::getSceneName((realityio *)&v56, (std::string *)&v65);
        if ((v60[7] & 0x80000000) != 0) {
          operator delete((void *)v59.__r_.__value_.__l.__size_);
        }
        *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = v65;
        *(void *)unint64_t v60 = v66;
        std::string::size_type size = v56.__r_.__value_.__l.__size_;
        if (!v56.__r_.__value_.__l.__size_
          || (uint64_t v15 = *(void *)(v56.__r_.__value_.__l.__size_ + 56), (v15 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v56.__r_.__value_.__l.__size_, v13);
          uint64_t v15 = *(void *)(size + 56);
        }
        v59.__r_.__value_.__s.__data_[1] = (v15 & 0x40) != 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v56, &v65);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v60[32], (int *)&v65);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v60[36]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        uint64_t v16 = (void *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v65);
        std::string::basic_string[abi:ne180100]<0>(v16, "memory:");
        std::string::basic_string[abi:ne180100]<0>(v63, ".rescene");
        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v56);
        if ((*(void *)v17 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t EmptyString = (const void **)((*(void *)v17 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v65, EmptyString, (uint64_t)&v62);
        if ((v64 & 0x80u) == 0) {
          uint64_t v19 = (const std::string::value_type *)v63;
        }
        else {
          uint64_t v19 = (const std::string::value_type *)v63[0];
        }
        if ((v64 & 0x80u) == 0) {
          std::string::size_type v20 = v64;
        }
        else {
          std::string::size_type v20 = (std::string::size_type)v63[1];
        }
        uint64_t v21 = std::string::append(&v62, v19, v20);
        std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
        *(void *)unint64_t v68 = v21->__r_.__value_.__l.__size_;
        *(void *)&v68[7] = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
        char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if ((char)v64 < 0) {
          operator delete(v63[0]);
        }
        if (SBYTE7(v66) < 0) {
          operator delete((void *)v65);
        }
        if ((v60[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v60[8]);
        }
        *(void *)&v60[8] = v22;
        *(void *)&v60[16] = *(void *)v68;
        *(void *)&v60[23] = *(void *)&v68[7];
        v60[31] = v23;
        *(void *)&long long v65 = v10;
        if (v10)
        {
          RERetain();
          uint64_t v24 = v65;
        }
        else
        {
          uint64_t v24 = 0;
        }
        uint64_t v25 = v61;
        if (v61 != v24)
        {
          uint64_t v61 = v24;
          *(void *)&long long v65 = v25;
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v65);
        if ((v60[7] & 0x80000000) != 0)
        {
          if (v59.__r_.__value_.__r.__words[2])
          {
LABEL_42:
            uint64_t v26 = RESceneCreate();
            if (*(void *)&v60[40]) {
              RERelease();
            }
            *(void *)&v60[40] = v26;
            if (v26)
            {
              v63[0] = v10;
              long long v66 = 0u;
              long long v67 = 0u;
              long long v65 = 0u;
              std::deque<REEntity *>::push_back(&v65, v63);
              while (*((void *)&v67 + 1))
              {
                uint64_t v27 = *(void *)(*(void *)(*((void *)&v65 + 1)
                                            + (((unint64_t)v67 >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * (v67 & 0x1FF));
                *(void *)&long long v67 = v67 + 1;
                --*((void *)&v67 + 1);
                if ((unint64_t)v67 >= 0x400)
                {
                  operator delete(**((void ***)&v65 + 1));
                  *((void *)&v65 + 1) += 8;
                  *(void *)&long long v67 = v67 - 512;
                }
                MEMORY[0x2455CD140](v27, 1);
                uint64_t v28 = REEntityGetChildCount();
                if (v28)
                {
                  for (uint64_t i = 0; i != v28; ++i)
                  {
                    v62.__r_.__value_.__r.__words[0] = REEntityGetChild();
                    std::deque<REEntity *>::push_back(&v65, &v62);
                  }
                }
              }
              std::deque<unsigned long>::~deque[abi:ne180100](&v65);
              RESceneAddEntity();
              uint64_t v26 = *(void *)&v60[40];
            }
            uint64_t v30 = *(void *)(v53[2] + 40);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v54, &v60[32]);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v55, &v60[36]);
            uint64_t v31 = *(void *)(v30 + 16);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v68, &v54);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v68[4], &v55);
            if (*(void *)(v31 + 96))
            {
              Text = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v68);
              uint64_t v33 = *(void *)(v31 + 96);
              *(void *)&long long v65 = v26;
              v63[0] = Text;
              v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
              if (!v33) {
                std::__throw_bad_function_call[abi:ne180100]();
              }
              (*(void (**)(uint64_t, long long *, void **, std::string *))(*(void *)v33 + 48))(v33, &v65, v63, &v62);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v68);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
          }
        }
        else if (v60[7])
        {
          goto LABEL_42;
        }
        long long v34 = (uint64_t *)v53[8];
        unint64_t v35 = v34[1];
        unint64_t v36 = v34[2];
        if (v35 >= v36)
        {
          unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v35 - *v34) >> 4);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0x333333333333333) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v36 - *v34) >> 4);
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x199999999999999) {
            unint64_t v41 = 0x333333333333333;
          }
          else {
            unint64_t v41 = v39;
          }
          *(void *)&long long v67 = v34 + 2;
          if (v41) {
            unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(v41);
          }
          else {
            uint64_t v42 = 0;
          }
          uint64_t v43 = v41 + 80 * v38;
          *(void *)&long long v65 = v41;
          *((void *)&v65 + 1) = v43;
          *((void *)&v66 + 1) = v41 + 80 * v42;
          std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::construct[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v43, (uint64_t)&v59);
          *(void *)&long long v66 = v43 + 80;
          std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__swap_out_circular_buffer(v34, &v65);
          uint64_t v37 = v34[1];
          std::__split_buffer<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData> &>::~__split_buffer((uint64_t)&v65);
        }
        else
        {
          std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::construct[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v34[1], (uint64_t)&v59);
          uint64_t v37 = v35 + 80;
          v34[1] = v37;
        }
        v34[1] = v37;
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v61);
        realityio::WrappedRERef<REScene *>::~WrappedRERef(&v60[40]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v60[32]);
        if ((v60[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v60[8]);
        }
        if ((v60[7] & 0x80000000) != 0) {
          operator delete((void *)v59.__r_.__value_.__l.__size_);
        }
LABEL_74:
        if ((v57 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56.__r_.__value_.__r.__words[2]);
        if (v56.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v56.__r_.__value_.__l.__size_);
        }
        ++v8;
      }
      while (v8 != ChildCount);
    }
    if (v58[0])
    {
      v58[1] = v58[0];
      operator delete(v58[0]);
    }
  }
  else
  {
    std::mutex::lock((std::mutex *)(v2 + 304));
    uint64_t v45 = *(void *)(v2 + 280);
    for (uint64_t j = *(void *)(v2 + 288); j != v45; std::allocator<realityio::ImportedScene>::destroy[abi:ne180100](v2 + 296, j))j -= 80;
    *(void *)(v2 + 288) = v45;
    std::string::size_type v46 = a1[3];
    uint64_t v47 = (char *)REEntityGetName();
    std::string::basic_string[abi:ne180100]<0>(&v65, v47);
    realityio::getSceneName((realityio *)(a1 + 4), &v56);
    realityio::ImportedScene::ImportedScene(&v59, 0, v46, 0, &v65, (long long *)&v56, 1);
    unint64_t v48 = *(void *)(v2 + 288);
    if (v48 >= *(void *)(v2 + 296))
    {
      uint64_t v51 = std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>((uint64_t *)(v2 + 280), (uint64_t)&v59);
      int v52 = v60[47];
      *(void *)(v2 + 288) = v51;
      if (v52 < 0) {
        operator delete(*(void **)&v60[24]);
      }
    }
    else
    {
      *(unsigned char *)unint64_t v48 = v59.__r_.__value_.__s.__data_[0];
      *(_OWORD *)(v48 + 8) = *(_OWORD *)&v59.__r_.__value_.__r.__words[1];
      *(_OWORD *)&v59.__r_.__value_.__r.__words[1] = 0u;
      uint64_t v49 = *(void *)&v60[16];
      *(_OWORD *)(v48 + 24) = *(_OWORD *)v60;
      *(void *)(v48 + 40) = v49;
      memset(v60, 0, 24);
      uint64_t v50 = *(void *)&v60[40];
      *(_OWORD *)(v48 + 48) = *(_OWORD *)&v60[24];
      *(void *)(v48 + 64) = v50;
      memset(&v60[24], 0, 24);
      *(unsigned char *)(v48 + 72) = v61;
      *(void *)(v2 + 288) = v48 + 80;
    }
    if ((v60[23] & 0x80000000) != 0) {
      operator delete(*(void **)v60);
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v59.__r_.__value_.__r.__words[2]);
    realityio::WrappedRERef<void *>::~WrappedRERef(&v59.__r_.__value_.__l.__size_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SBYTE7(v66) < 0) {
      operator delete((void *)v65);
    }
    std::mutex::unlock((std::mutex *)(v2 + 304));
  }
}

void sub_23F5FB3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,void *a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a32);
  realityio::WrappedRERef<void *>::~WrappedRERef(&a31);
  if (a25 < 0) {
    operator delete(a20);
  }
  if (*(char *)(v52 - 153) < 0) {
    operator delete(*(void **)(v52 - 176));
  }
  std::mutex::unlock(v51);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    RERetain();
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 40), (_DWORD *)(a2 + 40));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 44), (_DWORD *)(a2 + 44));
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void *std::__function::__alloc_func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[6];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v3 = a1[4];
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }

  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 2);
}

void realityio::getSceneName(realityio *this@<X0>, std::string *a2@<X8>)
{
  v10[2] = *MEMORY[0x263EF8340];
  v10[1] = 0;
  uint64_t v5 = (unint64_t *)MEMORY[0x263F90528];
  unint64_t v6 = atomic_load(MEMORY[0x263F90528]);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 352), (pxrInternal__aapl__pxrReserved__::VtValue *)v10) & 1) == 0)
  {
    unint64_t v7 = atomic_load(v5);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey((uint64_t *)__p, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 352));
    pxrInternal__aapl__pxrReserved__::VtValue::operator=(v10, __p);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::VtValue::GetWithDefault<std::string>(v10, (uint64_t)__p, a2);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v10);
}

void sub_23F5FB890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t realityio::isScene(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  char IsValid = (pxrInternal__aapl__pxrReserved__::UsdGeomXformable *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this);
  if (!IsValid) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(IsValid);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()) {
    return 0;
  }
  realityio::getSceneName(this, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(this, (uint64_t)v8);
    uint64_t isSceneLibrary = realityio::isSceneLibrary((realityio *)v8, v5);
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
    if (v9) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t isSceneLibrary = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_15:
    }
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return isSceneLibrary;
}

void sub_23F5FB9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *realityio::ImportedScene::ImportedScene(std::string *a1, uint64_t a2, std::string::size_type a3, std::string::size_type a4, long long *a5, long long *a6, std::string::value_type a7)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1->__r_.__value_.__l.__size_ = a3;
  if (a3) {
    RERetain();
  }
  a1->__r_.__value_.__r.__words[2] = a4;
  if (a4) {
    RERetain();
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1 + 1, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v12 = *a5;
    a1[1].__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&a1[1].__r_.__value_.__l.__data_ = v12;
  }
  uint64_t v13 = a1 + 2;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v14 = *a6;
    a1[2].__r_.__value_.__r.__words[2] = *((void *)a6 + 2);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  a1[3].__r_.__value_.__s.__data_[0] = a7;
  return a1;
}

void sub_23F5FBAA8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*v4);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3);
  realityio::WrappedRERef<void *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::GetWithDefault<std::string>(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    uint64_t v6 = a1[1];
    if ((v6 & 4) != 0) {
      a2 = (*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    }
    else {
      a2 = *a1;
    }
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v8 = *(const std::string::value_type **)a2;
    std::string::size_type v9 = *(void *)(a2 + 8);
    std::string::__init_copy_ctor_external(a3, v8, v9);
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
}

uint64_t *std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t result = (uint64_t *)realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData::DeferredChildData(v6 + v7 - 80, v4 + v7 - 80);
      v7 -= 80;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void sub_23F5FBC28(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 80)
    std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::destroy[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a1);
}

uint64_t realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData::DeferredChildData(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 64) = v6;
  if (v6) {
    RERetain();
  }
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v7;
  if (v7) {
    RERetain();
  }
  return a1;
}

void sub_23F5FBDCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::allocator_traits<std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::construct[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,void>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 32) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return result;
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F33CB90;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 40));
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F33CB90;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 40));
  uint64_t v2 = (void **)(a1 + 8);
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v2);

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_26F33CB90;
  std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23F5FBFD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33CB90;
  return std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 40));
  uint64_t v2 = v1;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::destroy_deallocate(void **a1)
{
  uint64_t v2 = a1 + 1;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(a1 + 5);
  uint64_t v3 = v2;
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100](&v3);

  operator delete(a1);
}

void std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::operator()(void *a1)
{
  uint64_t v45 = a1[4];
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  long long v56 = 0uLL;
  unint64_t v57 = 0;
  uint64_t v53 = 0;
  int v54 = 0;
  int v55 = 0;
  if (v1 == v2) {
    goto LABEL_66;
  }
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((v1 - v2) >> 4);
  if (v3 >> 61) {
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v53 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v55, v3);
  int v54 = v53;
  int v55 = (char *)&v53[v5];
  if (v1 == v2)
  {
LABEL_66:
    uint64_t v11 = 0;
    goto LABEL_67;
  }
  uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v3);
  uint64_t v8 = v6;
  uint64_t v9 = 0;
  if (v3 <= 1) {
    unint64_t v10 = 1;
  }
  else {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v1 - v2) >> 4);
  }
  std::string::size_type v46 = &v6[8 * v7];
  unint64_t v47 = -1;
  uint64_t v11 = v6;
  long long v12 = (uint64_t *)v45;
  do
  {
    uint64_t Name = (realityio *)REEntityGetName();
    uint64_t v14 = a1[1];
    if (!*(unsigned char *)(v14 + 80 * v9)) {
      goto LABEL_59;
    }
    uint64_t v15 = (char *)Name;
    uint64_t v16 = v14 + 80 * v9;
    if (*(char *)(v16 + 31) < 0)
    {
      if (*(void *)(v16 + 16))
      {
LABEL_11:
        uint64_t v17 = REAssetManagerSceneAssetCreate();
        if (v17)
        {
          realityio::Builder::addAsset(v12, v17, 0);
          uint64_t v18 = a1[1] + 80 * v9;
          uint64_t v19 = (v8 - v11) >> 3;
          uint64_t v20 = v47;
          if (*(unsigned char *)(v18 + 1)) {
            uint64_t v20 = (v8 - v11) >> 3;
          }
          unint64_t v47 = v20;
          uint64_t v21 = *(void *)(v18 + 64);
          if (v8 >= v46)
          {
            unint64_t v23 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if ((v46 - v11) >> 2 > v23) {
              unint64_t v23 = (v46 - v11) >> 2;
            }
            if ((unint64_t)(v46 - v11) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v23;
            }
            if (v24) {
              unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v24);
            }
            else {
              uint64_t v25 = 0;
            }
            uint64_t v26 = (char *)(v24 + 8 * v19);
            *(void *)uint64_t v26 = v21;
            uint64_t v27 = v26 + 8;
            while (v8 != v11)
            {
              uint64_t v28 = *((void *)v8 - 1);
              v8 -= 8;
              *((void *)v26 - 1) = v28;
              v26 -= 8;
            }
            std::string::size_type v46 = (char *)(v24 + 8 * v25);
            if (v11) {
              operator delete(v11);
            }
            uint64_t v11 = v26;
            uint64_t v8 = v27;
            long long v12 = (uint64_t *)v45;
          }
          else
          {
            *(void *)uint64_t v8 = v21;
            v8 += 8;
          }
          char v29 = v54;
          if (v54 >= (uint64_t *)v55)
          {
            uint64_t v31 = v54 - v53;
            if ((unint64_t)(v31 + 1) >> 61) {
              std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = (v55 - (char *)v53) >> 2;
            if (v32 <= v31 + 1) {
              unint64_t v32 = v31 + 1;
            }
            if ((unint64_t)(v55 - (char *)v53) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33) {
              long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v55, v33);
            }
            else {
              long long v34 = 0;
            }
            unint64_t v35 = (uint64_t *)&v34[8 * v31];
            *unint64_t v35 = v17;
            uint64_t v30 = v35 + 1;
            uint64_t v37 = v53;
            unint64_t v36 = v54;
            if (v54 != v53)
            {
              do
              {
                uint64_t v38 = *--v36;
                *--unint64_t v35 = v38;
              }
              while (v36 != v37);
              unint64_t v36 = v53;
            }
            uint64_t v53 = v35;
            int v54 = v30;
            int v55 = &v34[8 * v33];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            uint64_t *v54 = v17;
            uint64_t v30 = v29 + 1;
          }
          int v54 = v30;
          std::string::size_type v39 = *(void *)(a1[1] + 80 * v9 + 64);
          std::string::basic_string[abi:ne180100]<0>(v48, v15);
          realityio::ImportedScene::ImportedScene(buf, 1, v39, v17, (long long *)v48, (long long *)(a1[1] + 80 * v9 + 32), *(unsigned char *)(a1[1] + 80 * v9 + 1));
          uint64_t v40 = *((void *)&v56 + 1);
          if (*((void *)&v56 + 1) >= v57)
          {
            *((void *)&v56 + 1) = std::vector<realityio::ImportedScene>::__push_back_slow_path<realityio::ImportedScene>((uint64_t *)&v56, (uint64_t)buf);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
            **((unsigned char **)&v56 + 1) = buf[0].__r_.__value_.__s.__data_[0];
            *(_OWORD *)(v40 + 8) = *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1];
            *(_OWORD *)&buf[0].__r_.__value_.__r.__words[1] = 0u;
            std::string::size_type v41 = buf[1].__r_.__value_.__r.__words[2];
            *(_OWORD *)(v40 + 24) = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
            *(void *)(v40 + 40) = v41;
            memset(&buf[1], 0, sizeof(std::string));
            uint64_t v42 = __p[2];
            *(_OWORD *)(v40 + 48) = *(_OWORD *)__p;
            *(void *)(v40 + 64) = v42;
            memset(__p, 0, sizeof(__p));
            *(unsigned char *)(v40 + 72) = v52;
            *((void *)&v56 + 1) = v40 + 80;
          }
          if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf[1].__r_.__value_.__l.__data_);
          }
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&buf[0].__r_.__value_.__r.__words[2]);
          realityio::WrappedRERef<void *>::~WrappedRERef(&buf[0].__r_.__value_.__l.__size_);
          if (v49 < 0) {
            operator delete(v48[0]);
          }
          RERelease();
        }
        goto LABEL_59;
      }
    }
    else if (*(unsigned char *)(v16 + 31))
    {
      goto LABEL_11;
    }
    std::string::size_type v22 = *(NSObject **)(realityio::logObjects(Name) + 24);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_23F4EA000, v22, OS_LOG_TYPE_DEFAULT, "Invalid empty scene name, skipping.", (uint8_t *)buf, 2u);
    }
LABEL_59:
    ++v9;
  }
  while (v9 != v10);
  if (v47 < (v8 - v11) >> 3)
  {
    uint64_t v43 = *(void *)(*(void *)(a1[6] + 16) + 128);
    if (v43)
    {
      buf[0].__r_.__value_.__r.__words[0] = a1[5];
      v48[0] = v11;
      uint64_t v59 = (v8 - v11) >> 3;
      unint64_t v60 = v53;
      unint64_t v58 = v47;
      (*(void (**)(uint64_t, std::string *, void **, uint64_t **, uint64_t *, unint64_t *))(*(void *)v43 + 48))(v43, buf, v48, &v60, &v59, &v58);
    }
  }
  uint64_t v44 = 72;
  do
  {
    REEntitySetParent();
    v44 += 80;
    --v10;
  }
  while (v10);
LABEL_67:
  std::mutex::lock((std::mutex *)(v45 + 304));
  std::vector<realityio::ImportedScene>::__vdeallocate((void **)(v45 + 280));
  *(_OWORD *)(v45 + 280) = v56;
  *(void *)(v45 + 296) = v57;
  unint64_t v57 = 0;
  long long v56 = 0uLL;
  std::mutex::unlock((std::mutex *)(v45 + 304));
  if (v53)
  {
    int v54 = v53;
    operator delete(v53);
  }
  if (v11) {
    operator delete(v11);
  }
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_23F5FC648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::string::size_type v41 = *(void **)(v39 - 168);
  if (v41)
  {
    *(void *)(v39 - 160) = v41;
    operator delete(v41);
  }
  if (v38) {
    operator delete(v38);
  }
  *(void *)(v39 - 168) = v39 - 144;
  std::vector<realityio::ImportedScene>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 168));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SceneAssetBuilder::run(realityio::Inputs *)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::vector((void *)a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    RERetain();
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

void sub_23F5FC78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData,std::allocator<realityio::SceneAssetBuilder::run(realityio::Inputs *)::DeferredChildData>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SceneAssetBuilder::run(realityio::Inputs *)::Dummy *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33CC10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::SceneAssetBuilder::run(realityio::Inputs *)::Dummy *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33CC10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::SceneAssetBuilder::run(realityio::Inputs *)::Dummy *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void realityio::DetailedError::makeFromCFError(uint64_t err@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = err;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    std::string v16 = *(std::string *)a2;
    if (!err) {
      goto LABEL_17;
    }
  }
  uint64_t v7 = (__CFString *)CFErrorCopyDescription((CFErrorRef)v5);
  realityio::CFStringCopyUTF8String(v7, (uint64_t)v13);
  if (v13[0])
  {
    std::operator+<char>();
    uint64_t v8 = (v12 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
    uint64_t v9 = (v12 & 0x80u) == 0 ? (void *)v12 : __p[1];
    std::string::append(&v16, v8, (std::string::size_type)v9);
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int Code = CFErrorGetCode((CFErrorRef)v5);
  CFRelease((CFTypeRef)v5);
  uint64_t v5 = Code;
  if (v13[0] && v15 < 0) {
    operator delete(v14);
  }
LABEL_17:
  realityio::DetailedError::DetailedError(a4, v5, a3, (long long *)&v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_23F5FC94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16 && a22 < 0) {
    operator delete(a17);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

realityio::MeshComponentBuilder *realityio::MeshComponentBuilder::MeshComponentBuilder(realityio::MeshComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "MeshComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kMeshComponentBuilderIdentifier);
  realityio::generateMeshAssetBuilderDirtyStageSubscription(&v5);
  v12[0] = &unk_26F33CD08;
  v12[3] = v12;
  v11[0] = &unk_26F33CE18;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F33CC90;
  return this;
}

void sub_23F5FCAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshComponentBuilder::run(uint64_t **this, realityio::Inputs *a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v53, v5, v4);
  uint64_t v50 = 0;
  memset(v48, 0, sizeof(v48));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53))
  {
    uint64_t v6 = *(void *)a2;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, &v45);
    uint64_t v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(v6 + 64, &v45);
    BOOL v8 = (void *)(v6 + 72) != v7 && *(void *)(*(void *)(v6 + 40) + 104 * v7[5] + 24) == (void)v45;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
    if (v8)
    {
      uint64_t EntityGeneratingDataForPrim = realityio::internal::PrimToEntityMap::getEntityGeneratingDataForPrim((realityio::internal::PrimToEntityMap *)(*(void *)a2 + 16), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v53);
      uint64_t v11 = EntityGeneratingDataForPrim;
      if (EntityGeneratingDataForPrim)
      {
        if (*(void *)(EntityGeneratingDataForPrim + 72) + *(void *)(EntityGeneratingDataForPrim + 96))
        {
          BOOL isGuide = realityio::isGuide((realityio *)&v53, v10);
          if (!isGuide)
          {
            uint64_t v13 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)isGuide);
            realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v13, (uint64_t)&v45);
            if ((_BYTE)v45)
            {
              *(void *)&buf[0] = v46;
              if (v46)
              {
                RERetain();
                uint64_t v14 = *(void *)&buf[0];
              }
              else
              {
                uint64_t v14 = 0;
              }
            }
            else
            {
              uint64_t v14 = 0;
              *(void *)&buf[0] = 0;
            }
            uint64_t v15 = v48[0];
            if (v48[0] != v14)
            {
              v48[0] = v14;
              *(void *)&buf[0] = v15;
            }
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(buf);
            if (v48[0])
            {
              realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v44, 2034, (uint64_t)this);
              if (*(void *)(v11 + 96) != 1
                || *(void *)(v11 + 72)
                || *(unsigned char *)(*(void *)(*((void *)a2 + 5) + 16) + 272))
              {
                char v16 = 0;
              }
              else if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCone>((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)&v53) & 1) != 0 {
                     || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCapsule>((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)&v53) & 1) != 0)
              }
              {
                char v16 = 1;
              }
              else
              {
                char v16 = pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCylinder>((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)&v53);
              }
              unint64_t v47 = (realityio::MeshAssetBuilder *)realityio::Inputs::assetManager(a2);
              realityio::MeshAssetBuilder::kOutputName(v47);
              BOOL hasValueForKey = realityio::Inputs::hasValueForKey((uint64_t)a2);
              if (hasValueForKey)
              {
                uint64_t v18 = realityio::MeshAssetBuilder::kOutputName((realityio::MeshAssetBuilder *)hasValueForKey);
                realityio::Inputs::_getValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>((uint64_t)a2, v18, (uint64_t)buf);
                if (LOBYTE(buf[0]))
                {
                  uint64_t v19 = **((void **)&buf[0] + 1);
                  uint64_t v20 = *(void *)(*((void *)&buf[0] + 1) + 8);
                  if (v20) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  uint64_t v20 = 0;
                  uint64_t v19 = 0;
                }
                unint64_t v23 = (std::__shared_weak_count *)v48[2];
                v48[1] = v19;
                v48[2] = v20;
                if (v23)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                  uint64_t v19 = v48[1];
                }
                if (v19)
                {
                  char v49 = *(unsigned char *)(*((void *)&buf[0] + 1) + 168);
                  *(void *)&long long v41 = *(void *)(*((void *)&buf[0] + 1) + 176);
                  if ((void)v41)
                  {
                    RERetain();
                    uint64_t v24 = v41;
                  }
                  else
                  {
                    uint64_t v24 = 0;
                  }
                  uint64_t v26 = v50;
                  if (v50 != v24)
                  {
                    uint64_t v50 = v24;
                    *(void *)&long long v41 = v26;
                  }
                  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v41);
                  BOOL v51 = *(void *)(*((void *)&buf[0] + 1) + 80) != 0;
                  long long v41 = 0uLL;
                  uint64_t v42 = 0;
                  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(&v41, *(void *)(*((void *)&buf[0] + 1) + 40), *(void *)(*((void *)&buf[0] + 1) + 48), (uint64_t)(*(void *)(*((void *)&buf[0] + 1) + 48) - *(void *)(*((void *)&buf[0] + 1) + 40)) >> 3);
                  std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate((void **)&v48[3]);
                  *(_OWORD *)&v48[3] = v41;
                  v48[5] = v42;
                  uint64_t v42 = 0;
                  long long v41 = 0uLL;
                  v57[0] = (void **)&v41;
                  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](v57);
                  char v52 = *(unsigned char *)(*((void *)&buf[0] + 1) + 184);
                  *(void *)&long long v41 = REMeshComponentGetComponentType();
                  std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&v41, (uint64_t *)&v41);
                  if (v49 || v51 || v52)
                  {
                    *(void *)&long long v41 = REMeshDeformationComponentGetComponentType();
                    std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&v41, (uint64_t *)&v41);
                    if (v49)
                    {
                      *(void *)&long long v41 = REBlendShapeWeightsComponentGetComponentType();
                      std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&v41, (uint64_t *)&v41);
                    }
                    if (v51)
                    {
                      *(void *)&long long v41 = RESkeletalPoseComponentGetComponentType();
                      std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&v41, (uint64_t *)&v41);
                      *(void *)&long long v41 = RERigComponentGetComponentType();
                      std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&v41, (uint64_t *)&v41);
                    }
                  }
                  uint64_t v27 = (realityio::MeshComponentBuilder *)v48[0];
                  uint64_t v43 = v48[0];
                  if (v48[0]) {
                    uint64_t v27 = (realityio::MeshComponentBuilder *)RERetain();
                  }
                  uint64_t v28 = *((void *)a2 + 5);
                  uint64_t v30 = (std::mutex *)this[2];
                  char v29 = (std::__shared_weak_count *)this[3];
                  if (v29) {
                    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v31 = (const void **)realityio::MeshComponentBuilder::kOutputName(v27);
                  realityio::Outputs::getValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>((uint64_t)&v41, v30, v31);
                  if (v29) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
                  }
                  uint64_t v32 = *((void *)a2 + 6);
                  unint64_t v33 = operator new(0x50uLL);
                  *unint64_t v33 = &unk_26F33CE98;
                  v33[1] = &v47;
                  v33[2] = this;
                  v33[3] = v28;
                  *((unsigned char *)v33 + 32) = v16;
                  v33[5] = a2;
                  v33[6] = v11;
                  v33[7] = &v43;
                  v33[8] = &v41;
                  v33[9] = &v53;
                  v57[3] = (void **)v33;
                  (*(void (**)(uint64_t, void ***))(*(void *)v32 + 16))(v32, v57);
                  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v57);
                  long long v34 = (std::__shared_weak_count *)operator new(0x28uLL);
                  v34->__shared_owners_ = 0;
                  v34->__shared_weak_owners_ = 0;
                  v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33D098;
                  v34[1].__shared_owners_ = 0;
                  v34[1].__vftable = 0;
                  v57[0] = (void **)&v34[1].__vftable;
                  v57[1] = (void **)&v34->__vftable;
                  LOBYTE(v34[1].__vftable) = 1;
                  unint64_t v35 = realityio::WrappedRERef<REAsset *>::operator=(&v34[1].__shared_owners_, &v43);
                  BYTE1(v34[1].__vftable) = v43 != v48[0];
                  uint64_t v37 = (uint64_t)this[2];
                  unint64_t v36 = (std::__shared_weak_count *)this[3];
                  if (v36) {
                    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v38 = (long long *)realityio::MeshComponentBuilder::kOutputName((realityio::MeshComponentBuilder *)v35);
                  realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult> &>(v37, v38, (uint64_t *)v57);
                  if (v36) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v41);
                  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v43);
                }
                else
                {
                  uint64_t v25 = *(NSObject **)(realityio::logObjects((realityio *)v23) + 24);
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(v41) = 0;
                    _os_log_error_impl(&dword_23F4EA000, v25, OS_LOG_TYPE_ERROR, "Stopping operation to set mesh component because mesh asset does not exist", (uint8_t *)&v41, 2u);
                  }
                }
                realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)buf);
              }
              realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v44);
            }
            else
            {
              PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53);
              std::string::size_type v22 = *(id *)(realityio::logObjects((realityio *)PrimPath) + 24);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              {
                uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
                LODWORD(buf[0]) = 136315138;
                *(void *)((char *)buf + 4) = Text;
                _os_log_error_impl(&dword_23F4EA000, v22, OS_LOG_TYPE_ERROR, "Unable to create mesh entity at path (%s) because the entity does not exist.\n", (uint8_t *)buf, 0xCu);
              }
            }
            realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v45);
          }
        }
      }
    }
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v50);
  uint64_t v45 = (void **)&v48[3];
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v45);
  if (v48[2]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v48[2]);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v48);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  uint64_t result = v54;
  if (v54) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  }
  return result;
}

void sub_23F5FD1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v35 - 144);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)&a17);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a19);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a35);
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::PrimToEntityMap::getEntityGeneratingDataForPrim(realityio::internal::PrimToEntityMap *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v7);
  uint64_t v4 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 48, &v7);
  if ((void *)((char *)this + 56) == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *((void *)this + 3) + 104 * v4[5];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  return v5;
}

void sub_23F5FD3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::isGuide(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v11 = MEMORY[0x263F90728] + 16;
  if (!v12
    || (*(unsigned char *)(v12 + 57) & 8) != 0
    || !(*(unsigned int (**)(uint64_t *))(MEMORY[0x263F90728] + 48))(&v11))
  {
    BOOL v4 = 0;
    goto LABEL_12;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetPurposeAttr(&v7, (pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)&v11);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7, (uint64_t)v13);
  if (!v13[0])
  {
    unint64_t v3 = 0;
    goto LABEL_14;
  }
  unint64_t v2 = v14;
  if ((v14 & 7) != 0)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
      unint64_t v3 = v2;
    }
    else {
      unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v13[0])
    {
      unint64_t v2 = v14;
      goto LABEL_17;
    }
LABEL_14:
    if (v16 < 0) {
      operator delete(__p);
    }
    goto LABEL_19;
  }
  unint64_t v3 = v14;
LABEL_17:
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_19:
  unint64_t v6 = atomic_load(MEMORY[0x263F90538]);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
  }
  BOOL v4 = (v3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v6 + 392) & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
LABEL_12:
  MEMORY[0x2455CEED0](&v11);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCone>(pxrInternal__aapl__pxrReserved__::UsdGeomCone *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::IsA<pxrInternal__aapl__pxrReserved__::UsdGeomCapsule>(pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType(a1);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();

  return pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
}

uint64_t realityio::Outputs::getValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>(uint64_t a1, std::mutex *a2, const void **a3)
{
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>((uint64_t)v8, a2, a3);
  if (v8[0])
  {
    long long v4 = v9;
    if (*((void *)&v9 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
      *(unsigned char *)a1 = 1;
      *(_OWORD *)(a1 + 8) = v4;
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
    else
    {
      *(unsigned char *)a1 = 1;
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = 0;
    }
  }
  else
  {
    long long v6 = v9;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v7, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    }
    else {
      std::string v7 = v10;
    }
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v6;
    *(std::string *)(a1 + 24) = v7;
  }
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_23F5FD6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::MeshComponentBuilder::kOutputName(realityio::MeshComponentBuilder *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40640, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40640))
  {
    operator new();
  }
  return _MergedGlobals_16;
}

void sub_23F5FD784(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C40640);
  _Unwind_Resume(a1);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult> &>(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v8 = *a3;
  std::string v7 = (std::__shared_weak_count *)a3[1];
  long long v9 = operator new(0x30uLL);
  std::string v10 = v9;
  v9[1] = 0;
  v9[2] = 0;
  *long long v9 = &unk_26F33D0E8;
  uint64_t v11 = v9 + 3;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    void v9[3] = &unk_26F33D138;
    void v9[4] = v8;
    v9[5] = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    void v9[3] = &unk_26F33D138;
    void v9[4] = v8;
    v9[5] = 0;
  }
  unint64_t v14 = a2;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
  uint64_t v13 = (std::__shared_weak_count *)v12[8];
  v12[7] = (uint64_t)v11;
  v12[8] = (uint64_t)v10;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F5FD8F0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void anonymous namespace'::MaterialsDataForMesh::~MaterialsDataForMesh(_anonymous_namespace_::MaterialsDataForMesh *this)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 8);
  unint64_t v3 = (void **)((char *)this + 32);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)this + 1);
}

void realityio::MeshComponentBuilder::clear(realityio::MeshComponentBuilder *this, realityio::Inputs *a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 6);
  uint64_t v8 = a2;
  v9[0] = &unk_26F33D168;
  v9[1] = &v8;
  v9[2] = this;
  void v9[3] = v9;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v9);
  long long v4 = (realityio::MeshComponentBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v9);
  uint64_t v6 = *((void *)this + 2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v7 = (const void **)realityio::MeshComponentBuilder::kOutputName(v4);
  std::mutex::lock((std::mutex *)(v6 + 64));
  if (v6 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v6 + 40, v7))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v6 + 40), v7); {
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v6, (unsigned __int8 *)v7);
  }
  std::mutex::unlock((std::mutex *)(v6 + 64));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F5FDAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::mutex::unlock(v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

void realityio::MeshComponentBuilder::~MeshComponentBuilder(realityio::MeshComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void *std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F5FDB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<realityio::WrappedRERef<REAsset *>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<realityio::WrappedRERef<REAsset *>>,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(a2 + v7);
      *(void *)(a4 + v7) = v8;
      if (v8) {
        RERetain();
      }
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_23F5FDC4C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33CD08;
  return result;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33CD08;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v21) = 0;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v21, &__p);
  uint64_t v6 = v25;
  uint64_t v21 = __p;
  std::string::size_type v22 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v21);
  uint64_t v7 = (realityio::MeshAssetBuilder *)v22;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v8 = realityio::MeshAssetBuilder::kOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v19) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 96), (int *)&v19, &__p);
  uint64_t v10 = v25;
  uint64_t v19 = __p;
  uint64_t v20 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClass");
  unint64_t v11 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  MEMORY[0x2455CF810](&v23, "RealityKitComponent");
  LODWORD(v16) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>((uint64_t)&__p, (uint64_t *)(v11 + 16), &v23, (int *)&v16, &v17);
  uint64_t v13 = v17;
  uint64_t v12 = v18;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v26 < 0) {
    operator delete(__p);
  }
  uint64_t v17 = v13;
  uint64_t v18 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  MEMORY[0x2455CF810](&v16, "ModelSortGroupComponentBuilderOutput");
  MEMORY[0x2455CF810](&v15, "RealityKitComponent");
  unint64_t v14 = (std::__shared_weak_count *)operator new(0x50uLL);
  v14->__shared_owners_ = 0;
  v14->__shared_weak_owners_ = 0;
  v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F334658;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ModelSortGroupComponentBuilderOutput");
  uint64_t v23 = v15;
  uint64_t v15 = 0;
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(&v14[1].__vftable, (uint64_t)&__p, &v16, &v23, 1);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v26 < 0) {
    operator delete(__p);
  }
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __p = &v14[1];
  uint64_t v25 = v14;
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, &__p);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F5FE040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x48uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23F5FE250(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F33CD78;
  std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::construct[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23F5FE2C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33CD78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33CD78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor>::construct[abi:ne180100]<realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F5FE3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F33CDC8;
  return a1;
}

void sub_23F5FE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::~ConnectionOnEntityGeneratingPrimOnlyInputDescriptor(realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void *realityio::ConnectionOnEntityGeneratingPrimOnlyInputDescriptor::resolvedPrimPaths@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((void *)((char *)a2 + 56) != result
    && *(void *)(*((void *)a2 + 3) + 104 * result[5] + 24) == *(void *)a1)
  {
    return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)a1, a1);
  }
  return result;
}

void sub_23F5FE5A0(_Unwind_Exception *a1)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, int *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x50uLL);
  uint64_t result = std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_23F5FE61C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::ChildPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,std::allocator<realityio::ChildPrimInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F334658;
  std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality>((uint64_t)&v7, a1 + 3, a2, a3, a4, a5);
  return a1;
}

void sub_23F5FE698(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::ChildPrimInputDescriptor>::construct[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v6 = *a5;
  *a5 = 0;
  realityio::ChildPrimInputDescriptor::ChildPrimInputDescriptor(a2, (uint64_t)__p, a4, &v6, *a6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F5FE738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33CE18;
  return result;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33CE18;
}

void std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::MeshComponentBuilder::kOutputName((realityio::MeshComponentBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 112), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F5FE8E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshComponentBuilder::MeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::Inputs::_getValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    uint64_t v44 = std::__shared_weak_count::lock(v6);
    if (v44) {
      uint64_t v43 = *(void *)(a1 + 16);
    }
  }
  MEMORY[0x2455CF830](&v45, a2);
  int v7 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a1 + 8), &v43);
  if (v7 == v8)
  {
    std::operator+<char>();
    uint64_t v20 = std::string::append(&v41, ") at prim path (");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v23 = *(char *)(String + 23);
    if (v23 >= 0) {
      uint64_t v24 = (const std::string::value_type *)String;
    }
    else {
      uint64_t v24 = *(const std::string::value_type **)String;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v25 = *(void *)(String + 8);
    }
    char v26 = std::string::append(&v42, v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v46[0].__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46[0].__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(v46, ")");
    goto LABEL_22;
  }
  uint64_t v9 = 1;
  uint64_t v10 = v7;
  do
  {
    uint64_t v10 = (void *)*v10;
    --v9;
  }
  while (v10 != v8);
  if (v9)
  {
    std::operator+<char>();
    unint64_t v11 = std::string::append(&v41, ") at prim path (");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    uint64_t v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 32));
    int v14 = *(char *)(v13 + 23);
    if (v14 >= 0) {
      uint64_t v15 = (const std::string::value_type *)v13;
    }
    else {
      uint64_t v15 = *(const std::string::value_type **)v13;
    }
    if (v14 >= 0) {
      std::string::size_type v16 = *(unsigned __int8 *)(v13 + 23);
    }
    else {
      std::string::size_type v16 = *(void *)(v13 + 8);
    }
    uint64_t v17 = std::string::append(&v42, v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v46[0].__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46[0].__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = std::string::append(v46, ") because more than one connected builder produced the same output type");
LABEL_22:
    long long v28 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v19->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v28;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v47, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v47;
    uint64_t v29 = *(void *)&v47[24];
    *(void *)(a3 + 24) = *(void *)&v47[16];
    *(void *)(a3 + 32) = v29;
    *(void *)(a3 + 39) = *(void *)&v47[31];
    LOBYTE(v29) = v47[39];
    memset(&v47[16], 0, 24);
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v29;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v46[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    goto LABEL_52;
  }
  uint64_t v30 = v7[5];
  uint64_t v32 = *(std::mutex **)(v30 + 16);
  uint64_t v31 = *(std::__shared_weak_count **)(v30 + 24);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v7[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t EmptyString = (const void **)((v7[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
  }
  realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(v32, EmptyString, (uint64_t)v47);
  int v34 = v47[0];
  if (v47[0])
  {
    uint64_t v36 = *(void *)&v47[8];
    uint64_t v35 = *(std::__shared_weak_count **)&v47[16];
    if (*(void *)&v47[16])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v47[16] + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      __p[0] = 1;
      *(void *)&__p[8] = v36;
      *(void *)&__p[16] = v35;
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    else
    {
      __p[0] = 1;
      *(void *)&__p[8] = *(void *)&v47[8];
      *(void *)&__p[16] = 0;
    }
  }
  else
  {
    *(_OWORD *)&v46[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v47[8];
    if (SHIBYTE(v48) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v46[0].__r_.__value_.__r.__words[2], *(const std::string::value_type **)&v47[24], *(std::string::size_type *)&v47[32]);
    }
    else
    {
      *(_OWORD *)&v46[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v47[24];
      v46[1].__r_.__value_.__l.__size_ = v48;
    }
    __p[0] = 0;
    *(_OWORD *)&__p[8] = *(_OWORD *)&v46[0].__r_.__value_.__l.__data_;
    long long v39 = *(_OWORD *)&v46[0].__r_.__value_.__r.__words[2];
    std::string::size_type size = v46[1].__r_.__value_.__l.__size_;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v47);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v34)
  {
    long long v37 = *(_OWORD *)&__p[8];
    *(void *)&__p[8] = 0;
    *(void *)&__p[16] = 0;
    *(unsigned char *)a3 = 1;
    *(_OWORD *)(a3 + 8) = v37;
  }
  else
  {
    *(_OWORD *)unint64_t v47 = *(_OWORD *)&__p[8];
    if (SHIBYTE(size) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v47[16], (const std::string::value_type *)v39, *((std::string::size_type *)&v39 + 1));
    }
    else
    {
      *(_OWORD *)&v47[16] = v39;
      *(void *)&v47[32] = size;
    }
    *(unsigned char *)a3 = 0;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v47;
    *(_OWORD *)(a3 + 24) = *(_OWORD *)&v47[16];
    *(void *)(a3 + 40) = *(void *)&v47[32];
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
LABEL_52:
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
}

void sub_23F5FED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((a30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  _Unwind_Resume(a1);
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>(std::mutex *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 1;
  std::mutex::lock(a1 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a1->__m_.__opaque[32], a2);
  if (&a1->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    unint64_t v11 = std::string::append(&v14, "\" does not exist in the builder outputs");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v17, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a3 + 8) = v17;
    uint64_t v13 = v19;
    *(void *)(a3 + 24) = v18;
    *(void *)(a3 + 32) = v13;
    *(void *)(a3 + 39) = *(void *)((char *)&v19 + 7);
    LOBYTE(v13) = HIBYTE(v19);
    long long v19 = 0uLL;
    uint64_t v18 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v13;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 56);
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_23F5FEF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void std::vector<realityio::WrappedRERef<REAsset *>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        uint64_t v3 = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v3 - 1);
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>(uint64_t a1, std::mutex *a2, const void **a3)
{
  v22[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = a2 + 1;
  std::mutex::lock(a2 + 1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&a2->__m_.__opaque[32], a3);
  if (&a2->__m_.__opaque[40] == (char *)v7)
  {
    std::operator+<char>();
    unint64_t v11 = std::string::append(&v16, "\" does not exist in the builder outputs");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v18 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v19, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a1 + 8) = v19;
    uint64_t v13 = v20;
    v22[0] = v21;
    *(void *)((char *)v22 + 7) = *(void *)((char *)&v21 + 7);
    char v14 = HIBYTE(v21);
    long long v21 = 0uLL;
    uint64_t v20 = 0;
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 39) = *(void *)((char *)v22 + 7);
    uint64_t v15 = v22[0];
    *(void *)(a1 + 24) = v13;
    *(void *)(a1 + 32) = v15;
    *(unsigned char *)(a1 + 47) = v14;
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v7 + 56);
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v9;
  }
  std::mutex::unlock(v6);
}

void sub_23F5FF144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = &unk_26F33CE98;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *((void *)v2 + 9) = *(void *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33CE98;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 72) = *(void *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v55[19] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v38 = *(uint64_t **)(a1 + 16);
    uint64_t ChildCount = REEntityGetChildCount();
    uint64_t v3 = ChildCount;
    uint64_t v4 = *(void *)(a1 + 64);
    if (*(unsigned char *)v4 && (uint64_t v5 = *(void *)(v4 + 8)) != 0 && *(unsigned char *)(v5 + 1))
    {
      realityio::WrappedRERef<REAsset *>::operator=(*(uint64_t **)(a1 + 56), (uint64_t *)(v5 + 8));
      uint64_t v6 = **(void ***)(a1 + 56);
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v44 = &v45;
      if (ChildCount)
      {
        uint64_t v7 = 0;
        do
        {
          REEntityGetChild();
          uint64_t Name = (char *)REEntityGetName();
          std::string::basic_string[abi:ne180100]<0>(__p, Name);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v44, (const void **)__p, (uint64_t)__p);
          if (SHIBYTE(v51) < 0) {
            operator delete(__p[0]);
          }
          ++v7;
        }
        while (v3 != v7);
      }
      std::string::basic_string[abi:ne180100]<0>(v41, "usdPrimitiveAxis");
      int v9 = 0;
      uint64_t v10 = (void *)*MEMORY[0x263F8C2B8];
      long long v12 = *(void **)(MEMORY[0x263F8C2B8] + 64);
      uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      while (&v45 != (char **)std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v44, (const void **)v41))
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"usdPrimitiveAxis_", 17);
        std::ostream::operator<<();
        std::stringbuf::str();
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        *(_OWORD *)std::string v41 = v48;
        uint64_t v42 = v49;
        __p[0] = v10;
        *(void **)((char *)__p + *((void *)v10 - 3)) = v12;
        uint64_t v51 = v11;
        char v52 = (void **)(MEMORY[0x263F8C318] + 16);
        if (v54 < 0) {
          operator delete(v53);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x2455D2B30](v55);
        ++v9;
      }
      uint64_t v6 = (void *)REEntityCreate();
      if (v6)
      {
        REEntitySetName();
        REEntitySetParent();
        __p[0] = v6;
        RERetain();
        uint64_t v13 = *(void ***)(a1 + 56);
        char v14 = *v13;
        if (*v13 != __p[0])
        {
          std::__shared_weak_count *v13 = __p[0];
          __p[0] = v14;
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
        RENetworkComponentGetComponentType();
        __p[0] = &unk_26F33CF08;
        char v52 = __p;
        uint64_t v15 = REEntityGetOrAddComponentByClass();
        std::function<void ()(REComponent *)>::operator()((uint64_t)__p, v15);
        RENetworkMarkComponentDirty();
        std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](__p);
        *(void *)&long long v48 = REGroundingShadowComponentGetComponentType();
        uint64_t ComponentType = REMeshSortingComponentGetComponentType();
        char v17 = 0;
        *((void *)&v48 + 1) = ComponentType;
        do
        {
          char v18 = v17;
          if (REEntityGetComponentByClass())
          {
            RERetain();
            REEntityRemoveComponentByClass();
            REEntityAddExistingComponent();
            RERelease();
          }
          char v17 = 1;
        }
        while ((v18 & 1) == 0);
        RERelease();
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
      std::__tree<std::string>::destroy((uint64_t)&v44, v45);
    }
    if (v6)
    {
      uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 80);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48, (_DWORD *)(v19 + 28));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v48 + 1, (_DWORD *)(v19 + 32));
      v41[0] = 0;
      v41[1] = 0;
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(**(void **)(a1 + 40) + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v44, v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48);
      *(__n128 *)std::string v41 = realityio::getGeomPrimitiveOrientation((realityio *)&v44, v21);
      if ((v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v46);
      if (v45) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v45);
      }
      RETransformComponentGetComponentType();
      uint64_t v44 = (char **)&unk_26F33CF88;
      uint64_t v45 = (char *)v41;
      unint64_t v47 = &v44;
      uint64_t v22 = REEntityGetOrAddComponentByClass();
      std::function<void ()(REComponent *)>::operator()((uint64_t)&v44, v22);
      RENetworkMarkComponentDirty();
      std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&v44);
      if (REComponentClassFromName())
      {
        uint64_t v23 = REEntityGetOrAddComponentByClass();
        realityio::Builder::addComponent(v38, v23);
        Object = (void *)RECustomComponentGetObject();
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 72), &v40);
        uint64_t Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40);
        if (*Object)
        {
          RECIntrospectionFree();
          void *Object = 0;
        }
        if (Text)
        {
          strlen(Text);
          char v26 = (char *)RECIntrospectionAlloc();
          void *Object = v26;
          strcpy(v26, Text);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
    }
  }
  REMeshComponentGetComponentType();
  uint64_t v27 = REEntityGetOrAddComponentByClass();
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = *(void *)(v28 + 16);
  uint64_t v30 = *(std::__shared_weak_count **)(v28 + 24);
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v31 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 24);
  }
  uint64_t v43 = 0;
  uint64_t v32 = operator new(0x20uLL);
  *uint64_t v32 = &unk_26F33D008;
  v32[1] = v27;
  v32[2] = v29;
  v32[3] = v30;
  uint64_t v43 = v32;
  realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v31, (uint64_t)v41);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v41);
  REMeshComponentRemoveAllMaterials();
  uint64_t v33 = *(void *)(a1 + 8);
  uint64_t v34 = *(void *)(v33 + 40) - *(void *)(v33 + 32);
  if (v34)
  {
    uint64_t v35 = 0;
    if ((unint64_t)(v34 >> 3) <= 1) {
      uint64_t v36 = 1;
    }
    else {
      uint64_t v36 = v34 >> 3;
    }
    do
    {
      REMeshComponentAddMaterial();
      ++v35;
    }
    while (v36 != v35);
    uint64_t v33 = *(void *)(a1 + 8);
  }
  if (*(unsigned char *)(v33 + 56) || *(unsigned char *)(v33 + 72) || *(unsigned char *)(v33 + 73))
  {
    REMeshDeformationComponentGetComponentType();
    REEntityGetOrAddComponentByClass();
    uint64_t v37 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v37 + 56))
    {
      REBlendShapeWeightsComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
      uint64_t v37 = *(void *)(a1 + 8);
    }
    if (*(unsigned char *)(v37 + 72))
    {
      RESkeletalPoseComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
      RERigComponentGetComponentType();
      REEntityGetOrAddComponentByClass();
    }
  }
  RENetworkMarkComponentDirty();
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_23F5FF9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26F33CF08;
  return result;
}

void _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33CF08;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26F33CF88;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F33CF88;
  a2[1] = v2;
  return result;
}

void _ZNSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  RETransformComponentSetLocalOrientation();

  JUMPOUT(0x2455CCE60);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio20MeshComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio20MeshComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33D008;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33D008;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x2455D2BD0);
}

char *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = &unk_26F33D008;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F33D008;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  return REMeshComponentSetMesh();
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::MeshComponentBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder::BuildResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33D098;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshComponentBuilder::BuildResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33D098;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<realityio::MeshComponentBuilder::BuildResult>::__on_zero_shared(uint64_t a1)
{
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 32));
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33D0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33D0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F33D138;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F33D168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33D168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v15);
  if (v15[0])
  {
    uint64_t v14 = v16;
    if (v16)
    {
      RERetain();
      REMeshComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REMeshDeformationComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REMeshDeformationComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      REBlendShapeWeightsComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        REBlendShapeWeightsComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      RESkeletalPoseComponentGetComponentType();
      if (REEntityGetComponentByClass())
      {
        RESkeletalPoseComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      RERigComponentGetComponentType();
      ComponentByClass = (realityio::MeshComponentBuilder *)REEntityGetComponentByClass();
      if (ComponentByClass)
      {
        RERigComponentGetComponentType();
        ComponentByClass = (realityio::MeshComponentBuilder *)REEntityRemoveComponentByClass();
      }
      uint64_t v6 = *(std::mutex **)(v1 + 16);
      uint64_t v5 = *(std::__shared_weak_count **)(v1 + 24);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (const void **)realityio::MeshComponentBuilder::kOutputName(ComponentByClass);
      realityio::Outputs::getRawValue<std::shared_ptr<realityio::MeshComponentBuilder::BuildResult>>((uint64_t)v19, v6, v7);
      int v8 = v19[0];
      if (v19[0])
      {
        long long v9 = v20;
        if (*((void *)&v20 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
          v11[0] = 1;
          long long v12 = v9;
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
        }
        else
        {
          v11[0] = 1;
          long long v12 = (unint64_t)v20;
        }
      }
      else
      {
        long long v17 = v20;
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v18, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
        }
        else {
          std::string v18 = v21;
        }
        v11[0] = 0;
        long long v12 = v17;
        std::string v13 = v18;
      }
      realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v19);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      if (v8 && (void)v12 && *(unsigned char *)(v12 + 1)) {
        MEMORY[0x2455CD110](*(void *)(v12 + 8));
      }
      realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v11);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v14);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v15);
}

void sub_23F6004DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v11 = va_arg(va1, void);
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result(v9 - 80);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::MeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

BOOL realityio::internal::enableSignposts(realityio::internal *this, uint64_t a2)
{
  char v3 = (char)this;
  {
    realityio::Defaults::intValue((realityio::Defaults *)"enableSignposts", v5, (uint64_t)v8);
    if (v8[0]) {
      BOOL v6 = v9 == 0;
    }
    else {
      BOOL v6 = 0;
    }
    char v7 = !v6;
    realityio::internal::enableSignposts(BOOL,BOOL)::value = v7;
  }
  if ((v3 & 1) == 0) {
    return realityio::internal::enableSignposts(BOOL,BOOL)::value != 0;
  }
  realityio::internal::enableSignposts(BOOL,BOOL)::value = a2;
  return a2;
}

void sub_23F600628(_Unwind_Exception *a1)
{
}

void realityio::MeshDescriptorAction::getMaterialGroupInfo(char **a1, _DWORD *a2, uint64_t a3)
{
  char v3 = (void *)a3;
  uint64_t v60 = *MEMORY[0x263EF8340];
  unint64_t v5 = atomic_load(&realityio::tokens::EcsTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
  }
  BOOL v6 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a3, (uint64_t *)(v5 + 280));
  char v7 = v3 + 1;
  if (v3 + 1 == v6) {
    uint64_t v59 = 0;
  }
  else {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v58, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 5));
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v58))
  {
    if ((v59 & 4) != 0) {
      int v8 = (char *)(*(uint64_t (**)(char *))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(v58);
    }
    else {
      int v8 = v58;
    }
    *a2 = *(_DWORD *)v8;
  }
  int v9 = (void *)*v3;
  if ((void *)*v3 != v7)
  {
    do
    {
      std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v55, v9 + 4);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
      if (v10)
      {
        uint64_t v52 = 0;
        long long v50 = 0u;
        long long v51 = 0u;
        if ((v55 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (v55 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
        }
        if (*(char *)(EmptyString + 23) >= 0) {
          size_t v13 = *(unsigned __int8 *)(EmptyString + 23);
        }
        else {
          size_t v13 = *(void *)(EmptyString + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 15);
        if (v47 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        if (v13)
        {
          if (*(char *)(EmptyString + 23) >= 0) {
            uint64_t v15 = (const void *)EmptyString;
          }
          else {
            uint64_t v15 = *(const void **)EmptyString;
          }
          memmove(v14, v15, v13);
        }
        strcpy((char *)v14 + v13, "_materialOffset");
        MEMORY[0x2455CF830](&v48, __p);
        uint64_t v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v3, &v48);
        if (v7 == v16) {
          uint64_t v54 = 0;
        }
        else {
          pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v53, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v16 + 5));
        }
        if ((v48 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        long long v17 = v3;
        if (v47 < 0) {
          operator delete(__p[0]);
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v53))
        {
          if ((v54 & 4) != 0) {
            std::string v18 = (int *)(*(uint64_t (**)(char *))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(v53);
          }
          else {
            std::string v18 = (int *)v53;
          }
          int v49 = *v18;
        }
        if ((v57 & 4) != 0) {
          uint64_t v19 = (long long *)(*(uint64_t (**)(long long **))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
        }
        else {
          uint64_t v19 = v56;
        }
        pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)&v50, v19);
        std::string v21 = a1[1];
        unint64_t v20 = (unint64_t)a1[2];
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v24 = *a1;
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v21 - *a1) >> 4);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0x555555555555555) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v24) >> 4);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v28 = 0x555555555555555;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28 > 0x555555555555555) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v29 = (char *)operator new(48 * v28);
          uint64_t v30 = &v29[48 * v25];
          *(_DWORD *)uint64_t v30 = v49;
          long long v31 = v51;
          *(_OWORD *)(v30 + 8) = v50;
          *(_OWORD *)(v30 + 24) = v31;
          long long v50 = 0u;
          long long v51 = 0u;
          *((void *)v30 + 5) = v52;
          uint64_t v52 = 0;
          if (v21 == v24)
          {
            uint64_t v38 = v21;
            long long v39 = &v29[48 * v25];
            char v3 = v17;
          }
          else
          {
            uint64_t v32 = 0;
            char v3 = v17;
            do
            {
              uint64_t v33 = &v30[v32];
              *((_DWORD *)v33 - 12) = *(_DWORD *)&v21[v32 - 48];
              long long v34 = *(_OWORD *)&v21[v32 - 40];
              *(_OWORD *)(v33 - 24) = *(_OWORD *)&v21[v32 - 24];
              *(_OWORD *)(v33 - 40) = v34;
              uint64_t v35 = *(void *)&v21[v32 - 8];
              *((void *)v33 - 1) = v35;
              if (v35)
              {
                uint64_t v36 = (atomic_ullong *)*((void *)v33 - 2);
                uint64_t v37 = (atomic_ullong *)(v35 - 16);
                if (!v36) {
                  uint64_t v36 = v37;
                }
                atomic_fetch_add_explicit(v36, 1uLL, memory_order_relaxed);
              }
              v32 -= 48;
            }
            while (&v21[v32] != v24);
            uint64_t v38 = *a1;
            std::string v21 = a1[1];
            long long v39 = &v30[v32];
          }
          int v40 = &v29[48 * v28];
          uint64_t v23 = v30 + 48;
          *a1 = v39;
          a1[1] = v30 + 48;
          a1[2] = v40;
          while (v21 != v38)
          {
            uint64_t v41 = (uint64_t)(v21 - 40);
            v21 -= 48;
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v41);
          }
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *(_DWORD *)std::string v21 = v49;
          long long v22 = v50;
          *(_OWORD *)(v21 + 24) = v51;
          *(_OWORD *)(v21 + 8) = v22;
          long long v50 = 0u;
          long long v51 = 0u;
          *((void *)v21 + 5) = v52;
          uint64_t v52 = 0;
          uint64_t v23 = v21 + 48;
        }
        a1[1] = v23;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v50);
      }
      else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56))
      {
        long long v12 = &v56;
        if ((v57 & 4) != 0) {
          long long v12 = (long long **)(*(uint64_t (**)(long long **))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(&v56);
        }
        *a2 = *(_DWORD *)v12;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v42 = (void *)v9[1];
      if (v42)
      {
        do
        {
          uint64_t v43 = v42;
          uint64_t v42 = (void *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          uint64_t v43 = (void *)v9[2];
          BOOL v44 = *v43 == (void)v9;
          int v9 = v43;
        }
        while (!v44);
      }
      int v9 = v43;
    }
    while (v43 != v7);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v58);
}

void sub_23F600B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
}

void realityio::MeshDescriptorAction::setupModelDescriptor(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  REGeomModelDescriptorSetName();
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v26 = -1;
  uint64_t v6 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__x, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + v8));
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + v7);
      uint64_t v11 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + v7));
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v10);
      unint64_t v13 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v13) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v13 + 224) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__x))
      {
        if ((v29 & 4) != 0) {
          uint64_t v14 = (*(uint64_t (**)(std::vector<unsigned int>::value_type *))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(__x);
        }
        else {
          uint64_t v14 = *(void *)__x;
        }
        std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>::map[abi:ne180100]((uint64_t *)&v27, v14);
        realityio::MeshDescriptorAction::getMaterialGroupInfo(&v23, &v26, (uint64_t)&v27);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v27, (void *)v27.__end_);
      }
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__x);
      ++v9;
      uint64_t v6 = *a3;
      v8 += 16;
      v7 += 8;
    }
    while (v9 < (a3[1] - *a3) >> 3);
  }
  REGeomModelDescriptorClearMaterialAssignments();
  if (v23 == v24)
  {
    REGeomModelDescriptorSetMaterialAssignmentForModel();
  }
  else
  {
    std::vector<unsigned int>::size_type FaceCount = REGeomModelDescriptorGetFaceCount();
    __x[0] = 0;
    std::vector<unsigned int>::vector(&v27, FaceCount, __x);
    uint64_t v16 = v23;
    long long v17 = v24;
    while (v16 != v17)
    {
      uint64_t v18 = *((void *)v16 + 1);
      if (v18)
      {
        uint64_t v19 = (int *)*((void *)v16 + 5);
        std::vector<unsigned int>::pointer begin = v27.__begin_;
        uint64_t v21 = 4 * v18;
        do
        {
          std::vector<unsigned int>::size_type v22 = *v19;
          if (v22 < FaceCount) {
            begin[v22] = *(_DWORD *)v16;
          }
          ++v19;
          v21 -= 4;
        }
        while (v21);
      }
      v16 += 48;
    }
    REGeomModelDescriptorSetMaterialAssignmentsPerFace();
    if (v27.__begin_)
    {
      v27.__end_ = v27.__begin_;
      operator delete(v27.__begin_);
    }
  }
  v27.__begin_ = (std::vector<unsigned int>::pointer)&v23;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_23F600E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  a14 = &a11;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void realityio::MeshDescriptorAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath **a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v375 = *MEMORY[0x263EF8340];
  uint64_t v364 = 0;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 && *(void *)(v7 + 200))
  {
    *(void *)v323 = *(void *)(*(void *)(*(void *)(*(void *)(v7 + 192) + 16) + 8) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v323);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v323);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)__v, v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)v323);
    *(void *)v323 = 0;
    *(void *)(a5 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
  }
  memset(&v318, 0, sizeof(v318));
  std::vector<std::string>::reserve(&v318, (a3[1] - *a3) >> 3);
  unint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  v289 = (uint64_t *)a3;
  if (*a3 != v10)
  {
    do
    {
      uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v9);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v323, *(const std::string::value_type **)Name, *(void *)(Name + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)Name;
        *(void *)&v323[16] = *(void *)(Name + 16);
        *(_OWORD *)v323 = v12;
      }
      std::vector<std::string>::pointer end = v318.__end_;
      if (v318.__end_ >= v318.__end_cap_.__value_)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v318.__end_ - (char *)v318.__begin_) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v318.__end_cap_.__value_ - (char *)v318.__begin_) >> 3) > v16) {
          unint64_t v16 = 0x5555555555555556 * (((char *)v318.__end_cap_.__value_ - (char *)v318.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v318.__end_cap_.__value_ - (char *)v318.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v17 = v16;
        }
        *(void *)&__v[32] = &v318.__end_cap_;
        if (v17) {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)&v318.__end_cap_, v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[24 * v15];
        *(void *)__v = v18;
        *(void *)&__v[8] = v19;
        *(void *)&__v[24] = &v18[24 * v17];
        long long v20 = *(_OWORD *)v323;
        *((void *)v19 + 2) = *(void *)&v323[16];
        *(_OWORD *)uint64_t v19 = v20;
        memset(v323, 0, 24);
        *(void *)&__v[16] = v19 + 24;
        std::vector<std::string>::__swap_out_circular_buffer(&v318, (std::__split_buffer<std::string> *)__v);
        uint64_t v21 = v318.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__v);
        v318.__end_ = v21;
        if ((v323[23] & 0x80000000) != 0) {
          operator delete(*(void **)v323);
        }
      }
      else
      {
        long long v14 = *(_OWORD *)v323;
        v318.__end_->__r_.__value_.__r.__words[2] = *(void *)&v323[16];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v14;
        v318.__end_ = end + 1;
      }
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
    }
    while (v9 != v10);
  }
  uint64_t v362 = 0;
  uint64_t v360 = 0;
  uint64_t v358 = 0;
  MEMORY[0x2455CF810](&v317, "primvars:normals");
  MEMORY[0x2455CF810](&v316, "primvars:normals:indices");
  uint64_t v356 = 0;
  v354[1] = 0;
  uint64_t v353 = 0;
  uint64_t v351 = 0;
  uint64_t v349 = 0;
  v315[0] = 0;
  v315[1] = 0;
  uint64_t v313 = 0;
  v314 = (uint64_t *)v315;
  v310 = 0;
  v311 = 0;
  unint64_t v312 = 0;
  uint64_t v309 = 0;
  uint64_t v347 = 0;
  uint64_t v345 = 0;
  uint64_t v343 = 0;
  uint64_t v341 = 0;
  memset(v308, 0, sizeof(v308));
  int v307 = -1;
  uint64_t v22 = (uint64_t)*a3;
  if (a3[1] != *a3)
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    int v285 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + v24));
      int v26 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + v23);
      uint64_t v27 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + v23));
      if ((v27 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v27 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v28 = atomic_load(MEMORY[0x263F90538]);
      if (!v28) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
      }
      uint64_t v29 = (atomic_uint *)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v27 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v28 + 816) & 0xFFFFFFFFFFFFFFF8))
      {
        long long v34 = (unint64_t **)v361;
      }
      else
      {
        unint64_t v30 = atomic_load(MEMORY[0x263F90538]);
        if (!v30) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
        }
        if (v29 == (atomic_uint *)(*(void *)(v30 + 704) & 0xFFFFFFFFFFFFFFF8))
        {
          long long v34 = &v359;
        }
        else
        {
          unint64_t v31 = atomic_load(MEMORY[0x263F90538]);
          if (!v31) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
          }
          if (v29 == (atomic_uint *)(*(void *)(v31 + 344) & 0xFFFFFFFFFFFFFFF8))
          {
            long long v34 = (unint64_t **)v350;
          }
          else
          {
            unint64_t v32 = atomic_load(MEMORY[0x263F90538]);
            if (!v32) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
            }
            if (v29 == (atomic_uint *)(*(void *)(v32 + 336) & 0xFFFFFFFFFFFFFFF8))
            {
              long long v34 = (unint64_t **)v348;
            }
            else
            {
              NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + v23));
              MEMORY[0x2455CF810](__v, "__materialIndexInfo");
              if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)__v & 0xFFFFFFFFFFFFFFF8))
              {
                int v35 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                if ((__v[0] & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__v & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (v35)
                {
                  if (((uint64_t)__p[1] & 4) != 0) {
                    uint64_t v36 = (uint64_t **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                  }
                                                                         + 168))(__p);
                  else {
                    uint64_t v36 = (uint64_t **)__p[0];
                  }
                  if (&v314 != v36) {
                    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>(&v314, *v36, v36 + 1);
                  }
                  realityio::MeshDescriptorAction::getMaterialGroupInfo(v308, &v307, (uint64_t)&v314);
                  goto LABEL_43;
                }
              }
              else if ((__v[0] & 7) != 0)
              {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__v & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v37 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
              MEMORY[0x2455CF810](__v, "__defaultUV");
              if ((*v37 & 0xFFFFFFFFFFFFFFF8) == (*(void *)__v & 0xFFFFFFFFFFFFFFF8))
              {
                int v38 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                if ((__v[0] & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__v & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (v38)
                {
                  if (((uint64_t)__p[1] & 4) != 0) {
                    long long v39 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                  }
                                                                      + 168))(__p);
                  else {
                    long long v39 = __p;
                  }
                  pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v309, v39);
                  goto LABEL_43;
                }
              }
              else if ((__v[0] & 7) != 0)
              {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__v & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              int v40 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
              MEMORY[0x2455CF810](__v, "orientation");
              if ((*v40 & 0xFFFFFFFFFFFFFFF8) == (*(void *)__v & 0xFFFFFFFFFFFFFFF8))
              {
                int v41 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
                if ((__v[0] & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__v & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (v41)
                {
                  if (((uint64_t)__p[1] & 4) != 0) {
                    uint64_t v42 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
                  }
                                                                      + 168))(__p);
                  else {
                    uint64_t v42 = __p;
                  }
                  unint64_t v43 = (unint64_t)*v42;
                  if (((unint64_t)*v42 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v43 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  MEMORY[0x2455CF810](__v, "leftHanded");
                  BOOL v44 = (atomic_uint *)(*(void *)__v & 0xFFFFFFFFFFFFFFF8);
                  if ((__v[0] & 7) != 0) {
                    atomic_fetch_add_explicit(v44, 0xFFFFFFFE, memory_order_release);
                  }
                  BOOL v45 = (v43 & 0xFFFFFFFFFFFFFFF8) == (void)v44;
                  int v46 = v285;
                  if (v45) {
                    int v46 = 1;
                  }
                  int v285 = v46;
                  if ((v43 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  goto LABEL_43;
                }
              }
              else if ((__v[0] & 7) != 0)
              {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__v & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v47 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v26);
              unint64_t v48 = *(unsigned __int8 *)(v47 + 23);
              int v49 = (char)v48;
              if ((v48 & 0x80u) != 0) {
                unint64_t v48 = *(void *)(v47 + 8);
              }
              if (v48 < 8) {
                goto LABEL_88;
              }
              if (v49 < 0) {
                uint64_t v47 = *(void *)v47;
              }
              if (!strncmp((const char *)v47, "primvars", 8uLL))
              {
                uint64_t v54 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v26);
                unint64_t v55 = *(unsigned __int8 *)(v54 + 23);
                int v56 = (char)v55;
                if ((v55 & 0x80u) != 0) {
                  unint64_t v55 = *(void *)(v54 + 8);
                }
                if (v55 < 8
                  || (v56 >= 0 ? (uint64_t v57 = v54) : (uint64_t v57 = *(void *)v54), strcmp((const char *)(v55 + v57 - 8), ":indices")))
                {
                  unint64_t v58 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
                  uint64_t v59 = v311;
                  if ((unint64_t)v311 >= v312)
                  {
                    uint64_t v61 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v310, v58);
                  }
                  else
                  {
                    uint64_t v60 = *v58;
                    *(void *)v311 = *v58;
                    if ((v60 & 7) != 0
                      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                    {
                      *(void *)v59 &= 0xFFFFFFFFFFFFFFF8;
                    }
                    uint64_t v61 = v59 + 8;
                  }
                  v311 = v61;
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v26);
                v88 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
                pxrInternal__aapl__pxrReserved__::VtValue::operator=(v88, __p);
                uint64_t v89 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
                unint64_t v90 = atomic_load(MEMORY[0x263F90538]);
                if (!v90) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                }
                if ((*v89 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v90 + 848) & 0xFFFFFFFFFFFFFFF8))
                {
                  long long v34 = (unint64_t **)v346;
                }
                else
                {
                  uint64_t v91 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
                  unint64_t v92 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90538]);
                  if (!v92) {
                    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                  }
                  if ((*((void *)v92 + 106) & 0xFFFFFFFFFFFFFFF8) != 0) {
                    unint64_t EmptyString = (*((void *)v92 + 106) & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  else {
                    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v92);
                  }
                  if (*(char *)(EmptyString + 23) >= 0) {
                    size_t v94 = *(unsigned __int8 *)(EmptyString + 23);
                  }
                  else {
                    size_t v94 = *(void *)(EmptyString + 8);
                  }
                  std::string::basic_string[abi:ne180100]((uint64_t)__v, v94 + 8);
                  v283 = a2;
                  if (__v[23] >= 0) {
                    unint64_t v95 = __v;
                  }
                  else {
                    unint64_t v95 = *(unsigned char **)__v;
                  }
                  if (v94)
                  {
                    if (*(char *)(EmptyString + 23) >= 0) {
                      uint64_t v96 = (const void *)EmptyString;
                    }
                    else {
                      uint64_t v96 = *(const void **)EmptyString;
                    }
                    memmove(v95, v96, v94);
                  }
                  strcpy(&v95[v94], ":indices");
                  MEMORY[0x2455CF830](v323, __v);
                  uint64_t v97 = *v91;
                  int v98 = (atomic_uint *)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8);
                  a2 = v283;
                  if ((v323[0] & 7) != 0) {
                    atomic_fetch_add_explicit(v98, 0xFFFFFFFE, memory_order_release);
                  }
                  if ((__v[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__v);
                  }
                  if ((atomic_uint *)(v97 & 0xFFFFFFFFFFFFFFF8) == v98)
                  {
                    long long v34 = (unint64_t **)v344;
                  }
                  else
                  {
                    uint64_t v99 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
                    unint64_t v100 = atomic_load(MEMORY[0x263F90538]);
                    if (!v100) {
                      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                    }
                    if ((*v99 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v100 + 856) & 0xFFFFFFFFFFFFFFF8))
                    {
                      long long v34 = (unint64_t **)v342;
                    }
                    else
                    {
                      unint64_t v101 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
                      int v102 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90538]);
                      if (!v102) {
                        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                      }
                      if ((*((void *)v102 + 107) & 0xFFFFFFFFFFFFFFF8) != 0) {
                        unint64_t v103 = (*((void *)v102 + 107) & 0xFFFFFFFFFFFFFFF8) + 16;
                      }
                      else {
                        unint64_t v103 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v102);
                      }
                      if (*(char *)(v103 + 23) >= 0) {
                        size_t v104 = *(unsigned __int8 *)(v103 + 23);
                      }
                      else {
                        size_t v104 = *(void *)(v103 + 8);
                      }
                      std::string::basic_string[abi:ne180100]((uint64_t)__v, v104 + 8);
                      if (__v[23] >= 0) {
                        long long v105 = __v;
                      }
                      else {
                        long long v105 = *(unsigned char **)__v;
                      }
                      if (v104)
                      {
                        if (*(char *)(v103 + 23) >= 0) {
                          long long v106 = (const void *)v103;
                        }
                        else {
                          long long v106 = *(const void **)v103;
                        }
                        memmove(v105, v106, v104);
                      }
                      strcpy(&v105[v104], ":indices");
                      MEMORY[0x2455CF830](v323, __v);
                      uint64_t v107 = *v101;
                      unint64_t v108 = (atomic_uint *)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8);
                      a2 = v283;
                      if ((v323[0] & 7) != 0) {
                        atomic_fetch_add_explicit(v108, 0xFFFFFFFE, memory_order_release);
                      }
                      if ((__v[23] & 0x80000000) != 0) {
                        operator delete(*(void **)__v);
                      }
                      if ((atomic_uint *)(v107 & 0xFFFFFFFFFFFFFFF8) == v108)
                      {
                        long long v34 = (unint64_t **)v340;
                      }
                      else
                      {
                        unint64_t v109 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
                        if ((*v109 & 0xFFFFFFFFFFFFFFF8) == (v317 & 0xFFFFFFFFFFFFFFF8))
                        {
                          long long v34 = &v355;
                        }
                        else
                        {
                          uint64_t v110 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v26);
                          if ((*v110 & 0xFFFFFFFFFFFFFFF8) != (v316 & 0xFFFFFFFFFFFFFFF8)) {
                            goto LABEL_43;
                          }
                          long long v34 = (unint64_t **)v354;
                        }
                      }
                    }
                  }
                }
              }
              else
              {
LABEL_88:
                int IsMapperPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(v26);
                if (__p[1]) {
                  int v51 = IsMapperPath;
                }
                else {
                  int v51 = 0;
                }
                if (v51 != 1) {
                  goto LABEL_43;
                }
                pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)__v, v26);
                uint64_t v52 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
                unint64_t v53 = atomic_load(MEMORY[0x263F90538]);
                if (!v53) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                }
                if ((*v52 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v53 + 704) & 0xFFFFFFFFFFFFFFF8))
                {
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
LABEL_109:
                  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)__v, v26);
                  long long v67 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
                  if ((*v67 & 0xFFFFFFFFFFFFFFF8) != (v317 & 0xFFFFFFFFFFFFFFF8))
                  {
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
LABEL_113:
                    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)v334, v26);
                    v73 = a2;
                    uint64_t v74 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v334);
                    uint64_t v75 = (char *)v74;
                    if (*(char *)(v74 + 23) >= 0) {
                      size_t v76 = *(unsigned __int8 *)(v74 + 23);
                    }
                    else {
                      size_t v76 = *(void *)(v74 + 8);
                    }
                    std::string::basic_string[abi:ne180100]((uint64_t)v323, v76 + 3);
                    if (v323[23] >= 0) {
                      uint64_t v77 = v323;
                    }
                    else {
                      uint64_t v77 = *(unsigned char **)v323;
                    }
                    if (v76)
                    {
                      if (v75[23] >= 0) {
                        uint64_t v78 = v75;
                      }
                      else {
                        uint64_t v78 = *(char **)v75;
                      }
                      memmove(v77, v78, v76);
                    }
                    *(_DWORD *)&v77[v76] = 6250298;
                    TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v26);
                    a2 = v73;
                    uint64_t v80 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath);
                    if ((*(void *)v80 & 0xFFFFFFFFFFFFFFF8) != 0) {
                      unint64_t v81 = (*(void *)v80 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else {
                      unint64_t v81 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v80);
                    }
                    int v82 = *(char *)(v81 + 23);
                    if (v82 >= 0) {
                      v83 = (const std::string::value_type *)v81;
                    }
                    else {
                      v83 = *(const std::string::value_type **)v81;
                    }
                    if (v82 >= 0) {
                      std::string::size_type v84 = *(unsigned __int8 *)(v81 + 23);
                    }
                    else {
                      std::string::size_type v84 = *(void *)(v81 + 8);
                    }
                    unint64_t v85 = std::string::append((std::string *)v323, v83, v84);
                    long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                    *(void *)&__v[16] = *((void *)&v85->__r_.__value_.__l + 2);
                    *(_OWORD *)__v = v86;
                    v85->__r_.__value_.__l.__size_ = 0;
                    v85->__r_.__value_.__r.__words[2] = 0;
                    v85->__r_.__value_.__r.__words[0] = 0;
                    unint64_t v87 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
                    pxrInternal__aapl__pxrReserved__::VtValue::operator=(v87, __p);
                    if ((__v[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__v);
                    }
                    if ((v323[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v323);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v334);
                    goto LABEL_43;
                  }
                  unint64_t v68 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v26);
                  uint64_t v69 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v68);
                  unint64_t v70 = atomic_load(MEMORY[0x263F90538]);
                  if (!v70) {
                    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                  }
                  uint64_t v71 = *v69;
                  uint64_t v72 = *(void *)(v70 + 488);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
                  if ((v71 & 0xFFFFFFFFFFFFFFF8) != (v72 & 0xFFFFFFFFFFFFFFF8)) {
                    goto LABEL_113;
                  }
                  long long v34 = (unint64_t **)v352;
                  goto LABEL_42;
                }
                std::string v62 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(v26);
                uint64_t v63 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v62);
                unint64_t v64 = atomic_load(MEMORY[0x263F90538]);
                if (!v64) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomTokensType>>::_TryToCreateData();
                }
                uint64_t v65 = *v63;
                uint64_t v66 = *(void *)(v64 + 488);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
                if ((v65 & 0xFFFFFFFFFFFFFFF8) != (v66 & 0xFFFFFFFFFFFFFFF8)) {
                  goto LABEL_109;
                }
                long long v34 = (unint64_t **)v357;
              }
            }
          }
        }
      }
LABEL_42:
      pxrInternal__aapl__pxrReserved__::VtValue::operator=(v34, __p);
LABEL_43:
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit(v29, 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
      ++v25;
      uint64_t v22 = *v289;
      v24 += 16;
      v23 += 8;
    }
    while (v25 < (v289[1] - *v289) >> 3);
  }
  if (!v362)
  {
    std::string::basic_string[abi:ne180100]<0>(__v, "No points found");
    ExecFault::stringValue(1, (const std::string *)__v, a5);
  }
  uint64_t v306 = 0;
  long long v304 = 0u;
  long long v305 = 0u;
  v303 = 0;
  *(_OWORD *)v301 = 0u;
  long long v302 = 0u;
  __src = 0;
  *(_OWORD *)__n = 0u;
  long long v299 = 0u;
  uint64_t v111 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)v361);
  if (&v304 != (long long *)v111)
  {
    long long v112 = *(_OWORD *)(v111 + 16);
    *(_OWORD *)__v = *(_OWORD *)v111;
    *(_OWORD *)&__v[16] = v112;
    uint64_t v113 = *(void *)(v111 + 32);
    *(void *)&__v[32] = v113;
    if (v113)
    {
      unint64_t v114 = (atomic_ullong *)(v113 - 16);
      if (*(void *)&__v[24]) {
        unint64_t v114 = *(atomic_ullong **)&__v[24];
      }
      atomic_fetch_add_explicit(v114, 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v304);
    long long v304 = *(_OWORD *)__v;
    long long v305 = *(_OWORD *)&__v[16];
    memset(__v, 0, 40);
    uint64_t v306 = *(void *)&__v[32];
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__v);
  }
  unint64_t v115 = (long long *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v350);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)v301, v115);
  unint64_t v116 = (long long *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v348);
  pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)__n, v116);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(v297, v304);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v304);
  uint64_t v117 = v306;
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v304);
  uint64_t v119 = v306 + 12 * v304;
  if (v117 != v119)
  {
    unint64_t v120 = v297[0];
    do
    {
      *(void *)&long long v118 = *(void *)v117;
      DWORD2(v118) = *(_DWORD *)(v117 + 8);
      *v120++ = v118;
      v117 += 12;
    }
    while (v117 != v119);
  }
  std::vector<unsigned int>::vector(&v296, __n[0]);
  if (__n[0]) {
    memmove(v296.__begin_, __src, 4 * __n[0]);
  }
  std::vector<unsigned int>::vector(&v295, v301[0]);
  if (v301[0]) {
    memmove(v295.__begin_, v303, 4 * v301[0]);
  }
  uint64_t v294 = 0;
  uint64_t HighVertexPerPolygon = REGeomModelDescriptorCreateHighVertexPerPolygon();
  if (HighVertexPerPolygon)
  {
    REGeomModelDescriptorSetWindingOrder();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__v, a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
    REGeomModelDescriptorSetName();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2Em(&v293, v304);
    if ((void)v304)
    {
      uint64_t v123 = v306;
      char v124 = v293;
      uint64_t v125 = 12 * v304;
      do
      {
        *(void *)&long long v122 = *(void *)v123;
        DWORD2(v122) = *(_DWORD *)(v123 + 8);
        *v124++ = v122;
        v123 += 12;
        v125 -= 12;
      }
      while (v125);
    }
    uint64_t VertexCount = REGeomModelDescriptorGetVertexCount();
    MEMORY[0x2455CD260](HighVertexPerPolygon, "vertexPosition", 1, VertexCount, v293);
    REGeomModelDescriptorAddAttributeAlias();
    if (v360)
    {
      handleNormals(HighVertexPerPolygon, &v359, (pxrInternal__aapl__pxrReserved__::VtValue *)v357, 0);
      REGeomModelDescriptorAddAttributeAlias();
    }
    v284 = a2;
    v292[0] = 0;
    v292[1] = 0;
    v291 = v292;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__v, 1.0);
    v335 = 0;
    memset(v334, 0, sizeof(v334));
    v332 = 0;
    *(_OWORD *)__sz = 0u;
    long long v331 = 0u;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v327 = 0;
    uint64_t v326 = 0;
    uint64_t v127 = *v289;
    if (v289[1] != *v289)
    {
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      unint64_t v130 = 0;
      int v131 = 1;
      int v286 = 1;
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + v129));
        int v132 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v127 + v128);
        char v133 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v132);
        MEMORY[0x2455CF810](v323, "primvars:skel:geomBindTransform");
        if ((*v133 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v323 & 0xFFFFFFFFFFFFFFF8))
        {
          int v134 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v323[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v134)
          {
            if (((uint64_t)__p[1] & 4) != 0) {
              int v135 = (long long *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
            }
                                                                    + 168))(__p);
            else {
              int v135 = (long long *)__p[0];
            }
            long long v136 = *v135;
            long long v137 = v135[1];
            long long v138 = v135[3];
            *(_OWORD *)&__v[32] = v135[2];
            long long v370 = v138;
            *(_OWORD *)__v = v136;
            *(_OWORD *)&__v[16] = v137;
            long long v139 = v135[4];
            long long v140 = v135[5];
            long long v141 = v135[7];
            long long v373 = v135[6];
            long long v374 = v141;
            long long v371 = v139;
            long long v372 = v140;
            goto LABEL_296;
          }
        }
        else if ((v323[0] & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        char v142 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v132);
        MEMORY[0x2455CF810](v323, "primvars:skel:jointWeights");
        if ((*v142 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v323 & 0xFFFFFFFFFFFFFFF8))
        {
          int v143 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v323[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v143)
          {
            if (((uint64_t)__p[1] & 4) != 0) {
              int v144 = (_OWORD *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
            }
                                                                  + 168))(__p);
            else {
              int v144 = __p[0];
            }
            if (v334 != (unsigned char *)v144)
            {
              long long v145 = v144[1];
              *(_OWORD *)v323 = *v144;
              *(_OWORD *)&v323[16] = v145;
              uint64_t v146 = *((void *)v144 + 4);
              *(void *)&long long v324 = v146;
              if (v146)
              {
                int v147 = (atomic_ullong *)(v146 - 16);
                if (*(void *)&v323[24]) {
                  int v147 = *(atomic_ullong **)&v323[24];
                }
                atomic_fetch_add_explicit(v147, 1uLL, memory_order_relaxed);
              }
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v334);
              *(_OWORD *)v334 = *(_OWORD *)v323;
              *(_OWORD *)&v334[16] = *(_OWORD *)&v323[16];
              memset(v323, 0, sizeof(v323));
              v335 = (void *)v324;
              *(void *)&long long v324 = 0;
              pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v323);
            }
            goto LABEL_296;
          }
        }
        else if ((v323[0] & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        char v148 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v132);
        MEMORY[0x2455CF810](v323, "primvars:skel:jointIndices");
        if ((*v148 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v323 & 0xFFFFFFFFFFFFFFF8))
        {
          int v149 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v323[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v149)
          {
            if (((uint64_t)__p[1] & 4) != 0) {
              int v150 = (long long *)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
            }
                                                                    + 168))(__p);
            else {
              int v150 = (long long *)__p[0];
            }
            pxrInternal__aapl__pxrReserved__::VtArray<int>::operator=((uint64_t)__sz, v150);
            goto LABEL_296;
          }
        }
        else if ((v323[0] & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        char v151 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v132);
        MEMORY[0x2455CF810](v323, "skel:skeleton");
        if ((*v151 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v323 & 0xFFFFFFFFFFFFFFF8))
        {
          int v152 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          if ((v323[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v152)
          {
            if (((uint64_t)__p[1] & 4) != 0) {
              int v153 = (void **)(*(uint64_t (**)(void **))(((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFF8)
            }
                                                                 + 168))(__p);
            else {
              int v153 = __p;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v328, v153);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v329, (_DWORD *)v153 + 1);
LABEL_296:
            char v166 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v132);
            std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v291, v166, v166);
            goto LABEL_297;
          }
        }
        else if ((v323[0] & 7) != 0)
        {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        MEMORY[0x2455CF810](v323, "primvars:skel:jointWeights");
        MEMORY[0x2455CF810](&v333, "elementSize");
        BOOL isMetaData = realityio::isMetaData(v132, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v323, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v333, v154);
        if (((uint64_t)v333.__begin_ & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v333.__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v323[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (isMetaData)
        {
          int v131 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          int v156 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v132);
          std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v291, v156, v156);
        }
        else
        {
          MEMORY[0x2455CF810](v323, "primvars:skel:jointIndices");
          MEMORY[0x2455CF810](&v333, "elementSize");
          BOOL v158 = realityio::isMetaData(v132, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v323, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v333, v157);
          if (((uint64_t)v333.__begin_ & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v333.__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v323[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (!v158)
          {
            MEMORY[0x2455CF810](v323, "primvars:skel:jointIndices");
            MEMORY[0x2455CF810](&v333, "interpolation");
            BOOL v161 = realityio::isMetaData(v132, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v323, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v333, v160);
            if (((uint64_t)v333.__begin_ & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v333.__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v323[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v161)
            {
              int v162 = (void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              char v163 = &v327;
            }
            else
            {
              MEMORY[0x2455CF810](v323, "primvars:skel:jointWeights");
              MEMORY[0x2455CF810](&v333, "interpolation");
              BOOL v165 = realityio::isMetaData(v132, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v323, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v333, v164);
              if (((uint64_t)v333.__begin_ & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v333.__begin_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((v323[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v323 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (!v165) {
                goto LABEL_297;
              }
              int v162 = (void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
              char v163 = &v326;
            }
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(v163, v162);
            goto LABEL_296;
          }
          int v286 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          int v159 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v132);
          std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v291, v159, v159);
        }
LABEL_297:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)__p);
        ++v130;
        uint64_t v127 = *v289;
        v129 += 16;
        v128 += 8;
        if (v130 >= (v289[1] - *v289) >> 3) {
          goto LABEL_306;
        }
      }
    }
    int v286 = 1;
    int v131 = 1;
LABEL_306:
    if (v286 == v131) {
      int v167 = v286;
    }
    else {
      int v167 = 1;
    }
    long long v168 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    *(_OWORD *)v323 = *MEMORY[0x263EF89A8];
    *(_OWORD *)&v323[16] = v168;
    long long v169 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    long long v324 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v325 = v169;
    memset(&v333, 0, sizeof(v333));
    memset(&v322, 0, sizeof(v322));
    __dst = 0;
    v320 = 0;
    uint64_t v321 = 0;
    MEMORY[0x2455CE5D0](__p, __v);
    *(_OWORD *)v323 = *(_OWORD *)__p;
    *(_OWORD *)&v323[16] = v366;
    long long v324 = v367;
    long long v325 = v368;
    unsigned int v170 = REGeomModelDescriptorGetVertexCount();
    std::vector<int>::resize(&v333, v170);
    std::vector<unsigned int>::pointer begin = v333.__begin_;
    std::vector<unsigned int>::pointer v172 = v333.__end_;
    if (v333.__begin_ != v333.__end_)
    {
      int v173 = v167;
      do
      {
        *begin++ = v173;
        v173 += v167;
      }
      while (begin != v172);
    }
    MEMORY[0x2455CF810](__p, "constant");
    unint64_t v174 = v327 & 0xFFFFFFFFFFFFFFF8;
    char v175 = (atomic_uint *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit(v175, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v174 == v175)
    {
      std::vector<unsigned int>::size_type v180 = v170 * v286;
      std::vector<int>::resize(&v322, v180);
      if (v180)
      {
        uint64_t v181 = 0;
        std::vector<unsigned int>::size_type v182 = 0;
        size_t v183 = 4 * v286;
        do
        {
          std::vector<unsigned int>::pointer v184 = v322.__begin_;
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
          memcpy((char *)v184 + v181, v332, v183);
          v182 += v286;
          v181 += v183;
        }
        while (v182 < v180);
      }
    }
    else
    {
      std::vector<int>::resize(&v322, __sz[0]);
      if (__sz[0])
      {
        v176 = (unsigned int *)v332;
        std::vector<unsigned int>::pointer v177 = v322.__begin_;
        std::vector<unsigned int>::size_type v178 = 4 * __sz[0];
        do
        {
          unsigned int v179 = *v176++;
          *v177++ = v179;
          v178 -= 4;
        }
        while (v178);
      }
    }
    MEMORY[0x2455CF810](__p, "constant");
    unint64_t v185 = v326 & 0xFFFFFFFFFFFFFFF8;
    int v186 = (atomic_uint *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit(v186, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v185 == v186)
    {
      unint64_t v187 = v170 * v131;
      std::vector<float>::resize((uint64_t)&__dst, v187);
      if (v187)
      {
        uint64_t v188 = 0;
        unint64_t v189 = 0;
        uint64_t v190 = v131;
        size_t v191 = 4 * v131;
        do
        {
          v192 = (char *)__dst;
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v334);
          memcpy(&v192[v188], v335, v191);
          v189 += v190;
          v188 += v191;
        }
        while (v189 < v187);
      }
    }
    else
    {
      std::vector<float>::resize((uint64_t)&__dst, *(unint64_t *)v334);
      if (*(void *)v334) {
        memmove(__dst, v335, 4 * *(void *)v334);
      }
    }
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v328);
    if (*(char *)(String + 23) >= 0) {
      v194 = (const char *)String;
    }
    else {
      v194 = *(const char **)String;
    }
    if (v194) {
      v195 = v194;
    }
    else {
      v195 = "";
    }
    size_t v196 = strlen(v195);
    uint64_t v197 = (v196 >> 1) + 1;
    if (v197 < 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    size_t v198 = v196;
    v199 = operator new(2 * v197);
    bzero(v199, (v198 & 0xFFFFFFFFFFFFFFFELL) + 2);
    memcpy(v199, v195, v198);
    if ((MEMORY[0x2455CD220](HighVertexPerPolygon, "skeletonPath", 4, v197, v199) & 1) != 0
      && MEMORY[0x2455CD270](HighVertexPerPolygon, "skinnedAnimationGeometryBindTransform", 4, 4, v323)&& MEMORY[0x2455CD1F0](HighVertexPerPolygon, "skinnedAnimationWeights", 4, (unint64_t)(v320 - (unsigned char *)__dst) >> 2)&& MEMORY[0x2455CD200](HighVertexPerPolygon, "skinnedAnimationJointIndices", 4, (unint64_t)((char *)v322.__end_ - (char *)v322.__begin_) >> 2))
    {
      MEMORY[0x2455CD200](HighVertexPerPolygon, "skinnedAnimationInfluenceEndIndices", 4, (unint64_t)((char *)v333.__end_ - (char *)v333.__begin_) >> 2);
    }
    operator delete(v199);
    if (__dst)
    {
      v320 = __dst;
      operator delete(__dst);
    }
    if (v322.__begin_)
    {
      v322.__end_ = v322.__begin_;
      operator delete(v322.__begin_);
    }
    if (v333.__begin_)
    {
      v333.__end_ = v333.__begin_;
      operator delete(v333.__begin_);
    }
    if ((v326 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v326 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v327 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v327 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v328);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v334);
    if (v309)
    {
      if ((v309 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v201 = (v309 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        uint64_t v201 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
      }
      std::string::basic_string[abi:ne180100]<0>(__v, "vertexUV");
      addPrimvar((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v313, v201, (uint64_t)__v, HighVertexPerPolygon);
      if ((__v[23] & 0x80000000) != 0) {
        operator delete(*(void **)__v);
      }
      std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v291, &v309, &v309);
      AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorAddAttributeAlias();
    }
    v202 = v310;
    v203 = v311;
    if (v310 != v311)
    {
      while (1)
      {
        v204 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if (v204) {
          break;
        }
        AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if (AttributeIndex)
        {
          if ((*(void *)v202 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v205 = (*(void *)v202 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v205 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
          }
          if (*(char *)(v205 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__v, *(const std::string::value_type **)v205, *(void *)(v205 + 8));
          }
          else
          {
            long long v208 = *(_OWORD *)v205;
            *(void *)&__v[16] = *(void *)(v205 + 16);
            *(_OWORD *)__v = v208;
          }
          if ((*(void *)v202 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v207 = (*(void *)v202 & 0xFFFFFFFFFFFFFFF8) + 16;
            goto LABEL_380;
          }
LABEL_379:
          uint64_t v207 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v205);
LABEL_380:
          addPrimvar((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v313, v207, (uint64_t)__v, HighVertexPerPolygon);
          AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v291, v202, (uint64_t *)v202);
          if ((__v[23] & 0x80000000) != 0) {
            operator delete(*(void **)__v);
          }
        }
        v202 += 8;
        if (v202 == v203) {
          goto LABEL_383;
        }
      }
      if ((*(void *)v202 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v205 = (*(void *)v202 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t v205 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v204);
      }
      if (*(char *)(v205 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__v, *(const std::string::value_type **)v205, *(void *)(v205 + 8));
      }
      else
      {
        long long v206 = *(_OWORD *)v205;
        *(void *)&__v[16] = *(void *)(v205 + 16);
        *(_OWORD *)__v = v206;
      }
      if ((*(void *)v202 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v207 = (*(void *)v202 & 0xFFFFFFFFFFFFFFF8) + 16;
        goto LABEL_380;
      }
      goto LABEL_379;
    }
LABEL_383:
    if (!(v347 | v343))
    {
LABEL_488:
      if (v356)
      {
        handleNormals(HighVertexPerPolygon, &v355, (pxrInternal__aapl__pxrReserved__::VtValue *)v352, v354);
        REGeomModelDescriptorAddAttributeAlias();
        AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v291, &v317, &v317);
      }
      v251 = v310;
      v252 = v311;
      if (v310 == v311)
      {
        *(_OWORD *)&v323[8] = 0uLL;
        *(void *)v323 = &v323[8];
      }
      else
      {
        do
        {
          v253 = (void *)v292[0];
          if (v292[0])
          {
            unint64_t v254 = *(void *)v251 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              unint64_t v255 = v253[4] & 0xFFFFFFFFFFFFFFF8;
              if (v254 >= v255)
              {
                if (v255 >= v254) {
                  goto LABEL_508;
                }
                ++v253;
              }
              v253 = (void *)*v253;
            }
            while (v253);
          }
          if ((*(void *)v251 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v256 = (*(void *)v251 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v256 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
          }
          if (*(char *)(v256 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__v, *(const std::string::value_type **)v256, *(void *)(v256 + 8));
          }
          else
          {
            long long v257 = *(_OWORD *)v256;
            *(void *)&__v[16] = *(void *)(v256 + 16);
            *(_OWORD *)__v = v257;
          }
          if ((*(void *)v251 & 0xFFFFFFFFFFFFFFF8) != 0) {
            uint64_t v258 = (*(void *)v251 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            uint64_t v258 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v256);
          }
          addPrimvar((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v313, v258, (uint64_t)__v, HighVertexPerPolygon);
          AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t)&v291, v251, (uint64_t *)v251);
          if ((__v[23] & 0x80000000) != 0) {
            operator delete(*(void **)__v);
          }
LABEL_508:
          v251 += 8;
        }
        while (v251 != v252);
        v259 = v310;
        v260 = v311;
        *(_OWORD *)&v323[8] = 0uLL;
        *(void *)v323 = &v323[8];
        if (v310 != v311)
        {
          do
          {
            uint64_t v261 = *(void *)v259;
            if ((*(void *)v259 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v261 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v261 &= 0xFFFFFFFFFFFFFFF8;
            }
            v262 = (atomic_uint *)(v261 & 0xFFFFFFFFFFFFFFF8);
            if ((v261 & 0xFFFFFFFFFFFFFFF8) == 0) {
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
            }
            AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorGetAttributeIndex();
            if (AttributeIndex != -1)
            {
              AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorGetAttributeType();
              if (AttributeIndex == 6)
              {
                if (v262) {
                  uint64_t v263 = (uint64_t)(v262 + 4);
                }
                else {
                  uint64_t v263 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AttributeIndex);
                }
                if (*(char *)(v263 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)v263, *(void *)(v263 + 8));
                }
                else
                {
                  long long v264 = *(_OWORD *)v263;
                  v290.__r_.__value_.__r.__words[2] = *(void *)(v263 + 16);
                  *(_OWORD *)&v290.__r_.__value_.__l.__data_ = v264;
                }
                realityio::TexcoordID::TexcoordID((uint64_t)__v, (uint64_t)&v290, -1, 0);
                AttributeIndex = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__tree<realityio::TexcoordID>::__emplace_unique_key_args<realityio::TexcoordID,realityio::TexcoordID>((uint64_t **)v323, (realityio::TexcoordID *)__v, (uint64_t)__v);
                if ((__v[39] & 0x80000000) != 0) {
                  operator delete(*(void **)&__v[16]);
                }
                if ((__v[8] & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__v[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (SHIBYTE(v290.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v290.__r_.__value_.__l.__data_);
                }
              }
            }
            if ((v261 & 7) != 0) {
              atomic_fetch_add_explicit(v262, 0xFFFFFFFE, memory_order_release);
            }
            v259 += 8;
          }
          while (v259 != v260);
          v265 = *(unsigned char **)v323;
          if (*(unsigned char **)v323 != &v323[8])
          {
            unint64_t v266 = 0;
            do
            {
              realityio::TexcoordID::TexcoordID((uint64_t)__v, (uint64_t)(v265 + 32));
              std::to_string((std::string *)v334, v266);
              v267 = std::string::insert((std::string *)v334, 0, "UV");
              long long v268 = *(_OWORD *)&v267->__r_.__value_.__l.__data_;
              *(void *)&long long v366 = *((void *)&v267->__r_.__value_.__l + 2);
              *(_OWORD *)std::string __p = v268;
              v267->__r_.__value_.__l.__size_ = 0;
              v267->__r_.__value_.__r.__words[2] = 0;
              v267->__r_.__value_.__r.__words[0] = 0;
              if ((v334[23] & 0x80000000) != 0) {
                operator delete(*(void **)v334);
              }
              v269 = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorGetAttributeIndex();
              if (v269 == -1)
              {
                uint64_t v270 = *(void *)&__v[8];
                if ((__v[8] & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__v[8] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  v270 &= 0xFFFFFFFFFFFFFFF8;
                }
                v269 = (pxrInternal__aapl__pxrReserved__::TfToken *)REGeomModelDescriptorAddAttributeAlias();
                ++v266;
                if ((v270 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v270 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
              }
              uint64_t v271 = *(void *)&__v[8];
              if ((__v[8] & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__v[8] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v271 &= 0xFFFFFFFFFFFFFFF8;
              }
              v272 = (atomic_uint *)(v271 & 0xFFFFFFFFFFFFFFF8);
              if ((v271 & 0xFFFFFFFFFFFFFFF8) != 0) {
                uint64_t v273 = (uint64_t)(v272 + 4);
              }
              else {
                uint64_t v273 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v269);
              }
              unint64_t v274 = *(unsigned __int8 *)(v273 + 23);
              int v275 = (char)v274;
              if ((v274 & 0x80u) != 0) {
                unint64_t v274 = *(void *)(v273 + 8);
              }
              if (v274 >= 9)
              {
                if (v275 < 0) {
                  uint64_t v273 = *(void *)v273;
                }
                uint64_t v273 = strncmp((const char *)v273, "primvars:", 9uLL);
                BOOL v276 = v273 == 0;
              }
              else
              {
                BOOL v276 = 0;
              }
              if ((v271 & 7) != 0) {
                atomic_fetch_add_explicit(v272, 0xFFFFFFFE, memory_order_release);
              }
              if (v276)
              {
                uint64_t v277 = *(void *)&__v[8];
                if ((__v[8] & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__v[8] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  v277 &= 0xFFFFFFFFFFFFFFF8;
                }
                if ((v277 & 0xFFFFFFFFFFFFFFF8) == 0) {
                  pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v273);
                }
                pxrInternal__aapl__pxrReserved__::TfStringGetSuffix();
                if ((v277 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v277 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (REGeomModelDescriptorGetAttributeIndex() == -1)
                {
                  uint64_t v278 = *(void *)&__v[8];
                  if ((__v[8] & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__v[8] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    v278 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  REGeomModelDescriptorAddAttributeAlias();
                  if ((v278 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v278 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                }
                if ((v334[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v334);
                }
              }
              if (SBYTE7(v366) < 0) {
                operator delete(__p[0]);
              }
              if ((__v[39] & 0x80000000) != 0) {
                operator delete(*(void **)&__v[16]);
              }
              if ((__v[8] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__v[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              v279 = (void *)*((void *)v265 + 1);
              if (v279)
              {
                do
                {
                  v280 = v279;
                  v279 = (void *)*v279;
                }
                while (v279);
              }
              else
              {
                do
                {
                  v280 = (unsigned char *)*((void *)v265 + 2);
                  BOOL v45 = *(void *)v280 == (void)v265;
                  v265 = v280;
                }
                while (!v45);
              }
              v265 = v280;
            }
            while (v280 != &v323[8]);
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__v, v284);
      uint64_t v281 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__v);
      realityio::MeshDescriptorAction::setupModelDescriptor(HighVertexPerPolygon, v281, v289, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__v);
      *(void *)__v = HighVertexPerPolygon;
      RERetain();
      uint64_t v282 = v294;
      if (v294 != *(void *)__v)
      {
        uint64_t v294 = *(void *)__v;
        *(void *)__v = v282;
      }
      realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(__v);
      RERelease();
      *(void *)&__v[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
    }
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v338, (const pxrInternal__aapl__pxrReserved__::VtValue *)v346);
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v336, (const pxrInternal__aapl__pxrReserved__::VtValue *)v342);
    if (v339)
    {
      if (!v337)
      {
LABEL_390:
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v338)) {
          goto LABEL_391;
        }
LABEL_487:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v336);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v338);
        goto LABEL_488;
      }
    }
    else if (!v337)
    {
      goto LABEL_487;
    }
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v336)) {
      goto LABEL_487;
    }
    if (!v339)
    {
LABEL_391:
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayColor:indices");
      ValueAtPath = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0) {
        operator delete(*(void **)__v);
      }
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayColor:__interpolation");
      v210 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0) {
        operator delete(*(void **)__v);
      }
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayOpacity:indices");
      v211 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0) {
        operator delete(*(void **)__v);
      }
      std::string::basic_string[abi:ne180100]<0>(__v, "primvars:displayOpacity:__interpolation");
      v212 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
      if ((__v[23] & 0x80000000) != 0) {
        operator delete(*(void **)__v);
      }
      if (v210
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v210))
      {
        uint64_t v213 = *((void *)v210 + 1);
        if ((v213 & 4) != 0) {
          v210 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v213 & 0xFFFFFFFFFFFFFFF8) + 168))(v210);
        }
        unint64_t v214 = *(void *)v210;
        v322.__begin_ = (std::vector<unsigned int>::pointer)v214;
        if ((v214 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v214 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v322.__begin_ = (std::vector<unsigned int>::pointer)(v214 & 0xFFFFFFFFFFFFFFF8);
          v214 &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      else
      {
        unint64_t v214 = 0;
        v322.__begin_ = 0;
      }
      if (v212
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v212))
      {
        uint64_t v215 = *((void *)v212 + 1);
        if ((v215 & 4) != 0) {
          v212 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v215 & 0xFFFFFFFFFFFFFFF8) + 168))(v212);
        }
      }
      else
      {
        v212 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v322;
      }
      unint64_t v216 = *(void *)v212;
      __dst = (void *)v216;
      if ((v216 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        __dst = (void *)(v216 & 0xFFFFFFFFFFFFFFF8);
        v216 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (v339)
      {
        if ((v339 & 4) != 0) {
          uint64_t v217 = (*(uint64_t (**)(uint64_t *))((v339 & 0xFFFFFFFFFFFFFFF8) + 168))(&v338);
        }
        else {
          uint64_t v217 = v338;
        }
        long long v218 = *(_OWORD *)(v217 + 16);
        *(_OWORD *)__v = *(_OWORD *)v217;
        *(_OWORD *)&__v[16] = v218;
        uint64_t v219 = *(void *)(v217 + 32);
        *(void *)&__v[32] = v219;
        if (v219)
        {
          v220 = (atomic_ullong *)(v219 - 16);
          if (*(void *)&__v[24]) {
            v220 = *(atomic_ullong **)&__v[24];
          }
          atomic_fetch_add_explicit(v220, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        memset(__v, 0, 40);
      }
      if (ValueAtPath
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)ValueAtPath))
      {
        uint64_t v221 = ValueAtPath[1];
        if ((v221 & 4) != 0) {
          uint64_t v222 = (*(uint64_t (**)(uint64_t *))((v221 & 0xFFFFFFFFFFFFFFF8) + 168))(ValueAtPath);
        }
        else {
          uint64_t v222 = *ValueAtPath;
        }
        long long v223 = *(_OWORD *)(v222 + 16);
        *(_OWORD *)v323 = *(_OWORD *)v222;
        *(_OWORD *)&v323[16] = v223;
        uint64_t v224 = *(void *)(v222 + 32);
        *(void *)&long long v324 = v224;
        if (v224)
        {
          v225 = (atomic_ullong *)(v224 - 16);
          if (*(void *)&v323[24]) {
            v225 = *(atomic_ullong **)&v323[24];
          }
          atomic_fetch_add_explicit(v225, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        *(void *)&long long v324 = 0;
        memset(v323, 0, sizeof(v323));
      }
      if (v337)
      {
        if ((v337 & 4) != 0) {
          uint64_t v226 = (*(uint64_t (**)(uint64_t *))((v337 & 0xFFFFFFFFFFFFFFF8) + 168))(&v336);
        }
        else {
          uint64_t v226 = v336;
        }
        long long v227 = *(_OWORD *)(v226 + 16);
        *(_OWORD *)std::string __p = *(_OWORD *)v226;
        long long v366 = v227;
        uint64_t v228 = *(void *)(v226 + 32);
        *(void *)&long long v367 = v228;
        if (v228)
        {
          v229 = (atomic_ullong *)(v228 - 16);
          if (*((void *)&v366 + 1)) {
            v229 = (atomic_ullong *)*((void *)&v366 + 1);
          }
          atomic_fetch_add_explicit(v229, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        *(void *)&long long v367 = 0;
        *(_OWORD *)std::string __p = 0u;
        long long v366 = 0u;
      }
      if (v211
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)v211))
      {
        uint64_t v230 = v211[1];
        if ((v230 & 4) != 0) {
          uint64_t v231 = (*(uint64_t (**)(uint64_t *))((v230 & 0xFFFFFFFFFFFFFFF8) + 168))(v211);
        }
        else {
          uint64_t v231 = *v211;
        }
        long long v232 = *(_OWORD *)(v231 + 16);
        *(_OWORD *)v334 = *(_OWORD *)v231;
        *(_OWORD *)&v334[16] = v232;
        v233 = *(char **)(v231 + 32);
        v335 = v233;
        if (v233)
        {
          v234 = (atomic_ullong *)(v233 - 16);
          if (*(void *)&v334[24]) {
            v234 = *(atomic_ullong **)&v334[24];
          }
          atomic_fetch_add_explicit(v234, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        v335 = 0;
        memset(v334, 0, sizeof(v334));
      }
      unsigned int AttributeRate = getAttributeRate(&v322, HighVertexPerPolygon, *(uint64_t *)v323, *(uint64_t *)__v);
      unsigned int v236 = getAttributeRate(&__dst, HighVertexPerPolygon, *(uint64_t *)v334, (uint64_t)__p[0]);
      int v237 = v236;
      if (v236 | AttributeRate)
      {
        LOBYTE(v238) = 3;
        if (AttributeRate != 2 && v236 != 2)
        {
          if (AttributeRate == 1 && v236 == 1)
          {
            LOBYTE(v238) = 1;
          }
          else
          {
            if (AttributeRate > 3) {
              unsigned int v239 = 3;
            }
            else {
              unsigned int v239 = dword_23F7C7AD0[(char)AttributeRate];
            }
            if (v236 > 3) {
              unsigned int v240 = 3;
            }
            else {
              unsigned int v240 = dword_23F7C7AD0[(char)v236];
            }
            if (v239 <= v240) {
              LOBYTE(v239) = v240;
            }
            unsigned int v238 = 0x3010200u >> (8 * v239);
          }
        }
      }
      else
      {
        LOBYTE(v238) = 0;
      }
      CountForunsigned int AttributeRate = getCountForAttributeRate(HighVertexPerPolygon, v238);
      memset(&v333, 0, sizeof(v333));
      if (CountForAttributeRate)
      {
        std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](&v333, CountForAttributeRate);
        std::vector<unsigned int>::pointer v242 = v333.__end_;
        bzero(v333.__end_, 16 * CountForAttributeRate);
        v333.__end_ = &v242[4 * CountForAttributeRate];
      }
      if (*(void *)__v)
      {
        getResampleIndices(__sz, HighVertexPerPolygon, (uint64_t *)v323, AttributeRate, v238);
        v243 = (void *)__sz[1];
        if (__sz[1] != __sz[0])
        {
          unint64_t v244 = 0;
          v243 = (void *)__sz[0];
          do
          {
            uint64_t v245 = *(void *)__v - 1;
            if ((unint64_t)(*(void *)__v - 1) >= v243[v244]) {
              uint64_t v245 = v243[v244];
            }
            uint64_t v246 = *(void *)&__v[32] + 12 * v245;
            *(void *)&long long v247 = *(void *)v246;
            DWORD2(v247) = *(_DWORD *)(v246 + 8);
            HIDWORD(v247) = 1.0;
            *(_OWORD *)&v333.__begin_[4 * v244++] = v247;
            v243 = (void *)__sz[0];
          }
          while (v244 < (uint64_t)(__sz[1] - __sz[0]) >> 3);
        }
        if (v243)
        {
          __sz[1] = (std::vector<unsigned int>::size_type)v243;
          operator delete(v243);
        }
      }
      if (__p[0])
      {
        getResampleIndices(__sz, HighVertexPerPolygon, (uint64_t *)v334, v237, v238);
        v248 = (void *)__sz[1];
        if (__sz[1] != __sz[0])
        {
          unint64_t v249 = 0;
          uint64_t v250 = 3;
          v248 = (void *)__sz[0];
          do
          {
            v333.__begin_[v250] = *(_DWORD *)(v367 + 4 * v248[v249++]);
            v248 = (void *)__sz[0];
            v250 += 4;
          }
          while (v249 < (uint64_t)(__sz[1] - __sz[0]) >> 3);
        }
        if (v248)
        {
          __sz[1] = (std::vector<unsigned int>::size_type)v248;
          operator delete(v248);
        }
      }
      MEMORY[0x2455CD270](HighVertexPerPolygon, "vertexColor", v238, (unint64_t)((char *)v333.__end_ - (char *)v333.__begin_) >> 4);
      if (v333.__begin_)
      {
        v333.__end_ = v333.__begin_;
        operator delete(v333.__begin_);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v334);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v323);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__v);
      if ((v216 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        unint64_t v214 = (unint64_t)v322.__begin_;
      }
      if ((v214 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_487;
    }
    goto LABEL_390;
  }
  *(void *)(a5 + 8) = 0;
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&v294);
  if (v295.__begin_)
  {
    v295.__end_ = v295.__begin_;
    operator delete(v295.__begin_);
  }
  if (v296.__begin_)
  {
    v296.__end_ = v296.__begin_;
    operator delete(v296.__begin_);
  }
  if (v297[0])
  {
    v297[1] = v297[0];
    operator delete(v297[0]);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__n);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v301);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v304);
  *(void *)__v = v308;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v340);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v342);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v344);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v346);
  if ((v309 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v309 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)__v = &v310;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v313, 0);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v314, v315[0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v348);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v350);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v352);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v354);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v355);
  if ((v316 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v316 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v317 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v317 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v357);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v359);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v361);
  *(void *)__v = &v318;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v363);
}

void sub_23F603864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,__int16 a63)
{
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&STACK[0x220]);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v70 - 224);
  if ((v69 & 7) != 0)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    unint64_t v68 = STACK[0x208];
  }
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x2F0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x300]);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a21, (void *)a22);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&a27);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  if (a31)
  {
    a32 = (uint64_t)a31;
    operator delete(a31);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a37);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a43);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a49);
  a49 = (uint64_t)&a55;
  std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x310]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x320]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x330]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x340]);
  if ((a58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a49 = (uint64_t)&a59;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a62, 0);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&a63, (void *)a64);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x350]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x360]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x370]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x380]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x390]);
  if ((a66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x3A0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x3B0]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x3C0]);
  a49 = (uint64_t)&a68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&STACK[0x3D0]);
  _Unwind_Resume(a1);
}

void handleNormals(uint64_t a1, unint64_t **a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t *a4)
{
  if (a3
    && (uint64_t v7 = a3,
        pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(a3)))
  {
    uint64_t v8 = *((void *)v7 + 1);
    if ((v8 & 4) != 0) {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v7);
    }
    uint64_t v9 = *(void *)v7;
    uint64_t v14 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    MEMORY[0x2455CF810](&v14, "");
  }
  unsigned int AttributeRateHelper = getAttributeRateHelper(&v14, 1u);
  memset(&__p, 0, sizeof(__p));
  convertIndices(a4, &__p);
  if (!AttributeRateHelper)
  {
    unsigned int FaceCount = REGeomModelDescriptorGetFaceCount();
    std::vector<int>::resize(&__p, FaceCount);
    if (__p.__end_ != __p.__begin_)
    {
      unint64_t v12 = __p.__end_ - __p.__begin_;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      bzero(__p.__begin_, 4 * v12);
    }
    unsigned int AttributeRateHelper = 2;
  }
  addPrimvarToDescriptor(a1, a2, AttributeRateHelper, (uint64_t *)&__p, (uint64_t)"vertexNormal");
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_23F6041A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void addPrimvar(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::find();
  uint64_t v9 = v8;
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  if (v9 == v11 && (!v9 || v7 == v10)) {
    return;
  }
  unint64_t v12 = (unint64_t **)(v7 + 56);
  __p.__end_ = 0;
  char v13 = pxrInternal__aapl__pxrReserved__::VtValue::operator==(v7 + 56, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
  if (v13) {
    return;
  }
  uint64_t v35 = a4;
  if (*(char *)(v7 + 55) >= 0) {
    size_t v14 = *(unsigned __int8 *)(v7 + 55);
  }
  else {
    size_t v14 = *(void *)(v7 + 40);
  }
  std::vector<unsigned int>::pointer p_p = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v14 + 8);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    std::vector<unsigned int>::pointer p_p = __p.__begin_;
  }
  if (v14)
  {
    if (*(char *)(v7 + 55) >= 0) {
      unint64_t v16 = (const void *)(v7 + 32);
    }
    else {
      unint64_t v16 = *(const void **)(v7 + 32);
    }
    memmove(p_p, v16, v14);
  }
  strcpy((char *)p_p + v14, ":indices");
  ValueAtPath = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  if (*(char *)(v7 + 55) >= 0) {
    size_t v18 = *(unsigned __int8 *)(v7 + 55);
  }
  else {
    size_t v18 = *(void *)(v7 + 40);
  }
  std::vector<unsigned int>::pointer begin = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v18 + 16);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    std::vector<unsigned int>::pointer begin = __p.__begin_;
  }
  if (v18)
  {
    if (*(char *)(v7 + 55) >= 0) {
      long long v20 = (const void *)(v7 + 32);
    }
    else {
      long long v20 = *(const void **)(v7 + 32);
    }
    memmove(begin, v20, v18);
  }
  strcpy((char *)begin + v18, ":__interpolation");
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  if (*(char *)(v7 + 55) >= 0) {
    size_t v22 = *(unsigned __int8 *)(v7 + 55);
  }
  else {
    size_t v22 = *(void *)(v7 + 40);
  }
  std::vector<unsigned int>::pointer v23 = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v22 + 14);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    std::vector<unsigned int>::pointer v23 = __p.__begin_;
  }
  if (v22)
  {
    if (*(char *)(v7 + 55) >= 0) {
      uint64_t v24 = (const void *)(v7 + 32);
    }
    else {
      uint64_t v24 = *(const void **)(v7 + 32);
    }
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, ":__elementSize");
  unint64_t v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  if (*(char *)(v7 + 55) >= 0) {
    size_t v26 = *(unsigned __int8 *)(v7 + 55);
  }
  else {
    size_t v26 = *(void *)(v7 + 40);
  }
  std::vector<unsigned int>::pointer v27 = (std::vector<unsigned int>::pointer)&__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 11);
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    std::vector<unsigned int>::pointer v27 = __p.__begin_;
  }
  if (v26)
  {
    if (*(char *)(v7 + 55) >= 0) {
      unint64_t v28 = (const void *)(v7 + 32);
    }
    else {
      unint64_t v28 = *(const void **)(v7 + 32);
    }
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, ":__typeName");
  uint64_t v29 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
    operator delete(__p.__begin_);
  }
  if (*(char *)(a3 + 23) < 0) {
    a3 = *(void *)a3;
  }
  if (v21
    && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v21))
  {
    uint64_t v30 = *((void *)v21 + 1);
    if ((v30 & 4) != 0) {
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(v21);
    }
    uint64_t v31 = *(void *)v21;
    uint64_t v37 = v31;
    if ((v31 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v37 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  else
  {
    MEMORY[0x2455CF810](&v37, "");
  }
  unsigned int AttributeRateHelper = getAttributeRateHelper(&v37, 0xFFu);
  if (v25)
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(v25))
    {
      uint64_t v33 = *((void *)v25 + 1);
      if ((v33 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
      }
    }
  }
  if (v29)
  {
    uint64_t v34 = *((void *)v29 + 1);
    if (v34)
    {
      if (!strcmp((const char *)(*(void *)(*(void *)(v34 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__16SdfValueTypeNameE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
LABEL_73:
        if ((v34 & 4) != 0) {
          uint64_t v29 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v29);
        }
        uint64_t v36 = *(void *)v29;
        goto LABEL_77;
      }
      if ((v34 & 4) != 0
      {
        uint64_t v34 = *((void *)v29 + 1);
        goto LABEL_73;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v36);
LABEL_77:
  memset(&__p, 0, sizeof(__p));
  convertIndices(ValueAtPath, &__p);
  addPrimvarToDescriptor(v35, v12, AttributeRateHelper, (uint64_t *)&__p, a3);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_23F6046C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::SphereMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, void *a3@<X4>, uint64_t a4@<X8>)
{
  buildSphereOptions(a2, a3);
  uint64_t result = REGeomModelDescriptorCreateFromSphereOptions();
  if (result)
  {
    uint64_t v9 = result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v11, a1);
    uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    uint64_t v11 = v9;
    *(void *)(a4 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
  }
  *(void *)(a4 + 8) = 0;
  return result;
}

void sub_23F604810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t buildSphereOptions(uint64_t *a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    float v8 = 1.0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v6));
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + v5);
      uint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      MEMORY[0x2455CF810](&v16, "radius");
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v16 & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v17))
        {
          if ((v16 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          char v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
          if ((v16 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v12 & 1) == 0) {
            goto LABEL_22;
          }
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v17))
        {
          if ((v18 & 4) != 0) {
            char v13 = (double *)(*(uint64_t (**)(unsigned char *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v17);
          }
          else {
            char v13 = (double *)v17;
          }
          float v8 = *v13;
        }
        else
        {
          if ((v18 & 4) != 0) {
            size_t v14 = (float *)(*(uint64_t (**)(unsigned char *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v17);
          }
          else {
            size_t v14 = (float *)v17;
          }
          float v8 = *v14;
        }
      }
      else if ((v16 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_22:
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
      ++v7;
      uint64_t v2 = *a1;
      v6 += 16;
      v5 += 8;
      if (v7 >= (a1[1] - *a1) >> 3) {
        return REGeomBuildSphereDefaultOptions() | ((unint64_t)LODWORD(v8) << 32);
      }
    }
  }
  float v8 = 1.0;
  return REGeomBuildSphereDefaultOptions() | ((unint64_t)LODWORD(v8) << 32);
}

void sub_23F604A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void realityio::SphereAssetDescriptorAction::operator()(uint64_t *a1@<X3>, void *a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  buildSphereOptions(a1, a2);
  uint64_t SphereDescriptor = REMeshAssetCreateSphereDescriptor();
  *(void *)(a3 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy();
}

void sub_23F604B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::CapsuleMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, void *a3@<X4>, uint64_t a4@<X8>)
{
  long long v14 = 0uLL;
  int v15 = 0;
  buildCapsuleOptions((uint64_t)&v14, a2, a3);
  long long v12 = v14;
  int v13 = v15;
  uint64_t result = REGeomModelDescriptorCreateFromCapsuleOptions();
  if (result)
  {
    uint64_t v9 = result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v11, a1);
    uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    uint64_t v11 = v9;
    *(void *)(a4 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
  }
  *(void *)(a4 + 8) = 0;
  return result;
}

void sub_23F604C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t buildCapsuleOptions(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    float v9 = 1.0;
    float v10 = 0.5;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v7));
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + v6);
      uint64_t v12 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + v6));
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2455CF810](&v24, "radius");
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v24 & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v25))
        {
          if ((v24 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
LABEL_21:
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v25))
          {
            if ((v26 & 4) != 0) {
              uint64_t v16 = (double *)(*(uint64_t (**)(unsigned char *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
            }
            else {
              uint64_t v16 = (double *)v25;
            }
            float v10 = *v16;
          }
          else
          {
            if ((v26 & 4) != 0) {
              unint64_t v17 = (float *)(*(uint64_t (**)(unsigned char *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
            }
            else {
              unint64_t v17 = (float *)v25;
            }
            float v10 = *v17;
          }
          goto LABEL_38;
        }
        char v15 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if ((v24 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v15) {
          goto LABEL_21;
        }
      }
      else if ((v24 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      long long v14 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2455CF810](&v24, "height");
      if ((*v14 & 0xFFFFFFFFFFFFFFF8) == (v24 & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v25))
        {
          if ((v24 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          char v18 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
          if ((v24 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v18 & 1) == 0) {
            goto LABEL_38;
          }
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v25))
        {
          if ((v26 & 4) != 0) {
            uint64_t v19 = (double *)(*(uint64_t (**)(unsigned char *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
          }
          else {
            uint64_t v19 = (double *)v25;
          }
          float v9 = *v19;
        }
        else
        {
          if ((v26 & 4) != 0) {
            long long v20 = (float *)(*(uint64_t (**)(unsigned char *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v25);
          }
          else {
            long long v20 = (float *)v25;
          }
          float v9 = *v20;
        }
      }
      else if ((v24 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_38:
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
      ++v8;
      uint64_t v3 = *a2;
      v7 += 16;
      v6 += 8;
      if (v8 >= (a2[1] - *a2) >> 3) {
        goto LABEL_47;
      }
    }
  }
  float v10 = 0.5;
  float v9 = 1.0;
LABEL_47:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t result = REGeomBuildCapsuleDefaultOptions();
  float v22 = v9 + v10 * 2.0;
  *(float *)(a1 + 8) = v10;
  *(float *)(a1 + 12) = v22;
  *(_WORD *)a1 = 64;
  *(_WORD *)(a1 + 4) = 32;
  return result;
}

void sub_23F604F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void realityio::CapsuleAssetDescriptorAction::operator()(uint64_t *a1@<X3>, void *a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  long long v10 = 0uLL;
  int v11 = 0;
  buildCapsuleOptions((uint64_t)&v10, a1, a2);
  long long v8 = v10;
  int v9 = v11;
  uint64_t CapsuleDescriptor = REMeshAssetCreateCapsuleDescriptor();
  *(void *)(a3 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy();
}

void sub_23F605080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::ConeMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, void *a3@<X4>, uint64_t a4@<X8>)
{
  buildConeOptions(a2, a3);
  uint64_t result = REGeomModelDescriptorCreateFromConeOptions();
  if (result)
  {
    uint64_t v9 = result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v11, a1);
    uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    uint64_t v11 = v9;
    *(void *)(a4 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
  }
  *(void *)(a4 + 8) = 0;
  return result;
}

void sub_23F60515C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t buildConeOptions(uint64_t *a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    float v8 = 1.0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a2 + v6));
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + v5);
      uint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 + v5));
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      MEMORY[0x2455CF810](&v18, "radius");
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) != (v18 & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
      {
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        char v13 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v13 & 1) == 0) {
          goto LABEL_9;
        }
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
      {
        if ((v20 & 4) == 0) {
          goto LABEL_36;
        }
      }
      else if ((v20 & 4) == 0)
      {
        goto LABEL_36;
      }
      (*(void (**)(unsigned char *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
LABEL_36:
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
      ++v7;
      uint64_t v2 = *a1;
      v6 += 16;
      v5 += 8;
      if (v7 >= (a1[1] - *a1) >> 3) {
        return REGeomBuildConeDefaultOptions() & 0xFFFF0000 | ((unint64_t)LODWORD(v8) << 32) | 0x40;
      }
    }
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
LABEL_9:
    uint64_t v12 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
    MEMORY[0x2455CF810](&v18, "height");
    if ((*v12 & 0xFFFFFFFFFFFFFFF8) == (v18 & 0xFFFFFFFFFFFFFFF8))
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
      {
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        char v14 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v14 & 1) == 0) {
          goto LABEL_36;
        }
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
      {
        if ((v20 & 4) != 0) {
          char v15 = (double *)(*(uint64_t (**)(unsigned char *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
        }
        else {
          char v15 = (double *)v19;
        }
        float v8 = *v15;
      }
      else
      {
        if ((v20 & 4) != 0) {
          uint64_t v16 = (float *)(*(uint64_t (**)(unsigned char *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
        }
        else {
          uint64_t v16 = (float *)v19;
        }
        float v8 = *v16;
      }
    }
    else if ((v18 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    goto LABEL_36;
  }
  float v8 = 1.0;
  return REGeomBuildConeDefaultOptions() & 0xFFFF0000 | ((unint64_t)LODWORD(v8) << 32) | 0x40;
}

void sub_23F605488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void realityio::ConeAssetDescriptorAction::operator()(uint64_t *a1@<X3>, void *a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  buildConeOptions(a1, a2);
  uint64_t ConeDescriptor = REMeshAssetCreateConeDescriptor();
  *(void *)(a3 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy();
}

void sub_23F605580(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::CubeMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, void *a3@<X4>, uint64_t a4@<X8>)
{
  memset(v13, 0, 28);
  buildBoxOptions((uint64_t)v13, a2, a3);
  v12[0] = v13[0];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v13 + 12);
  uint64_t result = REGeomModelDescriptorCreateFromBoxOptions();
  if (result)
  {
    uint64_t v9 = result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v11, a1);
    uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    uint64_t v11 = v9;
    *(void *)(a4 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
  }
  *(void *)(a4 + 8) = 0;
  return result;
}

void sub_23F605680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t buildBoxOptions(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    float v10 = 1.0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v8));
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + v7);
      uint64_t v12 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2455CF810](&v18, "size");
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v18 & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
        {
          if ((v18 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          char v14 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
          if ((v18 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v14 & 1) == 0) {
            goto LABEL_22;
          }
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v19))
        {
          if ((v20 & 4) != 0) {
            char v15 = (double *)(*(uint64_t (**)(unsigned char *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
          }
          else {
            char v15 = (double *)v19;
          }
          float v10 = *v15;
        }
        else
        {
          if ((v20 & 4) != 0) {
            uint64_t v16 = (float *)(*(uint64_t (**)(unsigned char *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v19);
          }
          else {
            uint64_t v16 = (float *)v19;
          }
          float v10 = *v16;
        }
      }
      else if ((v18 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_22:
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
      ++v9;
      uint64_t v4 = *a2;
      v8 += 16;
      v7 += 8;
      if (v9 >= (a2[1] - *a2) >> 3) {
        goto LABEL_29;
      }
    }
  }
  float v10 = 1.0;
LABEL_29:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t result = REGeomBuildBoxDefaultOptions();
  *(float *)(a1 + 12) = v10;
  *(float *)(a1 + 16) = v10;
  *(float *)(a1 + 20) = v10;
  return result;
}

void sub_23F6058C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void realityio::CubeAssetDescriptorAction::operator()(uint64_t *a1@<X3>, void *a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  memset(v9, 0, 28);
  buildBoxOptions((uint64_t)v9, a1, a2);
  v8[0] = v9[0];
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)v9 + 12);
  uint64_t BoxDescriptor = REMeshAssetCreateBoxDescriptor();
  *(void *)(a3 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy();
}

void sub_23F6059C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::CylinderMeshDescriptorAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, uint64_t *a2@<X3>, void *a3@<X4>, uint64_t a4@<X8>)
{
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  buildCylinderOptions((uint64_t)&v14, a2, a3);
  long long v12 = v14;
  uint64_t v13 = v15;
  uint64_t result = REGeomModelDescriptorCreateFromCylinderOptions();
  if (result)
  {
    uint64_t v9 = result;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v11, a1);
    uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    realityio::MeshDescriptorAction::setupModelDescriptor(v9, Name, a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    uint64_t v11 = v9;
    *(void *)(a4 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
  }
  *(void *)(a4 + 8) = 0;
  return result;
}

void sub_23F605AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t buildCylinderOptions(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    float v9 = 1.0;
    float v10 = 0.5;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v7));
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + v6);
      uint64_t v12 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + v6));
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2455CF810](&v23, "radius");
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (v23 & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v24))
        {
          if ((v23 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
LABEL_21:
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v24))
          {
            if ((v25 & 4) != 0) {
              uint64_t v16 = (double *)(*(uint64_t (**)(unsigned char *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v24);
            }
            else {
              uint64_t v16 = (double *)v24;
            }
            float v10 = *v16;
          }
          else
          {
            if ((v25 & 4) != 0) {
              unint64_t v17 = (float *)(*(uint64_t (**)(unsigned char *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v24);
            }
            else {
              unint64_t v17 = (float *)v24;
            }
            float v10 = *v17;
          }
          goto LABEL_38;
        }
        char v15 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v15) {
          goto LABEL_21;
        }
      }
      else if ((v23 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      long long v14 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2455CF810](&v23, "height");
      if ((*v14 & 0xFFFFFFFFFFFFFFF8) == (v23 & 0xFFFFFFFFFFFFFFF8))
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v24))
        {
          if ((v23 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          char v18 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
          if ((v23 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v18 & 1) == 0) {
            goto LABEL_38;
          }
        }
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)v24))
        {
          if ((v25 & 4) != 0) {
            uint64_t v19 = (double *)(*(uint64_t (**)(unsigned char *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v24);
          }
          else {
            uint64_t v19 = (double *)v24;
          }
          float v9 = *v19;
        }
        else
        {
          if ((v25 & 4) != 0) {
            uint64_t v20 = (float *)(*(uint64_t (**)(unsigned char *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v24);
          }
          else {
            uint64_t v20 = (float *)v24;
          }
          float v9 = *v20;
        }
      }
      else if ((v23 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_38:
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v24);
      ++v8;
      uint64_t v3 = *a2;
      v7 += 16;
      v6 += 8;
      if (v8 >= (a2[1] - *a2) >> 3) {
        goto LABEL_47;
      }
    }
  }
  float v10 = 0.5;
  float v9 = 1.0;
LABEL_47:
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t result = REGeomBuildCylinderDefaultOptions();
  *(float *)(a1 + 8) = v10;
  *(float *)(a1 + 12) = v10;
  *(float *)(a1 + 4) = v9;
  *(_WORD *)a1 = 64;
  return result;
}

void sub_23F605DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void realityio::CylinderAssetDescriptorAction::operator()(uint64_t *a1@<X3>, void *a2@<X4>, uint64_t a3@<X8>)
{
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  long long v10 = 0uLL;
  uint64_t v11 = 0;
  buildCylinderOptions((uint64_t)&v10, a1, a2);
  long long v8 = v10;
  uint64_t v9 = v11;
  uint64_t CylinderDescriptor = REMeshAssetCreateCylinderDescriptor();
  *(void *)(a3 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy();
}

void sub_23F605F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *realityio::BlendShapeWeightsComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, void *a2@<X3>, uint64_t *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  v19[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  uint64_t v18 = 0;
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    REBlendShapeWeightsComponentGetComponentType();
    uint64_t v9 = REComponentCreateByClass();
    v19[0] = v9;
    if (v9) {
      RERetain();
    }
    uint64_t v10 = v18;
    if (v18 != v9)
    {
      uint64_t v18 = v9;
      v19[0] = v10;
    }
    realityio::WrappedRERef<REComponent *>::~WrappedRERef(v19);
    RERelease();
    v19[1] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
  }
  long long v8 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::Get<realityio::WrappedRERef<REComponent *>>(a4);
  realityio::WrappedRERef<REAsset *>::operator=(&v18, v8);
  v19[0] = 0;
  if (a2[1] != *a2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      uint64_t v13 = *a3;
      long long v14 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v11);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(v14))
      {
        uint64_t v15 = *(void *)(v13 + v11 + 8);
        if ((v15 & 4) != 0) {
          uint64_t v16 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v15 & 0xFFFFFFFFFFFFFFF8)
        }
                                                                                                  + 168))(v14);
        else {
          uint64_t v16 = *(uint64_t **)v14;
        }
        realityio::WrappedRERef<REAsset *>::operator=(v19, v16);
      }
      ++v12;
      v11 += 16;
    }
    while (v12 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  REBlendShapeWeightsComponentSetBlendShapeWeightsDefinition();
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v19);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v18);
}

void sub_23F6060BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

uint64_t getAttributeRateHelper(void *a1, unsigned int a2)
{
  MEMORY[0x2455CF810](&v15, "constant");
  unint64_t v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit(v5, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v4 == v5) {
    return 0;
  }
  MEMORY[0x2455CF810](&v15, "uniform");
  unint64_t v6 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v6 == v7) {
    return 2;
  }
  MEMORY[0x2455CF810](&v15, "varying");
  unint64_t v8 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v8 == v9) {
    return 1;
  }
  MEMORY[0x2455CF810](&v15, "vertex");
  unint64_t v10 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v10 == v11) {
    return 1;
  }
  MEMORY[0x2455CF810](&v15, "faceVarying");
  unint64_t v12 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v12 == v13) {
    return 3;
  }
  else {
    return a2;
  }
}

void convertIndices(uint64_t *a1, std::vector<unsigned int> *a2)
{
  if (a1
    && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    uint64_t v4 = a1[1];
    if ((v4 & 4) != 0) {
      uint64_t v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    }
    else {
      uint64_t v5 = *a1;
    }
    long long v6 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)__sz = *(_OWORD *)v5;
    long long v14 = v6;
    uint64_t v7 = *(unsigned int **)(v5 + 32);
    uint64_t v15 = v7;
    if (v7)
    {
      unint64_t v8 = (atomic_ullong *)(v7 - 4);
      if (*((void *)&v14 + 1)) {
        unint64_t v8 = (atomic_ullong *)*((void *)&v14 + 1);
      }
      atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    std::vector<int>::resize(a2, __sz[0]);
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    uint64_t v9 = v15;
    pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__sz);
    unint64_t v10 = &v15[__sz[0]];
    if (v9 != v10)
    {
      std::vector<unsigned int>::pointer begin = a2->__begin_;
      do
      {
        unsigned int v12 = *v9++;
        *begin++ = v12;
      }
      while (v9 != v10);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__sz);
  }
}

void sub_23F606330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void addPrimvarToDescriptor(uint64_t a1, unint64_t **a2, unsigned int AttributeRateFromCount, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = *a4;
  uint64_t v11 = a4[1];
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    unsigned int v12 = a2[1];
    if ((v12 & 4) != 0) {
      uint64_t v13 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                               + 168))(a2);
    else {
      uint64_t v13 = *a2;
    }
    uint64_t v52 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v13);
    long long v14 = (unsigned __int16 *)v13[4];
    unint64_t v15 = *v13;
    *(void *)&long long v54 = &__p;
    if (v15)
    {
      uint64_t v16 = &v14[2 * v15];
      uint64_t v17 = MEMORY[0x263F90640];
      do
      {
        LODWORD(v18) = *(_DWORD *)(v17 + 4 * *v14);
        HIDWORD(v18) = *(_DWORD *)(v17 + 4 * v14[1]);
        std::vector<unsigned int>::pointer p_p = v18;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v54, &p_p);
        v14 += 2;
      }
      while (v14 != v16);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      }
LABEL_45:
      REGeomModelDescriptorAddIndexedAttributeVector2F();
      goto LABEL_119;
    }
    if (AttributeRateFromCount == 255) {
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v52 - (unsigned char *)__p) >> 3);
    }
    unint64_t v29 = v52 - (unsigned char *)__p;
    if (AttributeRateFromCount) {
      uint64_t v30 = AttributeRateFromCount;
    }
    else {
      uint64_t v30 = 4 * ((unint64_t)(v52 - (unsigned char *)__p) > 8);
    }
    goto LABEL_81;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v19 = a2[1];
    if ((v19 & 4) != 0) {
      uint64_t v20 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                               + 168))(a2);
    else {
      uint64_t v20 = *a2;
    }
    uint64_t v52 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v20);
    uint64_t v21 = (void ***)v20[4];
    unint64_t v22 = *v20;
    *(void *)&long long v54 = &__p;
    if (v22)
    {
      uint64_t v23 = 8 * v22;
      do
      {
        std::vector<unsigned int>::pointer p_p = *v21;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v54, &p_p);
        ++v21;
        v23 -= 8;
      }
      while (v23);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      }
      goto LABEL_45;
    }
    if (AttributeRateFromCount == 255) {
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v52 - (unsigned char *)__p) >> 3);
    }
    unint64_t v29 = v52 - (unsigned char *)__p;
    if (AttributeRateFromCount) {
      uint64_t v30 = AttributeRateFromCount;
    }
    else {
      uint64_t v30 = 4 * ((unint64_t)(v52 - (unsigned char *)__p) > 8);
    }
    goto LABEL_81;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v24 = a2[1];
    if ((v24 & 4) != 0) {
      uint64_t v25 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                               + 168))(a2);
    else {
      uint64_t v25 = *a2;
    }
    uint64_t v52 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v25);
    uint64_t v26 = (float64x2_t *)v25[4];
    unint64_t v27 = *v25;
    *(void *)&long long v54 = &__p;
    if (v27)
    {
      uint64_t v28 = 16 * v27;
      do
      {
        std::vector<unsigned int>::pointer p_p = (void **)vcvt_f32_f64(*v26);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v54, &p_p);
        ++v26;
        v28 -= 16;
      }
      while (v28);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      }
      goto LABEL_45;
    }
    if (AttributeRateFromCount == 255) {
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v52 - (unsigned char *)__p) >> 3);
    }
    unint64_t v29 = v52 - (unsigned char *)__p;
    if (AttributeRateFromCount) {
      uint64_t v30 = AttributeRateFromCount;
    }
    else {
      uint64_t v30 = 4 * ((unint64_t)(v52 - (unsigned char *)__p) > 8);
    }
    goto LABEL_81;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v31 = a2[1];
    if ((v31 & 4) != 0) {
      unint64_t v32 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                               + 168))(a2);
    else {
      unint64_t v32 = *a2;
    }
    uint64_t v52 = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v32);
    uint64_t v33 = (int32x2_t *)v32[4];
    unint64_t v34 = *v32;
    *(void *)&long long v54 = &__p;
    if (v34)
    {
      uint64_t v35 = 8 * v34;
      do
      {
        std::vector<unsigned int>::pointer p_p = (void **)vcvt_f32_s32(*v33);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_((void ***)&v54, &p_p);
        ++v33;
        v35 -= 8;
      }
      while (v35);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      }
      goto LABEL_45;
    }
    if (AttributeRateFromCount == 255) {
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v52 - (unsigned char *)__p) >> 3);
    }
    unint64_t v29 = v52 - (unsigned char *)__p;
    if (AttributeRateFromCount) {
      uint64_t v30 = AttributeRateFromCount;
    }
    else {
      uint64_t v30 = 4 * ((unint64_t)(v52 - (unsigned char *)__p) > 8);
    }
LABEL_81:
    MEMORY[0x2455CD250](a1, a5, v30, v29 >> 3);
    goto LABEL_119;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v36 = a2[1];
    if ((v36 & 4) != 0) {
      uint64_t v37 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                               + 168))(a2);
    else {
      uint64_t v37 = *a2;
    }
    uint64_t v52 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v37);
    uint64_t v39 = (unsigned __int16 *)v37[4];
    unint64_t v40 = *v37;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v40)
    {
      int v41 = &v39[3 * v40];
      uint64_t v42 = MEMORY[0x263F90640];
      do
      {
        LODWORD(v38) = *(_DWORD *)(v42 + 4 * *v39);
        DWORD1(v38) = *(_DWORD *)(v42 + 4 * v39[1]);
        DWORD2(v38) = *(_DWORD *)(v42 + 4 * v39[2]);
        long long v54 = v38;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v54);
        v39 += 3;
      }
      while (v39 != v41);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      }
LABEL_60:
      REGeomModelDescriptorAddIndexedAttributeVector3F();
      goto LABEL_119;
    }
    if (AttributeRateFromCount == 255) {
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v52 - (unsigned char *)__p) >> 4);
    }
    unint64_t v49 = v52 - (unsigned char *)__p;
    if (AttributeRateFromCount) {
      uint64_t v50 = AttributeRateFromCount;
    }
    else {
      uint64_t v50 = 4 * ((unint64_t)(v52 - (unsigned char *)__p) > 0x10);
    }
    goto LABEL_118;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    unint64_t v43 = a2[1];
    if ((v43 & 4) != 0) {
      BOOL v44 = (unint64_t *)(*(uint64_t (**)(unint64_t **))(((unint64_t)v43 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                               + 168))(a2);
    else {
      BOOL v44 = *a2;
    }
    uint64_t v52 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v44);
    unint64_t v46 = v44[4];
    unint64_t v47 = *v44;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v47)
    {
      uint64_t v48 = 12 * v47;
      do
      {
        *(void *)&long long v45 = *(void *)v46;
        DWORD2(v45) = *(_DWORD *)(v46 + 8);
        long long v54 = v45;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v54);
        v46 += 12;
        v48 -= 12;
      }
      while (v48);
    }
    if (v10 != v11)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (a4[1] - *a4) >> 2);
      }
      goto LABEL_60;
    }
    if (AttributeRateFromCount == 255) {
      AttributeRateFromCount = getAttributeRateFromCount(a1, (v52 - (unsigned char *)__p) >> 4);
    }
    unint64_t v49 = v52 - (unsigned char *)__p;
    if (AttributeRateFromCount) {
      uint64_t v50 = AttributeRateFromCount;
    }
    else {
      uint64_t v50 = 4 * ((unint64_t)(v52 - (unsigned char *)__p) > 0x10);
    }
LABEL_118:
    MEMORY[0x2455CD260](a1, a5, v50, v49 >> 4);
LABEL_119:
    if (__p)
    {
      uint64_t v52 = __p;
      operator delete(__p);
    }
    return;
  }
  if ((_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3iEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (_Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4iEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (doPrimvar<pxrInternal__aapl__pxrReserved__::pxr_half::half,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<float,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<double,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (doPrimvar<BOOL,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<unsigned char,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<int,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (doPrimvar<unsigned int,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<long long,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount, a4) & 1) == 0&& (doPrimvar<unsigned long long,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5, v10 != v11, AttributeRateFromCount,
          a4) & 1) == 0
    && (doSingleValuePrimvar<pxrInternal__aapl__pxrReserved__::pxr_half::half,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0&& (doSingleValuePrimvar<float,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0&& (doSingleValuePrimvar<double,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0&& (doSingleValuePrimvar<BOOL,signed char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,signed char const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0&& (doSingleValuePrimvar<unsigned char,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0
    && (doSingleValuePrimvar<int,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0&& (doSingleValuePrimvar<unsigned int,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0&& (doSingleValuePrimvar<long long,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5) & 1) == 0)
  {
    doSingleValuePrimvar<unsigned long long,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, a5);
  }
}

void sub_23F606DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3dEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v23 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    unint64_t v15 = (float64x2_t *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      uint64_t v17 = (float64x2_t *)((char *)v15 + 24 * v16);
      do
      {
        float64x2_t v18 = *v15;
        *(float32x2_t *)&v18.f64[0] = vcvt_f32_f64(*v15);
        float v19 = v15[1].f64[0];
        *(float *)&v18.f64[1] = v19;
        float64x2_t v25 = v18;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v25);
        unint64_t v15 = (float64x2_t *)((char *)v15 + 24);
      }
      while (v15 != v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeVector3F();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v23 - (unsigned char *)__p) >> 4);
      }
      if (AttributeRateFromCount) {
        uint64_t v20 = AttributeRateFromCount;
      }
      else {
        uint64_t v20 = 4 * ((unint64_t)(v23 - (unsigned char *)__p) > 0x10);
      }
      MEMORY[0x2455CD260](a1, a3, v20, (unint64_t)(v23 - (unsigned char *)__p) >> 4);
    }
    if (__p)
    {
      uint64_t v23 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F606FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec3iEDv3_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    unint64_t v22 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    unint64_t v16 = (int32x2_t *)v14[4];
    unint64_t v17 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v17)
    {
      float64x2_t v18 = (int32x2_t *)((char *)v16 + 12 * v17);
      do
      {
        *(float32x2_t *)&long long v15 = vcvt_f32_s32(*v16);
        *((float *)&v15 + 2) = (float)v16[1].i32[0];
        long long v24 = v15;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v24);
        unint64_t v16 = (int32x2_t *)((char *)v16 + 12);
      }
      while (v16 != v18);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeVector3F();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v22 - (unsigned char *)__p) >> 4);
      }
      if (AttributeRateFromCount) {
        uint64_t v19 = AttributeRateFromCount;
      }
      else {
        uint64_t v19 = 4 * ((unint64_t)(v22 - (unsigned char *)__p) > 0x10);
      }
      MEMORY[0x2455CD260](a1, a3, v19, (unint64_t)(v22 - (unsigned char *)__p) >> 4);
    }
    if (__p)
    {
      unint64_t v22 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F60717C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4hEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v23 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    long long v15 = (unsigned __int16 *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      unint64_t v17 = &v15[4 * v16];
      uint64_t v18 = MEMORY[0x263F90640];
      do
      {
        LODWORD(v19) = *(_DWORD *)(v18 + 4 * *v15);
        DWORD1(v19) = *(_DWORD *)(v18 + 4 * v15[1]);
        DWORD2(v19) = *(_DWORD *)(v18 + 4 * v15[2]);
        HIDWORD(v19) = *(_DWORD *)(v18 + 4 * v15[3]);
        long long v25 = v19;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v25);
        v15 += 4;
      }
      while (v15 != v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v23 - (unsigned char *)__p) >> 4);
      }
      if (AttributeRateFromCount) {
        uint64_t v20 = AttributeRateFromCount;
      }
      else {
        uint64_t v20 = 4 * ((unint64_t)(v23 - (unsigned char *)__p) > 0x10);
      }
      MEMORY[0x2455CD270](a1, a3, v20, (unint64_t)(v23 - (unsigned char *)__p) >> 4);
    }
    if (__p)
    {
      uint64_t v23 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F607358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4fEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v21 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    long long v15 = (long long *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      uint64_t v17 = 16 * v16;
      do
      {
        long long v23 = *v15;
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v23);
        ++v15;
        v17 -= 16;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (unsigned char *)__p) >> 4);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4 * ((unint64_t)(v21 - (unsigned char *)__p) > 0x10);
      }
      MEMORY[0x2455CD270](a1, a3, v18, (unint64_t)(v21 - (unsigned char *)__p) >> 4);
    }
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F607504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4dEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v21 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    long long v15 = (float64x2_t *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      uint64_t v17 = 32 * v16;
      do
      {
        float32x4_t v23 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v15), v15[1]);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v23);
        v15 += 2;
        v17 -= 32;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (unsigned char *)__p) >> 4);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4 * ((unint64_t)(v21 - (unsigned char *)__p) > 0x10);
      }
      MEMORY[0x2455CD270](a1, a3, v18, (unint64_t)(v21 - (unsigned char *)__p) >> 4);
    }
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F6076B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _Z9doPrimvarIN32pxrInternal__aapl__pxrReserved__7GfVec4iEDv4_fFbP21REGeomModelDescriptorPKc23REGeomMeshAttributeRatejPKS2_jPKjEFbS4_S6_S7_jS9_EEbS4_RKNS0_7VtValueES6_RT1_RT2_bS7_RKNSt3__16vectorIjNSL_9allocatorIjEEEE(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v21 = 0;
    _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(&__p, *v14);
    long long v15 = (int32x4_t *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      uint64_t v17 = 16 * v16;
      do
      {
        float32x4_t v23 = vcvtq_f32_s32(*v15);
        _ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(&p_p, &v23);
        ++v15;
        v17 -= 16;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeVector4F();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (unsigned char *)__p) >> 4);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4 * ((unint64_t)(v21 - (unsigned char *)__p) > 0x10);
      }
      MEMORY[0x2455CD270](a1, a3, v18, (unint64_t)(v21 - (unsigned char *)__p) >> 4);
    }
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F607868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<pxrInternal__aapl__pxrReserved__::pxr_half::half,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v22 = 0;
    std::vector<float>::reserve(&__p, *v14);
    long long v15 = (unsigned __int16 *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      uint64_t v17 = 2 * v16;
      uint64_t v18 = MEMORY[0x263F90640];
      do
      {
        int v24 = *(_DWORD *)(v18 + 4 * *v15);
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, &v24);
        ++v15;
        v17 -= 2;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeFloat();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v22 - (unsigned char *)__p) >> 2);
      }
      if (AttributeRateFromCount) {
        uint64_t v19 = AttributeRateFromCount;
      }
      else {
        uint64_t v19 = 4 * ((unint64_t)(v22 - (unsigned char *)__p) > 4);
      }
      MEMORY[0x2455CD1F0](a1, a3, v19, (unint64_t)(v22 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      uint64_t v22 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F607A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<float,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v21 = 0;
    std::vector<float>::reserve(&__p, *v14);
    long long v15 = (int *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      uint64_t v17 = 4 * v16;
      do
      {
        int v23 = *v15;
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, &v23);
        ++v15;
        v17 -= 4;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeFloat();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v21 - (unsigned char *)__p) >> 2);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4 * ((unint64_t)(v21 - (unsigned char *)__p) > 4);
      }
      MEMORY[0x2455CD1F0](a1, a3, v18, (unint64_t)(v21 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      uint64_t v21 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F607BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<double,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(unint64_t **)a2;
    }
    uint64_t v22 = 0;
    std::vector<float>::reserve(&__p, *v14);
    long long v15 = (double *)v14[4];
    unint64_t v16 = *v14;
    std::vector<unsigned int>::pointer p_p = &__p;
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      do
      {
        float v18 = *v15;
        float v24 = v18;
        std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)&p_p, &v24);
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeFloat();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, (v22 - (unsigned char *)__p) >> 2);
      }
      if (AttributeRateFromCount) {
        uint64_t v19 = AttributeRateFromCount;
      }
      else {
        uint64_t v19 = 4 * ((unint64_t)(v22 - (unsigned char *)__p) > 4);
      }
      MEMORY[0x2455CD1F0](a1, a3, v19, (unint64_t)(v22 - (unsigned char *)__p) >> 2);
    }
    if (__p)
    {
      uint64_t v22 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F607D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<BOOL,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (size_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a2);
    else {
      long long v14 = *(size_t **)a2;
    }
    uint64_t v20 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&__p, *v14);
    long long v15 = (char *)v14[4];
    size_t v16 = *v14;
    for (uint64_t i = &__p; v16; --v16)
      std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100]((unint64_t **)&i, *v15++);
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeUInt8();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20 - (unsigned char *)__p);
      }
      if (AttributeRateFromCount) {
        uint64_t v17 = AttributeRateFromCount;
      }
      else {
        uint64_t v17 = 4 * ((unint64_t)(v20 - (unsigned char *)__p) > 1);
      }
      MEMORY[0x2455CD240](a1, a3, v17);
    }
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F607F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<unsigned char,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(a2);
  if (v12)
  {
    std::vector<unsigned int> __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (size_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a2);
    else {
      long long v14 = *(size_t **)a2;
    }
    uint64_t v20 = 0;
    std::vector<unsigned char>::reserve((unint64_t *)&__p, *v14);
    long long v15 = (char *)v14[4];
    size_t v16 = *v14;
    for (uint64_t i = &__p; v16; --v16)
      std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100]((unint64_t **)&i, *v15++);
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeUInt8();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20 - (unsigned char *)__p);
      }
      if (AttributeRateFromCount) {
        uint64_t v17 = AttributeRateFromCount;
      }
      else {
        uint64_t v17 = 4 * ((unint64_t)(v20 - (unsigned char *)__p) > 1);
      }
      MEMORY[0x2455CD240](a1, a3, v17);
    }
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
  }
  return v12;
}

void sub_23F6080AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<int,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(a2);
  if (v12)
  {
    memset(&v20, 0, sizeof(v20));
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(std::vector<unsigned int>::size_type **)a2;
    }
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    long long v15 = (int *)v14[4];
    std::vector<unsigned int>::size_type v16 = *v14;
    uint64_t v22 = &v20;
    if (v16)
    {
      uint64_t v17 = 4 * v16;
      do
      {
        int v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 4;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4
      }
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2455CD200](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_23F608258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<unsigned int,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(a2);
  if (v12)
  {
    memset(&v20, 0, sizeof(v20));
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(std::vector<unsigned int>::size_type **)a2;
    }
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    long long v15 = (int *)v14[4];
    std::vector<unsigned int>::size_type v16 = *v14;
    uint64_t v22 = &v20;
    if (v16)
    {
      uint64_t v17 = 4 * v16;
      do
      {
        int v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 4;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeUInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4
      }
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2455CD230](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_23F608404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<long long,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(a2);
  if (v12)
  {
    memset(&v20, 0, sizeof(v20));
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(std::vector<unsigned int>::size_type **)a2;
    }
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    long long v15 = (void *)v14[4];
    std::vector<unsigned int>::size_type v16 = *v14;
    uint64_t v22 = &v20;
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      do
      {
        int v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4
      }
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2455CD200](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_23F6085B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doPrimvar<unsigned long long,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*,unsigned int,unsigned int const*),BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3, int a4, unsigned int AttributeRateFromCount, void *a6)
{
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(a2);
  if (v12)
  {
    memset(&v20, 0, sizeof(v20));
    uint64_t v13 = *((void *)a2 + 1);
    if ((v13 & 4) != 0) {
      long long v14 = (std::vector<unsigned int>::size_type *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    }
    else {
      long long v14 = *(std::vector<unsigned int>::size_type **)a2;
    }
    v20.__end_ = 0;
    std::vector<int>::reserve(&v20, *v14);
    long long v15 = (void *)v14[4];
    std::vector<unsigned int>::size_type v16 = *v14;
    uint64_t v22 = &v20;
    if (v16)
    {
      uint64_t v17 = 8 * v16;
      do
      {
        int v21 = *v15;
        std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)&v22, &v21);
        ++v15;
        v17 -= 8;
      }
      while (v17);
    }
    if (a4)
    {
      if (AttributeRateFromCount == 255) {
        getAttributeRateFromCount(a1, (uint64_t)(a6[1] - *a6) >> 2);
      }
      REGeomModelDescriptorAddIndexedAttributeUInt32();
    }
    else
    {
      if (AttributeRateFromCount == 255) {
        AttributeRateFromCount = getAttributeRateFromCount(a1, v20.__end_ - v20.__begin_);
      }
      if (AttributeRateFromCount) {
        uint64_t v18 = AttributeRateFromCount;
      }
      else {
        uint64_t v18 = 4
      }
            * ((std::vector<unsigned int>::pointer)((char *)v20.__end_ - (char *)v20.__begin_) > (std::vector<unsigned int>::pointer)4);
      MEMORY[0x2455CD230](a1, a3, v18, (unint64_t)((char *)v20.__end_ - (char *)v20.__begin_) >> 2);
    }
    if (v20.__begin_)
    {
      v20.__end_ = v20.__begin_;
      operator delete(v20.__begin_);
    }
  }
  return v12;
}

void sub_23F60875C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t doSingleValuePrimvar<pxrInternal__aapl__pxrReserved__::pxr_half::half,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>(a2);
  if (v6)
  {
    uint64_t v7 = *((void *)v4 + 1);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    int v9 = *(_DWORD *)(MEMORY[0x263F90640] + 4 * *(unsigned __int16 *)v4);
    MEMORY[0x2455CD1F0](a1, a3, 0, 1, &v9);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<float,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    int v9 = *(_DWORD *)v4;
    MEMORY[0x2455CD1F0](a1, a3, 0, 1, &v9);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<double,float,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,float const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    float v8 = *(double *)v4;
    float v10 = v8;
    MEMORY[0x2455CD1F0](a1, a3, 0, 1, &v10);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<BOOL,signed char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,signed char const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    char v9 = *(unsigned char *)v4;
    MEMORY[0x2455CD210](a1, a3, 0, 1, &v9);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<unsigned char,unsigned char,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned char const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    char v9 = *(unsigned char *)v4;
    MEMORY[0x2455CD240](a1, a3, 0, 1, &v9);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<int,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    int v9 = *(_DWORD *)v4;
    MEMORY[0x2455CD200](a1, a3, 0, 1, &v9);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<unsigned int,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v4 + 8);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    int v9 = *(_DWORD *)v4;
    MEMORY[0x2455CD230](a1, a3, 0, 1, &v9);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<long long,int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(a2);
  if (v6)
  {
    uint64_t v7 = *((void *)v4 + 1);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    int v9 = *(void *)v4;
    MEMORY[0x2455CD200](a1, a3, 0, 1, &v9);
  }
  return v6;
}

uint64_t doSingleValuePrimvar<unsigned long long,unsigned int,BOOL ()(REGeomModelDescriptor *,char const*,REGeomMeshAttributeRate,unsigned int,unsigned int const*)>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(a2);
  if (result)
  {
    uint64_t v7 = *((void *)v4 + 1);
    if ((v7 & 4) != 0) {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    }
    int v8 = *(void *)v4;
    return MEMORY[0x2455CD230](a1, a3, 0, 1, &v8);
  }
  return result;
}

uint64_t getAttributeRateFromCount(uint64_t a1, uint64_t a2)
{
  if (a2 == 1) {
    return 0;
  }
  if (REGeomModelDescriptorGetFaceCount() == a2) {
    return 2;
  }
  if (REGeomModelDescriptorGetVertexCount() == a2) {
    return 1;
  }
  if (REGeomModelDescriptorGetIndexCount() == a2) {
    return 3;
  }
  return 0;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    float v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      float v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv2_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v14);
    }
    else {
      long long v15 = 0;
    }
    std::vector<unsigned int>::size_type v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)std::vector<unsigned int>::size_type v16 = *a2;
    float v10 = v16 + 8;
    uint64_t v19 = (char *)*v4;
    uint64_t v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v4;
    }
    *uint64_t v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int64_t v5 = *a2;
    float v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void ***_ZNSt3__120back_insert_iteratorINS_6vectorIDv3_fNS_9allocatorIS2_EEEEEaSB8ne180100EOS2_(void ***a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = (*a1)[1];
  uint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = ((char *)v5 - (unsigned char *)*v4) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      long long v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v7, v14);
    }
    else {
      long long v15 = 0;
    }
    std::vector<unsigned int>::size_type v16 = &v15[16 * v11];
    uint64_t v17 = &v15[16 * v14];
    *(_OWORD *)std::vector<unsigned int>::size_type v16 = *a2;
    float v10 = v16 + 16;
    uint64_t v19 = (char *)*v4;
    uint64_t v18 = (char *)v4[1];
    if (v18 != *v4)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - 1) = v20;
        v16 -= 16;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*v4;
    }
    *uint64_t v4 = v16;
    v4[1] = v10;
    v4[2] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int64_t v5 = *a2;
    float v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void _ZNSt3__16vectorIDv4_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    float v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      float v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = &v6[4 * v8];
    float v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      int64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      int v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    long long v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

unint64_t **std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](unint64_t **a1, char a2)
{
  uint64_t v4 = *a1;
  uint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    uint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = (char *)(v13 + v12);
    v9[v13] = a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      long long v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *uint64_t v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::vector<std::string>::pointer end = this->__end_;
    size_t v12 = v7;
    if (end != this->__begin_)
    {
      size_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--size_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      int64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      unsigned int v13 = 0;
    }
    unint64_t v14 = &v13[4 * v9];
    long long v15 = &v13[4 * v12];
    *(_DWORD *)unint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *int64_t v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

BOOL realityio::isMetaData(realityio *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(this)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v10, this);
  if ((*(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10) & 0xFFFFFFFFFFFFFFF8) == (*(void *)a2 & 0xFFFFFFFFFFFFFFF8))
  {
    TargetPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(this);
    BOOL v7 = (*(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(TargetPath) & 0xFFFFFFFFFFFFFFF8) == (*(void *)a3 & 0xFFFFFFFFFFFFFFF8);
  }
  else
  {
    BOOL v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  return v7;
}

void sub_23F6095C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t getAttributeRate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = getAttributeRateHelper(a1, 0xFFu);
  if (result == 255)
  {
    if (a3) {
      uint64_t v8 = a3;
    }
    else {
      uint64_t v8 = a4;
    }
    return getAttributeRateFromCount(a2, v8);
  }
  return result;
}

uint64_t getCountForAttributeRate(uint64_t a1, int a2)
{
  LODWORD(result) = 1;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      LODWORD(result) = REGeomModelDescriptorGetVertexCount();
      break;
    case 2:
      LODWORD(result) = REGeomModelDescriptorGetFaceCount();
      break;
    default:
      LODWORD(result) = REGeomModelDescriptorGetIndexCount();
      break;
  }
  return result;
}

void getResampleIndices(void *a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  CountForunsigned int AttributeRate = getCountForAttributeRate(a2, a5);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (CountForAttributeRate)
  {
    unint64_t v10 = CountForAttributeRate;
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, CountForAttributeRate);
    uint64_t v11 = (char *)a1[1];
    bzero(v11, 8 * v10);
    a1[1] = &v11[8 * v10];
  }
  unsigned int FaceCount = (realityio *)REGeomModelDescriptorGetFaceCount();
  if (a5 == 1)
  {
    uint64_t v18 = *a3;
    if (*a3)
    {
      if (a4 != 2)
      {
        if (a4 == 1)
        {
          BOOL v44 = (void *)*a1;
          uint64_t v45 = a1[1] - *a1;
          if (v45 && v45 >> 3 == v18)
          {
            unint64_t v46 = (int *)a3[4];
            do
            {
              uint64_t v47 = *v46++;
              *v44++ = v47;
              --v18;
            }
            while (v18);
          }
        }
        else if (!a4)
        {
          uint64_t v19 = (void *)*a1;
          uint64_t v20 = a1[1] - *a1;
          if (v20)
          {
            unint64_t v21 = v20 >> 3;
            uint64_t v22 = *(int *)a3[4];
            if (v21 <= 1) {
              unint64_t v21 = 1;
            }
            do
            {
              *v19++ = v22;
              --v21;
            }
            while (v21);
          }
        }
        return;
      }
      uint64_t v39 = *(NSObject **)(realityio::logObjects(FaceCount) + 24);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        return;
      }
      LOWORD(v89.__begin_) = 0;
    }
    else
    {
      if (a4 == 1)
      {
        v73 = (void *)*a1;
        uint64_t v74 = (void *)a1[1];
        if ((void *)*a1 != v74)
        {
          uint64_t v75 = 0;
          do
            *v73++ = v75++;
          while (v73 != v74);
        }
        return;
      }
      if (a4 != 2) {
        return;
      }
      uint64_t v39 = *(NSObject **)(realityio::logObjects(FaceCount) + 24);
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        return;
      }
      LOWORD(v89.__begin_) = 0;
    }
    _os_log_error_impl(&dword_23F4EA000, v39, OS_LOG_TYPE_ERROR, "Invalid conversion from face-rate data to vertex-rate", (uint8_t *)&v89, 2u);
    return;
  }
  if (a5 != 3)
  {
    if (a5 == 2)
    {
      uint64_t v13 = *a3;
      if (*a3)
      {
        if (a4 == 2)
        {
          unint64_t v40 = (void *)*a1;
          uint64_t v41 = a1[1] - *a1;
          if (v41 && v41 >> 3 == v13)
          {
            uint64_t v42 = (int *)a3[4];
            do
            {
              uint64_t v43 = *v42++;
              *v40++ = v43;
              --v13;
            }
            while (v13);
          }
        }
        else if (!a4)
        {
          unint64_t v14 = (void *)*a1;
          uint64_t v15 = a1[1] - *a1;
          if (v15)
          {
            unint64_t v16 = v15 >> 3;
            uint64_t v17 = *(int *)a3[4];
            if (v16 <= 1) {
              unint64_t v16 = 1;
            }
            do
            {
              *v14++ = v17;
              --v16;
            }
            while (v16);
          }
        }
      }
      else if (a4 == 2)
      {
        uint64_t v70 = (void *)*a1;
        uint64_t v71 = (void *)a1[1];
        if ((void *)*a1 != v71)
        {
          uint64_t v72 = 0;
          do
            *v70++ = v72++;
          while (v70 != v71);
        }
      }
      else if (!a4)
      {
        uint64_t v36 = (void *)*a1;
        uint64_t v37 = a1[1] - *a1;
        if (v37)
        {
          unint64_t v38 = v37 >> 3;
          if (v38 <= 1) {
            unint64_t v38 = 1;
          }
          bzero(v36, 8 * v38);
        }
      }
    }
    return;
  }
  int v23 = (int)FaceCount;
  uint64_t v24 = FaceCount;
  uint64_t v25 = *a3;
  if (*a3)
  {
    switch(a4)
    {
      case 0:
        uint64_t v26 = (void *)*a1;
        uint64_t v27 = a1[1] - *a1;
        if (v27)
        {
          unint64_t v28 = v27 >> 3;
          uint64_t v29 = *(int *)a3[4];
          if (v28 <= 1) {
            unint64_t v28 = 1;
          }
          do
          {
            *v26++ = v29;
            --v28;
          }
          while (v28);
        }
        break;
      case 1:
        std::vector<unsigned int>::vector(&v89, FaceCount);
        REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
        unsigned int IndexCount = REGeomModelDescriptorGetIndexCount();
        std::vector<unsigned int>::vector(&v88, IndexCount);
        REGeomModelDescriptorGetIndices();
        std::vector<unsigned int>::pointer begin = v88.__begin_;
        if (v23)
        {
          uint64_t v50 = 0;
          int v51 = 0;
          std::vector<unsigned int>::pointer v52 = v89.__begin_;
          uint64_t v53 = a3[4];
          long long v54 = (void *)*a1;
          do
          {
            unsigned int v55 = v52[v50];
            if (v55)
            {
              int v56 = &v54[v51];
              uint64_t v57 = &begin[v51];
              v51 += v55;
              do
              {
                unsigned int v58 = *v57++;
                *v56++ = *(int *)(v53 + 4 * v58);
                --v55;
              }
              while (v55);
            }
            ++v50;
          }
          while (v50 != v24);
        }
        goto LABEL_98;
      case 2:
        std::vector<unsigned int>::vector(&v89, FaceCount);
        REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
        uint64_t v30 = v89.__begin_;
        if (v23)
        {
          uint64_t v59 = 0;
          int v60 = 0;
          uint64_t v61 = a3[4];
          std::string v62 = (void *)*a1;
          do
          {
            unsigned int v63 = v30[v59];
            if (v63)
            {
              unint64_t v64 = &v62[v60];
              v60 += v63;
              uint64_t v65 = *(int *)(v61 + 4 * v59);
              do
              {
                *v64++ = v65;
                --v63;
              }
              while (v63);
            }
            ++v59;
          }
          while (v59 != v24);
        }
        goto LABEL_101;
      case 3:
        uint64_t v66 = (void *)*a1;
        uint64_t v67 = a1[1] - *a1;
        if (v67 && v67 >> 3 == v25)
        {
          unint64_t v68 = (int *)a3[4];
          do
          {
            uint64_t v69 = *v68++;
            *v66++ = v69;
            --v25;
          }
          while (v25);
        }
        break;
      default:
        return;
    }
    return;
  }
  if (a4 == 1)
  {
    std::vector<unsigned int>::vector(&v89, FaceCount);
    REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
    unsigned int v76 = REGeomModelDescriptorGetIndexCount();
    std::vector<unsigned int>::vector(&v88, v76);
    REGeomModelDescriptorGetIndices();
    std::vector<unsigned int>::pointer begin = v88.__begin_;
    if (v23)
    {
      uint64_t v77 = 0;
      int v78 = 0;
      std::vector<unsigned int>::pointer v79 = v89.__begin_;
      uint64_t v80 = (void *)*a1;
      do
      {
        unsigned int v81 = v79[v77];
        if (v81)
        {
          int v82 = &v80[v78];
          v83 = &begin[v78];
          v78 += v81;
          do
          {
            unsigned int v84 = *v83++;
            *v82++ = v84;
            --v81;
          }
          while (v81);
        }
        ++v77;
      }
      while (v77 != v24);
    }
LABEL_98:
    if (begin)
    {
      v88.__end_ = begin;
      operator delete(begin);
    }
    uint64_t v30 = v89.__begin_;
LABEL_101:
    if (v30)
    {
      v89.__end_ = v30;
      operator delete(v30);
    }
    return;
  }
  if (a4 != 3)
  {
    if (a4 != 2) {
      return;
    }
    std::vector<unsigned int>::vector(&v89, FaceCount);
    REGeomModelDescriptorGetFaceVertexCountsHighVertexPerPolygon();
    uint64_t v30 = v89.__begin_;
    if (v23)
    {
      uint64_t v31 = 0;
      int v32 = 0;
      uint64_t v33 = (void *)*a1;
      do
      {
        unsigned int v34 = v30[v31];
        if (v34)
        {
          uint64_t v35 = &v33[v32];
          v32 += v34;
          do
          {
            *v35++ = v31;
            --v34;
          }
          while (v34);
        }
        ++v31;
      }
      while (v31 != v24);
    }
    goto LABEL_101;
  }
  unint64_t v85 = (void *)*a1;
  long long v86 = (void *)a1[1];
  if ((void *)*a1 != v86)
  {
    uint64_t v87 = 0;
    do
      *v85++ = v87++;
    while (v85 != v86);
  }
}

void sub_23F609C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  unint64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<char const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(uint64_t a1, void *a2, uint64_t *a3)
{
  int64_t v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v4;
        unint64_t v8 = v4[4] & 0xFFFFFFFFFFFFFFF8;
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        int64_t v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        int64_t v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__construct_node<pxrInternal__aapl__pxrReserved__::TfToken const&>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

void std::vector<realityio::MeshDescriptorAction::MaterialGroupInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    for (uint64_t i = (char *)v1[1]; i != v2; i -= 48)
    {
      uint64_t v5 = (uint64_t)(i - 40);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(v5);
    }
    v1[1] = v2;
    unint64_t v6 = **a1;
    operator delete(v6);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_Equal(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_EqualPtr(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 8));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F609F6C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_StreamOut(void **a1, uint64_t a2)
{
  return MEMORY[0x270F98788](a2, **a1 != 0);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP21REGeomModelDescriptorEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REGeomModelDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REGeomModelDescriptor *>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((void *)v2);
    MEMORY[0x2455D2BD0](v3, 0x1020C403A5D3213);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REGeomModelDescriptor *>>::_PlaceCopy()
{
}

void sub_23F60A134(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    unint64_t v6 = *result;
    BOOL v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    uint64_t v15 = result;
    unint64_t v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      unint64_t v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(v8 + 4, v9 + 4);
          pxrInternal__aapl__pxrReserved__::VtValue::operator=(v8 + 5, v9 + 5);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v5, v18, leaf_high, v17);
          uint64_t v17 = v16;
          if (v16) {
            unint64_t v16 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          unint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(v5, a2 + 4);
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_23F60A2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>(uint64_t **a1, uint64_t *a2)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::__construct_node<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::VtValue> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_23F60A39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a10) {
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_Equal(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_EqualPtr(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 8));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F60A518(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_StreamOut(void **a1, uint64_t a2)
{
  return MEMORY[0x270F98788](a2, **a1 != 0);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio12WrappedRERefIP17REAssetDescriptorEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::WrappedRERef<REAssetDescriptor *>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::WrappedRERef<REAssetDescriptor *>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = realityio::WrappedRERef<REAssetDescriptor *>::~WrappedRERef((void *)v2);
    MEMORY[0x2455D2BD0](v3, 0x1020C403A5D3213);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAssetDescriptor *>>::_PlaceCopy()
{
}

void sub_23F60A6E0(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C403A5D3213);
  _Unwind_Resume(a1);
}

uint64_t realityio::TextureSwizzleChannels::fromOutputSourceName(unsigned __int8 *a1)
{
  if (((char)a1[23] & 0x80000000) == 0)
  {
    int v1 = a1[23];
    if (v1 != 1)
    {
      if (v1 != 3) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
    int v8 = *a1;
    goto LABEL_15;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if (v2 == 1)
  {
    int v8 = **(unsigned __int8 **)a1;
LABEL_15:
    if (v8 <= 102)
    {
      if (v8 == 97)
      {
        int v5 = 0x1000000;
        int v4 = 5;
        int v7 = 1280;
        int v6 = 327680;
        return v7 | v5 | v6 | v4;
      }
      if (v8 != 98) {
        goto LABEL_12;
      }
      int v5 = 0x1000000;
      int v4 = 4;
      int v7 = 1024;
      goto LABEL_23;
    }
    if (v8 == 103)
    {
      int v5 = 0x1000000;
      int v4 = 3;
      int v7 = 768;
      int v6 = 196608;
      return v7 | v5 | v6 | v4;
    }
    if (v8 == 114)
    {
      int v5 = 0x1000000;
      int v4 = 2;
      int v7 = 512;
      int v6 = 0x20000;
      return v7 | v5 | v6 | v4;
    }
    goto LABEL_12;
  }
  if (v2 == 3)
  {
    a1 = *(unsigned __int8 **)a1;
LABEL_8:
    if (*(_WORD *)a1 != 26482 || a1[2] != 98) {
      goto LABEL_12;
    }
    int v5 = 0x1000000;
    int v4 = 2;
    int v7 = 768;
LABEL_23:
    int v6 = 0x40000;
    return v7 | v5 | v6 | v4;
  }
LABEL_12:
  int v4 = realityio::TextureSwizzleChannels::kDefault;
  int v5 = HIBYTE(realityio::TextureSwizzleChannels::kDefault) << 24;
  int v6 = BYTE2(realityio::TextureSwizzleChannels::kDefault) << 16;
  int v7 = BYTE1(realityio::TextureSwizzleChannels::kDefault) << 8;
  return v7 | v5 | v6 | v4;
}

uint64_t realityio::TextureSwizzleChannels::channelFromChar(unsigned __int8 *a1)
{
  int v1 = (char)a1[23];
  if ((v1 & 0x80000000) == 0)
  {
    if (v1 == 1)
    {
      int v2 = *a1;
      goto LABEL_6;
    }
    return 1;
  }
  if (*((void *)a1 + 1) != 1) {
    return 1;
  }
  int v2 = **(unsigned __int8 **)a1;
LABEL_6:
  switch(v2)
  {
    case 'b':
      return 4;
    case 'g':
      return 3;
    case 'r':
      return 2;
    case 'a':
      return 5;
  }
  return 1;
}

void realityio::stringFromCFData(realityio *this@<X0>, std::string *a2@<X8>)
{
  CFIndex Length = CFDataGetLength(this);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::string::resize(a2, Length + 1, 0);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v6 = (UInt8 *)a2;
  }
  else {
    int v6 = (UInt8 *)a2->__r_.__value_.__r.__words[0];
  }
  v8.location = 0;
  v8.length = Length;
  CFDataGetBytes(this, v8, v6);
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = a2;
  }
  else {
    int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  v7->__r_.__value_.__s.__data_[Length] = 0;
}

void sub_23F60A918(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void realityio::stringFromCFString(realityio *this@<X0>, const __CFString *a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = (void *)MEMORY[0x2455D3010](this, a2);
  int v6 = (char *)[(realityio *)this UTF8String];
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v8, v6);
    *(_OWORD *)a3 = v8;
    *(void *)(a3 + 16) = v9;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 24) = v7;
}

void realityio::asWrappedCFStringRef(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  CFStringRef v5 = v4;
  *a2 = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFRelease(v5);
}

void sub_23F60AA1C(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

CFStringRef realityio::joinAsCFStringRef(std::string *a1, const void **a2)
{
  p_std::string::size_type size = &a1->__r_.__value_.__l.__size_;
  uint64_t v3 = (std::string::size_type *)a1->__r_.__value_.__r.__words[0];
  memset(&__p, 0, sizeof(__p));
  if (v3 != &a1->__r_.__value_.__r.__words[1])
  {
    do
    {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        int v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__p.__r_.__value_.__l.__data_, a2, (uint64_t)&v22);
        if ((v3[4] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (v3[4] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
        }
        int v8 = *(char *)(EmptyString + 23);
        if (v8 >= 0) {
          uint64_t v9 = (const std::string::value_type *)EmptyString;
        }
        else {
          uint64_t v9 = *(const std::string::value_type **)EmptyString;
        }
        if (v8 >= 0) {
          std::string::size_type v10 = *(unsigned __int8 *)(EmptyString + 23);
        }
        else {
          std::string::size_type v10 = *(void *)(EmptyString + 8);
        }
        a1 = std::string::append(&v22, v9, v10);
        long long v11 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
        v21.__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v11;
        a1->__r_.__value_.__l.__size_ = 0;
        a1->__r_.__value_.__r.__words[2] = 0;
        a1->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        if ((v3[4] & 0xFFFFFFFFFFFFFFF8) != 0) {
          a1 = (std::string *)((v3[4] & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          a1 = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
        }
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v21, a1->__r_.__value_.__l.__data_, a1->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v12 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
          v21.__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v12;
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v21;
      uint64_t v13 = (std::string::size_type *)v3[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (std::string::size_type *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (std::string::size_type *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != p_size);
  }
  std::string v20 = __p;
  memset(&__p, 0, sizeof(__p));
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &v20;
  }
  else {
    unint64_t v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
  }
  CFStringRef v17 = CFStringCreateWithCString(0, (const char *)v16, 0x8000100u);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return v17;
}

void sub_23F60ABF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef realityio::joinAsCFStringRef(realityio *this, const __CFArray *a2, const char *a3)
{
  CFStringRef v4 = CFStringCreateWithCStringNoCopy(0, (const char *)a2, 0x8000100u, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  CFStringRef v5 = CFStringCreateByCombiningStrings(0, this, v4);
  CFRelease(v4);
  return v5;
}

void realityio::CFStringCopyUTF8String(__CFString *this@<X0>, uint64_t a2@<X8>)
{
  if (this)
  {
    CStringPtr = (char *)CFStringGetCStringPtr(this, 0x8000100u);
    if (!CStringPtr) {
      CStringPtr = (char *)[(__CFString *)this UTF8String];
    }
    std::string::basic_string[abi:ne180100]<0>(&v8, CStringPtr);
    int v6 = (void *)v8.__r_.__value_.__r.__words[0];
    v9[0] = v8.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v9 + 3) = *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3);
    if ((*((unsigned char *)&v8.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v8, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
      *(unsigned char *)a2 = 1;
      *(std::string *)(a2 + 8) = v8;
      operator delete(v6);
    }
    else
    {
      LODWORD(v8.__r_.__value_.__r.__words[2]) = v9[0];
      *(_DWORD *)((char *)&v8.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v9 + 3);
      *(unsigned char *)a2 = 1;
      *(std::string *)(a2 + 8) = v8;
    }
  }
  else
  {
    char v7 = std::system_category();
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v7;
  }
}

void sub_23F60AD80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void realityio::updateStringMapFromCFDictionary(__CFString *this, __CFString *a2, uint64_t **a3, void *a4)
{
  realityio::CFStringCopyUTF8String(this, (uint64_t)v9);
  if (v9[0])
  {
    realityio::CFStringCopyUTF8String(a2, (uint64_t)v7);
    if (v7[0])
    {
      long long v12 = v10;
      int v6 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)v10, (uint64_t)&std::piecewise_construct, (long long **)&v12);
      std::string::operator=((std::string *)(v6 + 7), &__p);
      if (v7[0])
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v9[0])
    {
      if (v11 < 0) {
        operator delete(v10[0]);
      }
    }
  }
}

void sub_23F60AE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16)
  {
    if (a22 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::urlSafeString(uint64_t *a1@<X0>, void *a2@<X8>)
{
  id v8 = [MEMORY[0x263F08708] URLQueryAllowedCharacterSet];
  if (*((char *)a1 + 23) >= 0) {
    CFStringRef v4 = a1;
  }
  else {
    CFStringRef v4 = (uint64_t *)*a1;
  }
  CFStringRef v5 = [NSString stringWithUTF8String:v4];
  int v6 = [v5 stringByAddingPercentEncodingWithAllowedCharacters:v8];

  id v7 = v6;
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v7 UTF8String]);
}

void sub_23F60AF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }

  std::locale::~locale(this);
}

void realityio::createRETextureImportOperation(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (a1)
  {
    uint64_t v15 = RETextureImportOperationCreateWithData();
    if (!v15)
    {
      std::string::size_type v10 = std::system_category();
      std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create import operation");
      realityio::DetailedError::DetailedError(cf, 0, (uint64_t)v10, (long long *)__p);
      *(_OWORD *)(a4 + 8) = *(_OWORD *)cf;
      uint64_t v11 = v20;
      *(void *)(a4 + 24) = v19;
      *(void *)(a4 + 32) = v11;
      *(void *)(a4 + 39) = *(void *)((char *)&v20 + 7);
      LOBYTE(v11) = HIBYTE(v20);
      long long v20 = 0uLL;
      uint64_t v19 = 0;
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 47) = v11;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_28;
    }
    RERetain();
    RERelease();
    if (a3) {
      RETextureImportOperationSetDoneWithSourceCallback();
    }
    if (*(_DWORD *)(a2 + 72)) {
      RETextureImportOperationSetSemantic();
    }
    id v7 = (const char *)(a2 + 48);
    if (*(char *)(a2 + 71) < 0)
    {
      if (*(void *)(a2 + 56))
      {
        cf[0] = 0;
        id v7 = *(const char **)v7;
LABEL_16:
        CFStringRef v12 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v7, 0x8000100u);
        cf[0] = v12;
        if (v12 && MEMORY[0x2455CDE90](v12)) {
          RETextureImportOperationSetColorSpaceName();
        }
        realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(cf);
      }
    }
    else if (*(unsigned char *)(a2 + 71))
    {
      cf[0] = 0;
      goto LABEL_16;
    }
    if (*(_DWORD *)(a2 + 84))
    {
      RETextureImportOperationSetDimensionsMode();
      RETextureImportOperationSetDownsampleFactor();
    }
    if (!*(unsigned char *)(a2 + 89) || *(unsigned char *)(a2 + 89) == 1) {
      RETextureImportOperationSetCompressionType();
    }
    uint64_t v13 = RETextureImportOperationCopyTextureDescriptorTemplate();
    [v13 setSwizzle:*(unsigned int *)(a2 + 76)];
    if (*(unsigned char *)(a2 + 88))
    {
      RETextureImportOperationSetPixelFormatMode();
      [v13 setPixelFormat:10];
    }
    RETextureImportOperationSetTextureDescriptorTemplate();
    uint64_t v14 = v15;
    uint64_t v15 = 0;
    *(unsigned char *)a4 = 1;
    *(void *)(a4 + 8) = v14;
    cf[0] = 0;
    realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(cf);

LABEL_28:
    realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&v15);
    return;
  }
  id v8 = std::system_category();
  std::string::basic_string[abi:ne180100]<0>(__p, "Could not find service locator");
  realityio::DetailedError::DetailedError(cf, 0, (uint64_t)v8, (long long *)__p);
  *(_OWORD *)(a4 + 8) = *(_OWORD *)cf;
  uint64_t v9 = v20;
  *(void *)(a4 + 24) = v19;
  *(void *)(a4 + 32) = v9;
  *(void *)(a4 + 39) = *(void *)((char *)&v20 + 7);
  LOBYTE(v9) = HIBYTE(v20);
  long long v20 = 0uLL;
  uint64_t v19 = 0;
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 47) = v9;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F60B27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN9realityio30createRETextureImportOperationEP16REServiceLocatorNS_12WrappedCFRefIPK8__CFDataEERKNS_30TextureImportOperationSettingsEPKNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 24);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

CFErrorRef realityio::createError(uint64_t a1)
{
  userInfoKeys = (void *)*MEMORY[0x263EFFC48];
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v1 = (const char *)a1;
  }
  else {
    uint64_t v1 = *(const char **)a1;
  }
  CFTypeRef cf = CFStringCreateWithCString(0, v1, 0x8000100u);
  CFStringRef v2 = CFStringCreateWithCString(0, "RealityIO", 0x8000100u);
  CFErrorRef v3 = CFErrorCreateWithUserInfoKeysAndValues(0, v2, 100, (const void *const *)&userInfoKeys, &cf, 1);
  CFRelease(v2);
  CFRelease(cf);
  return v3;
}

void realityio::filterPathName(std::string *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_17, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_17))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_268C40650, "[^A-Za-z0-9_.]", 0);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::vector<unsigned int>::pointer p_p = &__p;
  }
  else {
    std::vector<unsigned int>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(a1, (char *)p_p, (char *)p_p + size, (uint64_t)&unk_268C40650, "_", 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F60B4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&_MergedGlobals_17);
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, uint64_t a4, char *a5, int a6)
{
  __int16 v6 = a6;
  uint64_t v9 = a2;
  std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::regex_iterator((uint64_t)v29, a2, a3, a4, a6);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  if (std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==((uint64_t)v29, (uint64_t)v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (v9 != a3)
        std::string::push_back(a1, *v9++);
    }
  }
  else
  {
    uint64_t v11 = 0;
    CFStringRef v12 = 0;
    uint64_t v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==((uint64_t)v29, (uint64_t)v17))
    {
      if ((v6 & 0x200) == 0)
      {
        uint64_t v14 = (std::string::value_type *)v30[6];
        uint64_t v15 = (std::string::value_type *)v30[7];
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char *>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)v30, a1, (unsigned __int8 *)a5, v13, v6);
      CFStringRef v12 = (std::string::value_type *)v30[9];
      uint64_t v11 = (std::string::value_type *)v30[10];
      if ((v6 & 0x400) != 0) {
        break;
      }
      std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator++((uint64_t)v29);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  return a1;
}

void sub_23F60B664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a31) {
    operator delete(a31);
  }
  _Unwind_Resume(exception_object);
}

void realityio::TextureImportOperationSettings::makeTextureResourceKey(realityio::TextureImportOperationSettings *this@<X0>, std::string *a2@<X8>)
{
  unsigned int v5 = *((_DWORD *)this + 21);
  if (v5)
  {
    std::to_string(&__str, v5);
    __int16 v6 = std::string::insert(&__str, 0, ".downsample_");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
  }
  if (*((unsigned char *)this + 88))
  {
    std::to_string(&__dst, 0xAuLL);
    id v8 = std::string::insert(&__dst, 0, ".pixelFormat_");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    std::string::append(&v62, (const std::string::value_type *)p_str, size);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  int v12 = *((unsigned __int8 *)this + 89);
  if (v12 != 2)
  {
    uint64_t v13 = "NotSet";
    uint64_t v14 = 6;
    if (v12 == 1)
    {
      uint64_t v14 = 8;
      uint64_t v13 = "GPULossy";
    }
    if (*((unsigned char *)this + 89)) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = 4;
    }
    if (*((unsigned char *)this + 89)) {
      unint64_t v16 = v13;
    }
    else {
      unint64_t v16 = "None";
    }
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v15;
    memcpy(&__dst, v16, v15);
    __dst.__r_.__value_.__s.__data_[v15] = 0;
    char v17 = std::string::insert(&__dst, 0, ".textureCompression_");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &__str;
    }
    else {
      uint64_t v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = __str.__r_.__value_.__l.__size_;
    }
    std::string::append(&v62, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  __s[0] = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 76)];
  __s[1] = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 77)];
  __s[2] = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 78)];
  __int16 v64 = realityio::TextureSwizzleChannels::toString(void)const::toChar[*((unsigned __int8 *)this + 79)];
  std::string::basic_string[abi:ne180100]<0>(&__dst, __s);
  uint64_t v21 = std::string::insert(&__dst, 0, ".swizzle_");
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v23 = &__str;
  }
  else {
    char v23 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = __str.__r_.__value_.__l.__size_;
  }
  std::string::append(&v62, (const std::string::value_type *)v23, v24);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::to_string(&__dst, *((unsigned __int8 *)this + 80));
  uint64_t v25 = std::string::insert(&__dst, 0, ".texturetype_");
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v27 = &__str;
  }
  else {
    char v27 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
  }
  std::string::append(&v62, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__dst, off_265071BD0[*((int *)this + 18)]);
  uint64_t v29 = std::string::insert(&__dst, 0, ".semantic_");
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v31 = &__str;
  }
  else {
    uint64_t v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v32 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v32 = __str.__r_.__value_.__l.__size_;
  }
  std::string::append(&v62, (const std::string::value_type *)v31, v32);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 71) < 0)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_79;
    }
  }
  else if (!*((unsigned char *)this + 71))
  {
    goto LABEL_79;
  }
  realityio::filterPathName(&__dst, (uint64_t)this + 48);
  uint64_t v33 = std::string::insert(&__dst, 0, ".colorSpace_");
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v35 = &__str;
  }
  else {
    uint64_t v35 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = __str.__r_.__value_.__l.__size_;
  }
  std::string::append(&v62, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_79:
  if (*((char *)this + 47) < 0) {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else {
    std::string __str = *(std::string *)((unsigned char *)this + 1);
  }
  int v37 = *((char *)this + 119);
  if (v37 >= 0) {
    int64_t v38 = *((unsigned __int8 *)this + 119);
  }
  else {
    int64_t v38 = *((void *)this + 13);
  }
  if (v38)
  {
    std::string::size_type v39 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : __str.__r_.__value_.__l.__size_;
    if (v39 > v38)
    {
      unint64_t v40 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      uint64_t v41 = v37 >= 0
          ? (realityio::TextureImportOperationSettings *)((char *)this + 96)
          : (realityio::TextureImportOperationSettings *)*((void *)this + 12);
      if ((uint64_t)v39 >= v38)
      {
        uint64_t v47 = (char *)v40 + v39;
        int v48 = *(char *)v41;
        int64_t v49 = v39;
        uint64_t v50 = v40;
        do
        {
          int64_t v51 = v49 - v38;
          if (v51 == -1) {
            break;
          }
          std::vector<unsigned int>::pointer v52 = (char *)memchr(v50, v48, v51 + 1);
          if (!v52) {
            break;
          }
          uint64_t v53 = v52;
          if (!memcmp(v52, v41, v38))
          {
            if (v53 != v47 && v53 - (char *)v40 != -1)
            {
              long long v54 = (unsigned __int8 *)v41 + v38;
              unsigned int v55 = v41;
              int v56 = (char *)v41 + v38;
              do
              {
                uint64_t v57 = (unsigned __int8 *)v55;
                unsigned int v58 = (unsigned __int8 *)v55;
                while (1)
                {
                  int v59 = *v58++;
                  if (v59 == 47) {
                    break;
                  }
                  uint64_t v57 = v58;
                  if (v58 == v54)
                  {
                    uint64_t v57 = (unsigned __int8 *)v56;
                    goto LABEL_136;
                  }
                }
                unsigned int v55 = (realityio::TextureImportOperationSettings *)(v57 + 1);
                int v56 = (char *)v57;
              }
              while (v58 != v54);
LABEL_136:
              if (v57 != v54 && v57 - (unsigned __int8 *)v41 != -1)
              {
                std::string::basic_string(&__dst, &__str, v57 - (unsigned __int8 *)v41, v39 - (v57 - (unsigned __int8 *)v41), (std::allocator<char> *)__s);
                std::string::operator=(&__str, &__dst);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
              }
            }
            break;
          }
          uint64_t v50 = (std::string *)(v53 + 1);
          int64_t v49 = v47 - (v53 + 1);
        }
        while (v49 >= v38);
      }
    }
  }
  realityio::filterPathName(&__dst, (uint64_t)&__str);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(a2, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    *a2 = __dst;
  }
  if (std::string::rfind(a2, 46, 0xFFFFFFFFFFFFFFFFLL) == -1)
  {
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v45 = &v62;
    }
    else {
      uint64_t v45 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = v62.__r_.__value_.__l.__size_;
    }
    std::string::append(a2, (const std::string::value_type *)v45, v46);
  }
  else
  {
    std::string::size_type v42 = std::string::find(a2, 46, 0);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v43 = &v62;
    }
    else {
      uint64_t v43 = (std::string *)v62.__r_.__value_.__r.__words[0];
    }
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v44 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v44 = v62.__r_.__value_.__l.__size_;
    }
    std::string::insert(a2, v42, (const std::string::value_type *)v43, v44);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
}

void sub_23F60BD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  unsigned int v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_23F60BEA4(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  CFStringRef v2 = (const std::locale *)MEMORY[0x2455D2AE0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void sub_23F60BF10(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_23F60C0E4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60C15C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  long long v7 = a2;
  do
  {
    id v8 = v7;
    long long v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    long long v9 = a1->__end_;
    uint64_t v10 = v8 + 1;
    uint64_t v11 = v8 + 1;
    do
    {
      id v8 = v11;
      uint64_t v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  CFErrorRef v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  CFStringRef v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      __int16 v6 = v3;
      CFErrorRef v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  CFErrorRef v3 = a3;
  std::vector<std::string>::pointer end = a1->__end_;
  long long v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  id v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    long long v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    id v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  long long v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    id v8 = v7;
  }
  else {
    id v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    long long v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      id v8 = v9;
    }
    else {
      id v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  long long v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    id v8 = v7;
  }
  else {
    id v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    uint64_t v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    long long v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      id v8 = v9;
    }
    else {
      id v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60C780(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_23F60C828(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x2455D2BD0);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    std::vector<std::string>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    long long v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  CFErrorRef v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      long long v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        long long v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            CFErrorRef v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_23F60CEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  CFErrorRef v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        long long v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        size_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      int v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        size_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      unsigned int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        unsigned int v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    int v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            unsigned int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unsigned int v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              uint64_t v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            uint64_t v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        char v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          unsigned int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unsigned int v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        uint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            unsigned int v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                unsigned int v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            uint64_t v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unsigned int v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    unsigned int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_23F60D640(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60D6A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D820;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D820;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26F33D868;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26F33D868;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26F33D868;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x2455D2BD0);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    std::vector<unsigned int>::pointer begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  std::vector<unsigned int>::pointer begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    int v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_23F60DF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v41 = 0;
  std::string::size_type v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)int v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::vector<std::csub_match> __p = 0u;
    memset(v39, 0, 21);
    std::string::size_type v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    uint64_t v35 = a4;
    int v12 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 10) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    uint64_t v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      uint64_t v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      int v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          std::vector<std::csub_match>::value_type v18 = (const char *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            long long v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          std::string::size_type v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)int v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          std::vector<std::csub_match>::value_type v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            std::string::size_type v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            *std::string::size_type v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 10) = v24;
            std::string::size_type v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          uint64_t v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)int v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_23F60E388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      uint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::csub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60E674(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60E6CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::vector<std::csub_match>::pointer v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::vector<std::csub_match>::pointer v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_23F60E81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (void *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      long long v15 = &v9[__n];
      std::vector<std::csub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v17 = __x->std::pair<const char *, const char *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)p_end_cap, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    uint64_t v19 = &v18[__n];
    std::vector<std::csub_match>::size_type v20 = 24 * __n;
    std::pair<const char *, const char *> v21 = v18;
    do
    {
      std::pair<const char *, const char *> v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      std::pair<const char *, const char *> *v21 = v22;
      std::pair<const char *, const char *> v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    long long v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v26 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)p_end_cap, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    long long v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::csub_match>::size_type v16 = &v14[__n];
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_23F60EE40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_23F60EEB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60F264(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60F428(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned int v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned int v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_62;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_62;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v12 + 16 * (v10 + v11) + v13;
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        BOOL v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_48;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          BOOL v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          BOOL v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_62;
    }
    char v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u) {
      goto LABEL_62;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_23F60F9CC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F60FA34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26F33D8F8;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_23F60FC0C(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  int v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D8F8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D8F8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D940;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D940;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D9D0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33D9D0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33DA18;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26F33DA18;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      char v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_23F610740(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v8[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const char *, const char *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v25[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::csub_match>::size_type v20 = &v15[(void)v12];
  std::pair<const char *, const char *> v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_23F610AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v38 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_229;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v130 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v131 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v130 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v131 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132, (uint64_t)&__p);
  if (((char)v129 & 0x80000000) == 0)
  {
    if (v129) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v38 = 1;
    goto LABEL_59;
  }
  size_t v39 = v128;
  operator delete(__p);
  if (!v39) {
    goto LABEL_58;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (v130 != *(p_second - 1) || v131 != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_226;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_165;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132);
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  unsigned __int8 v15 = v129;
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 / 48;
    unsigned __int8 v118 = v129;
    if ((v129 & 0x80u) == 0) {
      size_t v19 = v129;
    }
    else {
      size_t v19 = v128;
    }
    if ((v129 & 0x80u) == 0) {
      std::vector<unsigned int>::pointer p_p = &__p;
    }
    else {
      std::vector<unsigned int>::pointer p_p = __p;
    }
    if (v18 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v16 / 48;
    }
    std::pair<const char *, const char *> v22 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
    BOOL v23 = 1;
    while (1)
    {
      int v24 = (char)*(v22 - 24);
      if (v24 >= 0) {
        size_t v25 = *(v22 - 24);
      }
      else {
        size_t v25 = *(void *)(v22 - 39);
      }
      if (v24 >= 0) {
        unint64_t v26 = (char *)(v22 - 47);
      }
      else {
        unint64_t v26 = *(char **)(v22 - 47);
      }
      if (v25 >= v19) {
        size_t v27 = v19;
      }
      else {
        size_t v27 = v25;
      }
      int v28 = memcmp(p_p, v26, v27);
      BOOL v29 = v19 >= v25;
      if (v28) {
        BOOL v29 = v28 >= 0;
      }
      if (v29)
      {
        int v30 = (char)*v22;
        if (v30 >= 0) {
          size_t v31 = *v22;
        }
        else {
          size_t v31 = *(void *)(v22 - 15);
        }
        if (v30 >= 0) {
          char v32 = (char *)(v22 - 23);
        }
        else {
          char v32 = *(char **)(v22 - 23);
        }
        if (v19 >= v31) {
          size_t v33 = v31;
        }
        else {
          size_t v33 = v19;
        }
        int v34 = memcmp(v32, p_p, v33);
        BOOL v35 = v31 >= v19;
        if (v34) {
          BOOL v35 = v34 >= 0;
        }
        if (v35) {
          break;
        }
      }
      BOOL v23 = ++v17 < v18;
      v22 += 48;
      if (v21 == v17)
      {
        BOOL negate = 0;
        char v37 = 1;
        goto LABEL_159;
      }
    }
    char v37 = 0;
    BOOL negate = 1;
LABEL_159:
    p_traits = &this->__traits_;
    unsigned __int8 v15 = v118;
  }
  else
  {
    BOOL v23 = 0;
    BOOL negate = 0;
    char v37 = 1;
  }
  if ((v15 & 0x80) != 0) {
    operator delete(__p);
  }
  if (!v23)
  {
LABEL_165:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_208;
    }
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v130, (char *)&v132, (uint64_t)&__p);
    std::vector<std::string>::pointer v91 = this->__equivalences_.__begin_;
    uint64_t v92 = v129;
    int64_t v93 = (char *)this->__equivalences_.__end_ - (char *)v91;
    if (v93)
    {
      unint64_t v94 = 0;
      unint64_t v95 = v93 / 24;
      uint64_t v96 = __p;
      size_t v97 = v128;
      if ((v129 & 0x80u) == 0) {
        size_t v98 = v129;
      }
      else {
        size_t v98 = v128;
      }
      if (v95 <= 1) {
        uint64_t v99 = 1;
      }
      else {
        uint64_t v99 = v93 / 24;
      }
      for (BOOL i = 1; ; BOOL i = v94 < v95)
      {
        unint64_t v101 = &v91[v94];
        std::string::size_type size = HIBYTE(v101->__r_.__value_.__r.__words[2]);
        int v103 = (char)size;
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v101->__r_.__value_.__l.__size_;
        }
        if (v98 != size) {
          goto LABEL_186;
        }
        size_t v104 = v103 >= 0 ? &v91[v94] : (std::string *)v101->__r_.__value_.__r.__words[0];
        if ((v92 & 0x80) == 0) {
          break;
        }
        BOOL v123 = i;
        int v126 = v91;
        unint64_t v106 = v95;
        uint64_t v107 = v96;
        size_t v108 = v97;
        if (!memcmp(v96, v104, v97))
        {
          operator delete(__p);
          if (!v123)
          {
LABEL_207:
            BOOL negate = 1;
            goto LABEL_208;
          }
LABEL_192:
          BOOL negate = 1;
LABEL_228:
          uint64_t v38 = 2;
          goto LABEL_229;
        }
        ++v94;
        size_t v97 = v108;
        uint64_t v96 = v107;
        unint64_t v95 = v106;
        std::vector<std::string>::pointer v91 = v126;
        if (v94 == v99) {
          goto LABEL_194;
        }
LABEL_190:
        ;
      }
      if (!v92)
      {
LABEL_191:
        if (!i) {
          goto LABEL_207;
        }
        goto LABEL_192;
      }
      uint64_t v105 = 0;
      while (*((unsigned __int8 *)&__p + v105) == v104->__r_.__value_.__s.__data_[v105])
      {
        if (v92 == ++v105) {
          goto LABEL_191;
        }
      }
LABEL_186:
      if (++v94 == v99) {
        goto LABEL_193;
      }
      goto LABEL_190;
    }
LABEL_193:
    if ((v92 & 0x80) != 0) {
LABEL_194:
    }
      operator delete(__p);
LABEL_208:
    if ((char)v130 < 0)
    {
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
    }
    else
    {
      std::regex_traits<char>::char_class_type mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v113 = tab[v130];
      if (((v113 & mask) != 0 || v130 == 95 && (mask & 0x80) != 0)
        && ((char)v131 & 0x80000000) == 0
        && ((tab[v131] & mask) != 0 || (mask & 0x80) != 0 && v131 == 95))
      {
        goto LABEL_226;
      }
      neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
      if ((neg_mask & v113) != 0 || v130 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_225:
        int v115 = negate;
LABEL_227:
        BOOL negate = v115;
        goto LABEL_228;
      }
    }
    if (((char)v131 & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[v131] & neg_mask) == 0)
      {
        int v115 = 1;
        if (v131 != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_227;
        }
      }
      goto LABEL_225;
    }
LABEL_226:
    int v115 = 1;
    goto LABEL_227;
  }
  if ((v37 & 1) == 0) {
    goto LABEL_228;
  }
  uint64_t v38 = 2;
LABEL_59:
  unsigned __int8 v40 = *a2->__current_;
  unsigned __int8 v130 = v40;
  if (this->__icase_)
  {
    unsigned __int8 v40 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v40);
    unsigned __int8 v130 = v40;
  }
  std::vector<char>::pointer v41 = this->__chars_.__begin_;
  unint64_t v42 = this->__chars_.__end_ - v41;
  if (v42)
  {
    if (v42 <= 1) {
      unint64_t v42 = 1;
    }
    while (1)
    {
      int v43 = *v41++;
      if (v43 == v40) {
        break;
      }
      if (!--v42) {
        goto LABEL_66;
      }
    }
LABEL_203:
    BOOL negate = 1;
    goto LABEL_229;
  }
LABEL_66:
  std::regex_traits<char>::char_class_type v44 = this->__neg_mask_;
  if (v44 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v40 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v40] & v44) == 0)
    {
      int v46 = (v44 >> 7) & 1;
      char v45 = v40 == 95 ? v46 : 0;
    }
    else
    {
      char v45 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v48 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v40, end - this->__neg_chars_.__begin_);
    int64_t v49 = v48 ? v48 : end;
    if ((v45 & 1) == 0 && v49 == end) {
      goto LABEL_203;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v50 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__end_;
  if (v50 != v51)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131);
      std::vector<std::pair<std::string, std::string>>::pointer v50 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__end_;
      unsigned int v52 = v129;
    }
    else
    {
      unsigned int v52 = 1;
      unsigned __int8 v129 = 1;
      LOWORD(__p) = v40;
    }
    int64_t v53 = (char *)v51 - (char *)v50;
    if (v53)
    {
      uint64_t v124 = v38;
      BOOL v121 = negate;
      uint64_t v54 = 0;
      unint64_t v55 = v53 / 48;
      char v119 = v52;
      if ((v52 & 0x80u) == 0) {
        size_t v56 = v52;
      }
      else {
        size_t v56 = v128;
      }
      if ((v52 & 0x80u) == 0) {
        uint64_t v57 = &__p;
      }
      else {
        uint64_t v57 = __p;
      }
      if (v55 <= 1) {
        uint64_t v58 = 1;
      }
      else {
        uint64_t v58 = v53 / 48;
      }
      int v59 = (unsigned __int8 *)&v50->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v60 = 1;
      while (1)
      {
        int v61 = (char)*(v59 - 24);
        if (v61 >= 0) {
          size_t v62 = *(v59 - 24);
        }
        else {
          size_t v62 = *(void *)(v59 - 39);
        }
        if (v61 >= 0) {
          unsigned int v63 = (char *)(v59 - 47);
        }
        else {
          unsigned int v63 = *(char **)(v59 - 47);
        }
        if (v62 >= v56) {
          size_t v64 = v56;
        }
        else {
          size_t v64 = v62;
        }
        int v65 = memcmp(v57, v63, v64);
        BOOL v66 = v56 >= v62;
        if (v65) {
          BOOL v66 = v65 >= 0;
        }
        if (v66)
        {
          int v67 = (char)*v59;
          if (v67 >= 0) {
            size_t v68 = *v59;
          }
          else {
            size_t v68 = *(void *)(v59 - 15);
          }
          if (v67 >= 0) {
            uint64_t v69 = (char *)(v59 - 23);
          }
          else {
            uint64_t v69 = *(char **)(v59 - 23);
          }
          if (v56 >= v68) {
            size_t v70 = v68;
          }
          else {
            size_t v70 = v56;
          }
          int v71 = memcmp(v69, v57, v70);
          BOOL v72 = v68 >= v56;
          if (v71) {
            BOOL v72 = v71 >= 0;
          }
          if (v72) {
            break;
          }
        }
        BOOL v60 = ++v54 < v55;
        v59 += 48;
        if (v58 == v54)
        {
          BOOL negate = v121;
          goto LABEL_124;
        }
      }
      BOOL negate = 1;
LABEL_124:
      uint64_t v38 = v124;
      if ((v119 & 0x80) == 0) {
        goto LABEL_126;
      }
    }
    else
    {
      BOOL v60 = 0;
      if ((v52 & 0x80) == 0) {
        goto LABEL_126;
      }
    }
    operator delete(__p);
LABEL_126:
    if (v60) {
      goto LABEL_229;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_198;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131, (uint64_t)&__p);
  std::vector<std::string>::pointer v73 = this->__equivalences_.__begin_;
  uint64_t v74 = v129;
  int64_t v75 = (char *)this->__equivalences_.__end_ - (char *)v73;
  if (!v75)
  {
    if ((v129 & 0x80) != 0) {
      operator delete(__p);
    }
LABEL_198:
    if ((char)v130 < 0) {
      goto LABEL_229;
    }
    std::regex_traits<char>::char_class_type v109 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v130] & v109) == 0)
    {
      int v110 = (v109 >> 7) & 1;
      if (v130 != 95) {
        int v110 = 0;
      }
      if (v110 != 1) {
        goto LABEL_229;
      }
    }
    goto LABEL_203;
  }
  uint64_t v125 = v38;
  unint64_t v76 = 0;
  unint64_t v77 = v75 / 24;
  int v78 = __p;
  size_t v79 = v128;
  if ((v129 & 0x80u) == 0) {
    size_t v80 = v129;
  }
  else {
    size_t v80 = v128;
  }
  if (v77 <= 1) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = v75 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v76 < v77)
  {
    v83 = &v73[v76];
    std::string::size_type v84 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
    int v85 = (char)v84;
    if ((v84 & 0x80u) != 0) {
      std::string::size_type v84 = v83->__r_.__value_.__l.__size_;
    }
    if (v80 == v84) {
      break;
    }
LABEL_148:
    if (++v76 == v81)
    {
      if ((v74 & 0x80) != 0) {
LABEL_196:
      }
        operator delete(__p);
      uint64_t v38 = v125;
      goto LABEL_198;
    }
LABEL_152:
    ;
  }
  if (v85 >= 0) {
    long long v86 = &v73[v76];
  }
  else {
    long long v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  }
  if ((v74 & 0x80) == 0)
  {
    if (!v74)
    {
LABEL_153:
      BOOL negate = 1;
      uint64_t v38 = v125;
      if (!j) {
        goto LABEL_198;
      }
      goto LABEL_229;
    }
    uint64_t v87 = 0;
    while (*((unsigned __int8 *)&__p + v87) == v86->__r_.__value_.__s.__data_[v87])
    {
      if (v74 == ++v87) {
        goto LABEL_153;
      }
    }
    goto LABEL_148;
  }
  BOOL v120 = j;
  BOOL v122 = negate;
  std::vector<unsigned int> v88 = v73;
  std::vector<unsigned int> v89 = v78;
  size_t v90 = v79;
  if (memcmp(v78, v86, v79))
  {
    ++v76;
    size_t v79 = v90;
    int v78 = v89;
    std::vector<std::string>::pointer v73 = v88;
    BOOL negate = v122;
    if (v76 == v81) {
      goto LABEL_196;
    }
    goto LABEL_152;
  }
  operator delete(__p);
  BOOL negate = 1;
  uint64_t v38 = v125;
  if (!v120) {
    goto LABEL_198;
  }
LABEL_229:
  if (negate == this->__negate_)
  {
    first = 0;
    int v117 = -993;
  }
  else
  {
    a2->__current_ += v38;
    first = this->__first_;
    int v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  signed __int8 v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F6116A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_23F61183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F611A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F611A6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (int64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_23F611DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_23F611FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        uint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      uint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        char v20 = a2;
        if (a2[23] < 0) {
          char v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        BOOL v23 = a3;
        if (a3[23] < 0) {
          BOOL v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)unsigned __int8 v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      int v30 = a2;
      if (a2[23] < 0) {
        int v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      char v32 = v4;
      if (v4[23] < 0) {
        char v32 = *(unsigned char **)v4;
      }
      *char v32 = v31;
      size_t v33 = v3;
      if (v3[23] < 0) {
        size_t v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      BOOL v35 = v3;
      if (v3[23] < 0) {
        BOOL v35 = *(unsigned char **)v3;
      }
      *BOOL v35 = v34;
    }
    *(_OWORD *)unsigned __int8 v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_23F6128DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        unsigned __int8 v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  int v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F612BC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_23F612D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a4;
      }
      else {
        uint64_t v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F612EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F612F24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_23F612FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      uint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned __int8 v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned __int8 v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  unsigned __int8 v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      unint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    std::vector<char>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::vector<char>::pointer end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_23F6133AC(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned __int8 v5 = __p;
  }
  else {
    unsigned __int8 v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F61345C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F6134BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::pair<char, char>>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<char>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_23F613AEC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F613C08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F613C60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x2455D2BD0);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x2455D2BD0);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26F33DBE0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      unsigned char *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x2455D2730](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_23F613FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  unint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int marked_count = a1->__marked_count_;
        do
        {
          long long v11 = (char *)v9;
          uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        unint64_t v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        BOOL v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      BOOL v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        long long v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          long long v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a2);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    unint64_t v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (BOOL v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  std::basic_regex<char>::value_type v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    v3 += v10;
    return v3;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    long long v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::csub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::csub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)uint64_t v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    unsigned int v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            unint64_t v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  std::regex_traits<char>::char_class_type v44 = (void *)v41[1];
                  ++v41;
                  unint64_t v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)uint64_t v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v50;
}

void sub_23F6151B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v54 = 0;
  char v55 = 0;
  v56[0] = 0;
  *(_DWORD *)std::vector<std::pair<std::string, std::string>>::pointer v51 = 0;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v49, 0, 21);
    char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&unsigned char v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    unint64_t v42 = a4;
    unsigned int v11 = v55;
    *((_DWORD *)v55 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v55 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v43 = a3;
    std::regex_traits<char>::char_class_type v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (const char *)(a3 - a2);
    uint64_t v15 = v55;
    *((void *)v55 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = (const char *)*((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = &v20[-*((void *)v15 - 11)];
          unint64_t v29 = v44;
          if ((v27 & ((uint64_t)v44 >= (uint64_t)v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)std::vector<std::pair<std::string, std::string>>::pointer v51 = *(_OWORD *)v19;
            *(_OWORD *)&v51[16] = v30;
            if (v51 != v19)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v51[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v53, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v15 - 11);
            v53[3] = v31;
            unint64_t v29 = v28;
          }
          char v32 = v55;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v54;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, v32);
            }
            char v55 = (_OWORD *)v33;
            char v12 = 1;
            std::regex_traits<char>::char_class_type v44 = v14;
          }
          else
          {
            std::regex_traits<char>::char_class_type v44 = v29;
            unint64_t v34 = v55 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
            char v55 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v55 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
          char v55 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *char v55 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 10) = v26;
            char v55 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&unsigned char v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      uint64_t v15 = v55;
    }
    while (v54 != v55);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = &v44[(void)a2];
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v52 != *(void *)&v51[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v51[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(void *)&v51[32])
  {
    *(void *)&long long v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(void *)std::vector<std::pair<std::string, std::string>>::pointer v51 = &v54;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  return v6;
}

void sub_23F615768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  unsigned int v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 40) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_23F7C7AE0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    std::regex_traits<char>::char_class_type v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        std::vector<std::pair<std::string, std::string>>::pointer v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)std::vector<std::pair<std::string, std::string>>::pointer v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  size_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_23F615D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v11);
      unint64_t v43 = (char *)__p;
      std::regex_traits<char>::char_class_type v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              std::regex_traits<char>::char_class_type v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              std::regex_traits<char>::char_class_type v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      std::regex_traits<char>::char_class_type v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        std::regex_traits<char>::char_class_type v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_23F6160DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      unint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *BOOL v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::shared_ptr<realityio::InputDescriptor const>>::__vallocate[abi:ne180100](a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  void *v13 = &v17[(void)v12];
  return result;
}

void *realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

BOOL std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1 + 32;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v9 = a2 + 32;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(v9 + 8);
  BOOL v10 = v8 == v7 && v5 == v4;
  if (v5 != v4 && v8 != v7) {
    return *(void *)a1 == *(void *)a2
  }
        && *(void *)(a1 + 8) == *(void *)(a2 + 8)
        && *(void *)(a1 + 16) == *(void *)(a2 + 16)
        && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
        && std::sub_match<std::__wrap_iter<char *>>::compare[abi:ne180100](v4, v7) == 0;
  return v10;
}

std::string *std::match_results<std::__wrap_iter<char *>>::format<std::back_insert_iterator<std::string>>(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  uint64_t v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4) {
      return this;
    }
    while (1)
    {
      int v29 = *v6;
      if (v29 == 92)
      {
        unint64_t v33 = v6 + 1;
        if (v6 + 1 == a4)
        {
          LOBYTE(v29) = 92;
        }
        else
        {
          int v29 = *v33;
          if ((v29 - 48) <= 9u)
          {
            unint64_t v34 = (v29 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v34) {
              uint64_t v35 = (uint64_t)(a1 + 3);
            }
            else {
              uint64_t v35 = (uint64_t)&(*a1)[3 * v34];
            }
            uint64_t v36 = *(std::string::value_type **)v35;
            uint64_t v37 = *(std::string::value_type **)(v35 + 8);
            while (v36 != v37)
            {
              std::string::value_type v38 = *v36++;
              std::string::push_back(this, v38);
            }
            goto LABEL_53;
          }
          ++v6;
        }
      }
      else if (v29 == 38)
      {
        uint64_t v30 = **a1;
        long long v31 = (*a1)[1];
        while (v30 != v31)
        {
          std::string::value_type v32 = *v30++;
          std::string::push_back(this, v32);
        }
        goto LABEL_52;
      }
      std::string::push_back(this, v29);
LABEL_52:
      unint64_t v33 = v6;
LABEL_53:
      uint64_t v6 = v33 + 1;
      if (v33 + 1 == a4) {
        return this;
      }
    }
  }
  if (a3 != a4)
  {
    do
    {
      int v9 = *v6;
      if (v9 == 36)
      {
        BOOL v10 = v6 + 1;
        if (v6 + 1 == a4) {
          goto LABEL_31;
        }
        int v11 = (char)*v10;
        int v9 = *v10;
        if (v11 > 38)
        {
          if (v11 == 39)
          {
            int64_t v18 = (std::string::value_type *)a1[9];
            unint64_t v19 = (std::string::value_type *)a1[10];
            while (v18 != v19)
            {
              std::string::value_type v20 = *v18++;
              std::string::push_back(this, v20);
            }
            goto LABEL_33;
          }
          if (v11 == 96)
          {
            int64_t v15 = (std::string::value_type *)a1[6];
            long long v16 = (std::string::value_type *)a1[7];
            while (v15 != v16)
            {
              std::string::value_type v17 = *v15++;
              std::string::push_back(this, v17);
            }
            goto LABEL_33;
          }
LABEL_20:
          if ((v9 - 48) <= 9)
          {
            unint64_t v21 = *v10 - 48;
            if (v6 + 2 != a4)
            {
              uint64_t v22 = v6[2];
              unsigned int v23 = v22 - 48;
              uint64_t v24 = v22 + 10 * (int)v21 - 48;
              if (v23 > 9)
              {
                BOOL v10 = v6 + 1;
              }
              else
              {
                unint64_t v21 = v24;
                BOOL v10 = v6 + 2;
              }
            }
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v21) {
              uint64_t v25 = (uint64_t)(a1 + 3);
            }
            else {
              uint64_t v25 = (uint64_t)&(*a1)[3 * (int)v21];
            }
            uint64_t v26 = *(std::string::value_type **)v25;
            uint64_t v27 = *(std::string::value_type **)(v25 + 8);
            while (v26 != v27)
            {
              std::string::value_type v28 = *v26++;
              std::string::push_back(this, v28);
            }
            goto LABEL_33;
          }
LABEL_31:
          LOBYTE(v9) = 36;
          goto LABEL_32;
        }
        if (v11 != 36)
        {
          if (v11 == 38)
          {
            unint64_t v12 = **a1;
            uint64_t v13 = (*a1)[1];
            while (v12 != v13)
            {
              std::string::value_type v14 = *v12++;
              std::string::push_back(this, v14);
            }
            goto LABEL_33;
          }
          goto LABEL_20;
        }
        ++v6;
      }
LABEL_32:
      std::string::push_back(this, v9);
      BOOL v10 = v6;
LABEL_33:
      uint64_t v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

uint64_t std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::operator++(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  uint64_t v2 = *(char ***)(a1 + 32);
  int v4 = *(_DWORD *)(v3 - 8);
  int v5 = v4 | 0x800;
  *(_DWORD *)(v3 - 8) = v4 | 0x800;
  if (*(char ***)(v3 + 8) == v2) {
    uint64_t v6 = (char **)(v3 + 24);
  }
  else {
    uint64_t v6 = v2;
  }
  uint64_t v7 = v6[1];
  if (*v6 != v7)
  {
LABEL_5:
    *(_DWORD *)(a1 + 24) = v5 | 0x80;
    int v9 = *(char **)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    char v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v8, v7, v9, &__p, v5 | 0x80u);
    std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v3, (uint64_t)v7, (uint64_t)v9, (uint64_t *)&__p, (v5 & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      uint64_t v2 = *(char ***)v3;
LABEL_14:
      if (v2)
      {
        *(void *)(a1 + 40) = v2;
        operator delete(v2);
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        *(void *)(v3 + 16) = 0;
      }
      *(unsigned char *)(a1 + 128) = 0;
      *(_OWORD *)uint64_t v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_OWORD *)(v3 + 25) = 0u;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      *(unsigned char *)(a1 + 96) = 0;
      *(void *)(a1 + 104) = 0;
      *(void *)(a1 + 112) = 0;
      *(unsigned char *)(a1 + 120) = 0;
      *(void *)(a1 + 136) = 0;
      return a1;
    }
    return a1;
  }
  int v11 = *(char **)(a1 + 8);
  if (v11 == v7) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  char v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v12, v7, v11, &__p, v4 | 0x860u);
  std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v3, (uint64_t)v7, (uint64_t)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    ++v7;
    int v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_5;
  }
  return a1;
}

void sub_23F616A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::regex_iterator<std::__wrap_iter<char *>,char,std::regex_traits<char>>::regex_iterator(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v9 = a1 + 32;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, a2, a3, &__p, a5);
  std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return a1;
}

void sub_23F616B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  char v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 40) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<std::__wrap_iter<char *>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char *>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v11 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      std::string::value_type v17 = (void *)(v15 + v12);
      if (v16 <= v13) {
        int64_t v18 = a4 + 3;
      }
      else {
        int64_t v18 = v17;
      }
      *(void *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        unint64_t v19 = a4 + 3;
      }
      else {
        unint64_t v19 = (uint64_t *)(*a4 + v12);
      }
      *(void *)(*(void *)a1 + v12 + 8) = a2 + v19[1] - v10;
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        std::string::value_type v20 = a4 + 3;
      }
      else {
        std::string::value_type v20 = (uint64_t *)(*a4 + v12);
      }
      char v21 = *((unsigned char *)v20 + 16);
      uint64_t v11 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v23 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v23;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

void std::vector<std::sub_match<std::__wrap_iter<char *>>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char *>>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char *>>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  __int16 v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = &v7[3 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        void *v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = &v12[24 * v8];
    unint64_t v16 = &v15[24 * a2];
    uint64_t v17 = 24 * a2;
    int64_t v18 = v15;
    do
    {
      *(void *)int64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = &v12[24 * v11];
    char v21 = (char *)*a1;
    std::string::value_type v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v15 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      std::string::value_type v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

uint64_t std::sub_match<std::__wrap_iter<char *>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(void *)(a1 + 8) - *(void *)a1);
  }
  else
  {
    std::match_results<const char *> __p = 0;
    size_t v19 = 0;
    uint64_t v20 = 0;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    unsigned int v3 = HIBYTE(v17);
    __int16 v5 = v15;
    size_t v4 = v16;
  }
  else
  {
    size_t v4 = 0;
    __int16 v5 = 0;
    unsigned int v3 = 0;
    uint64_t v15 = 0;
    size_t v16 = 0;
    uint64_t v17 = 0;
  }
  char v6 = HIBYTE(v20);
  if (v20 >= 0) {
    size_t v7 = HIBYTE(v20);
  }
  else {
    size_t v7 = v19;
  }
  if (v20 >= 0) {
    std::vector<unsigned int>::pointer p_p = &__p;
  }
  else {
    std::vector<unsigned int>::pointer p_p = __p;
  }
  if ((v3 & 0x80u) == 0) {
    size_t v9 = v3;
  }
  else {
    size_t v9 = v4;
  }
  if ((v3 & 0x80u) == 0) {
    unint64_t v10 = (void **)&v15;
  }
  else {
    unint64_t v10 = v5;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  unsigned int v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  unsigned int v13 = v9 < v7;
  if (v7 < v9) {
    unsigned int v13 = -1;
  }
  if (v12) {
    return v12;
  }
  else {
    return v13;
  }
}

void sub_23F616FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetTypeID()
{
  if (RIOPxrSdfLayerGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
  }
  return RIOPxrSdfLayerGetTypeID::typeID;
}

void __RIOPxrSdfLayerGetTypeID_block_invoke()
{
  if (!RIOPxrSdfLayerGetTypeID::typeID) {
    RIOPxrSdfLayerGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfLayerCreateAnonymous(char *a1)
{
  size_t v11 = 0;
  uint64_t v12 = 0;
  std::match_results<const char *> __p = &v11;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v11);
  size_t v9 = 0;
  if (a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  }
  else
  {
    std::match_results<const char *> __p = 0;
    size_t v11 = 0;
    uint64_t v12 = 0;
  }
  v7[0] = 0;
  v7[1] = 0;
  char v6 = v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous();
  unsigned int v3 = v8;
  unint64_t v2 = v9;
  unint64_t v8 = 0;
  size_t v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)&v9, v2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7[0]);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  uint64_t v4 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v9);
  return v4;
}

void sub_23F617198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, atomic_uint *a12, atomic_uint *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(void *a1)
{
  if (RIOPxrSdfLayerGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = *a1;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
  }
  return v3;
}

CFStringRef RIOPxrSdfLayerCreateIdentifier(char *a1, const __CFDictionary *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a1);
  MEMORY[0x2455CF950](v8, __p, v10);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 >= 0) {
    uint64_t v3 = v8;
  }
  else {
    uint64_t v3 = (void **)v8[0];
  }
  CFStringRef v4 = CFStringCreateWithCString(0, (const char *)v3, 0x8000100u);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, v11);
  return v4;
}

void sub_23F61732C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21 - 40, *(void **)(v21 - 32));
  _Unwind_Resume(a1);
}

void anonymous namespace'::decodeCFDictionaryRefOfFileFormatArguments(_anonymous_namespace_ *this, CFDictionaryRef theDict)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  if (theDict) {
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)realityio::updateStringMapFromCFDictionary, this);
  }
}

void sub_23F6173C0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerSave(uint64_t *a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  uint64_t v6 = a1[2];
  __int16 v5 = a1 + 2;
  if (v6)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v15, v7);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  double v9 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
  size_t v11 = v10;
  uint64_t v12 = v16;
  if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v12 + 8))(v12, v9);
  }
  std::recursive_mutex::lock(v11);
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
  uint64_t v8 = MEMORY[0x2455D21C0](v13, a2);
  std::recursive_mutex::unlock(v11);
  return v8;
}

void sub_23F6174C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerReload(uint64_t *a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
  uint64_t v4 = a1[2];
  uint64_t v3 = a1 + 2;
  if (v4)
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v5);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  double v7 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v13);
  double v9 = v8;
  uint64_t v10 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v10 + 8))(v10, v7);
  }
  std::recursive_mutex::lock(v9);
  size_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(v11);
  std::recursive_mutex::unlock(v9);
  return v6;
}

void sub_23F617604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerExportWithURL(uint64_t a1, void *a2, char *a3, const __CFDictionary *a4)
{
  id v7 = a2;
  uint64_t v8 = (realityio *)[v7 isFileURL];
  if (v8)
  {
  }
  else
  {
    uint64_t v10 = *(NSObject **)(realityio::logObjects(v8) + 32);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_error_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_ERROR, "CoreRealityIO only supports exporting content to file URLs", v12, 2u);
    }
    uint64_t v9 = 0;
  }

  return v9;
}

void sub_23F617720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::exportLayerWithFilePath(uint64_t a1, char *a2, char *a3, CFDictionaryRef theDict)
{
  if (!a1) {
    return 0;
  }
  if (a3) {
    id v7 = a3;
  }
  else {
    id v7 = "";
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, v7);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::Export();
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v14, v15);
  return v8;
}

void sub_23F6177FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerExportWithFilePath(uint64_t a1, char *a2, char *a3, const __CFDictionary *a4)
{
  if (a2) {
  else
  }
    return 0;
}

CFStringRef RIOPxrSdfLayerCopyExportString(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString())
  {
    if (v5 >= 0) {
      uint64_t v1 = __p;
    }
    else {
      uint64_t v1 = (void **)__p[0];
    }
    CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  }
  else
  {
    CFStringRef v2 = 0;
  }
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_23F6178EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerClear(uint64_t *a1)
{
  if (a1)
  {
    CFStringRef v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    uint64_t v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F6179D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerTransferContent(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v5 = (uint64_t *)(a2 + 16);
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    uint64_t v10 = v9;
    uint64_t v11 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, a1 + 2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent();
    uint64_t v12 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F617B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_23F617BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  JUMPOUT(0x23F617BB8);
}

uint64_t RIOPxrSdfLayerCreateOrFindRelativeToLayer(uint64_t a1, char *a2)
{
  long long v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = &v22;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v21, v22);
  if (!a1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, a2);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::match_results<const char *> __p = &v17;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v17);
    if (SHIBYTE(v23) < 0) {
      operator delete(v21);
    }
    if (v14)
    {
      uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v14);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v14);
      return v2;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v14);
    std::string::basic_string[abi:ne180100]<0>(&v21, a2);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    std::match_results<const char *> __p = &v17;
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew();
    if (RIOPxrSdfLayerGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v2 = Instance;
    if (Instance)
    {
      *(void *)(Instance + 16) = v14;
      uint64_t v14 = 0;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v14);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v17);
    goto LABEL_30;
  }
  uint64_t v5 = (uint64_t *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v19, v5);
  std::string::basic_string[abi:ne180100]<0>(&v21, a2);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::match_results<const char *> __p = &v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer();
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v17);
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
  uint64_t v6 = v20;
  if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator pxrInternal__aapl__pxrReserved__::SdfLayer* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::*)(void)const(&v14);
  unint64_t v9 = v8 & 1 | (unint64_t)v7;
  if (v9) {
    uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>((uint64_t *)&v14);
  }
  uint64_t v10 = v15[0];
  if (v15[0] && atomic_fetch_add_explicit((atomic_uint *volatile)v15[0] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(void *))(*v10 + 8))(v10);
  }
  if (!v9)
  {
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath();
    if (SHIBYTE(v18) < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    v15[0] = 0;
    v15[1] = 0;
    uint64_t v14 = (atomic_uint *)v15;
    pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v14, v15[0]);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p);
    }
    if (v19)
    {
      uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v19);
      uint64_t v11 = &v19;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v19);
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      std::match_results<const char *> __p = &v17;
      pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew();
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v17);
      uint64_t v2 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v14);
      uint64_t v11 = &v14;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v11);
LABEL_30:
    if (SHIBYTE(v23) < 0) {
      operator delete(v21);
    }
  }
  return v2;
}

void sub_23F617F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&a10);
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerCreateWithIdentifier(char *a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::match_results<const char *> __p = &v11;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&__p, v11);
  unint64_t v9 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew();
  uint64_t v3 = v8;
  uint64_t v2 = v9;
  char v8 = 0;
  unint64_t v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdSkel_AnimQueryImpl>::_RemoveRef((uint64_t)&v9, v2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v8);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v6, v7[0]);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  uint64_t v4 = RIOPxrSdfLayerCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> &>(&v9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v9);
  return v4;
}

void sub_23F618174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, atomic_uint *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t RIOPxrSdfLayerIsAnonymous(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5000](v1);
  }
  return result;
}

uint64_t RIOPxrSdfLayerIsEmpty(uint64_t a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));

  return MEMORY[0x270FA5120](v1);
}

uint64_t RIOPxrSdfLayerCopyDefaultPrim(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim(&v3, v1);
  uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void RIOPxrSdfLayerSetDefaultPrim(uint64_t *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    uint64_t v10 = v9;
    uint64_t v11 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
      }
    }
    std::recursive_mutex::lock(v10);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetDefaultPrim(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F618388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerClearDefaultPrim(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearDefaultPrim(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F6184AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyComment(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment((uint64_t *)__p, v1);
  if (v6 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  CFStringRef v3 = CFStringCreateWithCString(0, (const char *)v2, 0x8000100u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_23F618578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetComment(uint64_t *a1, char *a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      std::match_results<const char *> __p = 0;
      uint64_t v13 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    uint64_t v10 = v9;
    uint64_t v11 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2) {
      std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
    }
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetComment();
    if (v14 < 0) {
      operator delete(__p);
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F6186C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_23F6186F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  JUMPOUT(0x23F6186F0);
}

CFStringRef RIOPxrSdfLayerCopyIdentifier(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v1);
  if (*(char *)(Identifier + 23) >= 0) {
    CFStringRef v3 = (const char *)Identifier;
  }
  else {
    CFStringRef v3 = *(const char **)Identifier;
  }

  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

void RIOPxrSdfLayerSetIdentifier(uint64_t *a1, char *a2)
{
  if (a1 && a2)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      std::match_results<const char *> __p = 0;
      uint64_t v13 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    uint64_t v10 = v9;
    uint64_t v11 = v13;
    if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier();
    if (v14 < 0) {
      operator delete(__p);
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F61888C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_23F6188BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  JUMPOUT(0x23F6188B4);
}

CFStringRef RIOPxrSdfLayerCopyRepositoryPath(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  uint64_t RepositoryPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v1);
  if (*(char *)(RepositoryPath + 23) >= 0) {
    CFStringRef v3 = (const char *)RepositoryPath;
  }
  else {
    CFStringRef v3 = *(const char **)RepositoryPath;
  }

  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

CFStringRef RIOPxrSdfLayerCopyDisplayName(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName((uint64_t *)__p, v1);
  if (v6 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  CFStringRef v3 = CFStringCreateWithCString(0, (const char *)v2, 0x8000100u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_23F6189C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyRealPath(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v1);
  if (*(char *)(RealPath + 23) >= 0) {
    CFStringRef v3 = (const char *)RealPath;
  }
  else {
    CFStringRef v3 = *(const char **)RealPath;
  }

  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

CFStringRef RIOPxrSdfLayerCopyAbsolutePath(uint64_t a1, char *a2)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  std::string::basic_string[abi:ne180100]<0>(&v6, a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath();
  if (v9 >= 0) {
    std::vector<unsigned int>::pointer p_p = (const char *)&__p;
  }
  else {
    std::vector<unsigned int>::pointer p_p = (const char *)__p;
  }
  CFStringRef v4 = CFStringCreateWithCString(0, p_p, 0x8000100u);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  return v4;
}

void sub_23F618AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyAssetName(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  Assetuint64_t Name = pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetName(v1);
  if (*(char *)(AssetName + 23) >= 0) {
    CFStringRef v3 = (const char *)AssetName;
  }
  else {
    CFStringRef v3 = *(const char **)AssetName;
  }

  return CFStringCreateWithCString(0, v3, 0x8000100u);
}

CFStringRef RIOPxrSdfLayerCopyFileExtension(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileExtension((uint64_t *)__p, v1);
  if (v6 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  CFStringRef v3 = CFStringCreateWithCString(0, (const char *)v2, 0x8000100u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_23F618BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  CFStringRef v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  CFStringRef v4 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(&v8, v3, v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  uint64_t v5 = v9;
  if (v9)
  {
    if (!strcmp((const char *)(*(void *)(*(void *)(v9 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C188] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
LABEL_7:
      if ((v5 & 4) != 0) {
        (*(void (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(&v8);
      }
      uint64_t v6 = 0;
      goto LABEL_11;
    }
    if ((v5 & 4) != 0
      && pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl((pxrInternal__aapl__pxrReserved__::VtValue *)&v8, MEMORY[0x263F8C188]))
    {
      uint64_t v5 = v9;
      goto LABEL_7;
    }
  }
  uint64_t v6 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)&v8);
LABEL_11:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v8);
  return v6;
}

void sub_23F618CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void RIOPxrSdfLayerSetMetadata(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v6 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v8 = a1[2];
    char v7 = a1 + 2;
    if (v8)
    {
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v7);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v16, v9);
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    double v10 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &v16);
    uint64_t v12 = v11;
    uint64_t v13 = v17;
    if (v17)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v13 + 8))(v13, v10);
      }
    }
    std::recursive_mutex::lock(v12);
    char v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v7);
    uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v14);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v14, v15, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 16));
    std::recursive_mutex::unlock(v12);
  }
}

void sub_23F618DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerCopyColorConfiguration(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorConfiguration((uint64_t *)&v5, v1);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v8, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
    }
    else {
      std::string v8 = v5;
    }
    if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v3 = &v8;
    }
    else {
      CFStringRef v3 = (std::string *)v8.__r_.__value_.__r.__words[0];
    }
    uint64_t v4 = RIOPxrSdfAssetPathCreateFromCString((char *)v3);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (v7 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v5.__r_.__value_.__l.__data_);
    }
    return v4;
  }
  else
  {
    return RIOPxrSdfAssetPathCreateEmptyPath();
  }
}

void sub_23F618F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void RIOPxrSdfLayerSetColorConfiguration(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    std::string v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
      }
    }
    std::recursive_mutex::lock(v10);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorConfiguration(v12, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)(a2 + 16));
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F61901C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasColorConfiguration(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50F0](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearColorConfiguration(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    CFStringRef v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorConfiguration(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F619174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerCopyColorManagementSystem(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorManagementSystem(&v3, v1);
    uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v3);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return result;
}

void RIOPxrSdfLayerSetColorManagementSystem(uint64_t *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
      }
    }
    std::recursive_mutex::lock(v10);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorManagementSystem(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F61934C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasColorManagementSystem(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5108](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearColorManagementSystem(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorManagementSystem(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F6194A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyDocumentation(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation((uint64_t *)__p, v2);
    if (v7 >= 0) {
      uint64_t v3 = (const char *)__p;
    }
    else {
      uint64_t v3 = (const char *)__p[0];
    }
  }
  else
  {
    uint64_t v3 = "";
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (a1 && v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_23F619588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetDocumentation(uint64_t *a1, char *a2)
{
  if (a1)
  {
    CFStringRef v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      std::match_results<const char *> __p = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v12);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetDocumentation();
    if (v15 < 0) {
      operator delete(__p);
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F6196B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_23F6196E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  JUMPOUT(0x23F6196D8);
}

uint64_t RIOPxrSdfLayerGetStartTimeCode(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5068](v1);
  }
  return result;
}

void RIOPxrSdfLayerSetStartTimeCode(uint64_t *a1, double a2)
{
  if (a1)
  {
    CFStringRef v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
      }
    }
    std::recursive_mutex::lock(v10);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(v12, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F619838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasStartTimeCode(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5080](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearStartTimeCode(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearStartTimeCode(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F619990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetEndTimeCode(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5030](v1);
  }
  return result;
}

void RIOPxrSdfLayerSetEndTimeCode(uint64_t *a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
      }
    }
    std::recursive_mutex::lock(v10);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(v12, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F619AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasEndTimeCode(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5038](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearEndTimeCode(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearEndTimeCode(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F619C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetTimeCodesPerSecond(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50E8](v1);
  }
  return result;
}

void RIOPxrSdfLayerSetTimeCodesPerSecond(uint64_t *a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
      }
    }
    std::recursive_mutex::lock(v10);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeCodesPerSecond(v12, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F619DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasTimeCodesPerSecond(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50F8](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearTimeCodesPerSecond(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearTimeCodesPerSecond(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F619F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetFramesPerSecond(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50A8](v1);
  }
  return result;
}

void RIOPxrSdfLayerSetFramesPerSecond(uint64_t *a1, double a2)
{
  if (a1)
  {
    uint64_t v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, v7);
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v13);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
      }
    }
    std::recursive_mutex::lock(v10);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramesPerSecond(v12, a2);
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F61A084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasFramesPerSecond(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50C0](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearFramesPerSecond(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramesPerSecond(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F61A1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetFramePrecision(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5088](v1);
  }
  return result;
}

void RIOPxrSdfLayerSetFramePrecision(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramePrecision(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F61A344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasFramePrecision(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5098](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearFramePrecision(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramePrecision(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F61A49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopyOwner(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner((uint64_t *)__p, v2);
    if (v7 >= 0) {
      uint64_t v3 = (const char *)__p;
    }
    else {
      uint64_t v3 = (const char *)__p[0];
    }
  }
  else
  {
    uint64_t v3 = "";
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (a1 && v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_23F61A580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetOwner(uint64_t *a1, char *a2)
{
  if (a1)
  {
    CFStringRef v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      std::match_results<const char *> __p = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v12);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetOwner();
    if (v15 < 0) {
      operator delete(__p);
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F61A6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_23F61A6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  JUMPOUT(0x23F61A6D0);
}

uint64_t RIOPxrSdfLayerHasOwner(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5140](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearOwner(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearOwner(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F61A81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

CFStringRef RIOPxrSdfLayerCopySessionOwner(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetSessionOwner((uint64_t *)__p, v2);
    if (v7 >= 0) {
      uint64_t v3 = (const char *)__p;
    }
    else {
      uint64_t v3 = (const char *)__p[0];
    }
  }
  else
  {
    uint64_t v3 = "";
  }
  CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  if (a1 && v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_23F61A900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetSessionOwner(uint64_t *a1, char *a2)
{
  if (a1)
  {
    CFStringRef v4 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v6 = a1[2];
    uint64_t v5 = a1 + 2;
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&__p, v7);
    }
    else
    {
      std::match_results<const char *> __p = 0;
      uint64_t v14 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &__p);
    double v10 = v9;
    uint64_t v11 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    if (a2) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = "";
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, v12);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetSessionOwner();
    if (v15 < 0) {
      operator delete(__p);
    }
    std::recursive_mutex::unlock(v10);
  }
}

void sub_23F61AA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v15);
  _Unwind_Resume(a1);
}

void sub_23F61AA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  JUMPOUT(0x23F61AA50);
}

uint64_t RIOPxrSdfLayerHasSessionOwner(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA5050](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearSessionOwner(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearSessionOwner(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F61AB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetHasOwnedSubLayers(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50D8](v1);
  }
  return result;
}

void RIOPxrSdfLayerSetHasOwnedSubLayers(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetHasOwnedSubLayers(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F61AD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerHasCustomLayerMetaData(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50B8](v1);
  }
  return result;
}

void RIOPxrSdfLayerClearAllCustomLayerMetaData(uint64_t *a1)
{
  if (a1)
  {
    uint64_t v2 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v4 = a1[2];
    uint64_t v3 = a1 + 2;
    if (v4)
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v11, v5);
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    double v6 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v11);
    double v8 = v7;
    uint64_t v9 = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t, double))(*(void *)v9 + 8))(v9, v6);
      }
    }
    std::recursive_mutex::lock(v8);
    double v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v3);
    pxrInternal__aapl__pxrReserved__::SdfLayer::ClearCustomLayerData(v10);
    std::recursive_mutex::unlock(v8);
  }
}

void sub_23F61AE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrSdfLayerCopySubLayerPaths(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(&v18, v1);
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  int v3 = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::_Validate(v18);
  int v4 = v3;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (v3) {
    uint64_t v7 = &v18;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v3) {
    uint64_t v8 = (uint64_t)&v20;
  }
  else {
    uint64_t v8 = 16;
  }
  while (1)
  {
    int v9 = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::_Validate(v18);
    if (v18)
    {
      double v10 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v18 + 112))(v18, v20);
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[1] - *v10) >> 3);
    }
    else
    {
      unint64_t v11 = 0;
    }
    if (v4 != v9)
    {
      uint64_t v21 = "sdf/listProxy.h";
      long long v22 = "equal";
      uint64_t v23 = 268;
      uint64_t v24 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Iterator<pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerType"
            "Policy> *, pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypeP"
            "olicy>::_GetHelper>::equal(const This &) const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerT"
            "ypePolicy, Owner = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLa"
            "yerTypePolicy> *, GetIteunint64_t m = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__:"
            ":SdfSubLayerTypePolicy>::_GetHelper]";
      char v25 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      goto LABEL_14;
    }
    if (v6 == v11) {
      break;
    }
LABEL_14:
    if (*v7)
    {
      if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(*v7 + 8)))
      {
        uint64_t v12 = (long long *)(*(void *)(*(uint64_t (**)(uint64_t, void))(*(void *)*v7 + 112))(*v7, *(unsigned int *)v8)+ v5);
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((void *)v12 + 1));
        }
        else
        {
          long long v13 = *v12;
          __p.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
        }
        goto LABEL_21;
      }
      uint64_t v21 = "sdf/listProxy.h";
      long long v22 = "_Validate";
      uint64_t v23 = 702;
      uint64_t v24 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
      char v25 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    }
    memset(&__p, 0, sizeof(__p));
LABEL_21:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<unsigned int>::pointer p_p = &__p;
    }
    else {
      std::vector<unsigned int>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    CFStringRef v15 = CFStringCreateWithCString(0, (const char *)p_p, 0x8000100u);
    CFArrayAppendValue(Mutable, v15);
    CFRelease(v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    ++v6;
    v5 += 24;
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  return Mutable;
}

void sub_23F61B12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrSdfLayerSetSubLayerPathsWithStrings(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a1)
  {
    v25[0] = &unk_26F33DDB0;
    uint64_t v26 = v25;
    if (!theArray)
    {
      std::system_category();
LABEL_26:
      std::__function::__value_func<realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::~__value_func[abi:ne180100](v25);
      return;
    }
    long long v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    CFIndex Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      CFIndex v5 = 0;
      while (1)
      {
        v20.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayGetValueAtIndex(theArray, v5);
        if (!v26) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(unsigned char *__return_ptr))(*v26 + 48))(__p);
        if (!__p[0]) {
          break;
        }
        if ((__p[31] & 0x80000000) != 0) {
          std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
        }
        else {
          std::string v20 = *(std::string *)&__p[8];
        }
        uint64_t v6 = v23;
        if ((unint64_t)v23 >= v24)
        {
          uint64_t v8 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v22, (long long *)&v20);
        }
        else
        {
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v23, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v7 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
            v23->__r_.__value_.__r.__words[2] = v20.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
          }
          uint64_t v8 = (long long *)&v6[1];
        }
        uint64_t v23 = (std::string *)v8;
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v20.__r_.__value_.__l.__data_);
        }
        if (__p[0] && (__p[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__p[8]);
        }
        if (Count == ++v5) {
          goto LABEL_22;
        }
      }
      long long v18 = *(_OWORD *)&__p[8];
      *(void *)std::string __p = &v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      goto LABEL_26;
    }
LABEL_22:
    memset(__p, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)__p, v22, (long long *)v23, 0xAAAAAAAAAAAAAAABLL * (((char *)v23 - (char *)v22) >> 3));
    long long v18 = *(_OWORD *)__p;
    uint64_t v19 = *(void *)&__p[16];
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    memset(__p, 0, 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    *(void *)std::string __p = &v22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    int v9 = (realityio::UsdLayerMutexTracker *)std::__function::__value_func<realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::~__value_func[abi:ne180100](v25);
    double v10 = realityio::UsdLayerMutexTracker::instance(v9);
    uint64_t v12 = *(void *)(a1 + 16);
    unint64_t v11 = (uint64_t *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v11);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(__p, v13);
    }
    else
    {
      *(_OWORD *)std::string __p = 0uLL;
    }
    double v14 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v10, __p);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)&__p[8];
    if (*(void *)&__p[8]
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t, double))(*(void *)v17 + 8))(v17, v14);
    }
    std::recursive_mutex::lock(v16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v11);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths();
    std::recursive_mutex::unlock(v16);
    *(void *)std::string __p = &v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_23F61B47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,atomic_uint *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28)
{
  if (a21 && atomic_fetch_add_explicit(a21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a21 + 8))(a21);
  }
  if (a9)
  {
    *(void *)(v29 - 88) = v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfLayerGetNumSubLayerPaths(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(result + 16));
    return MEMORY[0x270FA50D0](v1);
  }
  return result;
}

BOOL RIOPxrSdfLayerCanApplyBatchNamespaceEdit(BOOL a1, const __CFArray *a2)
{
  BOOL v2 = a1;
  if (a1)
  {
    makeBatchNamespaceEditFromCFArray((const __CFArray *)v4, a2);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(v2 + 16));
    BOOL v2 = pxrInternal__aapl__pxrReserved__::SdfLayer::CanApply() != 0;
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)v4);
  }
  return v2;
}

void sub_23F61B5F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)va);
  _Unwind_Resume(a1);
}

void makeBatchNamespaceEditFromCFArray(const __CFArray *a1, const __CFArray *a2)
{
  unint64_t Count = CFArrayGetCount(a2);
  uint64_t v17 = 0;
  long long v18 = 0;
  v19[0] = 0;
  if (Count)
  {
    unint64_t v4 = Count;
    if (Count > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v19;
    std::string v20 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>>(Count);
    uint64_t v21 = v20;
    long long v22 = v20;
    uint64_t v23 = (char *)v20 + 20 * v5;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__swap_out_circular_buffer(&v17, &v20);
    std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::~__split_buffer((uint64_t)&v20);
    for (CFIndex i = 0; i != v4; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
      CFTypeID v8 = CFGetTypeID(ValueAtIndex);
      if (RIOPxrSdfNamespaceEditGetTypeID::onceToken != -1) {
        dispatch_once(&RIOPxrSdfNamespaceEditGetTypeID::onceToken, &__block_literal_global_1);
      }
      if (v8 == RIOPxrSdfNamespaceEditGetTypeID::typeID)
      {
        int v9 = ValueAtIndex + 4;
        double v10 = v18;
        if ((unint64_t)v18 >= v19[0])
        {
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v18 - v17) >> 2);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((v19[0] - v17) >> 2) > v13) {
            unint64_t v13 = 0x999999999999999ALL * ((v19[0] - v17) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v19[0] - v17) >> 2) >= 0x666666666666666) {
            unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v14 = v13;
          }
          unint64_t v24 = v19;
          if (v14) {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>>(v14);
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = (void **)(v14 + 20 * v12);
          std::string v20 = (void **)v14;
          uint64_t v21 = v16;
          uint64_t v23 = (char *)(v14 + 20 * v15);
          std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit,pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit const&>(v16, v9);
          long long v22 = (void **)((char *)v16 + 20);
          std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__swap_out_circular_buffer(&v17, &v20);
          unint64_t v11 = v18;
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::~__split_buffer((uint64_t)&v20);
        }
        else
        {
          std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit,pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit const&>(v18, v9);
          unint64_t v11 = v10 + 5;
        }
        long long v18 = v11;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::SdfBatchNamespaceEdit();
  std::string v20 = (void **)&v17;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_23F61B814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerApplyBatchNamespaceEdit(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    makeBatchNamespaceEditFromCFArray((const __CFArray *)v14, a2);
    unint64_t v4 = realityio::UsdLayerMutexTracker::instance(v3);
    uint64_t v6 = *(void *)(v2 + 16);
    uint64_t v5 = (uint64_t *)(v2 + 16);
    if (v6)
    {
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v15, v7);
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    double v8 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v4, &v15);
    double v10 = v9;
    uint64_t v11 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v11 + 8))(v11, v8);
    }
    std::recursive_mutex::lock(v10);
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v5);
    uint64_t v2 = pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(v12, (const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)v14);
    std::recursive_mutex::unlock(v10);
    pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)v14);
  }
  return v2;
}

void sub_23F61B920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v15 = a14;
  if (a14)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::~SdfBatchNamespaceEdit((pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *)&a10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerCopyCustomLayerDataValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    CustomLayerData = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v8, v4);
    if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(CustomLayerData);
    }
    ValueAtPath = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
    if (ValueAtPath) {
      uint64_t v2 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>(ValueAtPath);
    }
    else {
      uint64_t v2 = 0;
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v8, 0);
  }
  return v2;
}

void sub_23F61BA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerSetCustomLayerData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    BOOL v3 = a3 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  uint64_t v4 = !v3;
  if (!v3)
  {
    uint64_t v6 = (uint64_t *)(a1 + 16);
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    CustomLayerData = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v18, v7);
    if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(CustomLayerData);
    }
    int v9 = (realityio::UsdLayerMutexTracker *)pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    double v10 = realityio::UsdLayerMutexTracker::instance(v9);
    if (*v6)
    {
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v6);
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v19, v11);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    double v12 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v10, &v19);
    unint64_t v14 = v13;
    uint64_t v15 = v20;
    if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t, double))(*(void *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v6);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v16, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v18);
    std::recursive_mutex::unlock(v14);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v18, 0);
  }
  return v4;
}

void sub_23F61BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = a12;
  if (a12)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

BOOL RIOPxrSdfLayerClearCustomLayerData(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    CustomLayerData = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v8, v4);
    if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(CustomLayerData);
    }
    pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath();
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v6, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v8);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v8, 0);
  }
  return a1 != 0;
}

void sub_23F61BC80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfLayerFlattenSubGraphInPlace(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  BOOL v3 = (uint64_t *)(a1 + 16);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v15, (uint64_t *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, (_DWORD *)(a2 + 20));
  double v10 = 0;
  uint64_t v11 = 0;
  double v12 = 0;
  uint64_t v18 = (void **)&v10;
  char v19 = 0;
  double v10 = operator new(8uLL);
  uint64_t v11 = v10;
  double v12 = v10 + 2;
  uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v12, &v20, &v22, v10);
  MEMORY[0x2455CF2E0](&v13, &v10);
  pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked();
  uint64_t v18 = (void **)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v18);
  uint64_t v18 = (void **)&v10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  uint64_t v4 = v16;
  if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)(v16 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (v17)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v17);
    pxrInternal__aapl__pxrReserved__::UsdStage::Flatten(v5);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>(&v13, (uint64_t *)&v18);
    pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v10, v3);
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::SdfCopySpec();
    uint64_t v7 = v11;
    if (v11 && atomic_fetch_add_explicit(v11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v14;
    if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((atomic_uint **)&v18);
  }
  else
  {
    uint64_t v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v17);
  return v6;
}

void sub_23F61BEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, atomic_uint *a4, uint64_t a5, uint64_t a6, atomic_uint *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, atomic_uint *);
  if (a4 && atomic_fetch_add_explicit(a4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a4 + 8))(a4);
  }
  if (a7)
  {
    if (atomic_fetch_add_explicit(a7 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a7 + 8))(a7);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((atomic_uint **)va1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

atomic_uint **RIOPxrSdfLayerReplicationStartSending(atomic_uint **result, uint64_t a2, uint64_t a3)
{
  unsigned char v8[4] = *MEMORY[0x263EF8340];
  if (result)
  {
    if (a3)
    {
      uint64_t v6 = result[2];
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
      getOrCreateReplicationLayerStateDelegate((realityio::replication::LayerStateDelegate **)&v7, (uint64_t *)&v6);
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->((uint64_t)v7);
      v8[0] = &unk_26F33DE40;
      v8[1] = a3;
      _OWORD v8[2] = a2;
      v8[3] = v8;
      boost::optional_detail::optional_base<realityio::replication::LayerStateDelegate::Sender>::emplace_assign<std::function<void ()(char const*,unsigned long)> const&>(v5 + 48, (uint64_t)v8);
      std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100](v8);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&v7);
      return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v6);
    }
  }
  return result;
}

void sub_23F61C118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  BOOL v3 = va_arg(va1, atomic_uint *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, atomic_uint *);
  std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr((atomic_uint **)va1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

atomic_uint **getOrCreateReplicationLayerStateDelegate(realityio::replication::LayerStateDelegate **a1, uint64_t *a2)
{
  BOOL v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetStateDelegate((uint64_t *)&lpsrc, v3);
  if (!v11
    || (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(&v11)
                 + 14)
      ? (BOOL v4 = lpsrc == 0)
      : (BOOL v4 = 1),
        v4))
  {
    uint64_t v5 = 0;
  }
  else
  {
  }
  int v9 = v5;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::_AddRef((uint64_t)v5);
  uint64_t v6 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v9;
  if (!v9) {
    realityio::replication::LayerStateDelegate::New(0);
  }
  *a1 = v9;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::_AddRef((uint64_t)v7);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr((atomic_uint **)&v9);
}

void sub_23F61C374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, __int16 a11, char a12, char a13, uint64_t a14)
{
  std::recursive_mutex::unlock(v15);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(v14);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->(uint64_t result)
{
  if (!result)
  {
    uint64_t v1 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", v1, (const char *)0x2F);
    uint64_t v2 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return RIOPxrSdfLayerReplicationStopSending(v2);
  }
  return result;
}

atomic_uint **RIOPxrSdfLayerReplicationStopSending(atomic_uint **result)
{
  if (result)
  {
    uint64_t v2 = result[2];
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v2);
    getOrCreateReplicationLayerStateDelegate((realityio::replication::LayerStateDelegate **)&v3, (uint64_t *)&v2);
    uint64_t v1 = v3;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->((uint64_t)v3);
    if (*((unsigned char *)v1 + 48))
    {
      std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100]((void *)v1 + 7);
      *((unsigned char *)v1 + 48) = 0;
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&v3);
    return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v2);
  }
  return result;
}

void sub_23F61C534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9, atomic_uint *a10)
{
}

atomic_uint **RIOPxrSdfLayerReplicationReceive(atomic_uint **result, const char *a2, uint64_t a3)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v6 = result[2];
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
      getOrCreateReplicationLayerStateDelegate((realityio::replication::LayerStateDelegate **)&v7, (uint64_t *)&v6);
      uint64_t v5 = (realityio::replication::LayerStateDelegate *)pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::operator->((uint64_t)v7);
      realityio::replication::LayerStateDelegate::Receive(v5, a2, a3);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(&v7);
      return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v6);
    }
  }
  return result;
}

void sub_23F61C5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9)
{
}

atomic_uint **_RIOPxrSdfLayerCFFinalize(atomic_uint **a1)
{
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(a1 + 2);
}

BOOL _RIOPxrSdfLayerCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

uint64_t _RIOPxrSdfLayerCFHash(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v1 = a1 + 2;
  if (v2) {
    return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v1);
  }
  else {
    return 0;
  }
}

CFStringRef _RIOPxrSdfLayerCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfLayer %p>", a1);
}

CFStringRef _RIOPxrSdfLayerCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfLayer %p>", a1);
}

void std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::~__func()
{
}

void *std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33DDB0;
  return result;
}

void std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33DDB0;
}

void std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::operator()(__CFString **a1@<X1>, uint64_t a2@<X8>)
{
  if (*a1 && (realityio::CFStringCopyUTF8String(*a1, (uint64_t)v8), v8[0]))
  {
    int v3 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v7 = __p;
    }
    char v5 = HIBYTE(v7.__r_.__value_.__r.__words[2]);
    *(unsigned char *)a2 = 1;
    std::string::size_type size = v7.__r_.__value_.__l.__size_;
    *(void *)(a2 + 8) = v7.__r_.__value_.__r.__words[0];
    *(void *)(a2 + 16) = size;
    *(void *)(a2 + 23) = *(std::string::size_type *)((char *)&v7.__r_.__value_.__r.__words[1] + 7);
    *(unsigned char *)(a2 + 31) = v5;
    if (v3 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v4 = std::system_category();
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = v4;
  }
}

void sub_23F61C7CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1},std::allocator<realityio::CFStringArrayToStringVector(__CFArray const*)::{lambda(__CFString const*)#1}>,realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::target_type()
{
}

void *std::__function::__value_func<realityio::Result<std::string,realityio::Error> ()(__CFString const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  int v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 20), (_DWORD *)(v4 + v7 - 20));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 16), (_DWORD *)(v4 + v7 - 16));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 12), (_DWORD *)(v4 + v7 - 12));
      uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v6 + v7 - 8), (_DWORD *)(v4 + v7 - 8));
      *(_DWORD *)(v6 + v7 - 4) = *(_DWORD *)(v4 + v7 - 4);
      v7 -= 20;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>>(unint64_t a1)
{
  if (a1 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a1);
}

uint64_t std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 20;
    std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::destroy[abi:ne180100](i - 20);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_DWORD *std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit,pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit const&>(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 2, a2 + 2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1 + 3, a2 + 3);
  a1[4] = a2[4];
  return result;
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 20;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfNamespaceEdit>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::_AddRef(uint64_t result)
{
  if (result)
  {
    int v1 = *(_DWORD *)(result + 8);
    if (v1 < 0)
    {
      if (v1 == -1) {
        return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      }
      int v2 = *(_DWORD *)(result + 8);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 8), (unsigned int *)&v2, v1 - 1, memory_order_relaxed, memory_order_relaxed);
      if (v2 != v1) {
        return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked();
      }
    }
    else
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
    }
  }
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase>::~TfRefPtr(atomic_uint **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    atomic_uint v3 = v2[2];
    if (v3 < 0)
    {
      if (v3 == -2
        || (atomic_uint v5 = v2[2],
            atomic_compare_exchange_strong_explicit(v2 + 2, (unsigned int *)&v5, v3 + 1, memory_order_release, memory_order_relaxed), v5 != v3))
      {
        if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0) {
          return a1;
        }
      }
      else if (v3 != -1)
      {
        return a1;
      }
      goto LABEL_4;
    }
    if (atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
LABEL_4:
    }
      (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>::_Validate(uint64_t result)
{
  if (result)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(result + 8)))
    {
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::TfRefPtr<realityio::replication::LayerStateDelegate>::~TfRefPtr(atomic_uint **a1)
{
  int v2 = *a1;
  if (*a1)
  {
    atomic_uint v3 = v2[2];
    if (v3 < 0)
    {
      if (v3 == -2
        || (atomic_uint v5 = v2[2],
            atomic_compare_exchange_strong_explicit(v2 + 2, (unsigned int *)&v5, v3 + 1, memory_order_release, memory_order_relaxed), v5 != v3))
      {
        if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked() & 1) == 0) {
          return a1;
        }
      }
      else if (v3 != -1)
      {
        return a1;
      }
      goto LABEL_4;
    }
    if (atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
LABEL_4:
    }
      (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::~__func()
{
}

__n128 std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::__clone(uint64_t a1)
{
  int v2 = (char *)operator new(0x18uLL);
  *(void *)int v2 = &unk_26F33DE40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33DE40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *(void *)(a1 + 16));
}

uint64_t std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<RIOPxrSdfLayerReplicationStartSending::$_0,std::allocator<RIOPxrSdfLayerReplicationStartSending::$_0>,void ()(char const*,unsigned long)>::target_type()
{
}

void *std::__function::__value_func<void ()(char const*,unsigned long)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void realityio::MeshAssetAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtValue *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  v227[3] = *MEMORY[0x263EF8340];
  std::chrono::steady_clock::now();
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v225, a3);
  long long v205 = 0uLL;
  unint64_t v206 = 0;
  v202 = 0;
  v203 = 0;
  unint64_t v204 = 0;
  uint64_t v199 = 0;
  v200 = 0;
  unint64_t v201 = 0;
  uint64_t v196 = 0;
  uint64_t v197 = 0;
  uint64_t v198 = 0;
  v193 = 0;
  v194 = 0;
  uint64_t v195 = 0;
  uint64_t v9 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v10 = 0;
    uint64_t v170 = 0;
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v226, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a5 + 16 * v10));
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 8 * v10);
      uint64_t v12 = *((void *)&v226 + 1);
      if (*((void *)&v226 + 1))
      {
        if (!strcmp((const char *)(*(void *)(*(void *)(*((void *)&v226 + 1) & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP14REGeomSkeletonEE" & 0x7FFFFFFFFFFFFFFFLL)))goto LABEL_8; {
        if ((v12 & 4) != 0
        }
        {
          uint64_t v12 = *((void *)&v226 + 1);
LABEL_8:
          if ((v12 & 4) != 0) {
            uint64_t v13 = (uint64_t *)(*(uint64_t (**)(long long *))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(&v226);
          }
          else {
            uint64_t v13 = (uint64_t *)v226;
          }
          uint64_t v14 = *((void *)&v205 + 1);
          uint64_t v15 = *v13;
          if (*((void *)&v205 + 1) >= v206)
          {
            unint64_t v44 = v205;
            uint64_t v45 = (uint64_t)(*((void *)&v205 + 1) - v205) >> 3;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v47 = v206 - v205;
            if ((uint64_t)(v206 - v205) >> 2 > v46) {
              unint64_t v46 = v47 >> 2;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            *(void *)&long long __sz = &v206;
            if (v48)
            {
              if (v48 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v49 = (char *)operator new(8 * v48);
            }
            else
            {
              uint64_t v49 = 0;
            }
            uint64_t v52 = &v49[8 * v45];
            *(void *)std::string __p = v49;
            *(void *)&__p[8] = v52;
            *(void *)&__p[16] = v52;
            *(void *)&unsigned char __p[24] = &v49[8 * v48];
            *(void *)uint64_t v52 = v15;
            if (v15)
            {
              RERetain();
              uint64_t v14 = *((void *)&v205 + 1);
              unint64_t v44 = v205;
              uint64_t v52 = *(char **)&__p[8];
              uint64_t v53 = *(char **)&__p[16];
            }
            else
            {
              uint64_t v53 = v52;
            }
            uint64_t v16 = v53 + 8;
            *(void *)&__p[16] = v53 + 8;
            if (v14 == v44)
            {
              int64x2_t v56 = vdupq_n_s64(v44);
            }
            else
            {
              uint64_t v54 = 0;
              do
              {
                uint64_t v55 = *(void *)(v14 + v54 - 8);
                *(void *)&v52[v54 - 8] = v55;
                if (v55) {
                  RERetain();
                }
                v54 -= 8;
              }
              while (v14 + v54 != v44);
              int64x2_t v56 = (int64x2_t)v205;
              uint64_t v16 = *(void **)&__p[16];
              v52 += v54;
            }
            *(void *)&long long v205 = v52;
            *((void *)&v205 + 1) = v16;
            *(int64x2_t *)&__p[8] = v56;
            unint64_t v57 = v206;
            unint64_t v206 = *(void *)&__p[24];
            *(void *)&unsigned char __p[24] = v57;
            *(void *)std::string __p = v56.i64[0];
            std::__split_buffer<realityio::WrappedRERef<REGeomSkeleton *>>::~__split_buffer((uint64_t)__p);
          }
          else
          {
            **((void **)&v205 + 1) = v15;
            if (v15) {
              RERetain();
            }
            uint64_t v16 = (void *)(v14 + 8);
          }
          *((void *)&v205 + 1) = v16;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, v11);
          long long v58 = v203;
          if ((unint64_t)v203 >= v204)
          {
            int v59 = (char *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v202, __p);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v203, __p);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v58 + 1, &__p[4]);
            int v59 = v58 + 8;
          }
          v203 = v59;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
          goto LABEL_151;
        }
      }
      NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      unint64_t v18 = atomic_load(&realityio::tokens::EcsTokens);
      if (!v18) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::EcsTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::EcsTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*NameToken & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v18 + 264) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v226))
      {
        break;
      }
      uint64_t v22 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2455CF810](__p, "__materialAssets");
      if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*(void *)__p & 0xFFFFFFFFFFFFFFF8))
      {
        int v23 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v226);
        if ((__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v23)
        {
          if ((BYTE8(v226) & 4) != 0) {
            uint64_t v24 = (*(uint64_t (**)(long long *))((*((void *)&v226 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v226);
          }
          else {
            uint64_t v24 = v226;
          }
          long long v25 = *(_OWORD *)(v24 + 16);
          long long v215 = *(_OWORD *)v24;
          long long v216 = v25;
          uint64_t v26 = *(void *)(v24 + 32);
          *(void *)&long long v217 = v26;
          if (v26)
          {
            uint64_t v27 = (atomic_ullong *)(v26 - 16);
            if (*((void *)&v216 + 1)) {
              uint64_t v27 = (atomic_ullong *)*((void *)&v216 + 1);
            }
            atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v215);
          uint64_t v28 = (const pxrInternal__aapl__pxrReserved__::VtValue *)v217;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v215);
          uint64_t v29 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(v217 + 16 * v215);
          while (v28 != v29)
          {
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v207, v28);
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::MaterialAssetPair>((pxrInternal__aapl__pxrReserved__::VtValue *)v207))
            {
              if ((BYTE8(v207[0]) & 4) != 0) {
                uint64_t v30 = (uint64_t *)(*(uint64_t (**)(_OWORD *))((*((void *)&v207[0] + 1) & 0xFFFFFFFFFFFFFFF8)
              }
                                                                     + 168))(v207);
              else {
                uint64_t v30 = *(uint64_t **)&v207[0];
              }
              long long v31 = v200;
              if ((unint64_t)v200 >= v201)
              {
                std::string::value_type v32 = (uint64_t *)std::vector<realityio::MaterialAssetPair>::__push_back_slow_path<realityio::MaterialAssetPair const&>(&v199, v30);
              }
              else
              {
                std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>((uint64_t)&v201, v200, v30);
                std::string::value_type v32 = v31 + 2;
              }
              v200 = v32;
            }
            else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v207))
            {
              if ((BYTE8(v207[0]) & 4) != 0) {
                unint64_t v33 = (uint64_t *)(*(uint64_t (**)(_OWORD *))((*((void *)&v207[0] + 1) & 0xFFFFFFFFFFFFFFF8)
              }
                                                                     + 168))(v207);
              else {
                unint64_t v33 = *(uint64_t **)&v207[0];
              }
              uint64_t v190 = *v33;
              if (v190) {
                RERetain();
              }
              uint64_t v189 = 0;
              realityio::MaterialAssetPair::MaterialAssetPair((uint64_t *)&v223, &v190, &v189);
              unint64_t v34 = v200;
              if ((unint64_t)v200 >= v201)
              {
                uint64_t v36 = ((uint64_t)v200 - v199) >> 4;
                unint64_t v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 60) {
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v38 = v201 - v199;
                if ((uint64_t)(v201 - v199) >> 3 > v37) {
                  unint64_t v37 = v38 >> 3;
                }
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v37;
                }
                *(void *)&long long __sz = &v201;
                uint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v201, v39);
                __int16 v41 = &v40[16 * v36];
                *(void *)std::string __p = v40;
                *(void *)&__p[8] = v41;
                *(void *)&unsigned char __p[24] = &v40[16 * v42];
                *(void *)__int16 v41 = v223;
                long long v223 = 0;
                *((void *)v41 + 1) = v224;
                uint64_t v224 = 0;
                *(void *)&__p[16] = v41 + 16;
                std::vector<realityio::MaterialAssetPair>::__swap_out_circular_buffer(&v199, __p);
                uint64_t v35 = v200;
                std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer((void **)__p);
              }
              else
              {
                uint64_t *v200 = (uint64_t)v223;
                v34[1] = v224;
                long long v223 = 0;
                uint64_t v224 = 0;
                uint64_t v35 = v34 + 2;
              }
              v200 = v35;
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v224);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v223);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v189);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v190);
            }
            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v207);
            uint64_t v28 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v28 + 16);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(&v215);
          goto LABEL_151;
        }
      }
      else if ((__p[0] & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v43 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v11);
      MEMORY[0x2455CF810](__p, "__materialAssetPaths");
      if ((*v43 & 0xFFFFFFFFFFFFFFF8) == (*(void *)__p & 0xFFFFFFFFFFFFFFF8))
      {
        int v50 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v226);
        if ((__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v50)
        {
          std::vector<std::pair<std::string, std::string>>::pointer v51 = (BYTE8(v226) & 4) != 0
              ? (uint64_t *)(*(uint64_t (**)(long long *))((*((void *)&v226 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v226)
              : (uint64_t *)v226;
          if (&v196 != v51) {
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)&v196, (_DWORD *)*v51, (_DWORD *)v51[1], (v51[1] - *v51) >> 3);
          }
        }
      }
      else if ((__p[0] & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_151:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v226);
      ++v10;
      uint64_t v9 = *a4;
      if (v10 >= (a4[1] - *a4) >> 3) {
        goto LABEL_165;
      }
    }
    if ((BYTE8(v226) & 4) != 0) {
      uint64_t v19 = (*(uint64_t (**)(long long *))((*((void *)&v226 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v226);
    }
    else {
      uint64_t v19 = v226;
    }
    MEMORY[0x2455CF810](__p, "descriptor");
    int v20 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v19, (uint64_t *)__p);
    int v21 = (void *)(v19 + 8);
    if ((void *)(v19 + 8) == v20) {
      *((void *)&v207[0] + 1) = 0;
    }
    else {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v207, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v20 + 5));
    }
    if ((__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CF810](__p, "xform");
    BOOL v60 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v19, (uint64_t *)__p);
    if (v21 == v60) {
      uint64_t v224 = 0;
    }
    else {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v223, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v60 + 5));
    }
    if ((__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CF810](__p, "providingPrim");
    long long v61 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v19, (uint64_t *)__p);
    if (v21 == v61) {
      uint64_t v222 = 0;
    }
    else {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v221, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v61 + 5));
    }
    if ((__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CF810](__p, "blendShapeInfo");
    long long v62 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(v19, (uint64_t *)__p);
    if (v21 == v62) {
      uint64_t v220 = 0;
    }
    else {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v219, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v62 + 5));
    }
    if ((__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    char v63 = BYTE8(v207[0]);
    if (*((void *)&v207[0] + 1))
    {
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v221))
        {
          if ((v222 & 4) != 0) {
            size_t v64 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v222 & 0xFFFFFFFFFFFFFFF8) + 168))(&v221);
          }
          else {
            size_t v64 = &v221;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v191, v64);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v192, (_DWORD *)v64 + 1);
        }
        if ((v224 & 4) != 0) {
          int v65 = (void **)(*(uint64_t (**)(void ***))((v224 & 0xFFFFFFFFFFFFFFF8) + 168))(&v223);
        }
        else {
          int v65 = v223;
        }
        long long v215 = *(_OWORD *)v65;
        long long v216 = *((_OWORD *)v65 + 1);
        long long v217 = *((_OWORD *)v65 + 2);
        long long v218 = *((_OWORD *)v65 + 3);
        char v66 = v220;
        if (v220
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v191);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[4], &v192);
          if ((BYTE8(v207[0]) & 4) != 0) {
            int v67 = (void *)(*(uint64_t (**)(_OWORD *))((*((void *)&v207[0] + 1) & 0xFFFFFFFFFFFFFFF8)
          }
                                                                + 168))(v207);
          else {
            int v67 = *(void **)&v207[0];
          }
          *(void *)&__p[8] = *v67;
          if (*(void *)&__p[8]) {
            RERetain();
          }
          *(_OWORD *)&__p[16] = v215;
          long long __sz = v216;
          long long v211 = v217;
          long long v212 = v218;
          if ((v220 & 4) != 0) {
            uint64_t v68 = (*(uint64_t (**)(uint64_t *))((v220 & 0xFFFFFFFFFFFFFFF8) + 168))(&v219);
          }
          else {
            uint64_t v68 = v219;
          }
          std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t *)&v213, v68);
          std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::push_back[abi:ne180100]((uint64_t *)&v193, (uint64_t)__p);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((uint64_t)&v213, v214[0]);
          realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&__p[8]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v191);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[4], &v192);
          if ((BYTE8(v207[0]) & 4) != 0) {
            int v71 = (void *)(*(uint64_t (**)(_OWORD *))((*((void *)&v207[0] + 1) & 0xFFFFFFFFFFFFFFF8)
          }
                                                                + 168))(v207);
          else {
            int v71 = *(void **)&v207[0];
          }
          *(void *)&__p[8] = *v71;
          if (*(void *)&__p[8]) {
            RERetain();
          }
          *(_OWORD *)&__p[16] = v215;
          long long __sz = v216;
          long long v211 = v217;
          long long v212 = v218;
          v214[0] = 0;
          v214[1] = 0;
          uint64_t v213 = v214;
          std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::push_back[abi:ne180100]((uint64_t *)&v193, (uint64_t)__p);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((uint64_t)&v213, v214[0]);
          realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef(&__p[8]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
        goto LABEL_150;
      }
      uint64_t v69 = *((void *)&v207[0] + 1);
      if (*((void *)&v207[0] + 1))
      {
        if (!strcmp((const char *)(*(void *)(*(void *)(*((void *)&v207[0] + 1) & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio12WrappedRERefIP17REAssetDescriptorEE" & 0x7FFFFFFFFFFFFFFFLL)))
        {
LABEL_141:
          if ((v69 & 4) != 0) {
            size_t v70 = (uint64_t *)(*(uint64_t (**)(_OWORD *))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(v207);
          }
          else {
            size_t v70 = *(uint64_t **)&v207[0];
          }
          uint64_t v170 = *v70;
          goto LABEL_150;
        }
        if ((v69 & 4) != 0
        {
          uint64_t v69 = *((void *)&v207[0] + 1);
          goto LABEL_141;
        }
      }
    }
LABEL_150:
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v219);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v221);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v223);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v207);
    goto LABEL_151;
  }
  uint64_t v170 = 0;
LABEL_165:
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v73 = MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t v74 = *(void *)(a1 + 16);
  if (v74 && *(void *)(v74 + 200))
  {
    uint64_t v174 = *(void *)(v74 + 192);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v215, a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
    int64_t v75 = (pxrInternal__aapl__pxrReserved__::SdfPath *)MEMORY[0x2455CF7A0](&v226, __p);
    if ((void)v215 == (void)v226)
    {
      unint64_t v76 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v75);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v219, v76);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v219 + 1, v76 + 1);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v219, a2);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v226);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
    memset(v207, 0, sizeof(v207));
    int v208 = 1065353216;
    unint64_t v77 = operator new(0x130uLL);
    v77[1] = 0;
    v77[2] = 0;
    *unint64_t v77 = &unk_26F339D68;
    __s2 = (char *)(v77 + 3);
    realityio::MeshAssetBuilder::MeshAssetBuilder((realityio::MeshAssetBuilder *)(v77 + 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v219);
    int v78 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v193;
    int v173 = v194;
    std::vector<unsigned int>::size_type v178 = v77;
    if (v193 != v194)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        size_t v79 = v202;
        if (v203 != v202)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v191, v202);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v192, (_DWORD *)v79 + 1);
        }
        uint64_t v188 = 0;
        uint64_t v80 = REMeshCompileOptionsCreate();
        if (v188) {
          RERelease();
        }
        uint64_t v188 = v80;
        REMeshCompileOptionsSetPreserveSubdivisonSurfaceData();
        uint64_t v81 = operator new(0xE0uLL);
        v81[1] = 0;
        v81[2] = 0;
        *uint64_t v81 = &unk_26F33DF60;
        *((void *)&v176 + 1) = v81;
        realityio::Builder::Builder((realityio::Builder *)(v81 + 3), v78);
        v81[3] = &unk_26F33DFB0;
        v81[26] = 0;
        v81[27] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        int v82 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        long long v215 = 0uLL;
        *(void *)&long long v216 = 0;
        long long v226 = 0uLL;
        v227[0] = 0;
        v83 = (void *)*((void *)v78 + 10);
        *(void *)&long long v176 = v81 + 3;
        if (v83 != (void *)((char *)v78 + 88))
        {
          do
          {
            if ((v83[5] & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t EmptyString = (v83[5] & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v82);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, (_DWORD *)v83 + 8);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[4], (_DWORD *)v83 + 9);
            if (*(char *)(EmptyString + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
            }
            else
            {
              long long v85 = *(_OWORD *)EmptyString;
              *(void *)&unsigned char __p[24] = *(void *)(EmptyString + 16);
              *(_OWORD *)&__p[8] = v85;
            }
            uint64_t v86 = *((void *)&v226 + 1);
            if (*((void *)&v226 + 1) >= v227[0])
            {
              *((void *)&v226 + 1) = std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>((uint64_t *)&v226, (uint64_t)__p);
              if ((__p[31] & 0x80000000) != 0) {
                operator delete(*(void **)&__p[8]);
              }
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v226 + 1), __p);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v86 + 4), &__p[4]);
              long long v87 = *(_OWORD *)&__p[8];
              *(void *)(v86 + 24) = *(void *)&__p[24];
              *(_OWORD *)(v86 + 8) = v87;
              memset(&__p[8], 0, 24);
              *((void *)&v226 + 1) = v86 + 32;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            int v82 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
            std::vector<unsigned int> v88 = (void *)v83[1];
            if (v88)
            {
              do
              {
                std::vector<unsigned int> v89 = v88;
                std::vector<unsigned int> v88 = (void *)*v88;
              }
              while (v88);
            }
            else
            {
              do
              {
                std::vector<unsigned int> v89 = (void *)v83[2];
                BOOL v90 = *v89 == (void)v83;
                v83 = v89;
              }
              while (!v90);
            }
            v83 = v89;
          }
          while (v89 != (void *)((char *)v78 + 88));
        }
        uint64_t v91 = v188;
        uint64_t v92 = operator new(0x68uLL);
        v92[1] = 0;
        v92[2] = 0;
        *uint64_t v92 = &unk_26F33E4C0;
        *(void *)std::string __p = v91;
        if (v91) {
          RERetain();
        }
        realityio::MeshModelDescriptorBuilder::MeshModelDataT::MeshModelDataT((uint64_t)(v92 + 3), (uint64_t *)__p, v78, &v191, &v221, (_DWORD **)&v215, (uint64_t *)&v226);
        realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(__p);
        int64_t v93 = (std::__shared_weak_count *)v81[27];
        v81[26] = v92 + 3;
        v81[27] = v92;
        if (v93) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v93);
        }
        uint64_t v95 = v81[5];
        uint64_t v94 = v81[6];
        if (v94) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
        }
        char v175 = (char *)v94;
        uint64_t v96 = (const void **)realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName((realityio::MeshModelDescriptorBuilder *)v93);
        std::mutex::lock((std::mutex *)(v95 + 64));
        size_t v97 = v78;
        uint64_t v99 = v81[26];
        size_t v98 = (std::__shared_weak_count *)v81[27];
        unint64_t v100 = operator new(0x30uLL);
        unint64_t v101 = v100;
        v100[1] = 0;
        v100[2] = 0;
        *unint64_t v100 = &unk_26F33E510;
        int v102 = v100 + 3;
        if (v98)
        {
          atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
          v100[3] = &unk_26F33E560;
          v100[4] = v99;
          v100[5] = v98;
          atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v98);
        }
        else
        {
          v100[3] = &unk_26F33E560;
          v100[4] = v99;
          v100[5] = 0;
        }
        *(void *)std::string __p = v96;
        int v103 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v95 + 40), v96, (uint64_t)&std::piecewise_construct, (long long **)__p);
        size_t v104 = (std::__shared_weak_count *)v103[8];
        v103[7] = (uint64_t)v102;
        v103[8] = (uint64_t)v101;
        if (v104) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v104);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v95, (unsigned __int8 *)v96, (uint64_t)v96);
        std::mutex::unlock((std::mutex *)(v95 + 64));
        if (v175) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v175);
        }
        *(void *)std::string __p = &v226;
        std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        *(void *)std::string __p = &v215;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        uint64_t v105 = (realityio::MeshModelDescriptorBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v221);
        long long v215 = v176;
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v176 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v106 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v105);
        uint64_t v107 = (realityio::MeshModelDescriptorBuilder *)MEMORY[0x2455CF830](&v216, v106);
        *(void *)&long long v226 = __s2;
        *((void *)&v226 + 1) = v178;
        atomic_fetch_add_explicit(v178 + 1, 1uLL, memory_order_relaxed);
        uint64_t v108 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v107);
        MEMORY[0x2455CF830](v227, v108);
        std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(__p, &v226, &v215);
        std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v207, (uint64_t)__p);
        if ((BYTE8(__sz) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__sz + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((void)__sz) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__sz);
        }
        if ((__p[16] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p[16] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (*(void *)&__p[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
        }
        if ((v227[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v227[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (*((void *)&v226 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v226 + 1));
        }
        if ((v216 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (*((void *)&v215 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v215 + 1));
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v176 + 1));
        realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(&v188);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v191);
        int v78 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v97 + 104);
      }
      while ((char *)v97 + 104 != v173);
    }
    std::regex_traits<char>::char_class_type v109 = v202;
    if (v203 != v202)
    {
      uint64_t v110 = 0;
      unint64_t v111 = 0;
      do
      {
        long long v112 = (std::__shared_weak_count *)operator new(0xD8uLL);
        v112->__shared_owners_ = 0;
        v112->__shared_weak_owners_ = 0;
        v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E040;
        std::ctype_base::mask v113 = realityio::Builder::Builder((realityio::Builder *)&v112[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109[v110]);
        v112[8].__shared_weak_owners_ = 0;
        v112[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E090;
        uint64_t shared_weak_owners = v112[1].__shared_weak_owners_;
        unint64_t v114 = (std::__shared_weak_count *)v112[2].__vftable;
        if (v114) {
          atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v116 = (long long *)realityio::SkeletonPoseDefinitionBuilder::kOutputName(v113);
        *(void *)std::string __p = v112[8].__shared_weak_owners_;
        realityio::Outputs::storeValue<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT *>(shared_weak_owners, v116, (uint64_t *)__p);
        if (v114) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v114);
        }
        *(void *)&long long v215 = v112 + 1;
        *((void *)&v215 + 1) = v112;
        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v118 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v117);
        char v119 = (realityio::SkeletonPoseDefinitionBuilder *)MEMORY[0x2455CF830](&v216, v118);
        *(void *)&long long v226 = __s2;
        *((void *)&v226 + 1) = v178;
        atomic_fetch_add_explicit(v178 + 1, 1uLL, memory_order_relaxed);
        uint64_t v120 = realityio::SkeletonPoseDefinitionBuilder::kOutputName(v119);
        MEMORY[0x2455CF830](v227, v120);
        std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(__p, &v226, &v215);
        std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v207, (uint64_t)__p);
        if ((BYTE8(__sz) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__sz + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((void)__sz) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__sz);
        }
        if ((__p[16] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p[16] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (*(void *)&__p[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
        }
        if ((v227[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v227[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (*((void *)&v226 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v226 + 1));
        }
        if ((v216 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (*((void *)&v215 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v215 + 1));
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v112);
        ++v111;
        std::regex_traits<char>::char_class_type v109 = v202;
        v110 += 8;
      }
      while (v111 < (v203 - v202) >> 3);
    }
    uint64_t v121 = v196;
    if (v197 != v196 && (v197 - v196) >> 3 == ((uint64_t)v200 - v199) >> 4)
    {
      uint64_t v122 = 0;
      uint64_t v123 = 0;
      unint64_t v124 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v215, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v121 + v122));
        std::string::basic_string[abi:ne180100]<0>(__p, "/__builtin/standardNoMaterial");
        MEMORY[0x2455CF7A0](&v226, __p);
        if ((void)v215 == (void)v226)
        {
          BOOL v125 = 0;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v223, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v196 + v122));
          int v126 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v223);
          MEMORY[0x2455CF810](&v221, "__materialAssetWithMeshVertexColors");
          BOOL v125 = (*v126 & 0xFFFFFFFFFFFFFFF8) != (v221 & 0xFFFFFFFFFFFFFFF8);
          if ((v221 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v221 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v223);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v226);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
        if (v125)
        {
          uint64_t v127 = v199;
          pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v215, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v196 + v122));
          size_t v128 = (std::__shared_weak_count *)operator new(0xE8uLL);
          v128->__shared_owners_ = 0;
          v128->__shared_weak_owners_ = 0;
          v128->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E108;
          std::vector<unsigned int>::pointer v177 = realityio::Builder::Builder((realityio::Builder *)&v128[1], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v215);
          v128[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E158;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          v128[9].__vftable = 0;
          v128[9].__shared_owners_ = 0;
          *(void *)&long long v226 = *(void *)(v127 + v123);
          if ((void)v226) {
            RERetain();
          }
          long long v223 = *(void ***)(v127 + v123 + 8);
          if (v223) {
            RERetain();
          }
          realityio::MaterialAssetDataT::MaterialAssetDataT((uint64_t)__p, &v215, (uint64_t *)&v226, (uint64_t *)&v223);
          realityio::MaterialAssetDataT::operator=((uint64_t)&v128[8].__shared_weak_owners_, (uint64_t)__p);
          realityio::MaterialAssetDataT::~MaterialAssetDataT((realityio::MaterialAssetDataT *)__p);
          realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v223);
          unsigned __int8 v129 = (realityio::MaterialAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v226);
          uint64_t v131 = v128[1].__shared_weak_owners_;
          unsigned __int8 v130 = (std::__shared_weak_count *)v128[2].__vftable;
          if (v130) {
            atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v132 = (long long *)realityio::MaterialAssetBuilder::kMaterialDataName(v129);
          *(void *)std::string __p = (char *)v128 + 208;
          realityio::Outputs::storeValue<realityio::MaterialAssetDataT *>(v131, v132, (uint64_t *)__p);
          if (v130) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v130);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          char v133 = (realityio::MaterialAssetBuilder *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
          *(void *)&long long v215 = v177;
          *((void *)&v215 + 1) = v128;
          atomic_fetch_add_explicit(&v128->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v134 = realityio::MaterialAssetBuilder::kMaterialDataName(v133);
          int v135 = (realityio::MaterialAssetBuilder *)MEMORY[0x2455CF830](&v216, v134);
          *(void *)&long long v226 = __s2;
          *((void *)&v226 + 1) = v178;
          atomic_fetch_add_explicit(v178 + 1, 1uLL, memory_order_relaxed);
          uint64_t v136 = realityio::MaterialAssetBuilder::kMaterialDataName(v135);
          MEMORY[0x2455CF830](v227, v136);
          std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(__p, &v226, &v215);
          std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(v207, (uint64_t)__p);
          if ((BYTE8(__sz) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&__sz + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((void)__sz) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__sz);
          }
          if ((__p[16] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p[16] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
          }
          if ((v227[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v227[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (*((void *)&v226 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v226 + 1));
          }
          if ((v216 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (*((void *)&v215 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v215 + 1));
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v128);
        }
        ++v124;
        uint64_t v121 = v196;
        v123 += 16;
        v122 += 8;
      }
      while (v124 < (v197 - v196) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v221, a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "/__root");
    MEMORY[0x2455CF7A0](&v215, __p);
    if (v221 == (void)v215)
    {
      int v137 = *(unsigned __int8 *)(*(void *)(v174 + 16) + 272);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v137) {
          goto LABEL_293;
        }
      }
      else if (!v137)
      {
LABEL_293:
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "/model");
      MEMORY[0x2455CF7A0](&v215, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v221, (int *)&v215);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v221 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_293;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v215);
      if ((__p[23] & 0x80000000) == 0) {
        goto LABEL_293;
      }
    }
    operator delete(*(void **)__p);
    goto LABEL_293;
  }
  if (v170)
  {
    REAssetRegistrationOptionsCreate();
    long long v223 = 0;
    long long v223 = (void **)REAssetHandleCreateFromAssetRegistrationOptions();
    RERelease();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a2);
    uint64_t v138 = *(void *)(a1 + 16);
    if (v138) {
      uint64_t v139 = *(void *)(v138 + 192);
    }
    else {
      uint64_t v139 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    uint64_t v161 = v226;
    realityio::WrappedRERef<REAsset *>::operator=((void *)(v226 + 8), (uint64_t *)&v223);
    int v162 = (std::__shared_weak_count *)*((void *)&v226 + 1);
    *(_OWORD *)std::string __p = __PAIR128__(*((unint64_t *)&v226 + 1), v161);
    if (*((void *)&v226 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v226 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    realityio::ECSAction::queueDedupingAssetForDeferredLoad(*(void *)(a1 + 16));
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    *(void *)&long long v183 = a1;
    *((void *)&v183 + 1) = v161;
    std::vector<unsigned int>::pointer v184 = v162;
    if (v162) {
      atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v185 = v73;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v186, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v187, (_DWORD *)a2 + 1);
    *(void *)&unsigned char __p[24] = 0;
    char v163 = (char *)operator new(0x30uLL);
    *(void *)char v163 = &unk_26F33E398;
    *(_OWORD *)(v163 + 8) = v183;
    v164 = v184;
    uint64_t v165 = v185;
    *((void *)&v183 + 1) = 0;
    std::vector<unsigned int>::pointer v184 = 0;
    *((void *)v163 + 3) = v164;
    *((void *)v163 + 4) = v165;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v163 + 10, &v186);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v163 + 11, v187);
    *(void *)&unsigned char __p[24] = v163;
    realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(a1, (uint64_t)__p);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v186);
    if (v184) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v184);
    }
    RERelease();
    if (v162) {
      atomic_fetch_add_explicit(&v162->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v215 = 0uLL;
    *(void *)&long long v216 = 0;
    realityio::MeshAssetWithMaterialArray::MeshAssetWithMaterialArray(__p, v161, (uint64_t)v162, (uint64_t *)&v215);
    *(void *)&v207[0] = &v215;
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)v207);
    a6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MeshAssetWithMaterialArray>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy();
  }
  uint64_t v140 = v73;
  REMeshAssetDescriptorCreate();
  *(void *)&long long v216 = 0;
  *((void *)&v215 + 1) = 0;
  *(void *)&long long v215 = (char *)&v215 + 8;
  long long v141 = v193;
  char v142 = v194;
  while (v141 != v142)
  {
    unint64_t v143 = *((void *)v141 + 1);
    int v144 = (void *)*((void *)&v215 + 1);
    if (*((void *)&v215 + 1))
    {
      long long v145 = (void *)*((void *)&v215 + 1);
      do
      {
        unint64_t v146 = v145[4];
        if (v143 >= v146)
        {
          if (v146 >= v143)
          {
            do
            {
              char v154 = v144;
              unint64_t v155 = v144[4];
              int v156 = v144 + 1;
              if (v155 >= v143) {
                int v156 = v154;
              }
              int v144 = (void *)*v156;
            }
            while (v144);
            goto LABEL_320;
          }
          ++v145;
        }
        long long v145 = (void *)*v145;
      }
      while (v145);
    }
    if (v143)
    {
      uint64_t v147 = REMeshAssetDescriptorAddModel();
      unint64_t v148 = *((void *)v141 + 1);
      int v149 = (uint64_t *)*((void *)&v215 + 1);
      int v150 = (uint64_t **)&v215 + 1;
      char v151 = (uint64_t **)&v215 + 1;
      if (*((void *)&v215 + 1))
      {
        while (1)
        {
          while (1)
          {
            char v151 = (uint64_t **)v149;
            unint64_t v152 = v149[4];
            if (v152 <= v148) {
              break;
            }
            int v149 = *v151;
            int v150 = v151;
            if (!*v151) {
              goto LABEL_313;
            }
          }
          if (v152 >= v148) {
            break;
          }
          int v149 = v151[1];
          if (!v149)
          {
            int v150 = v151 + 1;
            goto LABEL_313;
          }
        }
      }
      else
      {
LABEL_313:
        int v153 = (uint64_t *)operator new(0x30uLL);
        v153[4] = v148;
        v153[5] = v147;
        *int v153 = 0;
        v153[1] = 0;
        v153[2] = (uint64_t)v151;
        *int v150 = v153;
        if (*(void *)v215)
        {
          *(void *)&long long v215 = *(void *)v215;
          int v153 = *v150;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v215 + 1), v153);
        *(void *)&long long v216 = v216 + 1;
      }
    }
LABEL_320:
    REGeomInstanceCreate();
    REMeshAssetDescriptorAddInstance();
    RERelease();
    v141 += 104;
  }
  BOOL v158 = (void *)*((void *)&v205 + 1);
  for (uint64_t i = (void *)v205; i != v158; ++i)
  {
    *(void *)std::string __p = *i;
    if (*(void *)__p)
    {
      RERetain();
      if (*(void *)__p) {
        REMeshAssetDescriptorAddSkeleton();
      }
    }
    realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(__p);
  }
  uint64_t v221 = 0;
  uint64_t v221 = REAssetManagerMeshAssetCreateFromMeshAssetDescriptorAndOptionsAsyncRegistration();
  if (v221)
  {
    RERelease();
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)__p, a2);
    uint64_t v159 = *(void *)(a1 + 16);
    if (v159) {
      uint64_t v160 = *(void *)(v159 + 192);
    }
    else {
      uint64_t v160 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    uint64_t v166 = *(void *)&v207[0];
    realityio::WrappedRERef<REAsset *>::operator=((void *)(*(void *)&v207[0] + 8), &v221);
    uint64_t v167 = *((void *)&v207[0] + 1);
    *(_OWORD *)std::string __p = __PAIR128__(*((unint64_t *)&v207[0] + 1), v166);
    if (*((void *)&v207[0] + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v207[0] + 1) + 8), 1uLL, memory_order_relaxed);
    }
    realityio::ECSAction::queueDedupingAssetForDeferredLoad(*(void *)(a1 + 16));
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    *(void *)&long long v180 = a1;
    *((void *)&v180 + 1) = v166;
    if (v167) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v167 + 8), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v181, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v182, (_DWORD *)a2 + 1);
    *(void *)&unsigned char __p[24] = 0;
    long long v168 = (char *)operator new(0x30uLL);
    *(void *)long long v168 = &unk_26F33E418;
    *(_OWORD *)(v168 + 8) = v180;
    *((void *)v168 + 3) = v167;
    *((void *)v168 + 4) = v140;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v168 + 10, &v181);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v168 + 11, v182);
    *(void *)&unsigned char __p[24] = v168;
    realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(a1, (uint64_t)__p);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v181);
    if (v167) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v167 + 8), 1uLL, memory_order_relaxed);
    }
    long long v226 = 0uLL;
    v227[0] = 0;
    realityio::MeshAssetWithMaterialArray::MeshAssetWithMaterialArray(__p, v166, v167, (uint64_t *)&v226);
    long long v223 = (void **)&v226;
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v223);
    RERelease();
    a6[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MeshAssetWithMaterialArray>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy();
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a6, v225);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v215 + 1));
  std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::~vector[abi:ne180100]((void **)&v193);
  *(void *)std::string __p = &v196;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)std::string __p = &v199;
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)std::string __p = &v202;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  *(void *)std::string __p = &v205;
  std::vector<realityio::WrappedRERef<REGeomSkeleton *>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v225);
}

void sub_23F61F1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,realityio::Builder *a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,char a61)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 144));
  std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::~vector[abi:ne180100](&a49);
  STACK[0x250] = (unint64_t)&a52;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  STACK[0x250] = (unint64_t)&a55;
  std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  STACK[0x250] = (unint64_t)&a58;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  STACK[0x250] = (unint64_t)&a61;
  std::vector<realityio::WrappedRERef<REGeomSkeleton *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v61 - 160));
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v5 - *a1) >> 3);
    if ((unint64_t)(v8 + 1) > 0x276276276276276) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x13B13B13B13B13BLL) {
      unint64_t v11 = 0x276276276276276;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v29 = a1 + 2;
    if (v11)
    {
      if (v11 > 0x276276276276276) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(104 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (uint64_t)&v12[104 * v8];
    uint64_t v26 = v12;
    v27.i64[0] = v13;
    uint64_t v14 = &v12[104 * v11];
    uint64_t v28 = v14;
    std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::construct[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(v13, a2);
    uint64_t v7 = v13 + 104;
    v27.i64[1] = v13 + 104;
    uint64_t v16 = *a1;
    unint64_t v15 = a1[1];
    if (v15 == *a1)
    {
      int64x2_t v24 = vdupq_n_s64(v15);
    }
    else
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = v13 + v17;
        uint64_t v19 = v15 + v17;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v13 + v17 - 104), (_DWORD *)(v15 + v17 - 104));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v13 + v17 - 100), (_DWORD *)(v15 + v17 - 100));
        uint64_t v20 = *(void *)(v15 + v17 - 96);
        *(void *)(v13 + v17 - 96) = v20;
        if (v20) {
          RERetain();
        }
        long long v21 = *(_OWORD *)(v19 - 88);
        long long v22 = *(_OWORD *)(v19 - 72);
        long long v23 = *(_OWORD *)(v19 - 56);
        *(_OWORD *)(v18 - 40) = *(_OWORD *)(v19 - 40);
        *(_OWORD *)(v18 - 56) = v23;
        *(_OWORD *)(v18 - 72) = v22;
        *(_OWORD *)(v18 - 88) = v21;
        std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100]((uint64_t *)(v18 - 24), v19 - 24);
        v17 -= 104;
      }
      while (v15 + v17 != v16);
      int64x2_t v24 = *(int64x2_t *)a1;
      v13 += v17;
      uint64_t v7 = v27.i64[1];
      uint64_t v14 = v28;
    }
    *a1 = v13;
    a1[1] = v7;
    int64x2_t v27 = v24;
    uint64_t v25 = a1[2];
    a1[2] = (uint64_t)v14;
    uint64_t v28 = (char *)v25;
    uint64_t v26 = (char *)v24.i64[0];
    uint64_t result = std::__split_buffer<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo> &>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    uint64_t result = (uint64_t)std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::construct[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(a1[1], a2);
    uint64_t v7 = v5 + 104;
    a1[1] = v5 + 104;
  }
  a1[1] = v7;
  return result;
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::DescriptorInfo::~DescriptorInfo(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 80, *(void **)(a1 + 88));
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((void *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::MaterialAssetPair>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio17MaterialAssetPairE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void *std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::~pair(void *a1)
{
  uint64_t v2 = a1[5];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  atomic_uint v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = a1[2];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void *realityio::ECSAction::performBlockPostAssetLoadOnEngineQueue(uint64_t a1, uint64_t a2)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
    uint64_t v3 = *(void *)(v2 + 88);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v3 + 48))(v3, v7);
    return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 48);
    return (void *)v6();
  }
}

void sub_23F61FFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_0::~$_0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void realityio::MeshAssetWithMaterialArray::~MeshAssetWithMaterialArray(realityio::MeshAssetWithMaterialArray *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

_DWORD *std::make_shared[abi:ne180100]<anonymous namespace'::DeduplicatingMeshActionAsset,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::ImportSession *,void>(void *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26F33E318;
  *((unsigned char *)v6 + 40) = 0;
  v6[6] = 0;
  v6[7] = 0;
  v6[3] = &unk_26F33E368;
  v6[4] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 16, a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 17, a2 + 1);
  v6[9] = a3;
  *a1 = v6 + 3;
  a1[1] = v6;
  return result;
}

uint64_t realityio::ECSAction::queueDedupingAssetForDeferredLoad(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 184);
    if (!v1) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  return result;
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_1::~$_1(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)const::$_2::~$_2(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void **std::vector<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v2)
    {
      do
      {
        v3 -= 104;
        std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::destroy[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(v3);
      }
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void realityio::BlendShapeWeightsDefinitionAssetAction::operator()(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v69, a1);
  char v63 = 0;
  long long v61 = 0u;
  long long v62 = 0u;
  memset(v60, 0, sizeof(v60));
  uint64_t v7 = *a3;
  if (a3[1] == *a3)
  {
LABEL_47:
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    MEMORY[0x2455CDC30](ServiceLocator);
    size_t v64 = 0;
    int v65 = 0;
    uint64_t v66 = 0;
    std::vector<char const*>::resize((uint64_t)&v64, v61);
    unint64_t v34 = (char **)v64;
    if ((void)v61)
    {
      uint64_t v35 = v63;
      uint64_t v36 = 8 * v61;
      do
      {
        if ((*v35 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (char *)((*v35 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          unint64_t EmptyString = (char *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        }
        if (EmptyString[23] < 0) {
          unint64_t EmptyString = *(char **)EmptyString;
        }
        *v34++ = EmptyString;
        ++v35;
        v36 -= 8;
      }
      while (v36);
      unint64_t v34 = (char **)v64;
    }
    unint64_t v37 = v65;
    uint64_t v38 = operator new(0x10uLL);
    *uint64_t v38 = (v37 - (const char *)v34) >> 3;
    v38[1] = v34;
    std::string __p = 0;
    long long v58 = 0;
    unint64_t v59 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v56, a2);
    uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
    if (*(char *)(Name + 23) >= 0) {
      uint64_t v40 = Name;
    }
    else {
      uint64_t v40 = *(void *)Name;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v56);
    __int16 v41 = v58;
    if ((unint64_t)v58 >= v59)
    {
      uint64_t v43 = (v58 - (unsigned char *)__p) >> 5;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 59) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v45 = v59 - (void)__p;
      if ((uint64_t)(v59 - (void)__p) >> 4 > v44) {
        unint64_t v44 = v45 >> 4;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v46 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      if (v46) {
        uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>((uint64_t)&v59, v46);
      }
      else {
        uint64_t v47 = 0;
      }
      unint64_t v48 = &v47[32 * v43];
      uint64_t v49 = &v47[32 * v46];
      *unint64_t v48 = 2;
      *(_DWORD *)(v48 + 1) = 0;
      *((_DWORD *)v48 + 1) = 0;
      uint64_t v42 = v48 + 32;
      *((void *)v48 + 2) = 0;
      *((void *)v48 + 3) = 0;
      *((void *)v48 + 1) = v40;
      std::vector<std::pair<std::string, std::string>>::pointer v51 = (char *)__p;
      int v50 = v58;
      if (v58 != __p)
      {
        do
        {
          long long v52 = *((_OWORD *)v50 - 1);
          *((_OWORD *)v48 - 2) = *((_OWORD *)v50 - 2);
          *((_OWORD *)v48 - 1) = v52;
          v48 -= 32;
          v50 -= 32;
        }
        while (v50 != v51);
        int v50 = v51;
      }
      std::string __p = v48;
      long long v58 = v42;
      unint64_t v59 = (unint64_t)v49;
      if (v50) {
        operator delete(v50);
      }
    }
    else
    {
      *long long v58 = 2;
      *(_DWORD *)(v41 + 1) = 0;
      *((_DWORD *)v41 + 1) = 0;
      uint64_t v42 = v41 + 32;
      *((void *)v41 + 2) = 0;
      *((void *)v41 + 3) = 0;
      *((void *)v41 + 1) = v40;
    }
    long long v58 = v42;
    uint64_t v56 = 0;
    uint64_t AssetWithDefinitions = REBlendShapeWeightsDefinitionAssetCreateAssetWithDefinitions();
    if (v56) {
      RERelease();
    }
    uint64_t v56 = AssetWithDefinitions;
    *(void *)(a5 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy();
  }
  unint64_t v8 = 0;
  while (1)
  {
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 8 * v8);
    uint64_t v10 = *a4;
    NameToken = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
    MEMORY[0x2455CF810](&v64, "skel:blendShapes");
    uint64_t v12 = (void *)(v10 + 16 * v8);
    if ((*NameToken & 0xFFFFFFFFFFFFFFF8) != ((unint64_t)v64 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((v64 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_33:
      uint64_t v28 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v9);
      MEMORY[0x2455CF810](&v64, "skel:blendShapeTargets");
      if ((*v28 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v64 & 0xFFFFFFFFFFFFFFF8))
      {
        int v29 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v10 + 16 * v8));
        if ((v64 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v29)
        {
          uint64_t v30 = *(void *)(v10 + 16 * v8 + 8);
          long long v31 = (void *)((v30 & 4) != 0
                         ? (*(uint64_t (**)(unint64_t))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(v10 + 16 * v8)
                         : *v12);
          if (v60 != v31) {
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((uint64_t)v60, (_DWORD *)*v31, (_DWORD *)v31[1], (uint64_t)(v31[1] - *v31) >> 3);
          }
        }
      }
      else if ((v64 & 7) != 0)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_43;
    }
    int v13 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)(v10 + 16 * v8));
    if ((v64 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v13) {
      goto LABEL_33;
    }
    uint64_t v14 = *(void *)(v10 + 16 * v8 + 8);
    unint64_t v15 = (void *)((v14 & 4) != 0
                   ? (*(uint64_t (**)(unint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(v10 + 16 * v8)
                   : *v12);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::reserve((uint64_t *)&v61, *v15 + v61);
    if (*v15) {
      break;
    }
LABEL_43:
    ++v8;
    uint64_t v7 = *a3;
    if (v8 >= (a3[1] - *a3) >> 3) {
      goto LABEL_47;
    }
  }
  uint64_t v16 = (uint64_t *)v15[4];
  uint64_t v17 = &v16[*v15];
  while (1)
  {
    if (DWORD2(v61))
    {
      size_t v64 = "vt/array.h";
      int v65 = "emplace_back";
      uint64_t v66 = 433;
      int v67 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_back(Args"
            " &&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <const pxrInternal__aapl__pxrReserved__::TfToken &>]";
      char v68 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
      goto LABEL_24;
    }
    uint64_t v18 = v61;
    uint64_t v19 = v63;
    if (*((void *)&v62 + 1)) {
      break;
    }
    if (v63)
    {
      unint64_t v20 = atomic_load((unint64_t *)v63 - 2);
      uint64_t v19 = v63;
      if (v20 != 1) {
        break;
      }
      uint64_t v21 = *(v63 - 1);
    }
    else
    {
      uint64_t v21 = 0;
    }
    if ((void)v61 == v21) {
      break;
    }
    uint64_t v22 = *v16;
    v19[(void)v61] = *v16;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19[v18] &= 0xFFFFFFFFFFFFFFF8;
    }
LABEL_23:
    *(void *)&long long v61 = v61 + 1;
LABEL_24:
    if (++v16 == v17) {
      goto LABEL_43;
    }
  }
  uint64_t v23 = 1;
  do
  {
    unint64_t v24 = v23;
    v23 *= 2;
  }
  while (v24 < (uint64_t)v61 + 1);
  Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)&v61, v19, v24, v61);
  uint64_t v26 = Copy;
  uint64_t v27 = *v16;
  Copy[v18] = *v16;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    Copy[v18] &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v61);
  char v63 = v26;
  goto LABEL_23;
}

void sub_23F620834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  std::string __p = &a18;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&a21);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v27 - 112));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t *)a1[4];
  if (!v4)
  {
    if (!a2) {
      return;
    }
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew((uint64_t)a1, a2);
    goto LABEL_9;
  }
  if (a1[3]) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = v4 - 1;
  }
  if (*v5 < a2)
  {
    New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)a1, v4, a2, *a1);
LABEL_9:
    uint64_t v7 = New;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(a1);
    a1[4] = (uint64_t)v7;
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *realityio::MaterialAssetPair::MaterialAssetPair(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a2;
  *a1 = *a2;
  if (v5) {
    RERetain();
  }
  uint64_t v6 = *a3;
  a1[1] = *a3;
  if (v6) {
    RERetain();
  }
  return a1;
}

void sub_23F620A44(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

void *std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(void *result, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  *uint64_t result = *a2;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[2];
  result[2] = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a3[1];
  result[3] = *a3;
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a3[2];
  result[5] = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[5] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void *realityio::MeshAssetWithMaterialArray::MeshAssetWithMaterialArray(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *a1 = a2;
  a1[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>(a1 + 2, *a4, a4[1], (a4[1] - *a4) >> 3);
  return a1;
}

void sub_23F620B38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void std::vector<realityio::WrappedRERef<REGeomSkeleton *>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<realityio::MaterialAssetPair>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<realityio::MaterialAssetPair>::__base_destruct_at_end[abi:ne180100](v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<realityio::MaterialAssetPair>::__base_destruct_at_end[abi:ne180100](void *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = (void *)result[1];
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 2;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(v4 - 1);
      uint64_t result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v5);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

uint64_t std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::destroy[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1 + 80, *(void **)(a1 + 88));
  realityio::WrappedRERef<REGeomModelDescriptor *>::~WrappedRERef((void *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REGeomSkeleton *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REGeomSkeleton *>::~WrappedRERef((void *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

_DWORD *std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::construct[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  unint64_t v9 = (void *)(a2 + 88);
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = a1 + 88;
  uint64_t v12 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *(void *)(a2 + 80) = v9;
    *unint64_t v9 = 0;
    *(void *)(a2 + 96) = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v11;
  }
  return result;
}

uint64_t std::__split_buffer<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::allocator_traits<std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo>>::destroy[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::DescriptorInfo,void>(i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *> *,long>>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F620E78(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *> *,long>>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      long long v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken> const&>(uint64_t **a1, void *a2, void *a3, uint64_t a4)
{
  long long v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v13, &v12, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    long long v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]((uint64_t)(v7 + 4), a4);
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v13, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    if (*((void *)this + 3) || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::VtValue]");
      uint64_t v4 = *((void *)this + 4);
      uint64_t v5 = *(void *)this;
      New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_AllocateNew((uint64_t)this, *(void *)this);
      std::uninitialized_copy[abi:ne180100]<pxrInternal__aapl__pxrReserved__::VtValue *,pxrInternal__aapl__pxrReserved__::VtValue *>(v4, v4 + 16 * v5, (uint64_t)New);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::VtValue>::_DecRef(this);
      *((void *)this + 4) = New;
    }
  }
}

uint64_t std::vector<realityio::MaterialAssetPair>::__push_back_slow_path<realityio::MaterialAssetPair const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 3 > v4) {
    unint64_t v4 = v6 >> 3;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    long long v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(a1 + 2), v7);
  }
  else {
    long long v8 = 0;
  }
  char v11 = v8;
  uint64_t v12 = (uint64_t *)&v8[16 * v3];
  uint64_t v14 = &v8[16 * v7];
  std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>((uint64_t)(a1 + 2), v12, a2);
  uint64_t v13 = v12 + 2;
  std::vector<realityio::MaterialAssetPair>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer(&v11);
  return v9;
}

void sub_23F6211F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a2 = *a3;
  if (v5) {
    RERetain();
  }
  uint64_t result = a3[1];
  a2[1] = result;
  if (result) {
    return RERetain();
  }
  return result;
}

void sub_23F62124C(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::MaterialAssetPair>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>,std::reverse_iterator<realityio::MaterialAssetPair*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  _OWORD v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 2;
      std::allocator<realityio::MaterialAssetPair>::construct[abi:ne180100]<realityio::MaterialAssetPair,realityio::MaterialAssetPair const&>(a1, (uint64_t *)(v7 - 16), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 16;
      *((void *)&v16 + 1) -= 16;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_23F621390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<realityio::MaterialAssetPair>,std::reverse_iterator<realityio::MaterialAssetPair*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void **)(result[2] + 8);
  uint64_t v2 = *(void **)(result[1] + 8);
  while (v1 != v2)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1 + 1);
    uint64_t result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v1);
    v1 += 2;
  }
  return result;
}

void **std::__split_buffer<realityio::MaterialAssetPair>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<realityio::MaterialAssetPair>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      uint64_t v5 = (void *)(v2 - 16);
      v4[2] = v2 - 16;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v2 - 8));
      uint64_t result = realityio::WrappedRERef<REAsset *>::~WrappedRERef(v5);
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::__shared_ptr_emplace<anonymous namespace'::TinyMeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33DF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::TinyMeshModelDescriptorBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33DF60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::TinyMeshModelDescriptorBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::TinyMeshModelDescriptorBuilder::~TinyMeshModelDescriptorBuilder(_anonymous_namespace_::TinyMeshModelDescriptorBuilder *this)
{
  *(void *)this = &unk_26F33DFB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  realityio::Builder::~Builder(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26F33DFB0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  realityio::Builder::~Builder(this);

  JUMPOUT(0x2455D2BD0);
}

void anonymous namespace'::TinyBuilder::description(void *a1@<X8>)
{
  *a1 = 0;
}

void anonymous namespace'::TinyMeshModelDescriptorBuilder::identifier(_anonymous_namespace_::TinyMeshModelDescriptorBuilder *this)
{
}

void anonymous namespace'::TinyBuilder::dirtyStageSubscription(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void anonymous namespace'::TinyBuilder::inputsDescriptor(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void anonymous namespace'::TinyBuilder::outputsDescriptor(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__push_back_slow_path<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[32 * v9];
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 1, (_DWORD *)(a2 + 4));
  long long v12 = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v12;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  v15[2] = v11 + 32;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::~__split_buffer(v15);
  return v13;
}

void sub_23F62174C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 32;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 32), (_DWORD *)v9);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 28), (_DWORD *)(v9 + 4));
      long long v10 = *(_OWORD *)(v9 + 8);
      *(void *)(v7 - 8) = *(void *)(v9 + 24);
      *(_OWORD *)(v7 - 24) = v10;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      uint64_t v7 = *((void *)&v17 + 1) - 32;
      *((void *)&v17 + 1) -= 32;
      BOOL v11 = v9 == a5;
      v9 -= 32;
    }
    while (!v11);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::reverse_iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 32;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2);
}

void **std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 32;
      uint64_t result = std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](v4, v1 - 32);
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__on_zero_shared(uint64_t a1)
{
}

uint64_t realityio::MeshModelDescriptorBuilder::MeshModelDataT::MeshModelDataT(uint64_t a1, uint64_t *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD **a6, uint64_t *a7)
{
  uint64_t v13 = *a2;
  *(void *)a1 = *a2;
  if (v13) {
    RERetain();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 12), a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), a4 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 24), a5);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 28), a5 + 1);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>((void *)(a1 + 32), *a6, a6[1], ((char *)a6[1] - (char *)*a6) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>((void *)(a1 + 56), *a7, a7[1], (a7[1] - *a7) >> 5);
  return a1;
}

void sub_23F621B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v3);
  realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(v2);
  _Unwind_Resume(a1);
}

void *std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__init_with_size[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<RIO_MTLX::FilePath>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_23F621C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  _OWORD v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>::pair[abi:ne180100](v4, v6);
      v6 += 32;
      uint64_t v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_23F621CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  uint64_t v5 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_23F621D48(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>*>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 32;
      uint64_t result = (uint64_t *)std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void realityio::MeshModelDescriptorBuilder::MeshModelDataT::~MeshModelDataT(realityio::MeshModelDescriptorBuilder::MeshModelDataT *this)
{
  uint64_t v2 = (void **)((char *)this + 56);
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  realityio::WrappedRERef<REMeshCompileOptions *>::~WrappedRERef(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E510;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F33E560;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>(void *a1, uint64_t a2)
{
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__construct_node<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_23F622040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__construct_node<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v6;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((_OWORD *)v7 + 1) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v7 + 4) = *(void *)(a2 + 16);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *((void *)v7 + 7) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t result = realityio::BuilderAndIOName::Hash::operator()(a1 + 24, (void *)v7 + 2);
  *((void *)v7 + 1) = result;
  return result;
}

void sub_23F6220EC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi(void *a1, void *a2)
{
  uint64_t v4 = a2 + 2;
  unint64_t v5 = realityio::BuilderAndIOName::Hash::operator()((uint64_t)(a1 + 3), a2 + 2);
  a2[1] = v5;
  inserted = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi_prepare((uint64_t)a1, v5, v4);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void *std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  long long v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    unint64_t result = v16;
    long long v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3 && (v16[4] & 0xFFFFFFFFFFFFFFF8) == (a3[2] & 0xFFFFFFFFFFFFFFF8);
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2] && (i[4] & 0xFFFFFFFFFFFFFFF8) == (v13[4] & 0xFFFFFFFFFFFFFFF8));
            void *v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderAndIOName const,realityio::BuilderAndIOName>,0>(v2 + 2);
    }
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<anonymous namespace'::TinySkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::TinySkeletonPoseDefinitionBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E040;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::TinySkeletonPoseDefinitionBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::TinySkeletonPoseDefinitionBuilder::~TinySkeletonPoseDefinitionBuilder(_anonymous_namespace_::TinySkeletonPoseDefinitionBuilder *this)
{
  *(void *)this = &unk_26F33E090;
  int8x8_t v4 = (void *)*((void *)this + 23);
  uint64_t v2 = (void *)((char *)this + 184);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }

  realityio::Builder::~Builder(this);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_26F33E090;
  int8x8_t v4 = (void *)*((void *)this + 23);
  uint64_t v2 = (void *)((char *)this + 184);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<realityio::SkeletonPoseDefinitionBuilder::SkeletonPoseDataT>::operator()[abi:ne180100]((uint64_t)v2, v3);
  }
  realityio::Builder::~Builder(this);

  JUMPOUT(0x2455D2BD0);
}

void anonymous namespace'::TinySkeletonPoseDefinitionBuilder::identifier(_anonymous_namespace_::TinySkeletonPoseDefinitionBuilder *this)
{
}

void std::__shared_ptr_emplace<anonymous namespace'::TinyMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::TinyMaterialAssetBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::TinyMaterialAssetBuilder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::TinyMaterialAssetBuilder::~TinyMaterialAssetBuilder(_anonymous_namespace_::TinyMaterialAssetBuilder *this)
{
  *(void *)this = &unk_26F33E158;
  realityio::MaterialAssetDataT::~MaterialAssetDataT((_anonymous_namespace_::TinyMaterialAssetBuilder *)((char *)this + 184));

  realityio::Builder::~Builder(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F33E158;
  realityio::MaterialAssetDataT::~MaterialAssetDataT((_anonymous_namespace_::TinyMaterialAssetBuilder *)((char *)this + 184));
  realityio::Builder::~Builder(this);

  JUMPOUT(0x2455D2BD0);
}

void anonymous namespace'::TinyMaterialAssetBuilder::identifier(_anonymous_namespace_::TinyMaterialAssetBuilder *this)
{
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33E1D0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33E1D0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26F33E1D0;
  std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33E1D0;
  return std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
  realityio::ECSAction::addAsset(v2, (uint64_t *)(v3 + 8), (uint64_t)__p, &v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F622ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 32), (_DWORD *)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 36), (_DWORD *)(a2 + 36));
  return a1;
}

void std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_Equal(void **a1, void **a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<realityio::MeshAssetWithMaterialArray,void>::Equal(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_EqualPtr(void **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<realityio::MeshAssetWithMaterialArray,void>::Equal(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 40));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F622CF0(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40ABECFA7DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N9realityio26MeshAssetWithMaterialArrayE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<realityio::MeshAssetWithMaterialArray,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::MeshAssetWithMaterialArray>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    unint64_t v5 = (void **)(v2 + 16);
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v5);
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x2455D2BD0](v2, 0x1020C40ABECFA7DLL);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<realityio::MeshAssetWithMaterialArray,void>::Equal(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v4 = (uint64_t *)a2[2];
  if (v2 - v3 != a2[3] - (void)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = *(void *)(v5 - 8) == v6;
    BOOL v8 = *(void *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_Counted<realityio::MeshAssetWithMaterialArray>::_Counted(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::vector<realityio::WrappedRERef<REAsset *>>::__init_with_size[abi:ne180100]<realityio::WrappedRERef<REAsset *>*,realityio::WrappedRERef<REAsset *>*>((void *)(a1 + 16), a2[2], a2[3], (uint64_t)(a2[3] - a2[2]) >> 3);
  atomic_store(0, (unsigned int *)(a1 + 40));
  return a1;
}

void sub_23F622F30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::MeshAssetWithMaterialArray>::_PlaceCopy()
{
}

void sub_23F622FA8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40ABECFA7DLL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::DeduplicatingMeshActionAsset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::DeduplicatingMeshActionAsset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<anonymous namespace'::DeduplicatingMeshActionAsset>::__on_zero_shared(void *a1)
{
  a1[3] = &unk_26F33E368;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
  a1[3] = &unk_26F33E4A8;
  realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(a1 + 7);

  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 4);
}

void *anonymous namespace'::DeduplicatingMeshActionAsset::onComplete(_anonymous_namespace_::DeduplicatingMeshActionAsset *this)
{
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v3 = realityio::ImportSession::deduplicateMeshAsset(*((void *)this + 6), (uint64_t)this + 40, *((void *)this + 1), 0);
  return realityio::WrappedRERef<REAsset *>::operator=(v1, &v3);
}

void *realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(void *a1)
{
  if (*a1)
  {
    RERelease();
    *a1 = 0;
  }
  return a1;
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33E398;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33E398;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26F33E398;
  std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33E398;
  return std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
  realityio::ECSAction::addAsset(v2, (uint64_t *)(v3 + 8), (uint64_t)__p, &v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F623380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33E418;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F33E418;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26F33E418;
  std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33E418;
  return std::__compressed_pair_elem<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::operator()(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v11, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
  realityio::ECSAction::addAsset(v2, (uint64_t *)(v3 + 8), (uint64_t)__p, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  REAssetCopyDependencyArray();
  uint64_t Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    uint64_t v5 = Size;
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t Asset = REAssetDynamicArrayGetAsset();
      CFStringRef Type = (const __CFString *)REAssetGetType();
      if (CFEqual(Type, @"Skeleton"))
      {
        uint64_t v11 = Asset;
        if (Asset) {
          RERetain();
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 5));
        realityio::ECSAction::addAsset(v2, &v11, (uint64_t)__p, &v10);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v11);
      }
    }
  }
  return RERelease();
}

void sub_23F623778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::target_type()
{
}

void std::__function::__alloc_func<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2,std::allocator<realityio::MeshAssetAction::operator()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue const&,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> const&,std::vector<pxrInternal__aapl__pxrReserved__::VtValue const> const&)::$_2>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void Exec::setPropertiesDirty(std::mutex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  std::mutex::lock(this);
  int v17 = this;
  v23[1] = 0;
  v23[0] = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(this[3].__m_.__opaque, (unsigned int *)a2);
  unint64_t NextSubtree = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)v23);
  int v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v23[0];
  if (NextSubtree != v23[0])
  {
    char v6 = this + 1;
    opaque = this[1].__m_.__opaque;
    BOOL v8 = (char *)&v19 + 4;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v23, a2);
      uint8x8_t v9 = v8;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v21, v22);
      uint64_t v10 = v23[0];
      uint64_t v11 = v21;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
      if (v10 != v11) {
        break;
      }
      BOOL v8 = v9;
      unint64_t v12 = (char *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v6, v22);
      char v13 = (uint64_t *)(v12 + 96);
      if (opaque == v12) {
        char v13 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      }
      if (*v13 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
      {
        uint8x8_t v14 = (_DWORD *)((char *)v22 + 4);
        if (a3)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v20, v22);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v20 + 1, v14);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)v6, &v20, 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          unint64_t v15 = &v20;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, v22);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9, v14);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)v6, &v19, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          unint64_t v15 = &v19;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v15);
      }
      long long v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)v22 + 4);
      if (!v16) {
        long long v16 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)&v22);
      }
      int v22 = v16;
    }
    while (v16 != (pxrInternal__aapl__pxrReserved__::SdfPath *)NextSubtree);
  }
  std::mutex::unlock(v17);
}

void sub_23F623A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
}

void Exec::setHierarchyDirty(std::mutex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  std::mutex::lock(this);
  v15[1] = 0;
  v15[0] = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(this[3].__m_.__opaque, (unsigned int *)a2);
  unint64_t NextSubtree = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)v15);
  uint64_t v7 = (_DWORD *)v15[0];
  uint8x8_t v14 = (_DWORD *)v15[0];
  if (NextSubtree != v15[0])
  {
    do
    {
      BOOL v8 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&this[1], v7);
      uint8x8_t v9 = (uint64_t *)((char *)v8 + 96);
      if (this[1].__m_.__opaque == (char *)v8) {
        uint8x8_t v9 = &realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      }
      if (*v9 != realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
      {
        uint64_t v10 = v14 + 1;
        if (a3)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, v14);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v13 + 1, v10);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], &v13, 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t v11 = &v13;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, v14);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v12 + 1, v10);
          realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_setAllDirty((uint64_t)&this[1], &v12, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          uint64_t v11 = &v12;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v11);
      }
      uint64_t v7 = (_DWORD *)*((void *)v14 + 4);
      if (!v7) {
        uint64_t v7 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree((uint64_t)&v14);
      }
      uint8x8_t v14 = v7;
    }
    while (v7 != (_DWORD *)NextSubtree);
  }
  std::mutex::unlock(this);
}

void sub_23F623C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void *Exec::setValue(Exec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _DWORD v9[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = (char *)this + 200;
  if (pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find((void *)this + 25, (unsigned int *)a2))
  {
    char v6 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::operator[]((uint64_t)v5, a2);
    return pxrInternal__aapl__pxrReserved__::VtValue::operator=(v6, a3);
  }
  else
  {
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<true,0>(&v8, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert((uint64_t)v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v8);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return (void *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  }
}

void sub_23F623D68(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::operator[](uint64_t a1, _DWORD *a2)
{
  v7[2] = *MEMORY[0x263EF8340];
  v5[1] = 0;
  std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue,0>((uint64_t)v6, a2, v5);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v6);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  return (char *)v3 + 8;
}

void sub_23F623E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfPath *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  void v5[2] = a2;
  BOOL result = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTableImpl<pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTable(std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue> const&)::{lambda(pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *)#1}>(a1, (unsigned int *)a2);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_UpdateTreeForNewEntry(a1, v5);
    return v5[0];
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void Exec::setValueAndFault(Exec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<ExecFault>(a3))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<ExecFault>(a3))
    {
      uint64_t v7 = *((void *)a3 + 1);
      if ((v7 & 4) == 0)
      {
        uint64_t v8 = *(void *)a3;
LABEL_5:
        Exec::setValue(this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 32));
        unint64_t v9 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1)));
        unint64_t v10 = *((void *)this + 31);
        if (v10)
        {
          uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
          v11.i16[0] = vaddlv_u8(v11);
          if (v11.u32[0] > 1uLL)
          {
            unint64_t v3 = v9;
            if (v9 >= v10) {
              unint64_t v3 = v9 % v10;
            }
          }
          else
          {
            unint64_t v3 = v9 & (v10 - 1);
          }
          long long v16 = *(uint64_t ***)(*((void *)this + 30) + 8 * v3);
          if (v16)
          {
            for (uint64_t i = *v16; i; uint64_t i = (uint64_t *)*i)
            {
              unint64_t v18 = i[1];
              if (v18 == v9)
              {
                if (i[2] == *(void *)a2)
                {
                  *((_DWORD *)i + 6) = *(_DWORD *)v8;
                  std::string::operator=((std::string *)(i + 4), (const std::string *)(v8 + 8));
                  pxrInternal__aapl__pxrReserved__::VtValue::operator=(i + 7, (void *)(v8 + 32));
                  return;
                }
              }
              else
              {
                if (v11.u32[0] > 1uLL)
                {
                  if (v18 >= v10) {
                    v18 %= v10;
                  }
                }
                else
                {
                  v18 &= v10 - 1;
                }
                if (v18 != v3) {
                  break;
                }
              }
            }
          }
        }
        uint64_t v19 = (char *)operator new(0x48uLL);
        uint64_t v55 = (void *)((char *)this + 256);
        uint64_t v56 = v19;
        unint64_t v57 = (char *)this + 256;
        char v58 = 0;
        *(void *)uint64_t v19 = 0;
        *((void *)v19 + 1) = v9;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v19 + 4, a2);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v19 + 5, (_DWORD *)a2 + 1);
        *((_DWORD *)v19 + 6) = *(_DWORD *)v8;
        if (*(char *)(v8 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v19 + 32), *(const std::string::value_type **)(v8 + 8), *(void *)(v8 + 16));
        }
        else
        {
          long long v20 = *(_OWORD *)(v8 + 8);
          *((void *)v19 + 6) = *(void *)(v8 + 24);
          *((_OWORD *)v19 + 2) = v20;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 56), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v8 + 32));
        char v58 = 1;
        float v21 = (float)(unint64_t)(*((void *)this + 33) + 1);
        float v22 = *((float *)this + 68);
        if (v10 && (float)(v22 * (float)v10) >= v21)
        {
LABEL_89:
          unint64_t v44 = *(void **)(*((void *)this + 30) + 8 * v3);
          uint64_t v45 = v56;
          if (v44)
          {
            *uint64_t v56 = *v44;
          }
          else
          {
            *uint64_t v56 = *((void *)this + 32);
            *((void *)this + 32) = v45;
            *(void *)(*((void *)this + 30) + 8 * v3) = v55;
            if (!*v45)
            {
LABEL_98:
              uint64_t v56 = 0;
              ++*((void *)this + 33);
LABEL_99:
              std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>>>>::reset[abi:ne180100]((uint64_t)&v56);
              return;
            }
            unint64_t v46 = *(void *)(*v45 + 8);
            if ((v10 & (v10 - 1)) != 0)
            {
              if (v46 >= v10) {
                v46 %= v10;
              }
            }
            else
            {
              v46 &= v10 - 1;
            }
            unint64_t v44 = (void *)(*((void *)this + 30) + 8 * v46);
          }
          *unint64_t v44 = v45;
          goto LABEL_98;
        }
        BOOL v23 = 1;
        if (v10 >= 3) {
          BOOL v23 = (v10 & (v10 - 1)) != 0;
        }
        unint64_t v24 = v23 | (2 * v10);
        unint64_t v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25) {
          int8x8_t prime = (int8x8_t)v25;
        }
        else {
          int8x8_t prime = (int8x8_t)v24;
        }
        if (*(void *)&prime == 1)
        {
          int8x8_t prime = (int8x8_t)2;
        }
        else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }
        unint64_t v10 = *((void *)this + 31);
        if (*(void *)&prime > v10) {
          goto LABEL_55;
        }
        if (*(void *)&prime < v10)
        {
          unint64_t v38 = vcvtps_u32_f32((float)*((unint64_t *)this + 33) / *((float *)this + 68));
          if (v10 < 3 || (uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
          {
            unint64_t v38 = std::__next_prime(v38);
          }
          else
          {
            uint64_t v40 = 1 << -(char)__clz(v38 - 1);
            if (v38 >= 2) {
              unint64_t v38 = v40;
            }
          }
          if (*(void *)&prime <= v38) {
            int8x8_t prime = (int8x8_t)v38;
          }
          if (*(void *)&prime >= v10)
          {
            unint64_t v10 = *((void *)this + 31);
          }
          else
          {
            if (prime)
            {
LABEL_55:
              if (*(void *)&prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              std::string::value_type v32 = operator new(8 * *(void *)&prime);
              unint64_t v33 = (void *)*((void *)this + 30);
              *((void *)this + 30) = v32;
              if (v33) {
                operator delete(v33);
              }
              uint64_t v34 = 0;
              *((int8x8_t *)this + 31) = prime;
              do
                *(void *)(*((void *)this + 30) + 8 * v34++) = 0;
              while (*(void *)&prime != v34);
              uint64_t v35 = (void *)*v55;
              if (*v55)
              {
                unint64_t v36 = v35[1];
                uint8x8_t v37 = (uint8x8_t)vcnt_s8(prime);
                v37.i16[0] = vaddlv_u8(v37);
                if (v37.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                *(void *)(*((void *)this + 30) + 8 * v36) = v55;
                __int16 v41 = (void *)*v35;
                if (*v35)
                {
                  do
                  {
                    unint64_t v42 = v41[1];
                    if (v37.u32[0] > 1uLL)
                    {
                      if (v42 >= *(void *)&prime) {
                        v42 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v42 &= *(void *)&prime - 1;
                    }
                    if (v42 != v36)
                    {
                      uint64_t v43 = *((void *)this + 30);
                      if (!*(void *)(v43 + 8 * v42))
                      {
                        *(void *)(v43 + 8 * v42) = v35;
                        goto LABEL_80;
                      }
                      *uint64_t v35 = *v41;
                      *__int16 v41 = **(void **)(*((void *)this + 30) + 8 * v42);
                      **(void **)(*((void *)this + 30) + 8 * v42) = v41;
                      __int16 v41 = v35;
                    }
                    unint64_t v42 = v36;
LABEL_80:
                    uint64_t v35 = v41;
                    __int16 v41 = (void *)*v41;
                    unint64_t v36 = v42;
                  }
                  while (v41);
                }
              }
              unint64_t v10 = (unint64_t)prime;
              goto LABEL_84;
            }
            uint64_t v47 = (void *)*((void *)this + 30);
            *((void *)this + 30) = 0;
            if (v47) {
              operator delete(v47);
            }
            unint64_t v10 = 0;
            *((void *)this + 31) = 0;
          }
        }
LABEL_84:
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10) {
            unint64_t v3 = v9 % v10;
          }
          else {
            unint64_t v3 = v9;
          }
        }
        else
        {
          unint64_t v3 = (v10 - 1) & v9;
        }
        goto LABEL_89;
      }
      uint64_t v54 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(a3);
    }
    else
    {
      uint64_t v54 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    }
    uint64_t v8 = v54;
    goto LABEL_5;
  }
  Exec::setValue(this, a2, a3);
  int8x8_t v12 = *(int8x8_t *)((char *)this + 248);
  if (v12)
  {
    unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)a2 + 1)+ ((*((unsigned int *)a2 + 1)+ (unint64_t)*(unsigned int *)a2+ (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)* (*((unsigned int *)a2 + 1) + (unint64_t)*(unsigned int *)a2)) >> 1)));
    uint8x8_t v14 = (uint8x8_t)vcnt_s8(v12);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v15 = v13;
      if (v13 >= *(void *)&v12) {
        unint64_t v15 = v13 % *(void *)&v12;
      }
    }
    else
    {
      unint64_t v15 = v13 & (*(void *)&v12 - 1);
    }
    uint64_t v27 = *((void *)this + 30);
    uint64_t v28 = *(void ***)(v27 + 8 * v15);
    if (v28)
    {
      int v29 = *v28;
      if (v29)
      {
        uint64_t v30 = *(void *)&v12 - 1;
        do
        {
          unint64_t v31 = v29[1];
          if (v31 == v13)
          {
            if (v29[2] == *(void *)a2)
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v13 >= *(void *)&v12) {
                  v13 %= *(void *)&v12;
                }
              }
              else
              {
                v13 &= v30;
              }
              unint64_t v48 = *(void **)(v27 + 8 * v13);
              do
              {
                uint64_t v49 = v48;
                unint64_t v48 = (void *)*v48;
              }
              while (v48 != v29);
              if (v49 == (void *)((char *)this + 256)) {
                goto LABEL_130;
              }
              unint64_t v50 = v49[1];
              if (v14.u32[0] > 1uLL)
              {
                if (v50 >= *(void *)&v12) {
                  v50 %= *(void *)&v12;
                }
              }
              else
              {
                v50 &= v30;
              }
              if (v50 != v13)
              {
LABEL_130:
                if (!*v29) {
                  goto LABEL_131;
                }
                unint64_t v51 = *(void *)(*v29 + 8);
                if (v14.u32[0] > 1uLL)
                {
                  if (v51 >= *(void *)&v12) {
                    v51 %= *(void *)&v12;
                  }
                }
                else
                {
                  v51 &= v30;
                }
                if (v51 != v13) {
LABEL_131:
                }
                  *(void *)(v27 + 8 * v13) = 0;
              }
              uint64_t v52 = *v29;
              if (*v29)
              {
                unint64_t v53 = *(void *)(v52 + 8);
                if (v14.u32[0] > 1uLL)
                {
                  if (v53 >= *(void *)&v12) {
                    v53 %= *(void *)&v12;
                  }
                }
                else
                {
                  v53 &= v30;
                }
                if (v53 != v13)
                {
                  *(void *)(*((void *)this + 30) + 8 * v53) = v49;
                  uint64_t v52 = *v29;
                }
              }
              *uint64_t v49 = v52;
              *int v29 = 0;
              --*((void *)this + 33);
              uint64_t v56 = v29;
              unint64_t v57 = (char *)this + 256;
              char v58 = 1;
              goto LABEL_99;
            }
          }
          else
          {
            if (v14.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&v12) {
                v31 %= *(void *)&v12;
              }
            }
            else
            {
              v31 &= v30;
            }
            if (v31 != v15) {
              return;
            }
          }
          int v29 = (void *)*v29;
        }
        while (v29);
      }
    }
  }
}

void sub_23F62464C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<ExecFault>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"9ExecFault" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t Exec::gatherFaultRecords(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(uint64_t **)(result + 256); i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2));
    uint64_t v5 = i + 4;
    if (*((char *)i + 55) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    BOOL result = std::function<void ()(char const*,ExecFault::Type,char const*)>::operator()(a2, Text, *((_DWORD *)i + 6), (uint64_t)v5);
  }
  return result;
}

uint64_t std::function<void ()(char const*,ExecFault::Type,char const*)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = a2;
  int v7 = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

unint64_t Exec::_ensureTarget(Exec *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = (void **)((char *)this + 64);
  uint64_t v5 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 64, a2);
  uint64_t v6 = (uint64_t **)((char *)this + 72);
  int v7 = (unint64_t *)((char *)v5 + 96);
  if ((Exec *)((char *)this + 72) == v5) {
    int v7 = (unint64_t *)&realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
  }
  unint64_t v8 = *v7;
  if (*v7 == realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID)
  {
    unint64_t v9 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v4, a2);
    if (v6 != v9)
    {
      unint64_t v8 = (unint64_t)v9[12];
LABEL_50:
      BOOL v23 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node((uint64_t)v4, v8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v23 + 8, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v23 + 12, (_DWORD *)a2 + 1);
      unint64_t v24 = (std::__shared_weak_count *)*((void *)v23 + 4);
      *((void *)v23 + 3) = 0;
      *((void *)v23 + 4) = 0;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      *((unsigned char *)v23 + 48) = 1;
      return v8;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    uint64_t v28 = 0;
    long long v29 = 0uLL;
    unint64_t v10 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v4, a2);
    if (v6 != v10)
    {
      unint64_t v8 = (unint64_t)v10[12];
LABEL_45:
      if (*((void *)&v29 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
      }
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
      goto LABEL_50;
    }
    unint64_t v8 = *((void *)this + 20);
    *((void *)this + 20) = v8 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v40, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v41, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v42, &v26);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v43, &v27);
    uint64_t v44 = v28;
    if ((v28 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v45 = v29;
    if (*((void *)&v29 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = v30;
    LOBYTE(v47) = 0;
    *((void *)&v47 + 1) = v8;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v31 + 1, (_DWORD *)a2 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, &v40);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v33, &v41);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v34, &v42);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v35, &v43);
    uint64_t v36 = v44;
    if ((v44 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v37 = v45;
    if (*((void *)&v45 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v45 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = v46;
    long long v39 = v47;
    uint8x8_t v11 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          int8x8_t v12 = (uint64_t **)v11;
          unint64_t v13 = v11 + 4;
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v31, v11 + 4)) {
            break;
          }
          uint8x8_t v11 = *v12;
          uint64_t v6 = v12;
          if (!*v12) {
            goto LABEL_26;
          }
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v13, &v31)) {
          break;
        }
        uint64_t v6 = v12 + 1;
        uint8x8_t v11 = v12[1];
        if (!v11) {
          goto LABEL_26;
        }
      }
      uint8x8_t v14 = (char *)*v6;
      if (*v6) {
        goto LABEL_29;
      }
    }
    else
    {
      int8x8_t v12 = (uint64_t **)((char *)this + 72);
    }
LABEL_26:
    uint8x8_t v14 = (char *)operator new(0x68uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 8, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 9, (_DWORD *)&v31 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 10, &v32);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 11, &v33);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 12, &v34);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v14 + 13, &v35);
    *((void *)v14 + 7) = v36;
    uint64_t v36 = 0;
    *((_OWORD *)v14 + 4) = v37;
    long long v37 = 0uLL;
    *((void *)v14 + 10) = v38;
    *(_OWORD *)(v14 + 88) = v39;
    *(void *)uint8x8_t v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v12;
    *uint64_t v6 = (uint64_t *)v14;
    unint64_t v15 = (void *)**v4;
    long long v16 = (uint64_t *)v14;
    if (v15)
    {
      *uint64_t v4 = v15;
      long long v16 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 9), v16);
    ++*((void *)this + 10);
LABEL_29:
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair((uint64_t)&v31);
    unint64_t v18 = (uint64_t **)((char *)this + 96);
    int v17 = (uint64_t *)*((void *)this + 12);
    if (v17)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v19 = (uint64_t **)v17;
          unint64_t v20 = v17[4];
          if (v20 <= v8) {
            break;
          }
          int v17 = *v19;
          unint64_t v18 = v19;
          if (!*v19) {
            goto LABEL_37;
          }
        }
        if (v20 >= v8) {
          break;
        }
        int v17 = v19[1];
        if (!v17)
        {
          unint64_t v18 = v19 + 1;
          goto LABEL_37;
        }
      }
    }
    else
    {
      uint64_t v19 = (uint64_t **)((char *)this + 96);
LABEL_37:
      float v21 = (uint64_t *)operator new(0x30uLL);
      v21[4] = v8;
      v21[5] = (uint64_t)(v14 + 40);
      uint64_t *v21 = 0;
      v21[1] = 0;
      v21[2] = (uint64_t)v19;
      *unint64_t v18 = v21;
      uint64_t v22 = **((void **)this + 11);
      if (v22)
      {
        *((void *)this + 11) = v22;
        float v21 = *v18;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 12), v21);
      ++*((void *)this + 13);
    }
    std::vector<std::set<unsigned long>>::resize((uint64_t *)this + 17, *((void *)this + 20));
    std::vector<std::set<unsigned long>>::resize((uint64_t *)this + 14, *((void *)this + 20));
    if (*((void *)&v45 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v45 + 1));
    }
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
    goto LABEL_45;
  }
  return v8;
}

void sub_23F624C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  BOOL v23 = *(std::__shared_weak_count **)(v21 - 120);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  uint64_t v24 = *(void *)(v21 - 136);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v21 - 152);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t *realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::edgesConnectedFrom(uint64_t a1, unint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v8 = a1;
    unint64_t v9 = a2;
    int v10 = __cxa_guard_acquire(&_MergedGlobals_18);
    a2 = v9;
    int v11 = v10;
    a1 = v8;
    if (v11)
    {
      qword_268C406A8 = 0;
      qword_268C406A0 = 0;
      qword_268C40698 = (uint64_t)&qword_268C406A0;
      __cxa_guard_release(&_MergedGlobals_18);
      a1 = v8;
      a2 = v9;
    }
  }
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2) {
    return &qword_268C40698;
  }
  unint64_t v3 = (void *)(a1 + 32);
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      uint64_t v6 = v2;
    }
    else {
      uint64_t v6 = v2 + 1;
    }
    if (v5) {
      unint64_t v3 = v2;
    }
    uint64_t v2 = (void *)*v6;
  }
  while (*v6);
  if (v3 != (void *)(a1 + 32) && v3[4] <= a2) {
    return (uint64_t *)(*(void *)(a1 + 48) + 24 * a2);
  }
  else {
    return &qword_268C40698;
  }
}

void Exec::ensureTarget(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  std::mutex::lock((std::mutex *)a1);
  uint64_t v6 = Exec::_ensureTarget((Exec *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v31 = (uint64_t *)v32;
  int v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    unint64_t v9 = (uint64_t *)v32;
    do
    {
      unint64_t v25 = (void **)Exec::_ensureTarget((Exec *)a1, v7);
      int v10 = (uint64_t **)std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::__find_equal<std::shared_ptr<RIO_MTLX::Element const>>(&v31, v9, v33, &v28, (unint64_t *)&v25);
      int v11 = *v10;
      if (!*v10)
      {
        int v11 = (uint64_t *)operator new(0x28uLL);
        void v11[4] = (uint64_t)v25;
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(&v31, v33[0], v10, v11);
      }
      int8x8_t v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          unint64_t v9 = v12;
          int8x8_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v9 = (uint64_t *)v11[2];
          BOOL v13 = *v9 == (void)v11;
          int v11 = v9;
        }
        while (!v13);
      }
      int v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    }
    while (v7 != v8);
  }
  uint8x8_t v14 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::edgesConnectedFrom(a1 + 64, v6);
  long long v29 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = &v29;
  unint64_t v25 = &v26;
  int v26 = 0;
  unint64_t v15 = (uint64_t *)*v14;
  long long v37 = (void **)(v14 + 1);
  uint64_t v38 = v15;
  uint64_t v36 = v31;
  *((void *)&v34 + 1) = &v29;
  int v35 = v32;
  *(void *)&long long v34 = &v28;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::insert_iterator<std::set<unsigned long>> &>((uint64_t)v33, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v34);
  long long v16 = (uint64_t *)*v14;
  long long v37 = v32;
  uint64_t v38 = v31;
  uint64_t v36 = v16;
  *((void *)&v34 + 1) = v25;
  int v35 = (void **)(v14 + 1);
  *(void *)&long long v34 = &v25;
  std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::insert_iterator<std::set<unsigned long>> &>((uint64_t)v33, (uint64_t)&v38, &v37, (uint64_t)&v36, &v35, &v34);
  if (v27 | v30)
  {
    *(unsigned char *)(a1 + 192) = 1;
    *((unsigned char *)realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node(a1 + 64, v6) + 48) = 1;
    int v17 = v25;
    if (v25 != &v26)
    {
      do
      {
        uint64_t v18 = v17[4];
        v33[0] = v6;
        *(void *)&long long v34 = v18;
        std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(void *)(a1 + 112) + 24 * v6), (unint64_t *)&v34, (uint64_t *)&v34);
        std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>((uint64_t **)(*(void *)(a1 + 136) + 24 * v34), (unint64_t *)v33, v33);
        uint64_t v19 = (void *)v17[1];
        if (v19)
        {
          do
          {
            unint64_t v20 = (void **)v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            unint64_t v20 = (void **)v17[2];
            BOOL v13 = *v20 == v17;
            int v17 = v20;
          }
          while (!v13);
        }
        int v17 = v20;
      }
      while (v20 != &v26);
    }
    uint64_t v21 = v28;
    if (v28 != &v29)
    {
      do
      {
        unint64_t v22 = v21[4];
        std::__tree<unsigned long>::__erase_unique<unsigned long>((uint64_t **)(*(void *)(a1 + 112) + 24 * v6), v22);
        std::__tree<unsigned long>::__erase_unique<unsigned long>((uint64_t **)(*(void *)(a1 + 136) + 24 * v22), v6);
        BOOL v23 = (void *)v21[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = (void **)v23;
            BOOL v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void **)v21[2];
            BOOL v13 = *v24 == v21;
            uint64_t v21 = v24;
          }
          while (!v13);
        }
        uint64_t v21 = v24;
      }
      while (v24 != &v29);
    }
  }
  std::__tree<unsigned int>::destroy((uint64_t)&v25, v26);
  std::__tree<unsigned int>::destroy((uint64_t)&v28, v29);
  std::__tree<unsigned int>::destroy((uint64_t)&v31, v32[0]);
  std::mutex::unlock((std::mutex *)a1);
}

void sub_23F625140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

double realityio::RioTimer::stop(std::chrono::steady_clock::time_point *this)
{
  ++this[2].__d_.__rep_;
  this[4].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  double result = *(double *)&this[1].__d_.__rep_
         + (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - this[3].__d_.__rep_) / 1000) / 1000.0)
                 / 1000.0);
  *(double *)&this[1].__d_.__rep_ = result;
  return result;
}

void Exec::execGraphSerial(std::chrono::steady_clock::time_point *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  if (LOBYTE(this[24].__d_.__rep_))
  {
    this[39].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    std::vector<int>::size_type rep = this[20].__d_.__rep_;
    __x[0] = 0;
    std::vector<int>::vector(&v98, rep, __x);
    unint64_t v4 = (void *)this[17].__d_.__rep_;
    BOOL v5 = (void *)this[18].__d_.__rep_;
    if (v4 != v5)
    {
      uint64_t v6 = 0;
      do
      {
        int v7 = (void *)*v4;
        if ((void *)*v4 != v4 + 1)
        {
          std::vector<int>::pointer begin = v98.__begin_;
          do
          {
            uint64_t v9 = v7[4];
            if (v9 != v6) {
              ++begin[v9];
            }
            int v10 = (void *)v7[1];
            if (v10)
            {
              do
              {
                int v11 = v10;
                int v10 = (void *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                int v11 = (void *)v7[2];
                BOOL v12 = *v11 == (void)v7;
                int v7 = v11;
              }
              while (!v12);
            }
            int v7 = v11;
          }
          while (v11 != v4 + 1);
        }
        v4 += 3;
        ++v6;
      }
      while (v4 != v5);
    }
    long long v95 = 0u;
    long long v96 = 0u;
    *(_OWORD *)std::vector<std::csub_match>::value_type __x = 0u;
    *(void *)&long long v91 = 0;
    std::vector<int>::pointer v14 = v98.__begin_;
    std::vector<int>::pointer end = v98.__end_;
    if (v98.__end_ != v98.__begin_)
    {
      unint64_t v15 = 0;
      do
      {
        if (!v14[v15])
        {
          std::deque<unsigned long>::push_back(__x, &v91);
          unint64_t v15 = v91;
          std::vector<int>::pointer v14 = v98.__begin_;
          std::vector<int>::pointer end = v98.__end_;
        }
        *(void *)&long long v91 = ++v15;
      }
      while (v15 < end - v14);
    }
    long long v16 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::null_storage();
    uint64_t v17 = *((void *)&v96 + 1);
    if (*((void *)&v96 + 1))
    {
      uint64_t v18 = v16;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      do
      {
        unint64_t v22 = *(void *)(*(void *)(*(void *)&__x[2] + (((unint64_t)v96 >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * (v96 & 0x1FF));
        *(void *)&long long v96 = v96 + 1;
        *((void *)&v96 + 1) = v17 - 1;
        if ((unint64_t)v96 >= 0x400)
        {
          operator delete(**(void ***)&__x[2]);
          *(void *)&__x[2] += 8;
          *(void *)&long long v96 = v96 - 512;
        }
        BOOL v23 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node((uint64_t)&this[8], v22);
        uint64_t v24 = v23;
        if (v23 != v18)
        {
          if (v20 >= v21)
          {
            uint64_t v25 = (v20 - v19) >> 3;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            if ((v21 - v19) >> 2 > v26) {
              unint64_t v26 = (v21 - v19) >> 2;
            }
            if ((unint64_t)(v21 - v19) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27)
            {
              if (v27 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              uint64_t v28 = (char *)operator new(8 * v27);
            }
            else
            {
              uint64_t v28 = 0;
            }
            long long v29 = &v28[8 * v25];
            *(void *)long long v29 = v24;
            uint64_t v30 = v29 + 8;
            while (v20 != v19)
            {
              uint64_t v31 = *((void *)v20 - 1);
              v20 -= 8;
              *((void *)v29 - 1) = v31;
              v29 -= 8;
            }
            uint64_t v21 = &v28[8 * v27];
            if (v19) {
              operator delete(v19);
            }
            uint64_t v19 = v29;
            unint64_t v20 = v30;
          }
          else
          {
            *(void *)unint64_t v20 = v23;
            v20 += 8;
          }
        }
        int v32 = (void *)(this[17].__d_.__rep_ + 24 * v22);
        int v35 = (void *)*v32;
        int v33 = v32 + 1;
        long long v34 = v35;
        if (v35 != v33)
        {
          do
          {
            uint64_t v36 = v34[4];
            int v37 = v98.__begin_[v36] - 1;
            v98.__begin_[v36] = v37;
            if (!v37) {
              std::deque<unsigned long>::push_back(__x, v34 + 4);
            }
            uint64_t v38 = (void *)v34[1];
            if (v38)
            {
              do
              {
                long long v39 = v38;
                uint64_t v38 = (void *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                long long v39 = (void *)v34[2];
                BOOL v12 = *v39 == (void)v34;
                long long v34 = v39;
              }
              while (!v12);
            }
            long long v34 = v39;
          }
          while (v39 != v33);
        }
        uint64_t v17 = *((void *)&v96 + 1);
      }
      while (*((void *)&v96 + 1));
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    std::deque<unsigned long>::~deque[abi:ne180100](__x);
    if (v98.__begin_)
    {
      v98.__end_ = v98.__begin_;
      operator delete(v98.__begin_);
    }
    int v40 = (void *)this[21].__d_.__rep_;
    if (v40)
    {
      this[22].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v40;
      operator delete(v40);
    }
    this[21].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v19;
    this[22].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v20;
    this[23].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v21;
    LOBYTE(this[24].__d_.__rep_) = 0;
    realityio::RioTimer::stop(this + 36);
  }
  __x[0] = 0;
  *(void *)&std::vector<unsigned int>::value_type __x[2] = 0;
  long long v95 = 0uLL;
  *((void *)&v96 + 1) = 0;
  this[44].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  this[46].__d_.__rep_ = 0;
  this[47].__d_.__rep_ = 0;
  int v42 = (uint64_t *)this[21].__d_.__rep_;
  for (uint64_t i = (uint64_t *)this[22].__d_.__rep_; v42 != i; ++v42)
  {
    uint64_t v43 = *v42;
    ++this[46].__d_.__rep_;
    if (*(unsigned char *)(v43 + 48))
    {
      long long v89 = 0uLL;
      uint64_t v90 = 0;
      std::mutex::lock((std::mutex *)this);
      long long v87 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v43 + 8);
      uint64_t v88 = v43;
      uint64_t v44 = (Exec *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&this[8], (void *)(v43 + 8));
      long long v45 = (unint64_t *)((char *)v44 + 96);
      if (&this[9] == (std::chrono::steady_clock::time_point *)v44) {
        long long v45 = (unint64_t *)&realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      }
      unint64_t v46 = *v45;
      uint64_t v47 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::nullID(void)::nullID;
      std::mutex::unlock((std::mutex *)this);
      if (v46 != v47)
      {
        uint64_t v49 = *((void *)&v89 + 1);
        uint64_t v48 = v89;
        while (v49 != v48)
        {
          v49 -= 8;
          std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy[abi:ne180100]((uint64_t)&v90, v49);
        }
        *((void *)&v89 + 1) = v48;
        unint64_t v50 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::edgesConnectedFrom((uint64_t)&this[8], v46);
        std::set<unsigned long>::set[abi:ne180100]((uint64_t *)&v98, (uint64_t)v50);
        long long v91 = 0uLL;
        v92[0] = 0;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve((uint64_t *)&v91, (unint64_t)v98.__end_cap_.__value_);
        std::vector<int>::pointer v51 = v98.__begin_;
        if ((std::vector<int>::pointer *)v98.__begin_ != &v98.__end_)
        {
          do
          {
            uint64_t v52 = realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::node((uint64_t)&this[8], *((void *)v51 + 4));
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v97, v52);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v97 + 1, v52 + 1);
            uint64_t v53 = *((void *)&v91 + 1);
            if (*((void *)&v91 + 1) >= v92[0])
            {
              uint64_t v54 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)&v91, v97);
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(*((_DWORD **)&v91 + 1), v97);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v53 + 4), (_DWORD *)v97 + 1);
              uint64_t v54 = v53 + 8;
            }
            *((void *)&v91 + 1) = v54;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v97);
            uint64_t v55 = (std::vector<int> *)*((void *)v51 + 1);
            if (v55)
            {
              do
              {
                uint64_t v56 = v55;
                uint64_t v55 = (std::vector<int> *)v55->__begin_;
              }
              while (v55);
            }
            else
            {
              do
              {
                uint64_t v56 = (std::vector<int> *)*((void *)v51 + 2);
                BOOL v12 = v56->__begin_ == v51;
                std::vector<int>::pointer v51 = (std::vector<int>::pointer)v56;
              }
              while (!v12);
            }
            std::vector<int>::pointer v51 = (std::vector<int>::pointer)v56;
          }
          while (v56 != (std::vector<int> *)&v98.__end_);
        }
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate((void **)&v89);
        long long v89 = v91;
        uint64_t v90 = v92[0];
        v92[0] = 0;
        long long v91 = 0uLL;
        v97[0] = (void **)&v91;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v97);
        std::__tree<unsigned int>::destroy((uint64_t)&v98, (void *)v98.__end_);
      }
      uint64_t v57 = v88;
      if (*(void *)(v88 + 24))
      {
        Exec::getValue((Exec *)this, v87, (pxrInternal__aapl__pxrReserved__::VtValue *)v93);
        long long v91 = 0uLL;
        v92[0] = 0;
        uint64_t v59 = *((void *)&v89 + 1);
        uint64_t v58 = v89;
        uint64_t v60 = *((void *)&v89 + 1) - v89;
        if (*((void *)&v89 + 1) != (void)v89)
        {
          if ((unint64_t)v60 > 0x7FFFFFFFFFFFFFF8) {
LABEL_141:
          }
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          unint64_t v100 = v92;
          uint64_t v57 = v88;
          v98.__begin_ = (std::vector<int>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v60 >> 3);
          v98.__end_ = v98.__begin_;
          v98.__end_cap_.__value_ = v98.__begin_;
          uint64_t v99 = &v98.__begin_[4 * v61];
          std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer((pxrInternal__aapl__pxrReserved__::VtValue *)&v91, &v98);
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v98);
          uint64_t v59 = *((void *)&v89 + 1);
          uint64_t v58 = v89;
        }
        if (v59 != v58)
        {
          unint64_t v62 = 0;
          char v86 = 1;
          do
          {
            char v63 = (unsigned int *)(v58 + 8 * v62);
            int8x8_t v64 = (int8x8_t)this[31].__d_.__rep_;
            if (v64)
            {
              unint64_t v65 = bswap64(0x9E3779B97F4A7C55* (v63[1]+ ((v63[1]+ (unint64_t)*v63+ (v63[1] + (unint64_t)*v63) * (v63[1] + (unint64_t)*v63)) >> 1)));
              uint8x8_t v66 = (uint8x8_t)vcnt_s8(v64);
              v66.i16[0] = vaddlv_u8(v66);
              if (v66.u32[0] > 1uLL)
              {
                unint64_t v67 = v65;
                if (v65 >= *(void *)&v64) {
                  unint64_t v67 = v65 % *(void *)&v64;
                }
              }
              else
              {
                unint64_t v67 = v65 & (*(void *)&v64 - 1);
              }
              char v68 = *(void **)(this[30].__d_.__rep_ + 8 * v67);
              if (v68)
              {
                for (unint64_t j = (void *)*v68; j; unint64_t j = (void *)*j)
                {
                  unint64_t v70 = j[1];
                  if (v65 == v70)
                  {
                    if (j[2] == *(void *)v63)
                    {
                      v86 &= j[8] != 0;
                      break;
                    }
                  }
                  else
                  {
                    if (v66.u32[0] > 1uLL)
                    {
                      if (v70 >= *(void *)&v64) {
                        v70 %= *(void *)&v64;
                      }
                    }
                    else
                    {
                      v70 &= *(void *)&v64 - 1;
                    }
                    if (v70 != v67) {
                      break;
                    }
                  }
                }
              }
            }
            int v71 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::find(&this[25].__d_.__rep_, v63);
            if (v71)
            {
              BOOL v72 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(v71 + 1);
              uint64_t v73 = *((void *)&v91 + 1);
              if (*((void *)&v91 + 1) >= v92[0])
              {
                uint64_t v77 = (uint64_t)(*((void *)&v91 + 1) - v91) >> 4;
                if ((unint64_t)(v77 + 1) >> 60) {
                  goto LABEL_141;
                }
                unint64_t v78 = (uint64_t)(v92[0] - v91) >> 3;
                if (v78 <= v77 + 1) {
                  unint64_t v78 = v77 + 1;
                }
                if (v92[0] - (void)v91 >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v79 = v78;
                }
                unint64_t v100 = v92;
                if (v79) {
                  unint64_t v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v79);
                }
                else {
                  uint64_t v80 = 0;
                }
                v98.__begin_ = (std::vector<int>::pointer)v79;
                v98.__end_ = (std::vector<int>::pointer)(v79 + 16 * v77);
                v98.__end_cap_.__value_ = v98.__end_;
                uint64_t v99 = (int *)(v79 + 16 * v80);
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v98.__end_, v72);
                v98.__end_cap_.__value_ += 4;
                std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer((pxrInternal__aapl__pxrReserved__::VtValue *)&v91, &v98);
                uint64_t v74 = *((void *)&v91 + 1);
                std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v98);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*((pxrInternal__aapl__pxrReserved__::VtValue **)&v91 + 1), v72);
                uint64_t v74 = v73 + 16;
              }
              *((void *)&v91 + 1) = v74;
            }
            else
            {
              v97[1] = 0;
              uint64_t v75 = *((void *)&v91 + 1);
              if (*((void *)&v91 + 1) >= v92[0])
              {
                uint64_t v81 = (uint64_t)(*((void *)&v91 + 1) - v91) >> 4;
                if ((unint64_t)(v81 + 1) >> 60) {
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v82 = (uint64_t)(v92[0] - v91) >> 3;
                if (v82 <= v81 + 1) {
                  unint64_t v82 = v81 + 1;
                }
                if (v92[0] - (void)v91 >= 0x7FFFFFFFFFFFFFF0uLL) {
                  unint64_t v83 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v82;
                }
                unint64_t v100 = v92;
                if (v83) {
                  unint64_t v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v83);
                }
                else {
                  uint64_t v84 = 0;
                }
                v98.__begin_ = (std::vector<int>::pointer)v83;
                v98.__end_ = (std::vector<int>::pointer)(v83 + 16 * v81);
                v98.__end_cap_.__value_ = v98.__end_;
                uint64_t v99 = (int *)(v83 + 16 * v84);
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v98.__end_, (const pxrInternal__aapl__pxrReserved__::VtValue *)v97);
                v98.__end_cap_.__value_ += 4;
                std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer((pxrInternal__aapl__pxrReserved__::VtValue *)&v91, &v98);
                uint64_t v76 = *((void *)&v91 + 1);
                std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)&v98);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::VtValue::VtValue(*((pxrInternal__aapl__pxrReserved__::VtValue **)&v91 + 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v97);
                uint64_t v76 = v75 + 16;
              }
              *((void *)&v91 + 1) = v76;
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v97);
            }
            ++v62;
            uint64_t v58 = v89;
          }
          while (v62 < (uint64_t)(*((void *)&v89 + 1) - v89) >> 3);
          uint64_t v57 = v88;
          if ((v86 & 1) == 0
            && !(*(unsigned int (**)(void))(**(void **)(v88 + 24) + 8))(*(void *)(v88 + 24)))
          {
            v98.__end_ = (std::vector<int>::pointer)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
            pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy();
          }
        }
        (***(void (****)(std::vector<int> *__return_ptr))(v57 + 24))(&v98);
        Exec::setValueAndFault((Exec *)this, v87, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v98);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v98);
        *(unsigned char *)(v57 + 48) = 0;
        v98.__begin_ = (std::vector<int>::pointer)&v91;
        std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](v85);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v93);
      }
      else
      {
        *(unsigned char *)(v88 + 48) = 0;
      }
      v98.__begin_ = (std::vector<int>::pointer)&v89;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
      uint64_t i = (uint64_t *)this[22].__d_.__rep_;
    }
    else
    {
      ++this[47].__d_.__rep_;
    }
  }
  realityio::RioTimer::stop(this + 41);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v96);
  if (SHIBYTE(v95) < 0) {
    operator delete(*(void **)&__x[2]);
  }
}

void sub_23F625BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  ExecFault::~ExecFault((void **)va);
  _Unwind_Resume(a1);
}

void ExecFault::~ExecFault(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void Exec::getStatistics(Exec *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:time:computeMakeOrder");
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:time:computeLoop");
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:numTraversedInCompute");
  uint64_t v6 = *((void *)this + 46);
  int v7 = &unk_26F33E64B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "graph:numSkippedClean");
  uint64_t v6 = *((void *)this + 47);
  int v7 = &unk_26F33E64B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F625EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::timerStat(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 6);
  if (v17 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v7 = a2;
    }
    else {
      int v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, ":total");
  double v8 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(a3 + 24)) / 1000) / 1000.0)
             / 1000.0);
  uint64_t v19 = &unk_26F33366B;
  double v18 = v8;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v9 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v9 = (size_t)a2[1];
  }
  int v10 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v9 + 6);
  if (v17 < 0) {
    int v10 = (void **)__p[0];
  }
  if (v9)
  {
    if (*((char *)a2 + 23) >= 0) {
      int v11 = a2;
    }
    else {
      int v11 = *a2;
    }
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ":count");
  double v18 = *(double *)(a3 + 16);
  uint64_t v19 = &unk_26F33E64B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v12 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v12 = (size_t)a2[1];
  }
  BOOL v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 4);
  if (v17 < 0) {
    BOOL v13 = (void **)__p[0];
  }
  if (v12)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::vector<int>::pointer v14 = a2;
    }
    else {
      std::vector<int>::pointer v14 = *a2;
    }
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ":avg");
  double v15 = (float)((float)((float)((std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(a3 + 24)) / 1000) / 1000.0)
              / 1000.0)
      / (double)*(unint64_t *)(a3 + 16);
  uint64_t v19 = &unk_26F33366B;
  double v18 = v15;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F62622C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Exec::getUnreachableTargets(Exec *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  v30[0] = 0;
  v30[1] = 0;
  v28[1] = 0;
  long long v29 = (uint64_t *)v30;
  unint64_t v27 = v28;
  v28[0] = 0;
  a3[2] = 0;
  a3[1] = 0;
  *a3 = a3 + 1;
  size_t v5 = (char **)((char *)this + 64);
  v33[0] = &unk_26F33E710;
  v33[1] = &v27;
  long long v34 = v33;
  uint64_t v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)this + 64, a2);
  int v7 = (char *)this + 72;
  if ((uint64_t *)((char *)this + 72) == v6) {
    goto LABEL_8;
  }
  uint64_t v8 = (uint64_t)v34;
  if (v34)
  {
    if (v34 == v33)
    {
      uint64_t v36 = v35;
      (*(void (**)(void *, void *))(v33[0] + 24))(v33, v35);
      goto LABEL_7;
    }
    uint64_t v8 = (*(uint64_t (**)(void))(*v34 + 16))();
  }
  uint64_t v36 = (void *)v8;
LABEL_7:
  realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::_traverse((uint64_t)v5, (uint64_t)v35, v6[12], (void *)this + 14, 1);
  std::__function::__value_func<BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__value_func[abi:ne180100](v35);
LABEL_8:
  std::__function::__value_func<BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__value_func[abi:ne180100](v33);
  size_t v9 = *v5;
  if (v9 != v7)
  {
    do
    {
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v29, (void *)v9 + 4, (_DWORD *)v9 + 8);
      int v10 = (char *)*((void *)v9 + 1);
      if (v10)
      {
        do
        {
          int v11 = v10;
          int v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (char *)*((void *)v9 + 2);
          BOOL v12 = *(void *)v11 == (void)v9;
          size_t v9 = v11;
        }
        while (!v12);
      }
      size_t v9 = v11;
    }
    while (v11 != v7);
  }
  BOOL v13 = v29;
  std::vector<int>::pointer v14 = v27;
  uint64_t v15 = *a3;
  uint64_t v31 = a3;
  uint64_t v32 = v15;
  if (v29 == (uint64_t *)v30) {
    goto LABEL_50;
  }
  if (v27 == v28)
  {
    uint64_t v24 = a3;
    goto LABEL_43;
  }
  do
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((uint64_t *)((char *)v13 + 28), (void *)((char *)v14 + 28)))
    {
      std::insert_iterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>::operator=[abi:ne180100]((uint64_t)&v31, (uint64_t *)((char *)v13 + 28));
      long long v16 = (uint64_t *)v13[1];
      if (v16)
      {
        do
        {
          BOOL v13 = v16;
          long long v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          char v17 = v13;
          BOOL v13 = (uint64_t *)v13[2];
        }
        while ((uint64_t *)*v13 != v17);
      }
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)((char *)v14 + 28), (uint64_t *)((char *)v13 + 28)))
      {
        double v18 = (void *)v14[1];
        if (v18)
        {
          do
          {
            std::vector<int>::pointer v14 = v18;
            double v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            uint64_t v19 = v14;
            std::vector<int>::pointer v14 = (void *)v14[2];
          }
          while ((void *)*v14 != v19);
        }
        continue;
      }
      uint64_t v20 = (uint64_t *)v13[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (uint64_t *)v13[2];
          BOOL v12 = *v21 == (void)v13;
          BOOL v13 = v21;
        }
        while (!v12);
      }
      unint64_t v22 = (void *)v14[1];
      if (v22)
      {
        do
        {
          std::vector<int>::pointer v14 = v22;
          unint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          BOOL v23 = v14;
          std::vector<int>::pointer v14 = (void *)v14[2];
        }
        while ((void *)*v14 != v23);
      }
      BOOL v13 = v21;
    }
    if (v13 == (uint64_t *)v30) {
      goto LABEL_50;
    }
  }
  while (v14 != v28);
  uint64_t v24 = v31;
  uint64_t v15 = v32;
LABEL_43:
  v35[0] = v24;
  v35[1] = v15;
  do
  {
    std::insert_iterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>::operator=[abi:ne180100]((uint64_t)v35, (uint64_t *)((char *)v13 + 28));
    uint64_t v25 = (uint64_t *)v13[1];
    if (v25)
    {
      do
      {
        unint64_t v26 = v25;
        uint64_t v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      do
      {
        unint64_t v26 = (uint64_t *)v13[2];
        BOOL v12 = *v26 == (void)v13;
        BOOL v13 = v26;
      }
      while (!v12);
    }
    BOOL v13 = v26;
  }
  while (v26 != (uint64_t *)v30);
LABEL_50:
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v27, v28[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v29, v30[0]);
}

void sub_23F6265B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  int v10 = va_arg(va2, void *);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  std::__function::__value_func<BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__value_func[abi:ne180100]((uint64_t *)va3);
  std::__function::__value_func<BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v2, *(void **)(v2 + 8));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)va, v6);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)va1, v10);
  _Unwind_Resume(a1);
}

void Exec::dumpDotfile(void *a1, void *a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  unint64_t v67 = 0;
  uint64_t v68 = 0;
  uint8x8_t v66 = &v67;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"digraph G {\n", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"node [shape=record];\n", 21);
  unint64_t v3 = (void *)a1[11];
  uint64_t v4 = a1 + 12;
  if (v3 != a1 + 12)
  {
    do
    {
      uint64_t v5 = v3[5];
      if (*(unsigned char *)(v5 + 48)) {
        uint64_t v6 = "red";
      }
      else {
        uint64_t v6 = "black";
      }
      std::string::basic_string[abi:ne180100]<0>(__p, v6);
      snprintf(__str, 0x80uLL, "node_%i", v68);
      uint64_t v69 = (_DWORD *)(v5 + 8);
      uint64_t v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)&v66, (void *)(v5 + 8), &v69);
      MEMORY[0x2455D2770](v7 + 5, __str);
      size_t v8 = strlen(__str);
      size_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)__str, v8);
      int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"[ label=\"{", 10);
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 8));
      int v12 = *(char *)(String + 23);
      if (v12 >= 0) {
        uint64_t v13 = String;
      }
      else {
        uint64_t v13 = *(void *)String;
      }
      if (v12 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(String + 23);
      }
      else {
        uint64_t v14 = *(void *)(String + 8);
      }
      uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"| ", 2);
      uint64_t v17 = v16;
      if ((*(void *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (*(void *)(v5 + 16) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      }
      int v19 = *(char *)(EmptyString + 23);
      if (v19 >= 0) {
        uint64_t v20 = EmptyString;
      }
      else {
        uint64_t v20 = *(void *)EmptyString;
      }
      if (v19 >= 0) {
        uint64_t v21 = *(unsigned __int8 *)(EmptyString + 23);
      }
      else {
        uint64_t v21 = *(void *)(EmptyString + 8);
      }
      unint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v20, v21);
      BOOL v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"}\" color=", 9);
      if ((v65 & 0x80u) == 0) {
        uint64_t v24 = __p;
      }
      else {
        uint64_t v24 = (void **)__p[0];
      }
      if ((v65 & 0x80u) == 0) {
        uint64_t v25 = v65;
      }
      else {
        uint64_t v25 = (uint64_t)__p[1];
      }
      unint64_t v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" fillcolor=none style=filled];\n",
        31);
      if ((char)v65 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v27 = (void *)v3[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          unint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v3[2];
          BOOL v29 = *v28 == (void)v3;
          unint64_t v3 = v28;
        }
        while (!v29);
      }
      unint64_t v3 = v28;
    }
    while (v28 != v4);
  }
  uint64_t v31 = (void *)a1[14];
  uint64_t v30 = (void *)a1[15];
  if (v31 != v30)
  {
    unint64_t v32 = 0;
    do
    {
      int v33 = (void *)*v4;
      if (*v4)
      {
        long long v34 = a1 + 12;
        do
        {
          unint64_t v35 = v33[4];
          BOOL v36 = v35 >= v32;
          if (v35 >= v32) {
            uint64_t v37 = v33;
          }
          else {
            uint64_t v37 = v33 + 1;
          }
          if (v36) {
            long long v34 = v33;
          }
          int v33 = (void *)*v37;
        }
        while (*v37);
        if (v34 != v4 && v32 >= v34[4])
        {
          uint64_t v38 = (void *)*v31;
          if ((void *)*v31 != v31 + 1)
          {
            long long v39 = (void *)(v34[5] + 8);
            do
            {
              int v40 = (void *)*v4;
              if (*v4)
              {
                unint64_t v41 = v38[4];
                int v42 = a1 + 12;
                do
                {
                  unint64_t v43 = v40[4];
                  BOOL v44 = v43 >= v41;
                  if (v43 >= v41) {
                    long long v45 = v40;
                  }
                  else {
                    long long v45 = v40 + 1;
                  }
                  if (v44) {
                    int v42 = v40;
                  }
                  int v40 = (void *)*v45;
                }
                while (*v45);
                if (v42 != v4 && v41 >= v42[4])
                {
                  uint64_t v46 = v42[5];
                  *(void *)std::string __str = v39;
                  uint64_t v47 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)&v66, v39, (_DWORD **)__str);
                  *(void *)std::string __str = v46 + 8;
                  uint64_t v48 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)&v66, (void *)(v46 + 8), (_DWORD **)__str);
                  uint64_t v51 = v47[5];
                  unint64_t v50 = v47 + 5;
                  uint64_t v49 = v51;
                  int v52 = *((char *)v50 + 23);
                  if (v52 >= 0) {
                    uint64_t v53 = (uint64_t)v50;
                  }
                  else {
                    uint64_t v53 = v49;
                  }
                  if (v52 >= 0) {
                    uint64_t v54 = *((unsigned __int8 *)v50 + 23);
                  }
                  else {
                    uint64_t v54 = v50[1];
                  }
                  uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, v53, v54);
                  uint64_t v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)" -> ", 4);
                  int v57 = *((char *)v48 + 63);
                  if (v57 >= 0) {
                    uint64_t v58 = (uint64_t)(v48 + 5);
                  }
                  else {
                    uint64_t v58 = v48[5];
                  }
                  if (v57 >= 0) {
                    uint64_t v59 = *((unsigned __int8 *)v48 + 63);
                  }
                  else {
                    uint64_t v59 = v48[6];
                  }
                  uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"\n", 1);
                }
              }
              uint64_t v61 = (void *)v38[1];
              if (v61)
              {
                do
                {
                  unint64_t v62 = v61;
                  uint64_t v61 = (void *)*v61;
                }
                while (v61);
              }
              else
              {
                do
                {
                  unint64_t v62 = (void *)v38[2];
                  BOOL v29 = *v62 == (void)v38;
                  uint64_t v38 = v62;
                }
                while (!v29);
              }
              uint64_t v38 = v62;
            }
            while (v62 != v31 + 1);
            uint64_t v30 = (void *)a1[15];
          }
        }
      }
      v31 += 3;
      ++v32;
    }
    while (v31 != v30);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"}\n", 2);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(v67);
}

void sub_23F626A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char *a19)
{
}

_DWORD *std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<true,0>(_DWORD *a1, _DWORD *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 2), a3);
  return a1;
}

void sub_23F626AB0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtValue *std::vector<pxrInternal__aapl__pxrReserved__::VtValue const>::__swap_out_circular_buffer(pxrInternal__aapl__pxrReserved__::VtValue *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v6 = *(void *)result;
  uint64_t v5 = *((void *)result + 1);
  uint64_t v7 = a2[1];
  while (v5 + v4 != v6)
  {
    v4 -= 16;
    double result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + v7), (const pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + v5));
  }
  a2[1] = v7 + v4;
  uint64_t v8 = *(void *)v3;
  *(void *)unint64_t v3 = v7 + v4;
  a2[1] = v8;
  uint64_t v9 = *((void *)v3 + 1);
  *((void *)v3 + 1) = a2[2];
  a2[2] = v9;
  uint64_t v10 = *((void *)v3 + 2);
  *((void *)v3 + 2) = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::Iterator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>,pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *>::GetNextSubtree(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  for (uint64_t i = *(void *)(*(void *)a1 + 40); ; uint64_t i = *(void *)(result + 40))
  {
    unint64_t result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0) {
      break;
    }
    if (result) {
      BOOL v4 = (i & 7) == 0;
    }
    else {
      BOOL v4 = 0;
    }
    if (!v4) {
      return 0;
    }
  }
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue,0>(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)(a1 + 8), a3);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_UpdateTreeForNewEntry(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  v11[2] = *MEMORY[0x263EF8340];
  unint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v8, *a2);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v9[1] = 0;
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::VtValue,0>((uint64_t)v10, &v8, v9);
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::insert(a1, v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v10);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
    uint64_t v5 = *(void *)(v4 + 32);
    if (v5) {
      uint64_t v6 = v5 | 1;
    }
    else {
      uint64_t v6 = v4;
    }
    *((void *)v3 + 5) = v6;
    *(void *)(v4 + 32) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
}

void sub_23F626D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTableImpl<pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_InsertInTable(std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::VtValue> const&)::{lambda(pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Entry *)#1}>(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Grow((void **)a1);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v4));
  if (!*v5)
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3)) {
      pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Grow((void **)a1);
    }
    operator new();
  }
  uint64_t v6 = (void *)*v5;
  while (*v6 != *(void *)a2)
  {
    uint64_t v6 = (void *)v6[3];
    if (!v6) {
      goto LABEL_7;
    }
  }
  return v6;
}

void sub_23F626EA0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v1);
  MEMORY[0x2455D2BD0]();
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::VtValue>::_Grow(void **a1)
{
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::Auto<char const(&)[22],char const(&)[167]>((uint64_t)&v17);
  unsigned __int8 v2 = atomic_load(MEMORY[0x263F90520]);
  BOOL v3 = (v2 & 1) != 0 && pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin() != 0;
  if (((2 * (void)a1[4]) | 1uLL) <= 7) {
    uint64_t v4 = 7;
  }
  else {
    uint64_t v4 = (2 * (void)a1[4]) | 1;
  }
  a1[4] = (void *)v4;
  unint64_t v5 = v4 + 1;
  if (v4 == -1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    size_t v9 = 8 * v5;
    uint64_t v6 = (char *)operator new(8 * v5);
    uint64_t v8 = &v6[8 * v5];
    bzero(v6, v9);
    uint64_t v7 = &v6[v9];
  }
  uint64_t v10 = a1[1];
  if (v10 != *a1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = (v10 - (unsigned char *)*a1) >> 3;
    do
    {
      uint64_t v13 = (unsigned int *)*((void *)*a1 + v11);
      if (v13)
      {
        do
        {
          uint64_t v14 = (unsigned int *)*((void *)v13 + 3);
          unint64_t v15 = bswap64(0x9E3779B97F4A7C55* (v13[1]+ ((v13[1]+ (unint64_t)*v13+ (v13[1] + (unint64_t)*v13) * (v13[1] + (unint64_t)*v13)) >> 1))) & v4;
          *((void *)v13 + 3) = *(void *)&v6[8 * v15];
          *(void *)&v6[8 * v15] = v13;
          uint64_t v13 = v14;
        }
        while (v14);
      }
      ++v11;
    }
    while (v11 != v12);
    uint64_t v10 = *a1;
  }
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  if (v10) {
    operator delete(v10);
  }
  if (!v3) {
    goto LABEL_21;
  }
  do
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
LABEL_21:
    ;
  }
  while (v18--);
}

void sub_23F627078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto::~Auto((pxrInternal__aapl__pxrReserved__::TfMallocTag::Auto *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<ExecFault>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<ExecFault>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(result + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,ExecFault>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,ExecFault>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,ExecFault>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage>::~pair(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void **std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 8 * v6;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer(v7);
  }
  return result;
}

void sub_23F6273B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPath>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long> &,std::insert_iterator<std::set<unsigned long>> &>(uint64_t result, uint64_t a2, void *a3, uint64_t a4, void *a5, long long *a6)
{
  uint64_t v7 = result;
  uint64_t v8 = *(void **)a2;
  size_t v9 = (void *)*a3;
  if (*(void *)a2 == *a3)
  {
LABEL_38:
    long long v27 = *a6;
    size_t v9 = v8;
    goto LABEL_39;
  }
  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    unint64_t v15 = v8[4];
    unint64_t v16 = i[4];
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        BOOL v23 = (void *)v8[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            BOOL v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v8[2];
            BOOL v20 = *v24 == (void)v8;
            uint64_t v8 = v24;
          }
          while (!v20);
        }
        *(void *)a2 = v24;
        uint64_t v25 = *(void **)a4;
        unint64_t v26 = *(void **)(*(void *)a4 + 8);
        if (v26)
        {
          do
          {
            unint64_t v22 = v26;
            unint64_t v26 = (void *)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            unint64_t v22 = (void *)v25[2];
            BOOL v20 = *v22 == (void)v25;
            uint64_t v25 = v22;
          }
          while (!v20);
        }
      }
      else
      {
        uint64_t v21 = (void *)i[1];
        if (v21)
        {
          do
          {
            unint64_t v22 = v21;
            uint64_t v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            unint64_t v22 = (void *)i[2];
            BOOL v20 = *v22 == (void)i;
            uint64_t i = v22;
          }
          while (!v20);
        }
      }
      *(void *)a4 = v22;
    }
    else
    {
      unint64_t result = std::insert_iterator<std::set<unsigned long>>::operator=[abi:ne180100]((uint64_t)a6, v8 + 4);
      uint64_t v17 = *(void **)a2;
      int v18 = *(void **)(*(void *)a2 + 8);
      if (v18)
      {
        do
        {
          int v19 = v18;
          int v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v17[2];
          BOOL v20 = *v19 == (void)v17;
          uint64_t v17 = v19;
        }
        while (!v20);
      }
      *(void *)a2 = v19;
    }
    uint64_t v8 = *(void **)a2;
    size_t v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      goto LABEL_38;
    }
  }
  long long v27 = *a6;
  long long v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      unint64_t result = std::insert_iterator<std::set<unsigned long>>::operator=[abi:ne180100]((uint64_t)&v30, v8 + 4);
      uint64_t v28 = (void *)v8[1];
      if (v28)
      {
        do
        {
          BOOL v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          BOOL v29 = (void *)v8[2];
          BOOL v20 = *v29 == (void)v8;
          uint64_t v8 = v29;
        }
        while (!v20);
      }
      uint64_t v8 = v29;
    }
    while (v29 != v9);
    long long v27 = v30;
  }
LABEL_39:
  *(void *)uint64_t v7 = v9;
  *(_OWORD *)(v7 + 8) = v27;
  return result;
}

uint64_t std::insert_iterator<std::set<unsigned long>>::operator=[abi:ne180100](uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = std::__tree<unsigned long>::__emplace_hint_unique_key_args<unsigned long,unsigned long const&>(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t *)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void std::__tree<unsigned long>::__erase_unique<unsigned long>(uint64_t **a1, unint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v5 = v4;
    BOOL v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        size_t v9 = (uint64_t **)v6;
      }
      else {
        size_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      BOOL v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_CanHash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_Hash(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_Equal(uint64_t *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<ExecFault,void>::Equal(*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_EqualPtr(uint64_t *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<ExecFault,void>::Equal(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"9ExecFault" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<ExecFault,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<ExecFault>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v2 + 32));
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x2455D2BD0](v2, 0x1072C40FD54DC68);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<ExecFault,void>::Equal(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 31);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 16);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  BOOL v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    size_t v9 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    size_t v9 = *(unsigned __int8 **)(a2 + 8);
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(void *)(a1 + 16))) {
      goto LABEL_18;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 31))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      BOOL v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:

  return pxrInternal__aapl__pxrReserved__::VtValue::operator==(a1 + 32, a2 + 32);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 48));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F627A10(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1072C40FD54DC68);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_Counted<ExecFault>::_Counted(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 32));
  atomic_store(0, (unsigned int *)(a1 + 48));
  return a1;
}

void sub_23F627AB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<ExecFault>::_PlaceCopy()
{
}

void sub_23F627B2C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1072C40FD54DC68);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_Hash(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_Equal(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_EqualPtr(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_StreamOut()
{
  return std::ostream::operator<<();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetTypeid()
{
  return MEMORY[0x263F8C270];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(void *)(MEMORY[0x263F8C270] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C270], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetProxiedTypeid()
{
  return MEMORY[0x263F8C270];
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<unsigned long,unsigned long,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<unsigned long>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = &unk_26F33E64B;
  return result;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t **a1, void *a2, _DWORD *a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x28uLL);
    v9[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 7, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, a3 + 1);
    char v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,0>((uint64_t)v2 + 28);
    }
    operator delete(v2);
  }
}

void std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::~__func()
{
}

void *std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26F33E710;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F33E710;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::operator()(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<Exec::getUnreachableTargets(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(realityio::Graph<Exec::TargetVertex,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage &)>::target_type()
{
}

uint64_t std::insert_iterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>::operator=[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, a2);
  *(void *)(a1 + 8) = v3;
  long long v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      long long v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(uint64_t **a1, void *a2, void *a3, _DWORD *a4)
{
  BOOL v6 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(a1, a2, &v13, &v12, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 7, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 8, a4 + 1);
    char v11 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v13, v8, v7);
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::destroy(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 32));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(uint64_t **a1, void *a2, _DWORD **a3)
{
  BOOL v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    char v10 = (uint64_t *)operator new(0x40uLL);
    char v11 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, v11 + 1);
    v10[5] = 0;
    v10[6] = 0;
    v10[7] = 0;
    *char v10 = 0;
    v10[1] = 0;
    void v10[2] = (uint64_t)v8;
    *BOOL v6 = v10;
    uint64_t v12 = (uint64_t *)**a1;
    uint64_t v13 = v10;
    if (v12)
    {
      *a1 = v12;
      uint64_t v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      BOOL v8 = (uint64_t **)v5;
      size_t v9 = v5 + 4;
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, v5 + 4)) {
        break;
      }
      uint64_t v5 = *v8;
      BOOL v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2)) {
      break;
    }
    BOOL v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  char v10 = *v6;
  if (!*v6) {
    goto LABEL_10;
  }
  return v10;
}

uint64_t GetCoreRealityIOBundleVersion()
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  v0 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.CoreRealityIO"];
  uint64_t v1 = [v0 objectForInfoDictionaryKey:*MEMORY[0x263EFFB70]];
  [v1 componentsSeparatedByString:@"."];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = 0;
  uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    unint64_t v6 = 1000000000000;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        v6 /= 0x3E8uLL;
        v3 += v6 * (int)objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v7++), "intValue", (void)v9);
      }
      while (v4 != v7);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v4);
  }

  return v3;
}

void sub_23F6282CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL IsCoreRIOBundleVersionValid()
{
  v0 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.CoreRealityIO"];
  uint64_t v1 = [v0 objectForInfoDictionaryKey:*MEMORY[0x263EFFB70]];
  int v2 = [v1 intValue];
  BOOL v4 = v2 != 0xFFFF && v2 != 0;

  return v4;
}

void sub_23F628380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CFStringRef RIOCopyMtlxFromUsdFile(char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, __s);
  realityio::mtlxFromUsd(__p);
  if (v7 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4);
  }
  return v2;
}

void sub_23F628424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::AcousticMeshComponentBuilder::kOutputName(realityio::AcousticMeshComponentBuilder *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C406D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C406D0))
  {
    operator new();
  }
  return qword_268C406C8;
}

void sub_23F6284D8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C406D0);
  _Unwind_Resume(a1);
}

realityio::AcousticMeshComponentBuilder *realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(realityio::AcousticMeshComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[11] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "AcousticMeshComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kAcousticMeshComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C406C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C406C0))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_19;
  unint64_t v6 = *(std::__shared_weak_count **)algn_268C406B8;
  if (*(void *)algn_268C406B8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C406B8 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F33E808;
  void v12[3] = v12;
  v11[0] = &unk_26F33EA28;
  void v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F33E790;
  return this;
}

void sub_23F6288D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  uint64_t v47 = *(std::__shared_weak_count **)(v45 - 104);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  *(void *)(v45 - 216) = &a37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 216));
  uint64_t v48 = *(std::__shared_weak_count **)(v45 - 120);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  *(void *)(v45 - 216) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 216));
  a25 = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a32, a33);
  uint64_t v49 = 8;
  while (1)
  {
    uint64_t v50 = *(void *)(v45 - 144 + v49);
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v49 -= 8;
    if (v49 == -8)
    {
      a37 = &a40;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
      MEMORY[0x2455D2BD0](v44, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C406C0);
      if (a18 < 0) {
        operator delete(__p);
      }
      if (a24 < 0) {
        operator delete(a19);
      }
      _Unwind_Resume(a1);
    }
  }
}

void *realityio::AcousticMeshComponentBuilder::clear(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v4 = a2;
  v5[0] = &unk_26F33EAA8;
  v5[1] = &v4;
  void v5[2] = a1;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F628BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::AcousticMeshComponentBuilder::~AcousticMeshComponentBuilder(realityio::AcousticMeshComponentBuilder *this)
{
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::Builder::~Builder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26F33E808;
  return result;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33E808;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v20[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)v20, &v18);
  uint64_t v16 = v18;
  uint64_t v17 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  unint64_t v6 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  char v7 = (std::__shared_weak_count *)operator new(0x48uLL);
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F330630;
  std::string::basic_string[abi:ne180100]<0>(v20, "arbitraryComponentClass");
  realityio::CurrentPrimInputDescriptor::CurrentPrimInputDescriptor(&v7[1].__vftable, (uint64_t)v20, (uint64_t *)(v6 + 16), 1);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v14 = v7 + 1;
  unint64_t v15 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, &v14);
  char v8 = (realityio::MeshModelDescriptorBuilder *)v15;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  v20[0] = &unk_26F33E908;
  unint64_t v22 = v20;
  uint64_t v9 = realityio::MeshModelDescriptorBuilder::kModelDescriptorOutputName(v8);
  unint64_t v10 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v11 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,std::function<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)> &,realityio::InputDescriptor::Optionality,void>(v9, (uint64_t *)(v10 + 104), (uint64_t)v20, &v11, &v12);
  long long v13 = v12;
  long long v12 = 0uLL;
  realityio::InputsDescriptor::addInputDescriptor(v3, &v13);
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100](v20);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
}

void sub_23F62902C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, void *a4@<X8>)
{
  char v8 = operator new(0x48uLL);
  unint64_t result = std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_23F629194(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::__shared_ptr_emplace[abi:ne180100]<std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,0>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26F33E878;
  std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>::construct[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>((uint64_t)&v6, a1 + 3, a2, a3, a4);
  return a1;
}

void sub_23F62920C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E878;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::EntityGeneratingOwningPrimInputDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>::construct[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality>(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  realityio::EntityGeneratingOwningPrimInputDescriptor::EntityGeneratingOwningPrimInputDescriptor(a2, (uint64_t)&__p, a4, *a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F629340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *realityio::EntityGeneratingOwningPrimInputDescriptor::EntityGeneratingOwningPrimInputDescriptor(void *a1, uint64_t a2, uint64_t *a3, int a4)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  realityio::InputDescriptor::InputDescriptor((uint64_t)a1, (long long *)&__p, a3, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26F33E8C8;
  return a1;
}

void sub_23F629404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::EntityGeneratingOwningPrimInputDescriptor::~EntityGeneratingOwningPrimInputDescriptor(realityio::EntityGeneratingOwningPrimInputDescriptor *this)
{
  realityio::InputDescriptor::~InputDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

void *realityio::EntityGeneratingOwningPrimInputDescriptor::resolvedPrimPaths@<X0>(const pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X2>, const realityio::internal::PrimToEntityMap *a2@<X3>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  char v8 = (char *)a2 + 48;
  uint64_t v9 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2 + 48, a1);
  if ((void *)((char *)a2 + 56) != v9)
  {
    uint64_t v10 = *((void *)a2 + 3);
    if (v10)
    {
      int v11 = (unsigned int *)(v10 + 104 * v9[5] + 24);
      return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v11, v11);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v15, a1);
  long long v12 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v8, &v15);
  if ((void *)((char *)a2 + 56) == v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = *((void *)a2 + 3) + 104 * v12[5];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  unint64_t result = (void *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  if (v13)
  {
    int v11 = (unsigned int *)(v13 + 24);
    return std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, v11, v11);
  }
  return result;
}

void sub_23F629548(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__func()
{
}

{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26F33E908;
  return result;
}

{
  void *result;

  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26F3499F8;
  return result;
}

void std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33E908;
}

{
  *a2 = &unk_26F3499F8;
}

uint64_t std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::operator()@<X0>(pxrInternal__aapl__pxrReserved__::UsdStage *this@<X1>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  PrimAtPath = (realityio *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v9, this, a2);
  uint64_t v4 = *(id *)(realityio::logObjects(PrimAtPath) + 24);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9, v13);
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
      if (*(char *)(String + 23) >= 0) {
        uint64_t v6 = String;
      }
      else {
        uint64_t v6 = *(void *)String;
      }
      *(_DWORD *)__int16 buf = 136315138;
      *(void *)uint64_t v15 = v6;
      _os_log_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_DEFAULT, "AcousticMeshComponent generateInputsDescriptor(prim.path=%s)", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
    }
    else
    {
      *(_DWORD *)__int16 buf = 136315138;
      *(void *)uint64_t v15 = "<invalid>";
      _os_log_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_DEFAULT, "AcousticMeshComponent generateInputsDescriptor(prim.path=%s)", buf, 0xCu);
    }
  }

  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v9))
  {
    unint64_t v7 = atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
    if (!v7) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 32));
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf)) {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    if (*(void *)&v15[4]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v15[4]);
    }
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
  uint64_t result = v10;
  if (v10) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
  }
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  pxrInternal__aapl__pxrReserved__::UsdObject *i;
  int HasCustomDataKey;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t result;
  unint64_t v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdObject *v13;
  pxrInternal__aapl__pxrReserved__::UsdObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v15, this, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships((uint64_t *)&v13, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v15);
  uint64_t v4 = v13;
  for (i = v14; v4 != i; uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v4 + 32))
  {
    MEMORY[0x2455CF810](&v10, "isEntityHandle");
    HasCustomDataKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (HasCustomDataKey)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v10;
      char v8 = v11;
      while (v7 != v8)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v19, v7);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(a3, (unsigned int *)&v19, &v19);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
      }
      int v19 = (void **)&v10;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
  }
  uint64_t v10 = (unint64_t)&v13;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  uint64_t result = v16;
  if (v16) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v16);
  }
  return result;
}

void sub_23F629AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0,std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0>,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::target_type()
{
}

{
}

uint64_t anonymous namespace'::visitChildren(pxrInternal__aapl__pxrReserved__::UsdObject *a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1);
  if (result)
  {
    uint64_t v5 = a2[3];
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)(*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::UsdObject *))(*(void *)v5 + 48))(v5, a1);
    UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v6);
    uint64_t v9 = *UsdPrimDefaultPredicate;
    uint64_t v8 = UsdPrimDefaultPredicate[1];
    uint64_t v10 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
    {
      v9 |= 0x2000uLL;
      v8 &= ~0x2000uLL;
    }
    uint64_t v20 = v9;
    uint64_t v21 = v8;
    *(void *)&long long v22 = v10;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a1, &v20, (uint64_t)&v24);
    uint64_t v20 = v24;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v21, &v25);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v21 + 1, &v26);
    long long v22 = v27;
    uint64_t v23 = v28;
    uint64_t v16 = v29;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v17, &v30);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v17 + 1, &v31);
    long long v18 = v32;
    uint64_t v19 = v33;
    while (1)
    {
      if (v20 == v16
        && v21 == v17
        && pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v22, (uint64_t)&v18))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v20, (uint64_t)v12);
      uint64_t v11 = a2[3];
      if (!v11) {
        goto LABEL_14;
      }
      if ((void *)v11 != a2) {
        break;
      }
      unint64_t v35 = v34;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v34);
LABEL_16:
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__value_func[abi:ne180100](v34);
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
      if (v13) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v13);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v20);
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
LABEL_14:
    unint64_t v35 = (void *)v11;
    goto LABEL_16;
  }
  return result;
}

void sub_23F62A060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F62A150(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40374522CDLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F33E978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33E978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::operator()(uint64_t a1, pxrInternal__aapl__pxrReserved__ **this)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v12);
  uint64_t v4 = v12;
  uint64_t v5 = **(void **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  unint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v4 != v5)
  {
    if (**(unsigned char **)(a1 + 16)
      || (pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v12), HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8)), pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(), unint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12), (HasPrefix & 1) == 0))
    {
      uint64_t v9 = this[1];
      if (!v9 || (*((unsigned char *)v9 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this[1], v7);
      }
      uint64_t v10 = (void *)*((void *)v9 + 3);
      unint64_t result = atomic_load(&realityio::tokens::AcousticMeshBuilderTokens);
      if (!result) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::AcousticMeshBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(result + 16) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v11 = *(void *)(a1 + 24);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)this, &v12);
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v11, (unsigned int *)&v12, &v12);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
      }
    }
  }
  return result;
}

void sub_23F62A34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1},std::allocator<anonymous namespace'::generateInputsDescriptor(void)::$_0::operator() const(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)::{lambda(pxrInternal__aapl__pxrReserved__::UsdPrim const&)#1}>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_26F33EA28;
  return result;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33EA28;
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::AcousticMeshComponentBuilder::kOutputName((realityio::AcousticMeshComponentBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 344), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F62A5D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::AcousticMeshComponentBuilder::AcousticMeshComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F33EAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F33EAA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = **(void **)(a1 + 8);
  uint64_t v4 = realityio::AcousticMeshComponentBuilder::kOutputName((realityio::AcousticMeshComponentBuilder *)a1);
  uint64_t v56 = 0;
  int v57 = 0;
  unint64_t v5 = *(std::__shared_weak_count **)(v3 + 24);
  if (v5)
  {
    int v57 = std::__shared_weak_count::lock(v5);
    if (v57) {
      uint64_t v56 = *(void *)(v3 + 16);
    }
  }
  MEMORY[0x2455CF830](&v58, v4);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(v3 + 8), &v56);
  if (v6 == v7)
  {
    std::operator+<char>();
    uint64_t v19 = std::string::append(&v60, ") at prim path (");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 32));
    int v22 = *(char *)(String + 23);
    if (v22 >= 0) {
      uint64_t v23 = (const std::string::value_type *)String;
    }
    else {
      uint64_t v23 = *(const std::string::value_type **)String;
    }
    if (v22 >= 0) {
      std::string::size_type v24 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v24 = *(void *)(String + 8);
    }
    int v25 = std::string::append(&v61, v23, v24);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[0] = v25->__r_.__value_.__r.__words[2];
    long long v62 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append((std::string *)&v62, ")");
    goto LABEL_22;
  }
  uint64_t v8 = 1;
  uint64_t v9 = v6;
  do
  {
    uint64_t v9 = (void *)*v9;
    --v8;
  }
  while (v9 != v7);
  if (v8)
  {
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v60, ") at prim path (");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 32));
    int v13 = *(char *)(v12 + 23);
    if (v13 >= 0) {
      uint64_t v14 = (const std::string::value_type *)v12;
    }
    else {
      uint64_t v14 = *(const std::string::value_type **)v12;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v12 + 8);
    }
    uint64_t v16 = std::string::append(&v61, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__r.__words[2];
    long long v62 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append((std::string *)&v62, ") because more than one connected builder produced the same output type");
LABEL_22:
    long long v27 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)&__p[16] = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v27;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v59, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    long long v52 = *(_OWORD *)v59;
    *(_OWORD *)uint64_t v53 = *(_OWORD *)&v59[16];
    *(void *)&v53[15] = *(void *)&v59[31];
    char v28 = v59[39];
    memset(&v59[16], 0, 24);
    v51[0] = 0;
    v53[23] = v28;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (v63.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v62);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    goto LABEL_60;
  }
  uint64_t v29 = v6[5];
  int v31 = *(std::mutex **)(v29 + 16);
  int v30 = *(std::__shared_weak_count **)(v29 + 24);
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v6[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (const void **)((v6[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v6);
  }
  std::mutex::lock(v31 + 1);
  uint64_t v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v31->__m_.__opaque[32], EmptyString);
  if (&v31->__m_.__opaque[40] == (char *)v33)
  {
    std::operator+<char>();
    uint64_t v37 = std::string::append(&v60, "\" does not exist in the builder outputs");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v62, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)&v61);
    *(_OWORD *)&v59[8] = v62;
    *(_OWORD *)&v59[24] = *(_OWORD *)&v63.__r_.__value_.__l.__data_;
    *(void *)&v59[39] = *(std::string::size_type *)((char *)&v63.__r_.__value_.__r.__words[1] + 7);
    char v39 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    memset(&v63, 0, sizeof(v63));
    v59[0] = 0;
    v59[47] = v39;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v34 = *(void *)(v33 + 56);
    uint64_t v36 = *(void *)(v34 + 8);
    uint64_t v35 = *(void *)(v34 + 16);
    if (v35) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
    }
    v59[0] = 1;
    *(void *)&v59[8] = v36;
    *(void *)&v59[16] = v35;
  }
  std::mutex::unlock(v31 + 1);
  int v40 = v59[0];
  if (v59[0])
  {
    uint64_t v42 = *(void *)&v59[8];
    unint64_t v41 = *(std::__shared_weak_count **)&v59[16];
    if (*(void *)&v59[16])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v59[16] + 8), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      __p[0] = 1;
      *(void *)&__p[8] = v42;
      *(void *)&__p[16] = v41;
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    else
    {
      __p[0] = 1;
      *(void *)&__p[8] = *(void *)&v59[8];
      *(void *)&__p[16] = 0;
    }
  }
  else
  {
    long long v62 = *(_OWORD *)&v59[8];
    if ((v59[47] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)&v59[24], *(std::string::size_type *)&v59[32]);
    }
    else {
      std::string v63 = *(std::string *)&v59[24];
    }
    __p[0] = 0;
    *(_OWORD *)&__p[8] = v62;
    std::string v55 = v63;
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v59);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v40)
  {
    long long v43 = *(_OWORD *)&__p[8];
    *(void *)&__p[8] = 0;
    *(void *)&__p[16] = 0;
    v51[0] = 1;
    long long v52 = v43;
  }
  else
  {
    *(_OWORD *)uint64_t v59 = *(_OWORD *)&__p[8];
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)&v59[16], v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&v59[16] = v55;
    }
    v51[0] = 0;
    long long v52 = *(_OWORD *)v59;
    *(_OWORD *)uint64_t v53 = *(_OWORD *)&v59[16];
    *(void *)&v53[16] = *(void *)&v59[32];
  }
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)__p);
LABEL_60:
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = (realityio::AcousticMeshComponentBuilder *)v57;
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (v51[0])
  {
    uint64_t v46 = *(void *)(v2 + 16);
    uint64_t v45 = *(std::__shared_weak_count **)(v2 + 24);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v47 = (const void **)realityio::AcousticMeshComponentBuilder::kOutputName(v44);
    std::mutex::lock((std::mutex *)(v46 + 64));
    if (v46 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v46 + 40, v47))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v46 + 40), v47); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v46, (unsigned __int8 *)v47);
    }
    std::mutex::unlock((std::mutex *)(v46 + 64));
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  uint64_t v48 = **(void **)(a1 + 8);
  uint64_t v49 = realityio::EntityBuilder::kInputName(v44);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v48, v49, (uint64_t)v59);
  if (v59[0])
  {
    *(void *)std::string __p = *(void *)&v59[8];
    if (*(void *)&v59[8])
    {
      RERetain();
      if (*(void *)__p)
      {
        REAcousticMeshComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
    }
  }
  else
  {
    *(void *)std::string __p = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(__p);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v59);
  return realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v51);
}

void sub_23F62ACB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24)
{
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::AcousticMeshComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::GeomSubsetBuilder::kGeomSubsetOutputName(realityio::GeomSubsetBuilder *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C406E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C406E0))
  {
    operator new();
  }
  return _MergedGlobals_20;
}

void sub_23F62AECC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C406E0);
  _Unwind_Resume(a1);
}

realityio::GeomSubsetBuilder *realityio::GeomSubsetBuilder::GeomSubsetBuilder(realityio::GeomSubsetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "GeomSubsetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kGeomSubsetBuilderIdentifier);
  realityio::generateGeomSubsetDirtyStageSubscription(&v5);
  v12[0] = &unk_26F33EBA0;
  void v12[3] = v12;
  v11[0] = &unk_26F33EC20;
  void v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F33EB28;
  realityio::GeomSubsetBuilder::SubsetDataT::SubsetDataT((realityio::GeomSubsetBuilder *)((char *)this + 280));
  return this;
}

void sub_23F62B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::GeomSubsetBuilder::run(realityio::GeomSubsetBuilder *this, realityio::Inputs *a2)
{
  std::string::size_type size = a2;
  uint64_t v78 = *MEMORY[0x263EF8340];
  uint64_t v5 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  PrimAtPath = (realityio::MaterialAssetBuilder *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v68, v6, v5);
  uint64_t v8 = realityio::MaterialAssetBuilder::kMaterialDataName(PrimAtPath);
  long long v63 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)size + 3);
  if (v9)
  {
    *((void *)&v63 + 1) = std::__shared_weak_count::lock(v9);
    if (*((void *)&v63 + 1)) {
      *(void *)&long long v63 = *((void *)size + 2);
    }
  }
  MEMORY[0x2455CF830](&v64, v8);
  char v10 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*((void **)size + 1), &v63);
  if (v10 == v11)
  {
    std::operator+<char>();
    uint64_t v23 = std::string::append(&v72, ") at prim path (");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
    int v26 = *(char *)(String + 23);
    if (v26 >= 0) {
      long long v27 = (const std::string::value_type *)String;
    }
    else {
      long long v27 = *(const std::string::value_type **)String;
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v28 = *(void *)(String + 8);
    }
    uint64_t v29 = std::string::append(&v73, v27, v28);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    int v22 = std::string::append(&v66, ")");
    goto LABEL_22;
  }
  uint64_t v12 = 1;
  int v13 = v10;
  do
  {
    int v13 = (void *)*v13;
    --v12;
  }
  while (v13 != v11);
  if (v12)
  {
    std::operator+<char>();
    uint64_t v14 = std::string::append(&v72, ") at prim path (");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
    int v17 = *(char *)(v16 + 23);
    if (v17 >= 0) {
      long long v18 = (const std::string::value_type *)v16;
    }
    else {
      long long v18 = *(const std::string::value_type **)v16;
    }
    if (v17 >= 0) {
      std::string::size_type v19 = *(unsigned __int8 *)(v16 + 23);
    }
    else {
      std::string::size_type v19 = *(void *)(v16 + 8);
    }
    long long v20 = std::string::append(&v73, v18, v19);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    int v22 = std::string::append(&v66, ") because more than one connected builder produced the same output type");
LABEL_22:
    long long v31 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[0] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v31;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(buf, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    uint64_t v32 = *(void *)buf;
    uint64_t v33 = *(std::mutex **)&buf[16];
    char v2 = buf[39];
    memset(&buf[16], 0, 24);
    if (v75.__r_.__value_.__s.__data_[7] < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    goto LABEL_30;
  }
  uint64_t v41 = v10[5];
  uint64_t v33 = *(std::mutex **)(v41 + 16);
  uint64_t v42 = *(std::__shared_weak_count **)(v41 + 24);
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v10[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (const void **)((v10[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
  }
  realityio::Outputs::getRawValue<realityio::MaterialAssetDataT *>(v33, EmptyString, (uint64_t)buf);
  int v56 = buf[0];
  if (buf[0])
  {
    *(void *)&long long v55 = *(void *)&buf[8];
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)&buf[8];
    if ((buf[47] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)&buf[24], *(std::string::size_type *)&buf[32]);
      if (buf[0]) {
        BOOL v58 = 0;
      }
      else {
        BOOL v58 = buf[47] < 0;
      }
      int v57 = v58;
    }
    else
    {
      int v57 = 0;
      std::string v75 = *(std::string *)&buf[24];
    }
    long long v55 = *(_OWORD *)__p;
    std::string::size_type size = (realityio::Inputs *)v75.__r_.__value_.__l.__size_;
    uint64_t v33 = (std::mutex *)v75.__r_.__value_.__r.__words[0];
    char v2 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if (v57)
    {
      long long v61 = *(_OWORD *)__p;
      operator delete(*(void **)&buf[24]);
      long long v55 = v61;
    }
  }
  if (v42)
  {
    long long v62 = v55;
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    long long v55 = v62;
  }
  uint64_t v32 = v55;
  if (v56)
  {
    int v34 = 0;
  }
  else
  {
    *(_OWORD *)__int16 buf = v55;
    if ((v2 & 0x80) == 0)
    {
LABEL_30:
      int v34 = 1;
      goto LABEL_31;
    }
    std::string::__init_copy_ctor_external((std::string *)&buf[16], (const std::string::value_type *)v33, (std::string::size_type)size);
    uint64_t v32 = *(void *)buf;
    uint64_t v59 = *(std::mutex **)&buf[16];
    char v2 = buf[39];
    operator delete(v33);
    int v34 = 1;
    uint64_t v33 = v59;
  }
LABEL_31:
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = (realityio *)*((void *)&v63 + 1);
  if (*((void *)&v63 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
  }
  if (v32) {
    int v36 = v34;
  }
  else {
    int v36 = 1;
  }
  if (v36 == 1)
  {
    uint64_t v37 = *(id *)(realityio::logObjects(v35) + 24);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v68, __p);
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      *(_DWORD *)__int16 buf = 136315138;
      *(void *)&uint8_t buf[4] = Text;
      _os_log_error_impl(&dword_23F4EA000, v37, OS_LOG_TYPE_ERROR, "Stopping operation to set material shader because it didn't exist on GeomSubset prim \"%s\"", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
    }

    if (v2 < 0) {
      int v38 = v34;
    }
    else {
      int v38 = 0;
    }
    if (v38 == 1) {
      operator delete(v33);
    }
  }
  else
  {
    uint64_t v39 = *(void *)(v32 + 8);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v73.__r_.__value_.__r.__words[0] = MEMORY[0x263F906E0] + 16;
    pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr((uint64_t *)&v66, (pxrInternal__aapl__pxrReserved__::UsdGeomSubset *)&v73);
    std::string::size_type v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v66, (uint64_t)buf);
    if (buf[0])
    {
      *(_OWORD *)std::string __p = *(_OWORD *)&buf[8];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[24];
      std::string::size_type v40 = *(void *)&buf[40];
    }
    else
    {
      *(_OWORD *)std::string __p = v63;
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v64;
      std::string::size_type v40 = v65;
    }
    v75.__r_.__value_.__r.__words[2] = v40;
    if (v40)
    {
      uint64_t v44 = (atomic_ullong *)(v40 - 16);
      if (v75.__r_.__value_.__l.__size_) {
        uint64_t v44 = (atomic_ullong *)v75.__r_.__value_.__l.__size_;
      }
      atomic_fetch_add_explicit(v44, 1uLL, memory_order_relaxed);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)buf);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v63);
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66.__r_.__value_.__r.__words[2]);
    if (v66.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66.__r_.__value_.__l.__size_);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v68, (uint64_t)&v63);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v63, &v66);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v68, &v72);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(buf, &v66);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&buf[4], (_DWORD *)v66.__r_.__value_.__r.__words + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&buf[8], &v72);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&buf[12], (_DWORD *)v72.__r_.__value_.__r.__words + 1);
    *(_OWORD *)&buf[16] = *(_OWORD *)__p;
    *(std::string *)&buf[32] = v75;
    if (v75.__r_.__value_.__r.__words[2])
    {
      uint64_t v45 = (atomic_ullong *)(v75.__r_.__value_.__r.__words[2] - 16);
      if (*(void *)&buf[40]) {
        uint64_t v45 = *(atomic_ullong **)&buf[40];
      }
      atomic_fetch_add_explicit(v45, 1uLL, memory_order_relaxed);
    }
    uint64_t v77 = v39;
    if (v39) {
      RERetain();
    }
    uint64_t v46 = (char *)this + 280;
    realityio::GeomSubsetBuilder::SubsetDataT::operator=((uint64_t)this + 280, (uint64_t)buf);
    realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT((realityio::GeomSubsetBuilder::SubsetDataT *)buf);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
    if ((BYTE8(v64) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v64 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v64);
    uint64_t v47 = (realityio::GeomSubsetBuilder *)*((void *)&v63 + 1);
    if (*((void *)&v63 + 1)) {
      uint64_t v47 = (realityio::GeomSubsetBuilder *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v63 + 1));
    }
    uint64_t v49 = *((void *)this + 2);
    uint64_t v48 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v48) {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v50 = (const void **)realityio::GeomSubsetBuilder::kGeomSubsetOutputName(v47);
    std::mutex::lock((std::mutex *)(v49 + 64));
    uint64_t v51 = operator new(0x28uLL);
    v51[1] = 0;
    v51[2] = 0;
    *uint64_t v51 = &unk_26F33ECA0;
    v51[3] = &unk_26F33ECF0;
    v51[4] = v46;
    *(void *)__int16 buf = v50;
    long long v52 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v49 + 40), v50, (uint64_t)&std::piecewise_construct, (long long **)buf);
    uint64_t v53 = (std::__shared_weak_count *)v52[8];
    v52[7] = (uint64_t)(v51 + 3);
    v52[8] = (uint64_t)v51;
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v49, (unsigned __int8 *)v50, (uint64_t)v50);
    std::mutex::unlock((std::mutex *)(v49 + 64));
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
    MEMORY[0x2455CEAB0](&v73);
  }
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v70);
  uint64_t result = v69;
  if (v69) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v69);
  }
  return result;
}

void sub_23F62B854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t realityio::GeomSubsetBuilder::SubsetDataT::operator=(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 8, (int *)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 12);
  if (a1 != a2)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a2 + 56);
  if (v5 != v6)
  {
    *(void *)(a1 + 56) = v6;
    *(void *)(a2 + 56) = v5;
  }
  return a1;
}

void realityio::GeomSubsetBuilder::clear(realityio::GeomSubsetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v5 = (std::mutex *)*((void *)this + 2);
  long long v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (const void **)realityio::GeomSubsetBuilder::kGeomSubsetOutputName(this);
  int v7 = v5 + 1;
  std::mutex::lock(v5 + 1);
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v5->__m_.__opaque[32], v6);
  uint64_t v9 = &v5->__m_.__opaque[40];
  if (&v5->__m_.__opaque[40] == (char *)v8)
  {
    std::operator+<char>();
    long long v11 = std::string::append(&v23, "\" does not exist in the builder outputs");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v11->__r_.__value_.__r.__words[2];
    long long v24 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v19, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v24);
    long long v18 = v19;
    std::string::size_type v13 = *((void *)&v20 + 1);
    uint64_t v6 = (const void **)v20;
    int v2 = SBYTE7(v21);
    *(void *)&long long v21 = 0;
    long long v20 = 0uLL;
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    std::mutex::unlock(v7);
    long long v19 = v18;
    if (v2 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v20, (const std::string::value_type *)v6, v13);
      uint64_t v14 = (const void **)v20;
      LOBYTE(v2) = BYTE7(v21);
      operator delete(v6);
      uint64_t v6 = v14;
    }
  }
  else
  {
    std::mutex::unlock(v5 + 1);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v9 == (char *)v8)
  {
    if ((v2 & 0x80) != 0) {
      operator delete(v6);
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 2);
    long long v15 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v17 = (const void **)realityio::GeomSubsetBuilder::kGeomSubsetOutputName(v10);
    std::mutex::lock((std::mutex *)(v16 + 64));
    if (v16 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v16 + 40, v17))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v16 + 40), v17); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v16, (unsigned __int8 *)v17);
    }
    std::mutex::unlock((std::mutex *)(v16 + 64));
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    realityio::GeomSubsetBuilder::SubsetDataT::SubsetDataT((realityio::GeomSubsetBuilder::SubsetDataT *)&v19);
    realityio::GeomSubsetBuilder::SubsetDataT::operator=((uint64_t)this + 280, (uint64_t)&v19);
    realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT((realityio::GeomSubsetBuilder::SubsetDataT *)&v19);
  }
}

void sub_23F62BD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  operator delete(v26);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void realityio::GeomSubsetBuilder::~GeomSubsetBuilder(realityio::GeomSubsetBuilder *this)
{
  realityio::GeomSubsetBuilder::~GeomSubsetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F33EB28;
  realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT((realityio::GeomSubsetBuilder *)((char *)this + 280));
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  int v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

realityio::GeomSubsetBuilder::SubsetDataT *realityio::GeomSubsetBuilder::SubsetDataT::SubsetDataT(realityio::GeomSubsetBuilder::SubsetDataT *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  return this;
}

void realityio::GeomSubsetBuilder::SubsetDataT::~SubsetDataT(realityio::GeomSubsetBuilder::SubsetDataT *this)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 7);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)this + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33EBA0;
  return result;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33EBA0;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  int v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)int v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::MaterialAssetBuilder::kMaterialDataName((realityio::MaterialAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v6) = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 176), (uint64_t)realityio::materialBindingCallback, (int *)&v6, &v8);
  uint64_t v6 = v8;
  int v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_23F62C0F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F33EC20;
  return result;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33EC20;
}

void std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  int v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)int v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::GeomSubsetBuilder::kGeomSubsetOutputName((realityio::GeomSubsetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 72), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F62C2F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::GeomSubsetBuilder::GeomSubsetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::GeomSubsetBuilder::SubsetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33ECA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<realityio::GeomSubsetBuilder::SubsetDataT *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33ECA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<realityio::GeomSubsetBuilder::SubsetDataT *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void realityio::generateSceneLibraryDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C406F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C406F8))
  {
    operator new();
  }
  uint64_t v3 = unk_268C406F0;
  *a1 = _MergedGlobals_21;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F62C708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x2455D2BD0](v26, 0x1060C40E5A1EACFLL);
  MEMORY[0x2455D2BD0](v25, 0x10A1C402FEF67C7);
  a21 = (void **)&a24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a21);
  MEMORY[0x2455D2BD0](v24, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v27, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C406F8);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfValueTypeNameGetTypeID()
{
  if (RIOPxrSdfValueTypeNameGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfValueTypeNameGetTypeID::onceToken, &__block_literal_global_12);
  }
  return RIOPxrSdfValueTypeNameGetTypeID::typeID;
}

void __RIOPxrSdfValueTypeNameGetTypeID_block_invoke()
{
  if (!RIOPxrSdfValueTypeNameGetTypeID::typeID) {
    RIOPxrSdfValueTypeNameGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfValueTypeNameCreateBool()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(Data);
}

uint64_t RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(void *a1)
{
  if (RIOPxrSdfValueTypeNameGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfValueTypeNameGetTypeID::onceToken, &__block_literal_global_12);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result) {
    *(void *)(result + 16) = *a1;
  }
  return result;
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 16);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 32);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 8);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 24);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 40);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 48);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 128);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 136);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 144);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 56);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 152);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 160);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 168);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 64);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 176);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 184);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 192);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3h()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 200);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3f()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 208);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 216);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3h()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 224);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3f()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 232);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 240);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2h()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 376);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2f()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 384);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 392);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3h()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 400);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3f()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 408);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 416);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 104);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 112);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 120);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4h()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 296);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4f()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 304);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 312);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3h()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 248);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3f()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 256);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 264);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3h()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 272);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3f()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 280);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 288);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuath()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 320);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatf()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 328);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatd()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 336);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 344);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 352);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 360);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4d()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 368);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateString()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 80);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateToken()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 88);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateBoolArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 448);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt32Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 464);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt64Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 488);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt32Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 480);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt8Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 456);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateUInt64Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 496);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt2Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 560);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt3Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 568);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateInt4Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 576);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4hArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 752);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4fArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 760);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor4dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 768);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3hArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 704);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3fArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 712);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateNormal3dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 720);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3hArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 728);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3fArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 736);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateColor3dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 744);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalfArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 504);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf2Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 584);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf3Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 592);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateHalf4Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 600);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloatArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 512);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat2Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 608);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat3Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 616);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFloat4Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 624);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDoubleArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 520);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble2Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 632);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble3Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 640);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateDouble4Array()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 648);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3hArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 656);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3fArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 664);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreatePoint3dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 672);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3hArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 680);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3fArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 688);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateVector3dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 696);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2hArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 832);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2fArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 840);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord2dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 848);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3hArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 856);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3fArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 864);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTexCoord3dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 872);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuathArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 776);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatfArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 784);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateQuatdArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 792);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix2dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 800);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix3dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 808);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateMatrix4dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 816);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateFrame4dArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 824);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateStringArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 536);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateTokenArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 544);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPath()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 96);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

uint64_t RIOPxrSdfValueTypeNameCreateAssetPathArray()
{
  Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
  if (!Data) {
    Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  uint64_t v1 = (void *)((char *)Data + 552);

  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(v1);
}

CFStringRef RIOPxrSdfValueTypeNameCopyCppTypeName(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  CPPTypeuint64_t Name = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetCPPTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 16));
  if (*(char *)(CPPTypeName + 23) >= 0) {
    int v2 = (const char *)CPPTypeName;
  }
  else {
    int v2 = *(const char **)CPPTypeName;
  }

  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

uint64_t RIOPxrSdfValueTypeNameCopyToken(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v2, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 16));
    uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v2);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (RIOPxrTfTokenEmpty::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenEmpty::onceToken, &__block_literal_global_2_2);
    }
    return RIOPxrTfTokenEmpty::tokenRef;
  }
  return result;
}

uint64_t _RIOPxrSdfValueTypeNameCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
}

uint64_t _RIOPxrSdfValueTypeNameCFHash(char *a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetHash((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 16));
}

CFStringRef _RIOPxrSdfValueTypeNameCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfValueTypeName %p>", a1);
}

CFStringRef _RIOPxrSdfValueTypeNameCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfValueTypeName %p>", a1);
}

void realityio::BuilderDependencyDAG::SocketQuery::~SocketQuery(realityio::BuilderDependencyDAG::SocketQuery *this)
{
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 4);
}

void realityio::BuilderDependencyDAG::getDirectlyProvidingBuilders(void *a1, unint64_t *a2, uint64_t a3)
{
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear(a3);
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  unint64_t v10 = *a2;
  long long v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, &v10);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  for (uint64_t i = (void *)v7[18]; i; uint64_t i = (void *)*i)
  {
    unint64_t v10 = 0;
    long long v11 = 0;
    uint64_t v9 = (std::__shared_weak_count *)i[4];
    if (v9)
    {
      long long v11 = std::__shared_weak_count::lock(v9);
      if (v11) {
        unint64_t v10 = i[3];
      }
    }
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder>>(a3, &v10, (uint64_t)&v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_23F62E9C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void realityio::BuilderDependencyDAG::getDirectlyDependentBuilders(void *a1, unint64_t *a2, uint64_t a3)
{
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear(a3);
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  unint64_t v10 = *a2;
  long long v11 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, &v10);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  for (uint64_t i = (void *)v7[23]; i; uint64_t i = (void *)*i)
  {
    unint64_t v10 = 0;
    long long v11 = 0;
    uint64_t v9 = (std::__shared_weak_count *)i[4];
    if (v9)
    {
      long long v11 = std::__shared_weak_count::lock(v9);
      if (v11) {
        unint64_t v10 = i[3];
      }
    }
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder>>(a3, &v10, (uint64_t)&v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_23F62EAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void realityio::BuilderDependencyDAG::generateBuilderProviderInfo(realityio::BuilderDependencyDAG *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (uint64_t i = (void *)*((void *)this + 2); i; uint64_t i = (void *)*i)
  {
    for (unint64_t j = (void *)i[18]; j; unint64_t j = (void *)*j)
    {
      uint64_t v17 = 0;
      long long v18 = 0;
      unint64_t v5 = (std::__shared_weak_count *)i[3];
      if (v5)
      {
        long long v18 = std::__shared_weak_count::lock(v5);
        if (v18) {
          uint64_t v17 = i[2];
        }
      }
      uint64_t v6 = j[2];
      uint64_t v19 = v6;
      if ((v6 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v19 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v14 = 0;
      long long v15 = 0;
      int v7 = (std::__shared_weak_count *)j[4];
      if (v7)
      {
        long long v15 = std::__shared_weak_count::lock(v7);
        if (v15) {
          uint64_t v14 = j[3];
        }
      }
      uint64_t v8 = j[5];
      uint64_t v16 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v16 &= 0xFFFFFFFFFFFFFFF8;
      }
      std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::pair[abi:ne180100]<realityio::BuilderAndIOName&,realityio::BuilderAndIOName&,0>(&v9, &v17, &v14);
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__emplace_multi<std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>((void *)a2, (uint64_t)&v9);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
  }
}

void sub_23F62EC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20)
{
  std::pair<realityio::BuilderAndIOName,realityio::BuilderAndIOName>::~pair(&a9);
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if ((a20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(void *a1, unint64_t **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v193 = a3;
  *((void *)&v161 + 1) = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate(a4);
  *a4 = 0;
  a4[1] = 0;
  long long v145 = a4;
  a4[2] = 0;
  v160[1] = 0;
  *(void *)&long long v161 = 0;
  v160[0] = 0;
  *(void *)&long long v172 = v160;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
  uint64_t v6 = (void *)a1[2];
  int v144 = a1 + 2;
  unint64_t v146 = a1;
  if (!v6) {
    goto LABEL_113;
  }
  do
  {
    long long v194 = 0uLL;
    int v7 = (std::__shared_weak_count *)v6[3];
    if (v7)
    {
      *((void *)&v194 + 1) = std::__shared_weak_count::lock(v7);
      if (*((void *)&v194 + 1)) {
        *(void *)&long long v194 = v6[2];
      }
    }
    realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> const&,realityio::LiveSceneUpdate const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>&)::$_0::operator()((uint64_t)v160, (uint64_t)&v193, (uint64_t)&v194);
    if (v6[9] == *((void *)&v161 + 1))
    {
      uint64_t v8 = v6[8];
      if (v8)
      {
        char v142 = v6;
        unint64_t v149 = v6[7];
        uint64_t v150 = v6[6];
        uint64_t v147 = v160[1];
        unint64_t v148 = v160[0];
        while (2)
        {
          uint64_t v9 = *(void *)(v8 + 16);
          unint64_t v10 = (int8x8_t *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::TfToken>(v150, v149, v9);
          uint64_t v8 = v11;
          long long v12 = (int8x8_t *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v148, (unint64_t)v147, v9);
          uint64_t v14 = v12;
          if (v10 == (int8x8_t *)v8)
          {
            uint64_t v15 = 0;
          }
          else
          {
            uint64_t v15 = 0;
            uint64_t v16 = v10;
            do
            {
              ++v15;
              uint64_t v16 = (int8x8_t *)*v16;
            }
            while (v16 != (int8x8_t *)v8);
          }
          if (v12 == v13)
          {
            uint64_t v17 = 0;
          }
          else
          {
            uint64_t v17 = 0;
            long long v18 = v12;
            do
            {
              ++v17;
              long long v18 = (int8x8_t *)*v18;
            }
            while (v18 != v13);
          }
          if (v15 == v17)
          {
            while (v10 != (int8x8_t *)v8)
            {
              if ((*(void *)&v10[2] & 0xFFFFFFFFFFFFFFF8) != (*(void *)&v14[2] & 0xFFFFFFFFFFFFFFF8)
                || !realityio::operator==((uint64_t)&v10[3], v14 + 3))
              {
                if (v10 != (int8x8_t *)v8)
                {
                  uint64_t v19 = 0;
                  uint64_t v20 = 2;
                  long long v21 = v10;
                  do
                  {
                    unint64_t v22 = v20;
                    ++v19;
                    long long v21 = (int8x8_t *)*v21;
                    ++v20;
                  }
                  while (v21 != (int8x8_t *)v8);
                  if (v19 != 1)
                  {
                    std::string v23 = v14;
                    do
                    {
                      std::string v23 = (int8x8_t *)*v23;
                      --v22;
                    }
                    while (v22 > 1);
                    uint64_t v24 = v10;
                    while (1)
                    {
                      uint64_t v25 = v10;
                      if (v24 != v10)
                      {
                        unint64_t v26 = *(void *)&v24[2] & 0xFFFFFFFFFFFFFFF8;
                        uint64_t v25 = v10;
                        while ((*(void *)&v25[2] & 0xFFFFFFFFFFFFFFF8) != v26
                             || !realityio::operator==((uint64_t)&v25[3], v24 + 3))
                        {
                          uint64_t v25 = (int8x8_t *)*v25;
                          if (v25 == v24) {
                            goto LABEL_38;
                          }
                        }
                      }
                      if (v25 == v24)
                      {
LABEL_38:
                        if (v14 == v23) {
                          goto LABEL_54;
                        }
                        uint64_t v27 = 0;
                        uint64_t v28 = (uint64_t)&v24[3];
                        unint64_t v29 = *(void *)&v24[2] & 0xFFFFFFFFFFFFFFF8;
                        long long v30 = v14;
                        do
                        {
                          if (v29 == (*(void *)&v30[2] & 0xFFFFFFFFFFFFFFF8)) {
                            v27 += realityio::operator==((uint64_t)&v24[3], v30 + 3);
                          }
                          long long v30 = (int8x8_t *)*v30;
                        }
                        while (v30 != v23);
                        if (!v27) {
                          goto LABEL_54;
                        }
                        uint64_t v24 = (int8x8_t *)*v24;
                        uint64_t v31 = 1;
                        if (v24 != (int8x8_t *)v8)
                        {
                          uint64_t v32 = v24;
                          do
                          {
                            if (v29 == (*(void *)&v32[2] & 0xFFFFFFFFFFFFFFF8)) {
                              v31 += realityio::operator==(v28, v32 + 3);
                            }
                            uint64_t v32 = (int8x8_t *)*v32;
                          }
                          while (v32 != (int8x8_t *)v8);
                        }
                        if (v31 != v27) {
                          goto LABEL_54;
                        }
                      }
                      else
                      {
                        uint64_t v24 = (int8x8_t *)*v24;
                      }
                      if (v24 == (int8x8_t *)v8) {
                        goto LABEL_51;
                      }
                    }
                  }
                  goto LABEL_54;
                }
                break;
              }
              unint64_t v10 = (int8x8_t *)*v10;
              uint64_t v14 = (int8x8_t *)*v14;
            }
LABEL_51:
            if (v8) {
              continue;
            }
            int v33 = 1;
          }
          else
          {
LABEL_54:
            int v33 = 0;
          }
          break;
        }
        a1 = v146;
        uint64_t v6 = v142;
      }
      else
      {
        int v33 = 1;
      }
    }
    else
    {
      int v33 = 0;
    }
    if (v6[14] != v166)
    {
LABEL_80:
      BOOL v37 = 0;
      goto LABEL_81;
    }
    int v34 = v6 + 13;
    uint8x8_t v35 = (uint8x8_t)vcnt_s8(v164);
    v35.i16[0] = vaddlv_u8(v35);
    uint64_t v36 = *(void *)&v164 - 1;
LABEL_59:
    int v34 = (void *)*v34;
    BOOL v37 = v34 == 0;
    if (v34 && *(void *)&v164)
    {
      unint64_t v38 = v34[2] & 0xFFFFFFFFFFFFFFF8;
      unint64_t v39 = bswap64(0x9E3779B97F4A7C55 * v38);
      if (v35.u32[0] > 1uLL)
      {
        unint64_t v40 = v39;
        if (v39 >= *(void *)&v164) {
          unint64_t v40 = v39 % *(void *)&v164;
        }
      }
      else
      {
        unint64_t v40 = v39 & v36;
      }
      uint64_t v41 = *(uint64_t ***)(v163 + 8 * v40);
      if (v41)
      {
        uint64_t v42 = *v41;
        if (v42)
        {
          while (1)
          {
            unint64_t v43 = v42[1];
            if (v39 == v43)
            {
              if ((v42[2] & 0xFFFFFFFFFFFFFFF8) == v38)
              {
                if (*((_DWORD *)v34 + 6) != *((_DWORD *)v42 + 6)
                  || (v34[4] & 0xFFFFFFFFFFFFFFF8) != (v42[4] & 0xFFFFFFFFFFFFFFF8))
                {
                  break;
                }
                goto LABEL_59;
              }
            }
            else
            {
              if (v35.u32[0] > 1uLL)
              {
                if (v43 >= *(void *)&v164) {
                  v43 %= *(void *)&v164;
                }
              }
              else
              {
                v43 &= v36;
              }
              if (v43 != v40) {
                goto LABEL_80;
              }
            }
            uint64_t v42 = (uint64_t *)*v42;
            if (!v42) {
              goto LABEL_80;
            }
          }
        }
      }
    }
LABEL_81:
    unsigned int v44 = atomic_load((unsigned int *)(a1[16] + 28));
    if (v44 == 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v172, "addBuildersAndResyncIODescriptorsCancel");
      realityio::ImportSession::CancelledException::CancelledException(exception, &v172);
    }
    if (v33)
    {
      char v45 = 0;
      LOBYTE(v189[0]) = 0;
    }
    else
    {
      uint64_t v46 = v160[0];
      unint64_t v47 = (unint64_t)v160[1];
      v160[0] = 0;
      v160[1] = 0;
      v189[0] = v46;
      v189[1] = v47;
      long long v190 = v161;
      int v191 = v162;
      if (*((void *)&v161 + 1))
      {
        unint64_t v48 = *(void *)(v161 + 8);
        if ((v47 & (v47 - 1)) != 0)
        {
          if (v48 >= v47) {
            v48 %= v47;
          }
        }
        else
        {
          v48 &= v47 - 1;
        }
        *((void *)&v46->__vftable + v48) = &v190;
        char v45 = 1;
        long long v161 = 0uLL;
      }
      else
      {
        char v45 = 1;
      }
    }
    char v192 = v45;
    if (v37)
    {
      char v49 = 0;
      LOBYTE(v185[0]) = 0;
    }
    else
    {
      uint64_t v50 = v163;
      int8x8_t v51 = v164;
      uint64_t v163 = 0;
      int8x8_t v164 = 0;
      v185[0] = v50;
      v185[1] = v51;
      v186[0] = v165;
      v186[1] = v166;
      int v187 = v167[0];
      if (v166)
      {
        unint64_t v52 = *(void *)(v165 + 8);
        if ((*(void *)&v51 & (*(void *)&v51 - 1)) != 0)
        {
          if (v52 >= *(void *)&v51) {
            v52 %= *(void *)&v51;
          }
        }
        else
        {
          v52 &= *(void *)&v51 - 1;
        }
        *(void *)(v50 + 8 * v52) = v186;
        char v49 = 1;
        uint64_t v165 = 0;
        uint64_t v166 = 0;
      }
      else
      {
        char v49 = 1;
      }
    }
    char v188 = v49;
    realityio::BuilderDependencyDAG::updateBuilderGraphNodeIOData(a1, (unint64_t *)&v194, (uint64_t)v189, (uint64_t)v185);
    if (v188) {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v185);
    }
    if (!v33)
    {
      if (v192) {
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v189);
      }
LABEL_109:
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(v145, &v194);
      goto LABEL_110;
    }
    if (v192) {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v189);
    }
    if (!v37) {
      goto LABEL_109;
    }
LABEL_110:
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)&v163);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v160);
    if (*((void *)&v194 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v194 + 1));
    }
    uint64_t v6 = (void *)*v6;
  }
  while (v6);
LABEL_113:
  uint64_t v53 = *a2;
  uint64_t v54 = a2[1];
  if (*a2 != v54)
  {
    unint64_t v55 = (unint64_t)&v183;
    uint64_t v141 = (uint64_t)(a1 + 3);
    unint64_t v143 = a1 + 12;
    char v151 = (float *)(a1 + 4);
    while (1)
    {
      int v56 = (std::__shared_weak_count *)v53[1];
      v160[0] = (std::__shared_weak_count *)*v53;
      v160[1] = v56;
      if (v56) {
        atomic_fetch_add_explicit(&v56->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v57 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)v160);
      if (v160[1]) {
        std::__shared_weak_count::__release_weak(v160[1]);
      }
      if (!v57) {
        break;
      }
LABEL_313:
      v53 += 2;
      if (v53 == v54) {
        return;
      }
    }
    unsigned int v58 = atomic_load((unsigned int *)(a1[16] + 28));
    if (v58 == 1)
    {
      uint64_t v139 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v160, "addBuildersAndResyncIODescriptorsCancel");
      realityio::ImportSession::CancelledException::CancelledException(v139, (long long *)v160);
    }
    uint64_t v59 = (std::__shared_weak_count *)*v53;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v182, (_DWORD *)(*v53 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v183, (_DWORD *)&v59->__shared_owners_ + 1);
    (*(void (**)(void))(*(void *)*v53 + 24))();
    unint64_t v60 = *v53;
    unint64_t v61 = v53[1];
    if (v61) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 16), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v160, &v182);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v160 + 1, &v183);
    unint64_t v62 = v184;
    v160[1] = (std::__shared_weak_count *)v184;
    if ((v184 & 7) != 0)
    {
      char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
      unint64_t v62 = (unint64_t)v160[1];
      if ((add_explicit & 1) == 0)
      {
        unint64_t v62 = (unint64_t)v160[1] & 0xFFFFFFFFFFFFFFF8;
        v160[1] = (std::__shared_weak_count *)((unint64_t)v160[1] & 0xFFFFFFFFFFFFFFF8);
      }
    }
    *(void *)&long long v161 = v60;
    *((void *)&v161 + 1) = v61;
    unint64_t v64 = bswap64(0x9E3779B97F4A7C55* (HIDWORD(v160[0])+ ((HIDWORD(v160[0])+ (unint64_t)LODWORD(v160[0])+ (HIDWORD(v160[0]) + (unint64_t)LODWORD(v160[0]))* (HIDWORD(v160[0]) + (unint64_t)LODWORD(v160[0]))) >> 1)));
    unint64_t v65 = v62 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v66 = (bswap64(0x9E3779B97F4A7C55 * v65) - 0x61C8864680B583ABLL + (v64 << 6) + (v64 >> 2) - 62) ^ v64;
    unint64_t v67 = a1[11];
    if (v67)
    {
      uint8x8_t v68 = (uint8x8_t)vcnt_s8((int8x8_t)v67);
      v68.i16[0] = vaddlv_u8(v68);
      if (v68.u32[0] > 1uLL)
      {
        unint64_t v55 = v66;
        if (v66 >= v67) {
          unint64_t v55 = v66 % v67;
        }
      }
      else
      {
        unint64_t v55 = v66 & (v67 - 1);
      }
      uint64_t v69 = *(uint64_t ****)(a1[10] + 8 * v55);
      if (v69)
      {
        for (uint64_t i = *v69; i; uint64_t i = (uint64_t **)*i)
        {
          unint64_t v71 = (unint64_t)i[1];
          if (v71 == v66)
          {
            if (i[2] == (uint64_t *)v160[0] && ((unint64_t)i[3] & 0xFFFFFFFFFFFFFFF8) == v65) {
              goto LABEL_201;
            }
          }
          else
          {
            if (v68.u32[0] > 1uLL)
            {
              if (v71 >= v67) {
                v71 %= v67;
              }
            }
            else
            {
              v71 &= v67 - 1;
            }
            if (v71 != v55) {
              break;
            }
          }
        }
      }
    }
    std::string v72 = operator new(0x30uLL);
    *(void *)&long long v172 = v72;
    *((void *)&v172 + 1) = v143;
    *std::string v72 = 0;
    v72[1] = v66;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v72 + 4, v160);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v72 + 5, (_DWORD *)v160 + 1);
    unint64_t v73 = (unint64_t)v160[1];
    v72[3] = v160[1];
    if ((v73 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v72[3] &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_OWORD *)v72 + 2) = v161;
    long long v161 = 0uLL;
    LOBYTE(v173[0]) = 1;
    float v74 = (float)(unint64_t)(a1[13] + 1);
    float v75 = *((float *)a1 + 28);
    if (v67 && (float)(v75 * (float)v67) >= v74)
    {
LABEL_192:
      uint64_t v92 = *(void **)(a1[10] + 8 * v55);
      if (v92)
      {
        *(void *)long long v172 = *v92;
        *uint64_t v92 = v172;
      }
      else
      {
        *(void *)long long v172 = a1[12];
        a1[12] = v172;
        *(void *)(a1[10] + 8 * v55) = v143;
        if (*(void *)v172)
        {
          unint64_t v93 = *(void *)(*(void *)v172 + 8);
          if ((v67 & (v67 - 1)) != 0)
          {
            if (v93 >= v67) {
              v93 %= v67;
            }
          }
          else
          {
            v93 &= v67 - 1;
          }
          *(void *)(a1[10] + 8 * v93) = v172;
        }
      }
      *(void *)&long long v172 = 0;
      ++a1[13];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v172, 0);
      unint64_t v61 = *((void *)&v161 + 1);
LABEL_201:
      if (v61) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v61);
      }
      if (((uint64_t)v160[1] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v160[1] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v160);
      uint64_t v94 = a1[15];
      uint64_t v171 = v94;
      if (v94)
      {
        RERetain();
        uint64_t v94 = v171;
      }
      memset(v173, 0, sizeof(v173));
      long long v172 = 0u;
      memset(v175, 0, sizeof(v175));
      int v174 = 1065353216;
      int v176 = 1065353216;
      memset(v177, 0, sizeof(v177));
      memset(v179, 0, sizeof(v179));
      int v178 = 1065353216;
      int v180 = 1065353216;
      uint64_t v181 = v94;
      if (v94) {
        RERetain();
      }
      realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v171);
      unint64_t v96 = *v53;
      unint64_t v95 = v53[1];
      if (v95) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v95 + 8), 1uLL, memory_order_relaxed);
      }
      size_t v97 = (std::__shared_weak_count *)*((void *)&v172 + 1);
      *(void *)&long long v172 = v96;
      *((void *)&v172 + 1) = v95;
      if (v97) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v97);
      }
      std::vector<int> v98 = v54;
      unint64_t v100 = (std::__shared_weak_count *)*v53;
      uint64_t v99 = (std::__shared_weak_count *)v53[1];
      if (v99) {
        atomic_fetch_add_explicit(&v99->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v160[0] = v100;
      v160[1] = v99;
      realityio::BuilderDependencyDAG::BuilderGraphNode::BuilderGraphNode((uint64_t)&v161, (uint64_t)&v172);
      uint64_t v101 = (unint64_t *)v141;
      unint64_t v102 = realityio::WeakBuilderPtrHash::operator()(v141, (unint64_t *)v160);
      unint64_t v103 = v102;
      unint64_t v104 = a1[1];
      if (v104)
      {
        uint8x8_t v105 = (uint8x8_t)vcnt_s8((int8x8_t)v104);
        v105.i16[0] = vaddlv_u8(v105);
        unint64_t v106 = v105.u32[0];
        if (v105.u32[0] > 1uLL)
        {
          unint64_t v61 = v102;
          if (v102 >= v104) {
            unint64_t v61 = v102 % v104;
          }
        }
        else
        {
          unint64_t v61 = (v104 - 1) & v102;
        }
        uint64_t v107 = *(void **)(*a1 + 8 * v61);
        if (v107)
        {
          uint64_t v108 = (void *)*v107;
          if (!*v107)
          {
            a1 = v146;
            goto LABEL_233;
          }
          while (1)
          {
            unint64_t v109 = v108[1];
            if (v109 == v103)
            {
              if (realityio::WeakBuilderPtrEqual::operator()((uint64_t)v151, v108 + 2, v160)) {
                goto LABEL_288;
              }
            }
            else
            {
              if (v106 > 1)
              {
                if (v109 >= v104) {
                  v109 %= v104;
                }
              }
              else
              {
                v109 &= v104 - 1;
              }
              if (v109 != v61)
              {
LABEL_231:
                a1 = v146;
                uint64_t v101 = (unint64_t *)v141;
                break;
              }
            }
            uint64_t v108 = (void *)*v108;
            if (!v108) {
              goto LABEL_231;
            }
          }
        }
      }
LABEL_233:
      uint64_t v110 = operator new(0xD8uLL);
      *(void *)&long long v194 = v110;
      *((void *)&v194 + 1) = v144;
      *uint64_t v110 = 0;
      v110[1] = v103;
      *((_OWORD *)v110 + 1) = *(_OWORD *)v160;
      v160[0] = 0;
      v160[1] = 0;
      realityio::BuilderDependencyDAG::BuilderGraphNode::BuilderGraphNode((uint64_t)(v110 + 4), (uint64_t)&v161);
      char v195 = 1;
      float v111 = (float)(*v101 + 1);
      float v112 = *v151;
      if (v104 && (float)(v112 * (float)v104) >= v111) {
        goto LABEL_279;
      }
      BOOL v113 = (v104 & (v104 - 1)) != 0;
      if (v104 < 3) {
        BOOL v113 = 1;
      }
      unint64_t v114 = v113 | (2 * v104);
      unint64_t v115 = vcvtps_u32_f32(v111 / v112);
      if (v114 <= v115) {
        int8x8_t prime = (int8x8_t)v115;
      }
      else {
        int8x8_t prime = (int8x8_t)v114;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v104 = a1[1];
      if (*(void *)&prime > v104) {
        goto LABEL_245;
      }
      if (*(void *)&prime < v104)
      {
        unint64_t v123 = vcvtps_u32_f32((float)*v101 / *v151);
        if (v104 < 3 || (uint8x8_t v124 = (uint8x8_t)vcnt_s8((int8x8_t)v104), v124.i16[0] = vaddlv_u8(v124), v124.u32[0] > 1uLL))
        {
          unint64_t v123 = std::__next_prime(v123);
        }
        else
        {
          uint64_t v125 = 1 << -(char)__clz(v123 - 1);
          if (v123 >= 2) {
            unint64_t v123 = v125;
          }
        }
        if (*(void *)&prime <= v123) {
          int8x8_t prime = (int8x8_t)v123;
        }
        if (*(void *)&prime >= v104)
        {
          unint64_t v104 = a1[1];
        }
        else
        {
          if (prime)
          {
LABEL_245:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v117 = operator new(8 * *(void *)&prime);
            uint64_t v118 = (void *)*a1;
            *a1 = v117;
            if (v118) {
              operator delete(v118);
            }
            uint64_t v119 = 0;
            a1[1] = prime;
            do
              *(void *)(*a1 + 8 * v119++) = 0;
            while (*(void *)&prime != v119);
            uint64_t v120 = (void *)*v144;
            if (*v144)
            {
              unint64_t v121 = v120[1];
              uint8x8_t v122 = (uint8x8_t)vcnt_s8(prime);
              v122.i16[0] = vaddlv_u8(v122);
              if (v122.u32[0] > 1uLL)
              {
                if (v121 >= *(void *)&prime) {
                  v121 %= *(void *)&prime;
                }
              }
              else
              {
                v121 &= *(void *)&prime - 1;
              }
              *(void *)(*a1 + 8 * v121) = v144;
              int v126 = (void *)*v120;
              if (*v120)
              {
                do
                {
                  unint64_t v127 = v126[1];
                  if (v122.u32[0] > 1uLL)
                  {
                    if (v127 >= *(void *)&prime) {
                      v127 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v127 &= *(void *)&prime - 1;
                  }
                  if (v127 != v121)
                  {
                    if (!*(void *)(*a1 + 8 * v127))
                    {
                      *(void *)(*a1 + 8 * v127) = v120;
                      goto LABEL_270;
                    }
                    *uint64_t v120 = *v126;
                    *int v126 = **(void **)(*a1 + 8 * v127);
                    **(void **)(*a1 + 8 * v127) = v126;
                    int v126 = v120;
                  }
                  unint64_t v127 = v121;
LABEL_270:
                  uint64_t v120 = v126;
                  int v126 = (void *)*v126;
                  unint64_t v121 = v127;
                }
                while (v126);
              }
            }
            unint64_t v104 = (unint64_t)prime;
            goto LABEL_274;
          }
          int v137 = (void *)*a1;
          *a1 = 0;
          if (v137) {
            operator delete(v137);
          }
          unint64_t v104 = 0;
          a1[1] = 0;
        }
      }
LABEL_274:
      if ((v104 & (v104 - 1)) != 0)
      {
        if (v103 >= v104) {
          unint64_t v61 = v103 % v104;
        }
        else {
          unint64_t v61 = v103;
        }
      }
      else
      {
        unint64_t v61 = (v104 - 1) & v103;
      }
LABEL_279:
      size_t v128 = *(void **)(*a1 + 8 * v61);
      if (v128)
      {
        *(void *)long long v194 = *v128;
        *size_t v128 = v194;
      }
      else
      {
        *(void *)long long v194 = a1[2];
        a1[2] = v194;
        *(void *)(*a1 + 8 * v61) = v144;
        if (*(void *)v194)
        {
          unint64_t v129 = *(void *)(*(void *)v194 + 8);
          if ((v104 & (v104 - 1)) != 0)
          {
            if (v129 >= v104) {
              v129 %= v104;
            }
          }
          else
          {
            v129 &= v104 - 1;
          }
          *(void *)(*a1 + 8 * v129) = v194;
        }
      }
      *(void *)&long long v194 = 0;
      ++*v101;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100]((uint64_t)&v194, 0);
LABEL_288:
      realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v170);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)&v169);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)&v168);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v167);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)&v162);
      if (*((void *)&v161 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v161 + 1));
      }
      uint64_t v54 = v98;
      unint64_t v55 = (unint64_t)&v183;
      if (v160[1]) {
        std::__shared_weak_count::__release_weak(v160[1]);
      }
      realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> const&,realityio::LiveSceneUpdate const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>&)::$_0::operator()((uint64_t)v160, (uint64_t)&v193, (uint64_t)v53);
      a1 = v146;
      unsigned __int8 v130 = v160[0];
      unint64_t v131 = (unint64_t)v160[1];
      v160[0] = 0;
      v160[1] = 0;
      v156[0] = v130;
      v156[1] = v131;
      long long v157 = v161;
      int v158 = v162;
      if (*((void *)&v161 + 1))
      {
        unint64_t v132 = *(void *)(v161 + 8);
        if ((v131 & (v131 - 1)) != 0)
        {
          if (v132 >= v131) {
            v132 %= v131;
          }
        }
        else
        {
          v132 &= v131 - 1;
        }
        *((void *)&v130->__vftable + v132) = &v157;
        long long v161 = 0uLL;
      }
      char v159 = 1;
      uint64_t v133 = v163;
      int8x8_t v134 = v164;
      uint64_t v163 = 0;
      int8x8_t v164 = 0;
      v152[0] = v133;
      v152[1] = v134;
      v153[0] = v165;
      v153[1] = v166;
      int v154 = v167[0];
      if (v166)
      {
        unint64_t v135 = *(void *)(v165 + 8);
        if ((*(void *)&v134 & (*(void *)&v134 - 1)) != 0)
        {
          if (v135 >= *(void *)&v134) {
            v135 %= *(void *)&v134;
          }
        }
        else
        {
          v135 &= *(void *)&v134 - 1;
        }
        *(void *)(v133 + 8 * v135) = v153;
        uint64_t v165 = 0;
        uint64_t v166 = 0;
      }
      char v155 = 1;
      realityio::BuilderDependencyDAG::updateBuilderGraphNodeIOData(v146, v53, (uint64_t)v156, (uint64_t)v152);
      if (v155) {
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v152);
      }
      if (v159) {
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v156);
      }
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)&v163);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v160);
      realityio::WrappedRERef<REEngine *>::~WrappedRERef(&v181);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)v179);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)v177);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v175);
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)v173);
      if (*((void *)&v172 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v172 + 1));
      }
      if ((v184 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v184 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v182);
      goto LABEL_313;
    }
    BOOL v76 = (v67 & (v67 - 1)) != 0;
    if (v67 < 3) {
      BOOL v76 = 1;
    }
    unint64_t v77 = v76 | (2 * v67);
    unint64_t v78 = vcvtps_u32_f32(v74 / v75);
    if (v77 <= v78) {
      int8x8_t v79 = (int8x8_t)v78;
    }
    else {
      int8x8_t v79 = (int8x8_t)v77;
    }
    if (*(void *)&v79 == 1)
    {
      int8x8_t v79 = (int8x8_t)2;
    }
    else if ((*(void *)&v79 & (*(void *)&v79 - 1)) != 0)
    {
      int8x8_t v79 = (int8x8_t)std::__next_prime(*(void *)&v79);
    }
    unint64_t v67 = a1[11];
    if (*(void *)&v79 > v67) {
      goto LABEL_158;
    }
    if (*(void *)&v79 < v67)
    {
      unint64_t v86 = vcvtps_u32_f32((float)(unint64_t)a1[13] / *((float *)a1 + 28));
      if (v67 < 3 || (uint8x8_t v87 = (uint8x8_t)vcnt_s8((int8x8_t)v67), v87.i16[0] = vaddlv_u8(v87), v87.u32[0] > 1uLL))
      {
        unint64_t v86 = std::__next_prime(v86);
      }
      else
      {
        uint64_t v88 = 1 << -(char)__clz(v86 - 1);
        if (v86 >= 2) {
          unint64_t v86 = v88;
        }
      }
      if (*(void *)&v79 <= v86) {
        int8x8_t v79 = (int8x8_t)v86;
      }
      if (*(void *)&v79 >= v67)
      {
        unint64_t v67 = a1[11];
      }
      else
      {
        if (v79)
        {
LABEL_158:
          if (*(void *)&v79 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v80 = operator new(8 * *(void *)&v79);
          uint64_t v81 = (void *)a1[10];
          a1[10] = v80;
          if (v81) {
            operator delete(v81);
          }
          uint64_t v82 = 0;
          a1[11] = v79;
          do
            *(void *)(a1[10] + 8 * v82++) = 0;
          while (*(void *)&v79 != v82);
          unint64_t v83 = (void *)*v143;
          if (*v143)
          {
            unint64_t v84 = v83[1];
            uint8x8_t v85 = (uint8x8_t)vcnt_s8(v79);
            v85.i16[0] = vaddlv_u8(v85);
            if (v85.u32[0] > 1uLL)
            {
              if (v84 >= *(void *)&v79) {
                v84 %= *(void *)&v79;
              }
            }
            else
            {
              v84 &= *(void *)&v79 - 1;
            }
            *(void *)(a1[10] + 8 * v84) = v143;
            long long v89 = (void *)*v83;
            if (*v83)
            {
              do
              {
                unint64_t v90 = v89[1];
                if (v85.u32[0] > 1uLL)
                {
                  if (v90 >= *(void *)&v79) {
                    v90 %= *(void *)&v79;
                  }
                }
                else
                {
                  v90 &= *(void *)&v79 - 1;
                }
                if (v90 != v84)
                {
                  uint64_t v91 = a1[10];
                  if (!*(void *)(v91 + 8 * v90))
                  {
                    *(void *)(v91 + 8 * v90) = v83;
                    goto LABEL_183;
                  }
                  void *v83 = *v89;
                  *long long v89 = **(void **)(a1[10] + 8 * v90);
                  **(void **)(a1[10] + 8 * v90) = v89;
                  long long v89 = v83;
                }
                unint64_t v90 = v84;
LABEL_183:
                unint64_t v83 = v89;
                long long v89 = (void *)*v89;
                unint64_t v84 = v90;
              }
              while (v89);
            }
          }
          unint64_t v67 = (unint64_t)v79;
          goto LABEL_187;
        }
        uint64_t v136 = (void *)a1[10];
        a1[10] = 0;
        if (v136) {
          operator delete(v136);
        }
        unint64_t v67 = 0;
        a1[11] = 0;
      }
    }
LABEL_187:
    if ((v67 & (v67 - 1)) != 0)
    {
      if (v66 >= v67) {
        unint64_t v55 = v66 % v67;
      }
      else {
        unint64_t v55 = v66;
      }
    }
    else
    {
      unint64_t v55 = (v67 - 1) & v66;
    }
    goto LABEL_192;
  }
}

void sub_23F630018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,std::__shared_weak_count *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100](v69 - 112, 0);
  std::pair<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>::~pair(&__p);
  realityio::BuilderDependencyDAG::BuilderGraphNode::~BuilderGraphNode((realityio::BuilderDependencyDAG::BuilderGraphNode *)&a69);
  realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::~BuilderAtPrimPathQuery((realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery *)(v69 - 232));
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> const&,realityio::LiveSceneUpdate const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>&)::$_0::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a3 + 40))(&v108);
  long long v105 = 0u;
  long long v106 = 0u;
  float v107 = 1.0;
  unint64_t v5 = *(void **)(v108 + 16);
  if (v5)
  {
    uint64_t v94 = a2;
    uint64_t v93 = v3;
    do
    {
      int v7 = (uint64_t *)v5[3];
      uint64_t v6 = (uint64_t *)v5[4];
      uint64_t v92 = v5;
      unint64_t v95 = v6;
      while (v7 != v6)
      {
        *(_OWORD *)&v101.__r_.__value_.__r.__words[1] = 0u;
        long long v102 = 0u;
        float v103 = 1.0;
        uint64_t v104 = 0;
        uint64_t v8 = *v7;
        LODWORD(v101.__r_.__value_.__l.__data_) = *(_DWORD *)(*v7 + 40);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v104, (void *)(v8 + 32));
        uint64_t v9 = *v7;
        uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
        (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v98, v9, v10, *(void *)v3 + 8, *(void *)a2 + 16);
        float v103 = v99[0];
        uint64_t v11 = *(uint64_t **)&v98[16];
        std::string::size_type v12 = v101.__r_.__value_.__r.__words[2];
        if (v101.__r_.__value_.__r.__words[2])
        {
          uint64_t v13 = 0;
          do
            *(void *)(v101.__r_.__value_.__l.__size_ + 8 * v13++) = 0;
          while (v12 != v13);
          uint64_t v14 = (void *)v102;
          long long v102 = 0uLL;
          if (v14) {
            BOOL v15 = v11 == 0;
          }
          else {
            BOOL v15 = 1;
          }
          if (v15)
          {
            uint64_t v16 = v14;
          }
          else
          {
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v14 + 2), (_DWORD *)v11 + 4);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v14 + 20, (_DWORD *)v11 + 5);
              uint64_t v16 = (void *)*v14;
              std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__node_insert_multi((uint64_t)&v101.__r_.__value_.__l.__size_, (uint64_t)v14);
              uint64_t v11 = (uint64_t *)*v11;
              if (v16) {
                BOOL v17 = v11 == 0;
              }
              else {
                BOOL v17 = 1;
              }
              uint64_t v14 = v16;
            }
            while (!v17);
          }
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node((uint64_t)&v101.__r_.__value_.__l.__size_, v16);
        }
        for (; v11; uint64_t v11 = (uint64_t *)*v11)
        {
          long long v18 = operator new(0x18uLL);
          uint64_t v110 = v18;
          float v111 = (std::__shared_weak_count *)&v102;
          *long long v18 = 0;
          v18[1] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 4, (_DWORD *)v11 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 5, (_DWORD *)v11 + 5);
          char v112 = 1;
          v18[1] = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v18 + 5)+ ((*((unsigned int *)v18 + 5)+ (unint64_t)*((unsigned int *)v18 + 4)+ (*((unsigned int *)v18 + 5) + (unint64_t)*((unsigned int *)v18 + 4))* (*((unsigned int *)v18 + 5) + (unint64_t)*((unsigned int *)v18 + 4))) >> 1)));
          std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__node_insert_multi((uint64_t)&v101.__r_.__value_.__l.__size_, (uint64_t)v18);
          uint64_t v110 = 0;
          std::unique_ptr<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *>>>>::reset[abi:ne180100]((uint64_t)&v110, 0);
        }
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v98);
        uint64_t v19 = *v7;
        if (*(char *)(*v7 + 31) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v98, *(const std::string::value_type **)(v19 + 8), *(void *)(v19 + 16));
        }
        else
        {
          long long v20 = *(_OWORD *)(v19 + 8);
          *(void *)&v98[16] = *(void *)(v19 + 24);
          *(_OWORD *)std::vector<int> v98 = v20;
        }
        *(_DWORD *)&v98[24] = v101.__r_.__value_.__l.__data_;
        std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)v99, (uint64_t)&v101.__r_.__value_.__l.__size_);
        uint64_t v100 = v104;
        uint64_t v104 = 0;
        long long v21 = operator new(0x50uLL);
        uint64_t v110 = v21;
        float v111 = (std::__shared_weak_count *)&v106;
        char v112 = 0;
        void *v21 = 0;
        v21[1] = 0;
        MEMORY[0x2455CF830](v21 + 2, v98);
        *((_DWORD *)v21 + 6) = *(_DWORD *)&v98[24];
        std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)(v21 + 4), (uint64_t)v99);
        v21[9] = v100;
        uint64_t v100 = 0;
        char v112 = 1;
        unint64_t v22 = bswap64(0x9E3779B97F4A7C55 * (v21[2] & 0xFFFFFFFFFFFFFFF8));
        v21[1] = v22;
        int8x8_t v23 = *(int8x8_t *)((char *)&v105 + 8);
        float v24 = (float)(unint64_t)(*((void *)&v106 + 1) + 1);
        if (!*((void *)&v105 + 1) || (float)(v107 * (float)*((unint64_t *)&v105 + 1)) < v24)
        {
          BOOL v25 = (*((void *)&v105 + 1) & (*((void *)&v105 + 1) - 1)) != 0;
          if (*((void *)&v105 + 1) < 3uLL) {
            BOOL v25 = 1;
          }
          unint64_t v26 = v25 | (2 * *((void *)&v105 + 1));
          unint64_t v27 = vcvtps_u32_f32(v24 / v107);
          if (v26 <= v27) {
            int8x8_t prime = (int8x8_t)v27;
          }
          else {
            int8x8_t prime = (int8x8_t)v26;
          }
          if (*(void *)&prime == 1)
          {
            int8x8_t prime = (int8x8_t)2;
          }
          else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
          {
            int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            int8x8_t v23 = *(int8x8_t *)((char *)&v105 + 8);
          }
          if (*(void *)&prime > *(void *)&v23)
          {
LABEL_37:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v29 = operator new(8 * *(void *)&prime);
            long long v30 = (void *)v105;
            *(void *)&long long v105 = v29;
            if (v30) {
              operator delete(v30);
            }
            uint64_t v31 = 0;
            *((int8x8_t *)&v105 + 1) = prime;
            do
              *(void *)(v105 + 8 * v31++) = 0;
            while (*(void *)&prime != v31);
            uint64_t v32 = (void *)v106;
            if ((void)v106)
            {
              unint64_t v33 = *(void *)(v106 + 8);
              uint8x8_t v34 = (uint8x8_t)vcnt_s8(prime);
              v34.i16[0] = vaddlv_u8(v34);
              if (v34.u32[0] > 1uLL)
              {
                if (v33 >= *(void *)&prime) {
                  v33 %= *(void *)&prime;
                }
              }
              else
              {
                v33 &= *(void *)&prime - 1;
              }
              *(void *)(v105 + 8 * v33) = &v106;
              for (uint64_t i = (void *)*v32; *v32; uint64_t i = (void *)*v32)
              {
                unint64_t v39 = i[1];
                if (v34.u32[0] > 1uLL)
                {
                  if (v39 >= *(void *)&prime) {
                    v39 %= *(void *)&prime;
                  }
                }
                else
                {
                  v39 &= *(void *)&prime - 1;
                }
                if (v39 == v33)
                {
                  uint64_t v32 = i;
                }
                else
                {
                  unint64_t v40 = i;
                  if (*(void *)(v105 + 8 * v39))
                  {
                    do
                    {
                      uint64_t v41 = v40;
                      unint64_t v40 = (void *)*v40;
                    }
                    while (v40 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v40[2] & 0xFFFFFFFFFFFFFFF8));
                    *uint64_t v32 = v40;
                    *uint64_t v41 = **(void **)(v105 + 8 * v39);
                    **(void **)(v105 + 8 * v39) = i;
                  }
                  else
                  {
                    *(void *)(v105 + 8 * v39) = v32;
                    uint64_t v32 = i;
                    unint64_t v33 = v39;
                  }
                }
              }
            }
            int8x8_t v23 = prime;
            goto LABEL_67;
          }
          if (*(void *)&prime >= *(void *)&v23) {
            goto LABEL_67;
          }
          unint64_t v35 = vcvtps_u32_f32((float)*((unint64_t *)&v106 + 1) / v107);
          if (*(void *)&v23 < 3uLL || (uint8x8_t v36 = (uint8x8_t)vcnt_s8(v23), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
          {
            unint64_t v35 = std::__next_prime(v35);
          }
          else
          {
            uint64_t v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2) {
              unint64_t v35 = v37;
            }
          }
          if (*(void *)&prime <= v35) {
            int8x8_t prime = (int8x8_t)v35;
          }
          if (*(void *)&prime >= *(void *)&v23)
          {
            int8x8_t v23 = *(int8x8_t *)((char *)&v105 + 8);
LABEL_67:
            uint64_t v3 = v93;
            goto LABEL_68;
          }
          if (prime) {
            goto LABEL_37;
          }
          uint64_t v54 = (void *)v105;
          *(void *)&long long v105 = 0;
          uint64_t v3 = v93;
          if (v54) {
            operator delete(v54);
          }
          int8x8_t v23 = 0;
          *((void *)&v105 + 1) = 0;
        }
LABEL_68:
        uint8x8_t v42 = (uint8x8_t)vcnt_s8(v23);
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] > 1uLL)
        {
          unint64_t v43 = v22;
          if (*(void *)&v23 <= v22) {
            unint64_t v43 = v22 % *(void *)&v23;
          }
        }
        else
        {
          unint64_t v43 = (*(void *)&v23 - 1) & v22;
        }
        uint64_t v44 = v105;
        char v45 = *(void **)(v105 + 8 * v43);
        if (v45)
        {
          int v46 = 0;
          do
          {
            unint64_t v47 = v45;
            char v45 = (void *)*v45;
            if (!v45) {
              break;
            }
            unint64_t v48 = v45[1];
            if (v42.u32[0] > 1uLL)
            {
              unint64_t v49 = v45[1];
              if (v48 >= *(void *)&v23) {
                unint64_t v49 = v48 % *(void *)&v23;
              }
            }
            else
            {
              unint64_t v49 = v48 & (*(void *)&v23 - 1);
            }
            if (v49 != v43) {
              break;
            }
            BOOL v50 = v48 == v22 && (v45[2] & 0xFFFFFFFFFFFFFFF8) == (v21[2] & 0xFFFFFFFFFFFFFFF8);
            int v51 = v46 & !v50;
            v46 |= v50;
          }
          while (v51 != 1);
        }
        else
        {
          unint64_t v47 = 0;
        }
        unint64_t v52 = v21[1];
        if (v42.u32[0] > 1uLL)
        {
          if (v52 >= *(void *)&v23) {
            v52 %= *(void *)&v23;
          }
        }
        else
        {
          v52 &= *(void *)&v23 - 1;
        }
        if (!v47)
        {
          void *v21 = v106;
          *(void *)&long long v106 = v21;
          *(void *)(v44 + 8 * v52) = &v106;
          if (!*v21) {
            goto LABEL_104;
          }
          unint64_t v53 = *(void *)(*v21 + 8);
          if (v42.u32[0] > 1uLL)
          {
            if (v53 >= *(void *)&v23) {
              v53 %= *(void *)&v23;
            }
          }
          else
          {
            v53 &= *(void *)&v23 - 1;
          }
LABEL_103:
          *(void *)(v105 + 8 * v53) = v21;
          goto LABEL_104;
        }
        void *v21 = *v47;
        *unint64_t v47 = v21;
        if (*v21)
        {
          unint64_t v53 = *(void *)(*v21 + 8);
          if (v42.u32[0] > 1uLL)
          {
            if (v53 >= *(void *)&v23) {
              v53 %= *(void *)&v23;
            }
          }
          else
          {
            v53 &= *(void *)&v23 - 1;
          }
          if (v53 != v52) {
            goto LABEL_103;
          }
        }
LABEL_104:
        ++*((void *)&v106 + 1);
        uint64_t v110 = 0;
        std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>>>>::reset[abi:ne180100]((uint64_t)&v110);
        if ((v100 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)v99);
        a2 = v94;
        if ((v98[23] & 0x80000000) != 0) {
          operator delete(*(void **)v98);
        }
        if ((v104 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v104 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&v101.__r_.__value_.__l.__size_);
        v7 += 2;
        uint64_t v6 = v95;
      }
      unint64_t v5 = (void *)*v92;
    }
    while (*v92);
  }
  (*(void (**)(void **__return_ptr))(**(void **)v3 + 48))(&v110);
  memset(v98, 0, sizeof(v98));
  v99[0] = 1.0;
  for (unint64_t j = (void *)v110[7]; j; unint64_t j = (void *)*j)
  {
    uint64_t v97 = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v97, (void *)(j[3] + 24));
    int v56 = (long long *)j[3];
    int v57 = *((_DWORD *)v56 + 8);
    int v96 = v57;
    if (*((char *)v56 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)v56, *((void *)v56 + 1));
      int v57 = v96;
    }
    else
    {
      long long v58 = *v56;
      v101.__r_.__value_.__r.__words[2] = *((void *)v56 + 2);
      *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v58;
    }
    LODWORD(v102) = v57;
    *((void *)&v102 + 1) = v97;
    uint64_t v97 = 0;
    uint64_t v59 = operator new(0x28uLL);
    *uint64_t v59 = 0;
    v59[1] = 0;
    MEMORY[0x2455CF830](v59 + 2, &v101);
    *((_DWORD *)v59 + 6) = v102;
    v59[4] = *((void *)&v102 + 1);
    *((void *)&v102 + 1) = 0;
    unint64_t v60 = v59[2] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v61 = bswap64(0x9E3779B97F4A7C55 * v60);
    v59[1] = v61;
    int8x8_t v62 = *(int8x8_t *)&v98[8];
    if (*(void *)&v98[8])
    {
      uint8x8_t v63 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v98[8]);
      v63.i16[0] = vaddlv_u8(v63);
      if (v63.u32[0] > 1uLL)
      {
        unint64_t v64 = v61;
        if (*(void *)&v98[8] <= v61) {
          unint64_t v64 = v61 % *(void *)&v98[8];
        }
      }
      else
      {
        unint64_t v64 = v61 & (*(void *)&v98[8] - 1);
      }
      unint64_t v65 = *(void **)(*(void *)v98 + 8 * v64);
      if (v65)
      {
        for (unint64_t k = (void *)*v65; k; unint64_t k = (void *)*k)
        {
          unint64_t v67 = k[1];
          if (v67 == v61)
          {
            if ((k[2] & 0xFFFFFFFFFFFFFFF8) == v60)
            {
              std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,void *>>>::operator()[abi:ne180100](1, v59);
              goto LABEL_196;
            }
          }
          else
          {
            if (v63.u32[0] > 1uLL)
            {
              if (v67 >= *(void *)&v98[8]) {
                v67 %= *(void *)&v98[8];
              }
            }
            else
            {
              v67 &= *(void *)&v98[8] - 1;
            }
            if (v67 != v64) {
              break;
            }
          }
        }
      }
    }
    float v68 = (float)(unint64_t)(*(void *)&v98[24] + 1);
    if (!*(void *)&v98[8] || (float)(v99[0] * (float)*(unint64_t *)&v98[8]) < v68)
    {
      BOOL v69 = (*(void *)&v98[8] & (*(void *)&v98[8] - 1)) != 0;
      if (*(void *)&v98[8] < 3uLL) {
        BOOL v69 = 1;
      }
      unint64_t v70 = v69 | (2 * *(void *)&v98[8]);
      unint64_t v71 = vcvtps_u32_f32(v68 / v99[0]);
      if (v70 <= v71) {
        int8x8_t v72 = (int8x8_t)v71;
      }
      else {
        int8x8_t v72 = (int8x8_t)v70;
      }
      if (*(void *)&v72 == 1)
      {
        int8x8_t v72 = (int8x8_t)2;
      }
      else if ((*(void *)&v72 & (*(void *)&v72 - 1)) != 0)
      {
        int8x8_t v72 = (int8x8_t)std::__next_prime(*(void *)&v72);
        int8x8_t v62 = *(int8x8_t *)&v98[8];
      }
      if (*(void *)&v72 > *(void *)&v62) {
        goto LABEL_222;
      }
      if (*(void *)&v72 >= *(void *)&v62) {
        goto LABEL_182;
      }
      unint64_t v79 = vcvtps_u32_f32((float)*(unint64_t *)&v98[24] / v99[0]);
      if (*(void *)&v62 < 3uLL || (uint8x8_t v80 = (uint8x8_t)vcnt_s8(v62), v80.i16[0] = vaddlv_u8(v80), v80.u32[0] > 1uLL))
      {
        unint64_t v79 = std::__next_prime(v79);
      }
      else
      {
        uint64_t v81 = 1 << -(char)__clz(v79 - 1);
        if (v79 >= 2) {
          unint64_t v79 = v81;
        }
      }
      if (*(void *)&v72 <= v79) {
        int8x8_t v72 = (int8x8_t)v79;
      }
      if (*(void *)&v72 >= *(void *)&v62)
      {
        int8x8_t v62 = *(int8x8_t *)&v98[8];
        goto LABEL_182;
      }
      if (v72)
      {
LABEL_222:
        if (*(void *)&v72 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v73 = operator new(8 * *(void *)&v72);
        float v74 = *(void **)v98;
        *(void *)std::vector<int> v98 = v73;
        if (v74) {
          operator delete(v74);
        }
        uint64_t v75 = 0;
        *(int8x8_t *)&v98[8] = v72;
        do
          *(void *)(*(void *)v98 + 8 * v75++) = 0;
        while (*(void *)&v72 != v75);
        BOOL v76 = *(void ***)&v98[16];
        if (*(void *)&v98[16])
        {
          unint64_t v77 = *(void *)(*(void *)&v98[16] + 8);
          uint8x8_t v78 = (uint8x8_t)vcnt_s8(v72);
          v78.i16[0] = vaddlv_u8(v78);
          if (v78.u32[0] > 1uLL)
          {
            if (v77 >= *(void *)&v72) {
              v77 %= *(void *)&v72;
            }
          }
          else
          {
            v77 &= *(void *)&v72 - 1;
          }
          *(void *)(*(void *)v98 + 8 * v77) = &v98[16];
          for (m = *v76; m; unint64_t v77 = v83)
          {
            unint64_t v83 = m[1];
            if (v78.u32[0] > 1uLL)
            {
              if (v83 >= *(void *)&v72) {
                v83 %= *(void *)&v72;
              }
            }
            else
            {
              v83 &= *(void *)&v72 - 1;
            }
            if (v83 != v77)
            {
              if (!*(void *)(*(void *)v98 + 8 * v83))
              {
                *(void *)(*(void *)v98 + 8 * v83) = v76;
                goto LABEL_178;
              }
              *BOOL v76 = (void *)*m;
              *unint64_t m = **(void **)(*(void *)v98 + 8 * v83);
              **(void **)(*(void *)v98 + 8 * v83) = m;
              unint64_t m = v76;
            }
            unint64_t v83 = v77;
LABEL_178:
            BOOL v76 = (void **)m;
            unint64_t m = (void *)*m;
          }
        }
        int8x8_t v62 = v72;
      }
      else
      {
        long long v89 = *(void **)v98;
        *(void *)std::vector<int> v98 = 0;
        if (v89) {
          operator delete(v89);
        }
        int8x8_t v62 = 0;
        *(void *)&v98[8] = 0;
      }
    }
LABEL_182:
    unint64_t v84 = v59[1];
    uint8x8_t v85 = (uint8x8_t)vcnt_s8(v62);
    v85.i16[0] = vaddlv_u8(v85);
    if (v85.u32[0] > 1uLL)
    {
      if (v84 >= *(void *)&v62) {
        v84 %= *(void *)&v62;
      }
    }
    else
    {
      v84 &= *(void *)&v62 - 1;
    }
    uint64_t v86 = *(void *)v98;
    uint8x8_t v87 = *(void **)(*(void *)v98 + 8 * v84);
    if (v87)
    {
      *uint64_t v59 = *v87;
    }
    else
    {
      *uint64_t v59 = *(void *)&v98[16];
      *(void *)&v98[16] = v59;
      *(void *)(v86 + 8 * v84) = &v98[16];
      if (!*v59) {
        goto LABEL_195;
      }
      unint64_t v88 = *(void *)(*v59 + 8);
      if (v85.u32[0] > 1uLL)
      {
        if (v88 >= *(void *)&v62) {
          v88 %= *(void *)&v62;
        }
      }
      else
      {
        v88 &= *(void *)&v62 - 1;
      }
      uint8x8_t v87 = (void *)(*(void *)v98 + 8 * v88);
    }
    *uint8x8_t v87 = v59;
LABEL_195:
    ++*(void *)&v98[24];
LABEL_196:
    if ((BYTE8(v102) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v102 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
    if ((v97 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v90 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(a1, (uint64_t *)&v105);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(v90 + 40, (uint64_t *)v98);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)v98);
  if (v111) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v111);
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)&v105);
  if (v109) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v109);
  }
}

void sub_23F630E90(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(v1 - 176);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 120);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void sub_23F630E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,void *>>>::operator()[abi:ne180100](1, v36);
  if ((a36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a34 < 0) {
    operator delete(__p);
  }
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)&a19);
  unint64_t v39 = *(std::__shared_weak_count **)(v37 - 104);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(v37 - 176);
  unint64_t v40 = *(std::__shared_weak_count **)(v37 - 120);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(a1);
}

void sub_23F630F24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>>>>::reset[abi:ne180100](v39 - 112);
  std::pair<std::string,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>::~pair((uint64_t)&__p);
  if ((a38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v38);
  JUMPOUT(0x23F630FF8);
}

void sub_23F630F90(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_23F630FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  __cxa_end_catch();
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)va);
  JUMPOUT(0x23F630FD8);
}

void realityio::ImportSession::CancelledException::~CancelledException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26F33EDB8;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::exception_vtbl *)&unk_26F33EDB8;
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::exception::~exception(this);

  JUMPOUT(0x2455D2BD0);
}

std::chrono::steady_clock::time_point realityio::BuilderDependencyDAG::updateBuilderGraphNodeIOData(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::chrono::steady_clock::now();
  if (*(unsigned char *)(a3 + 40)) {
    realityio::BuilderDependencyDAG::removeInputDataForGraphNode(a1, a2);
  }
  if (*(unsigned char *)(a4 + 40)) {
    realityio::BuilderDependencyDAG::removeOutputDataForGraphNode(a1, a2);
  }
  uint64_t v8 = (std::__shared_weak_count *)a2[1];
  unint64_t v90 = *a2;
  uint64_t v91 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, &v90);
  uint64_t v84 = a4;
  if (!v9) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint8x8_t v85 = v9;
  if (v91) {
    std::__shared_weak_count::__release_weak(v91);
  }
  uint64_t v86 = a3;
  if (*(unsigned char *)(a3 + 40))
  {
    uint64_t v10 = (void **)(v85 + 6);
    if (v85[9])
    {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__deallocate_node((uint64_t)(v85 + 6), (void *)v85[8]);
      v85[8] = 0;
      uint64_t v11 = v85[7];
      if (v11)
      {
        for (uint64_t i = 0; i != v11; ++i)
          *((void *)*v10 + i) = 0;
      }
      v85[9] = 0;
    }
    uint64_t v13 = *(void **)a3;
    *(void *)a3 = 0;
    uint64_t v14 = *v10;
    *uint64_t v10 = v13;
    if (v14) {
      operator delete(v14);
    }
    BOOL v15 = *(void **)(a3 + 16);
    uint64_t v16 = *(void *)(a3 + 8);
    v85[8] = v15;
    BOOL v17 = v85 + 8;
    v85[7] = v16;
    *(void *)(a3 + 8) = 0;
    uint64_t v18 = *(void *)(a3 + 24);
    v85[9] = v18;
    *((_DWORD *)v85 + 20) = *(_DWORD *)(a3 + 32);
    if (v18)
    {
      unint64_t v19 = v15[1];
      unint64_t v20 = v85[7];
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v19 >= v20) {
          v19 %= v20;
        }
      }
      else
      {
        v19 &= v20 - 1;
      }
      *((void *)*v10 + v19) = v17;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      BOOL v15 = (void *)*v17;
    }
    for (; v15; BOOL v15 = (void *)*v15)
    {
      for (unint64_t j = (uint64_t *)v15[6]; j; unint64_t j = (uint64_t *)*j)
      {
        int v96 = 1;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v97, (_DWORD *)j + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v98, (_DWORD *)j + 5);
        uint64_t v22 = v15[9];
        uint64_t v99 = v22;
        if ((v22 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v99 &= 0xFFFFFFFFFFFFFFF8;
        }
        int8x8_t v23 = (std::__shared_weak_count *)a2[1];
        unint64_t v87 = *a2;
        unint64_t v88 = v23;
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        float v24 = (atomic_uint *)v15[2];
        long long v89 = v24;
        if ((v24 & 7) != 0)
        {
          BOOL v25 = (atomic_uint *)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v25, 2u, memory_order_relaxed) & 1) == 0) {
            long long v89 = v25;
          }
        }
        std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<realityio::BuilderDependencyDAG::SocketQuery&,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)&v90, (uint64_t)&v96, (uint64_t)&v87);
        std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_multi<std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>((uint64_t)(a1 + 5), (uint64_t)&v90);
        if ((v95 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v94) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v94);
        }
        if ((v92 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90 + 4);
        if ((v89 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v88) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        }
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
      }
    }
  }
  if (*(unsigned char *)(v84 + 40))
  {
    unint64_t v26 = (void **)(v85 + 11);
    if (v85[14])
    {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::__deallocate_node(v85 + 88, (void *)v85[13]);
      v85[13] = 0;
      uint64_t v27 = v85[12];
      if (v27)
      {
        for (uint64_t k = 0; k != v27; ++k)
          *((void *)*v26 + k) = 0;
      }
      v85[14] = 0;
    }
    unint64_t v29 = *(void **)v84;
    *(void *)uint64_t v84 = 0;
    long long v30 = *v26;
    *unint64_t v26 = v29;
    if (v30) {
      operator delete(v30);
    }
    uint64_t v31 = *(void **)(v84 + 16);
    uint64_t v32 = *(void *)(v84 + 8);
    v85[13] = v31;
    unint64_t v33 = v85 + 13;
    v85[12] = v32;
    *(void *)(v84 + 8) = 0;
    uint64_t v34 = *(void *)(v84 + 24);
    v85[14] = v34;
    *((_DWORD *)v85 + 30) = *(_DWORD *)(v84 + 32);
    if (v34)
    {
      unint64_t v35 = v31[1];
      unint64_t v36 = v85[12];
      if ((v36 & (v36 - 1)) != 0)
      {
        if (v35 >= v36) {
          v35 %= v36;
        }
      }
      else
      {
        v35 &= v36 - 1;
      }
      *((void *)*v26 + v35) = v33;
      *(void *)(v84 + 16) = 0;
      *(void *)(v84 + 24) = 0;
      uint64_t v31 = (void *)*v33;
    }
    for (; v31; uint64_t v31 = (void *)*v31)
    {
      int v96 = 0;
      uint64_t v37 = v85[4];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v97, (_DWORD *)(v37 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v98, (_DWORD *)(v37 + 12));
      uint64_t v38 = v31[4];
      uint64_t v99 = v38;
      if ((v38 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v99 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v39 = (std::__shared_weak_count *)a2[1];
      unint64_t v87 = *a2;
      unint64_t v88 = v39;
      if (v39) {
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v40 = (atomic_uint *)v31[2];
      long long v89 = v40;
      if ((v40 & 7) != 0)
      {
        uint64_t v41 = (atomic_uint *)((unint64_t)v40 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v41, 2u, memory_order_relaxed) & 1) == 0) {
          long long v89 = v41;
        }
      }
      std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<realityio::BuilderDependencyDAG::SocketQuery&,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)&v90, (uint64_t)&v96, (uint64_t)&v87);
      std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_multi<std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>((uint64_t)(a1 + 5), (uint64_t)&v90);
      if ((v95 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v94) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      }
      if ((v92 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v90 + 4);
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v88) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      }
      if ((v99 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
    }
  }
  if (*(unsigned char *)(v86 + 40))
  {
    uint8x8_t v42 = (void *)v85[8];
    if (v42)
    {
      unint64_t v43 = &v97;
      do
      {
        for (unint64_t m = (uint64_t *)v42[6]; m; unint64_t m = (uint64_t *)*m)
        {
          int v96 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v43, (_DWORD *)m + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v98, (_DWORD *)m + 5);
          uint64_t v45 = v42[9];
          uint64_t v99 = v45;
          if ((v45 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v99 &= 0xFFFFFFFFFFFFFFF8;
          }
          int v46 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(a1 + 5, (uint64_t)&v96);
          if (v46 != v47)
          {
            unint64_t v48 = v46;
            unint64_t v49 = v47;
            do
            {
              BOOL v50 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)v48 + 5);
              if (!v50) {
                std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
              }
              unint64_t v52 = (std::__shared_weak_count *)*a2;
              int v51 = (std::__shared_weak_count *)a2[1];
              if (v51) {
                atomic_fetch_add_explicit(&v51->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v53 = v42[2];
              if ((v53 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v53 &= 0xFFFFFFFFFFFFFFF8;
              }
              unint64_t v54 = v48[7];
              unint64_t v90 = v54;
              if ((v54 & 7) != 0)
              {
                unint64_t v55 = (atomic_uint *)(v54 & 0xFFFFFFFFFFFFFFF8);
                if ((atomic_fetch_add_explicit(v55, 2u, memory_order_relaxed) & 1) == 0) {
                  unint64_t v90 = (unint64_t)v55;
                }
              }
              uint64_t v91 = v52;
              uint64_t v92 = v51;
              uint64_t v93 = v53;
              std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>>((uint64_t)(v50 + 21), (uint64_t *)&v90);
              if ((v93 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (v92) {
                std::__shared_weak_count::__release_weak(v92);
              }
              if ((v90 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              int v57 = (std::__shared_weak_count *)v48[5];
              int v56 = (std::__shared_weak_count *)v48[6];
              if (v56) {
                atomic_fetch_add_explicit(&v56->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v58 = v48[7];
              if ((v58 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v58 &= 0xFFFFFFFFFFFFFFF8;
              }
              unint64_t v59 = v42[2];
              unint64_t v90 = v59;
              if ((v59 & 7) != 0)
              {
                unint64_t v60 = (atomic_uint *)(v59 & 0xFFFFFFFFFFFFFFF8);
                if ((atomic_fetch_add_explicit(v60, 2u, memory_order_relaxed) & 1) == 0) {
                  unint64_t v90 = (unint64_t)v60;
                }
              }
              uint64_t v91 = v57;
              uint64_t v92 = v56;
              uint64_t v93 = v58;
              std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ProvidingBuilder>>((uint64_t)(v85 + 16), (uint64_t *)&v90);
              if ((v93 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (v92) {
                std::__shared_weak_count::__release_weak(v92);
              }
              if ((v90 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              unint64_t v48 = (uint64_t *)*v48;
            }
            while (v48 != v49);
          }
          if ((v99 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          unint64_t v43 = (int *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
        }
        uint8x8_t v42 = (void *)*v42;
      }
      while (v42);
    }
  }
  unint64_t v61 = v85;
  if (*(unsigned char *)(v84 + 40))
  {
    int8x8_t v62 = (void *)v85[13];
    if (v62)
    {
      uint8x8_t v63 = &v97;
      unint64_t v64 = &v98;
      do
      {
        int v96 = 1;
        uint64_t v65 = v61[4];
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v63, (_DWORD *)(v65 + 8));
        unint64_t v66 = v64;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v64, (_DWORD *)(v65 + 12));
        uint64_t v67 = v62[4];
        uint64_t v99 = v67;
        if ((v67 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v99 &= 0xFFFFFFFFFFFFFFF8;
        }
        float v68 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(a1 + 5, (uint64_t)&v96);
        if (v68 != v69)
        {
          unint64_t v70 = v68;
          unint64_t v71 = v69;
          do
          {
            int8x8_t v72 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)v70 + 5);
            if (!v72) {
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
            float v74 = (std::__shared_weak_count *)*a2;
            unint64_t v73 = (std::__shared_weak_count *)a2[1];
            if (v73) {
              atomic_fetch_add_explicit(&v73->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v75 = v62[2];
            if ((v75 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v75 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v76 = v70[7];
            unint64_t v90 = v76;
            if ((v76 & 7) != 0)
            {
              unint64_t v77 = (atomic_uint *)(v76 & 0xFFFFFFFFFFFFFFF8);
              if ((atomic_fetch_add_explicit(v77, 2u, memory_order_relaxed) & 1) == 0) {
                unint64_t v90 = (unint64_t)v77;
              }
            }
            uint64_t v91 = v74;
            uint64_t v92 = v73;
            uint64_t v93 = v75;
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ProvidingBuilder>>((uint64_t)(v72 + 16), (uint64_t *)&v90);
            if ((v93 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v92) {
              std::__shared_weak_count::__release_weak(v92);
            }
            if ((v90 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v79 = (std::__shared_weak_count *)v70[5];
            uint8x8_t v78 = (std::__shared_weak_count *)v70[6];
            if (v78) {
              atomic_fetch_add_explicit(&v78->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v80 = v70[7];
            if ((v80 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v80 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v81 = v62[2];
            unint64_t v90 = v81;
            if ((v81 & 7) != 0)
            {
              uint64_t v82 = (atomic_uint *)(v81 & 0xFFFFFFFFFFFFFFF8);
              if ((atomic_fetch_add_explicit(v82, 2u, memory_order_relaxed) & 1) == 0) {
                unint64_t v90 = (unint64_t)v82;
              }
            }
            uint64_t v91 = v79;
            uint64_t v92 = v78;
            uint64_t v93 = v80;
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>>((uint64_t)(v85 + 21), (uint64_t *)&v90);
            if ((v93 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v92) {
              std::__shared_weak_count::__release_weak(v92);
            }
            if ((v90 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            unint64_t v70 = (uint64_t *)*v70;
          }
          while (v70 != v71);
        }
        if ((v99 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v64 = v66;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        unint64_t v61 = v85;
        uint8x8_t v63 = (int *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v97);
        int8x8_t v62 = (void *)*v62;
      }
      while (v62);
    }
  }
  std::chrono::steady_clock::now();
  return std::chrono::steady_clock::now();
}

void sub_23F631A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, std::__shared_weak_count *a19)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  _Unwind_Resume(exception_object);
}

void realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(uint64_t *a1, long long *a2)
{
  std::vector<std::shared_ptr<realityio::Builder>>::push_back[abi:ne180100](a1, a2);
  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(*a1, a1[1], (uint64_t)&v3, (a1[1] - *a1) >> 4);
}

uint64_t std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void *std::pair<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>::~pair(void *a1)
{
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(a1 + 24);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)(a1 + 19));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)(a1 + 14));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)(a1 + 9));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void realityio::BuilderDependencyDAG::BuilderGraphNode::~BuilderGraphNode(realityio::BuilderDependencyDAG::BuilderGraphNode *this)
{
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)this + 22);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)this + 16);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void realityio::BuilderDependencyDAG::removeInputDataForGraphNode(void *a1, unint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  unint64_t v52 = (void *)*a2;
  uint64_t v53 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v52);
  if (!v4) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  int v46 = v4;
  unint64_t v5 = (void *)v4[8];
  if (v5)
  {
    uint64_t v6 = a1 + 5;
    while (1)
    {
      int v7 = (uint64_t *)v5[6];
      if (v7) {
        break;
      }
LABEL_31:
      unint64_t v5 = (void *)*v5;
      if (!v5) {
        goto LABEL_32;
      }
    }
    while (1)
    {
      int v48 = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v49, (_DWORD *)v7 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, (_DWORD *)v7 + 5);
      uint64_t v8 = v5[9];
      uint64_t v51 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v51 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(v6, (uint64_t)&v48);
      if (v10 != v9) {
        break;
      }
LABEL_28:
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
      int v7 = (uint64_t *)*v7;
      if (!v7) {
        goto LABEL_31;
      }
    }
    uint64_t v11 = v9;
    std::string::size_type v12 = v10;
    while (1)
    {
      uint64_t v13 = (std::__shared_weak_count *)v11[6];
      if (v13 && (uint64_t v13 = std::__shared_weak_count::lock(v13)) != 0) {
        uint64_t v14 = v11[5];
      }
      else {
        uint64_t v14 = 0;
      }
      if (v14 == *a2) {
        break;
      }
      BOOL v15 = 0;
      if (v13) {
        goto LABEL_20;
      }
LABEL_21:
      if (v15)
      {
        uint64_t v16 = (uint64_t *)*v11;
        std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::remove((uint64_t)&v52, v6, v11);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v52);
        uint64_t v11 = v16;
      }
      else
      {
        uint64_t v11 = (uint64_t *)*v11;
      }
      if (v11 == v12) {
        goto LABEL_28;
      }
    }
    BOOL v15 = (v11[7] & 0xFFFFFFFFFFFFFFF8) == (v5[2] & 0xFFFFFFFFFFFFFFF8);
    if (!v13) {
      goto LABEL_21;
    }
LABEL_20:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_21;
  }
LABEL_32:
  for (uint64_t i = (void *)v46[18]; i; uint64_t i = (void *)*i)
  {
    uint64_t v18 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, i + 3);
    if (!v18) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v19 = v18;
    int8x8_t v20 = (int8x8_t)v18[22];
    if (!*(void *)&v20) {
      continue;
    }
    unint64_t v21 = i[5] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = bswap64(0x9E3779B97F4A7C55 * v21);
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(v20);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      unint64_t v24 = v22;
      if (v22 >= *(void *)&v20) {
        unint64_t v24 = v22 % *(void *)&v20;
      }
    }
    else
    {
      unint64_t v24 = v22 & (*(void *)&v20 - 1);
    }
    BOOL v25 = *(void **)(v18[21] + 8 * v24);
    if (!v25) {
      continue;
    }
    unint64_t v26 = (void *)*v25;
    if (!*v25) {
      continue;
    }
    while (1)
    {
      unint64_t v27 = v26[1];
      if (v27 == v22) {
        break;
      }
      if (v23.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&v20) {
          v27 %= *(void *)&v20;
        }
      }
      else
      {
        v27 &= *(void *)&v20 - 1;
      }
      if (v27 != v24) {
        goto LABEL_94;
      }
LABEL_49:
      unint64_t v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_94;
      }
    }
    if ((v26[2] & 0xFFFFFFFFFFFFFFF8) != v21) {
      goto LABEL_49;
    }
    uint64_t v28 = v26;
    do
      uint64_t v28 = (void *)*v28;
    while (v28 && (v28[2] & 0xFFFFFFFFFFFFFFF8) == v21);
    if (v28 != v26)
    {
      unint64_t v29 = v18 + 23;
      while (1)
      {
        long long v30 = (std::__shared_weak_count *)v26[4];
        if (v30 && (long long v30 = std::__shared_weak_count::lock(v30)) != 0) {
          uint64_t v31 = v26[3];
        }
        else {
          uint64_t v31 = 0;
        }
        if (v31 != *a2) {
          break;
        }
        BOOL v32 = (v26[5] & 0xFFFFFFFFFFFFFFF8) == (i[2] & 0xFFFFFFFFFFFFFFF8);
        if (v30) {
          goto LABEL_61;
        }
LABEL_62:
        if (v32)
        {
          int8x8_t v33 = (int8x8_t)v19[22];
          unint64_t v34 = v26[1];
          uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            if (v34 >= *(void *)&v33) {
              v34 %= *(void *)&v33;
            }
          }
          else
          {
            v34 &= *(void *)&v33 - 1;
          }
          unint64_t v36 = (void *)*v26;
          uint64_t v37 = v19[21];
          uint64_t v38 = *(void **)(v37 + 8 * v34);
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38 != v26);
          if (v39 == v29) {
            goto LABEL_105;
          }
          unint64_t v40 = v39[1];
          if (v35.u32[0] > 1uLL)
          {
            if (v40 >= *(void *)&v33) {
              v40 %= *(void *)&v33;
            }
          }
          else
          {
            v40 &= *(void *)&v33 - 1;
          }
          uint64_t v41 = *v26;
          if (v40 == v34)
          {
LABEL_85:
            if (v41) {
              goto LABEL_86;
            }
          }
          else
          {
LABEL_105:
            if (!v36) {
              goto LABEL_84;
            }
            unint64_t v42 = v36[1];
            if (v35.u32[0] > 1uLL)
            {
              if (v42 >= *(void *)&v33) {
                v42 %= *(void *)&v33;
              }
            }
            else
            {
              v42 &= *(void *)&v33 - 1;
            }
            uint64_t v41 = *v26;
            if (v42 != v34)
            {
LABEL_84:
              *(void *)(v37 + 8 * v34) = 0;
              uint64_t v41 = *v26;
              goto LABEL_85;
            }
LABEL_86:
            unint64_t v43 = *(void *)(v41 + 8);
            if (v35.u32[0] > 1uLL)
            {
              if (v43 >= *(void *)&v33) {
                v43 %= *(void *)&v33;
              }
            }
            else
            {
              v43 &= *(void *)&v33 - 1;
            }
            if (v43 != v34)
            {
              *(void *)(v19[21] + 8 * v43) = v39;
              uint64_t v41 = *v26;
            }
          }
          void *v39 = v41;
          *unint64_t v26 = 0;
          --v19[24];
          unint64_t v52 = v26;
          uint64_t v53 = (std::__shared_weak_count *)(v19 + 23);
          char v54 = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)&v52);
          goto LABEL_93;
        }
        unint64_t v36 = (void *)*v26;
LABEL_93:
        unint64_t v26 = v36;
        if (v36 == v28) {
          goto LABEL_94;
        }
      }
      BOOL v32 = 0;
      if (!v30) {
        goto LABEL_62;
      }
LABEL_61:
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      goto LABEL_62;
    }
LABEL_94:
    ;
  }
  if (v46[19])
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node((uint64_t)(v46 + 16), (void *)v46[18]);
    v46[18] = 0;
    uint64_t v44 = v46[17];
    if (v44)
    {
      for (uint64_t j = 0; j != v44; ++j)
        *(void *)(v46[16] + 8 * j) = 0;
    }
    v46[19] = 0;
  }
}

void sub_23F63216C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  _Unwind_Resume(exception_object);
}

void realityio::BuilderDependencyDAG::removeOutputDataForGraphNode(void *a1, unint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  int v50 = (void *)*a2;
  uint64_t v51 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v50);
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  uint64_t v6 = (void *)v5[13];
  if (v6)
  {
    while (1)
    {
      int v46 = 0;
      uint64_t v7 = v5[4];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v47, (_DWORD *)(v7 + 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48, (_DWORD *)(v7 + 12));
      uint64_t v8 = v6[4];
      uint64_t v49 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v49 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(a1 + 5, (uint64_t)&v46);
      if (v10 != v9) {
        break;
      }
LABEL_26:
      if ((v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_29;
      }
    }
    uint64_t v11 = v9;
    std::string::size_type v12 = v10;
    while (1)
    {
      uint64_t v13 = (std::__shared_weak_count *)v11[6];
      if (v13 && (uint64_t v13 = std::__shared_weak_count::lock(v13)) != 0) {
        uint64_t v14 = v11[5];
      }
      else {
        uint64_t v14 = 0;
      }
      if (v14 == *a2) {
        break;
      }
      BOOL v15 = 0;
      if (v13) {
        goto LABEL_18;
      }
LABEL_19:
      if (v15)
      {
        uint64_t v16 = (uint64_t *)*v11;
        std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::remove((uint64_t)&v50, a1 + 5, v11);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v50);
        uint64_t v11 = v16;
      }
      else
      {
        uint64_t v11 = (uint64_t *)*v11;
      }
      if (v11 == v12) {
        goto LABEL_26;
      }
    }
    BOOL v15 = (v11[7] & 0xFFFFFFFFFFFFFFF8) == (v6[2] & 0xFFFFFFFFFFFFFFF8);
    if (!v13) {
      goto LABEL_19;
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_19;
  }
LABEL_29:
  for (uint64_t i = (void *)v5[23]; i; uint64_t i = (void *)*i)
  {
    uint64_t v18 = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, i + 3);
    if (!v18) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    unint64_t v19 = v18;
    int8x8_t shared_weak_owners = (int8x8_t)v18[5].__shared_weak_owners_;
    if (!*(void *)&shared_weak_owners) {
      continue;
    }
    unint64_t v21 = i[5] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = bswap64(0x9E3779B97F4A7C55 * v21);
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(shared_weak_owners);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      unint64_t v24 = v22;
      if (v22 >= *(void *)&shared_weak_owners) {
        unint64_t v24 = v22 % *(void *)&shared_weak_owners;
      }
    }
    else
    {
      unint64_t v24 = v22 & (*(void *)&shared_weak_owners - 1);
    }
    BOOL v25 = *(void **)(v18[5].__shared_owners_ + 8 * v24);
    if (!v25) {
      continue;
    }
    unint64_t v26 = (void *)*v25;
    if (!*v25) {
      continue;
    }
    while (1)
    {
      unint64_t v27 = v26[1];
      if (v27 == v22) {
        break;
      }
      if (v23.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&shared_weak_owners) {
          v27 %= *(void *)&shared_weak_owners;
        }
      }
      else
      {
        v27 &= *(void *)&shared_weak_owners - 1;
      }
      if (v27 != v24) {
        goto LABEL_91;
      }
LABEL_46:
      unint64_t v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_91;
      }
    }
    if ((v26[2] & 0xFFFFFFFFFFFFFFF8) != v21) {
      goto LABEL_46;
    }
    uint64_t v28 = v26;
    do
      uint64_t v28 = (void *)*v28;
    while (v28 && (v28[2] & 0xFFFFFFFFFFFFFFF8) == v21);
    if (v28 != v26)
    {
      unint64_t v29 = &v18[6].__vftable;
      while (1)
      {
        long long v30 = (std::__shared_weak_count *)v26[4];
        if (v30 && (long long v30 = std::__shared_weak_count::lock(v30)) != 0) {
          uint64_t v31 = v26[3];
        }
        else {
          uint64_t v31 = 0;
        }
        if (v31 != *a2) {
          break;
        }
        BOOL v32 = (v26[5] & 0xFFFFFFFFFFFFFFF8) == (i[2] & 0xFFFFFFFFFFFFFFF8);
        if (v30) {
          goto LABEL_58;
        }
LABEL_59:
        if (v32)
        {
          int8x8_t v33 = (int8x8_t)v19[5].__shared_weak_owners_;
          unint64_t v34 = v26[1];
          uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33);
          v35.i16[0] = vaddlv_u8(v35);
          if (v35.u32[0] > 1uLL)
          {
            if (v34 >= *(void *)&v33) {
              v34 %= *(void *)&v33;
            }
          }
          else
          {
            v34 &= *(void *)&v33 - 1;
          }
          unint64_t v36 = (void *)*v26;
          uint64_t shared_owners = v19[5].__shared_owners_;
          uint64_t v38 = *(void **)(shared_owners + 8 * v34);
          do
          {
            uint64_t v39 = v38;
            uint64_t v38 = (void *)*v38;
          }
          while (v38 != v26);
          if (v39 == v29) {
            goto LABEL_102;
          }
          unint64_t v40 = v39[1];
          if (v35.u32[0] > 1uLL)
          {
            if (v40 >= *(void *)&v33) {
              v40 %= *(void *)&v33;
            }
          }
          else
          {
            v40 &= *(void *)&v33 - 1;
          }
          uint64_t v41 = *v26;
          if (v40 == v34)
          {
LABEL_82:
            if (v41) {
              goto LABEL_83;
            }
          }
          else
          {
LABEL_102:
            if (!v36) {
              goto LABEL_81;
            }
            unint64_t v42 = v36[1];
            if (v35.u32[0] > 1uLL)
            {
              if (v42 >= *(void *)&v33) {
                v42 %= *(void *)&v33;
              }
            }
            else
            {
              v42 &= *(void *)&v33 - 1;
            }
            uint64_t v41 = *v26;
            if (v42 != v34)
            {
LABEL_81:
              *(void *)(shared_owners + 8 * v34) = 0;
              uint64_t v41 = *v26;
              goto LABEL_82;
            }
LABEL_83:
            unint64_t v43 = *(void *)(v41 + 8);
            if (v35.u32[0] > 1uLL)
            {
              if (v43 >= *(void *)&v33) {
                v43 %= *(void *)&v33;
              }
            }
            else
            {
              v43 &= *(void *)&v33 - 1;
            }
            if (v43 != v34)
            {
              *(void *)(v19[5].__shared_owners_ + 8 * v43) = v39;
              uint64_t v41 = *v26;
            }
          }
          void *v39 = v41;
          *unint64_t v26 = 0;
          --v19[6].__shared_owners_;
          int v50 = v26;
          uint64_t v51 = v19 + 6;
          char v52 = 1;
          std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)&v50);
          goto LABEL_90;
        }
        unint64_t v36 = (void *)*v26;
LABEL_90:
        unint64_t v26 = v36;
        if (v36 == v28) {
          goto LABEL_91;
        }
      }
      BOOL v32 = 0;
      if (!v30) {
        goto LABEL_59;
      }
LABEL_58:
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      goto LABEL_59;
    }
LABEL_91:
    ;
  }
  if (v5[24])
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node((uint64_t)(v5 + 21), (void *)v5[23]);
    v5[23] = 0;
    uint64_t v44 = v5[22];
    if (v44)
    {
      for (uint64_t j = 0; j != v44; ++j)
        *(void *)(v5[21] + 8 * j) = 0;
    }
    v5[24] = 0;
  }
}

void sub_23F632664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::~pair(void *a1)
{
  uint64_t v2 = a1[5];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = a1[2];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 4);
  return a1;
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>::~pair(void *a1)
{
  uint64_t v2 = a1[3];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void realityio::BuilderDependencyDAG::topologicalSort(realityio::BuilderDependencyDAG *a1, uint64_t *a2)
{
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100](a2);
  uint64_t v65 = 0;
  unint64_t v66 = 0;
  uint64_t v67 = 0;
  uint64_t v58 = a1;
  realityio::BuilderDependencyDAG::findRoots((uint64_t)a1, (uint64_t *)&v65);
  unint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  MEMORY[0x2455CF810](&v61, realityio::kEndOfUpdateBuilderIdentifier);
  realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(a1, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v61, &v64);
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((void)v64) {
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase(&v65, &v64);
  }
  long long v61 = 0u;
  long long v62 = 0u;
  float v63 = 1.0;
  uint64_t v6 = (void *)*((void *)a1 + 2);
  if (!v6) {
    goto LABEL_53;
  }
  do
  {
    uint64_t v7 = v6[19];
    uint64_t v8 = (std::__shared_weak_count *)v6[3];
    if (v8)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (v9) {
        unint64_t v10 = v6[2];
      }
      else {
        unint64_t v10 = 0;
      }
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * v10) + 8) ^ HIDWORD(v10));
    unint64_t v12 = 0x9DDFEA08EB382D69 * (HIDWORD(v10) ^ (v11 >> 47) ^ v11);
    unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
    unint64_t v14 = *((void *)&v61 + 1);
    if (!*((void *)&v61 + 1)) {
      goto LABEL_27;
    }
    uint8x8_t v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v61 + 8));
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      if (v13 >= *((void *)&v61 + 1)) {
        unint64_t v2 = v13 % *((void *)&v61 + 1);
      }
    }
    else
    {
      unint64_t v2 = v13 & (*((void *)&v61 + 1) - 1);
    }
    uint64_t v16 = *(uint64_t ***)(v61 + 8 * v2);
    if (!v16 || (BOOL v17 = *v16) == 0)
    {
LABEL_27:
      unint64_t v19 = operator new(0x28uLL);
      *unint64_t v19 = 0;
      v19[1] = v13;
      void v19[2] = v10;
      uint64_t v19[3] = v9;
      *((_DWORD *)v19 + 8) = 0;
      float v20 = (float)(unint64_t)(*((void *)&v62 + 1) + 1);
      if (!v14 || (float)(v63 * (float)v14) < v20)
      {
        BOOL v21 = (v14 & (v14 - 1)) != 0;
        if (v14 < 3) {
          BOOL v21 = 1;
        }
        unint64_t v22 = v21 | (2 * v14);
        unint64_t v23 = vcvtps_u32_f32(v20 / v63);
        if (v22 <= v23) {
          size_t v24 = v23;
        }
        else {
          size_t v24 = v22;
        }
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)&v61, v24);
        unint64_t v14 = *((void *)&v61 + 1);
        if ((*((void *)&v61 + 1) & (*((void *)&v61 + 1) - 1)) != 0)
        {
          if (v13 >= *((void *)&v61 + 1)) {
            unint64_t v2 = v13 % *((void *)&v61 + 1);
          }
          else {
            unint64_t v2 = v13;
          }
        }
        else
        {
          unint64_t v2 = (*((void *)&v61 + 1) - 1) & v13;
        }
      }
      uint64_t v25 = v61;
      unint64_t v26 = *(void **)(v61 + 8 * v2);
      if (v26)
      {
        *unint64_t v19 = *v26;
      }
      else
      {
        *unint64_t v19 = v62;
        *(void *)&long long v62 = v19;
        *(void *)(v25 + 8 * v2) = &v62;
        if (!*v19)
        {
LABEL_48:
          ++*((void *)&v62 + 1);
          *((_DWORD *)v19 + 8) = v7;
          goto LABEL_49;
        }
        unint64_t v27 = *(void *)(*v19 + 8);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v27 >= v14) {
            v27 %= v14;
          }
        }
        else
        {
          v27 &= v14 - 1;
        }
        unint64_t v26 = (void *)(v61 + 8 * v27);
      }
      *unint64_t v26 = v19;
      goto LABEL_48;
    }
    while (1)
    {
      unint64_t v18 = v17[1];
      if (v18 == v13) {
        break;
      }
      if (v15.u32[0] > 1uLL)
      {
        if (v18 >= *((void *)&v61 + 1)) {
          v18 %= *((void *)&v61 + 1);
        }
      }
      else
      {
        v18 &= *((void *)&v61 + 1) - 1;
      }
      if (v18 != v2) {
        goto LABEL_27;
      }
LABEL_26:
      BOOL v17 = (uint64_t *)*v17;
      if (!v17) {
        goto LABEL_27;
      }
    }
    if (v17[2] != v10) {
      goto LABEL_26;
    }
    *((_DWORD *)v17 + 8) = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
LABEL_49:
    uint64_t v6 = (void *)*v6;
  }
  while (v6);
LABEL_53:
  uint64_t v28 = v65;
  uint64_t v29 = (uint64_t)v66;
  if (v65 != v66)
  {
    while (1)
    {
      uint64_t v30 = v28[1];
      *(void *)&long long v60 = *v28;
      *((void *)&v60 + 1) = v30;
      if (v30)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        uint64_t v29 = (uint64_t)v66;
      }
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(v28, v29, (uint64_t)&v59, (v29 - (uint64_t)v28) >> 4);
      unint64_t v31 = (unint64_t)v66;
      BOOL v32 = (std::__shared_weak_count *)*(v66 - 1);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      unint64_t v66 = (uint64_t *)(v31 - 16);
      std::vector<std::shared_ptr<realityio::Builder>>::push_back[abi:ne180100](a2, &v60);
      long long v59 = v60;
      if (*((void *)&v60 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v60 + 1) + 16), 1uLL, memory_order_relaxed);
      }
      int8x8_t v33 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(v58, (unint64_t *)&v59);
      if (!v33) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (*((void *)&v59 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v59 + 1));
      }
      unint64_t v34 = (void *)v33[23];
      if (v34) {
        break;
      }
LABEL_114:
      if (v65 == v66)
      {
        if ((void)v64)
        {
          realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t *)&v65, &v64);
          int v56 = (std::__shared_weak_count *)*((void *)&v64 + 1);
          long long v64 = 0uLL;
          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
        }
      }
      if (*((void *)&v60 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v60 + 1));
      }
      uint64_t v28 = v65;
      uint64_t v29 = (uint64_t)v66;
      if (v65 == v66) {
        goto LABEL_121;
      }
    }
    while (2)
    {
      long long v59 = 0uLL;
      uint8x8_t v35 = (std::__shared_weak_count *)v34[4];
      if (v35)
      {
        unint64_t v36 = std::__shared_weak_count::lock(v35);
        *((void *)&v59 + 1) = v36;
        if (v36)
        {
          unint64_t v37 = v34[3];
          *(void *)&long long v59 = v37;
        }
        else
        {
          unint64_t v37 = v59;
        }
      }
      else
      {
        unint64_t v36 = 0;
        unint64_t v37 = 0;
      }
      unint64_t v38 = 0x9DDFEA08EB382D69 * (((8 * v37) + 8) ^ HIDWORD(v37));
      unint64_t v39 = 0x9DDFEA08EB382D69 * (HIDWORD(v37) ^ (v38 >> 47) ^ v38);
      unint64_t v40 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
      unint64_t v41 = *((void *)&v61 + 1);
      if (*((void *)&v61 + 1))
      {
        uint8x8_t v42 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v61 + 8));
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] > 1uLL)
        {
          unint64_t v31 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
          if (v40 >= *((void *)&v61 + 1)) {
            unint64_t v31 = v40 % *((void *)&v61 + 1);
          }
        }
        else
        {
          unint64_t v31 = v40 & (*((void *)&v61 + 1) - 1);
        }
        unint64_t v43 = *(void **)(v61 + 8 * v31);
        if (v43)
        {
          uint64_t v44 = (void *)*v43;
          if (*v43)
          {
            do
            {
              unint64_t v45 = v44[1];
              if (v45 == v40)
              {
                if (v44[2] == v37) {
                  goto LABEL_109;
                }
              }
              else
              {
                if (v42.u32[0] > 1uLL)
                {
                  if (v45 >= *((void *)&v61 + 1)) {
                    v45 %= *((void *)&v61 + 1);
                  }
                }
                else
                {
                  v45 &= *((void *)&v61 + 1) - 1;
                }
                if (v45 != v31) {
                  break;
                }
              }
              uint64_t v44 = (void *)*v44;
            }
            while (v44);
          }
        }
      }
      int v46 = operator new(0x28uLL);
      uint64_t v44 = v46;
      void *v46 = 0;
      v46[1] = v40;
      std::string v46[2] = v37;
      void v46[3] = v36;
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v46 + 8) = 0;
      float v47 = (float)(unint64_t)(*((void *)&v62 + 1) + 1);
      if (!v41 || (float)(v63 * (float)v41) < v47)
      {
        BOOL v48 = (v41 & (v41 - 1)) != 0;
        if (v41 < 3) {
          BOOL v48 = 1;
        }
        unint64_t v49 = v48 | (2 * v41);
        unint64_t v50 = vcvtps_u32_f32(v47 / v63);
        if (v49 <= v50) {
          size_t v51 = v50;
        }
        else {
          size_t v51 = v49;
        }
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)&v61, v51);
        unint64_t v41 = *((void *)&v61 + 1);
        if ((*((void *)&v61 + 1) & (*((void *)&v61 + 1) - 1)) != 0)
        {
          if (v40 >= *((void *)&v61 + 1)) {
            unint64_t v31 = v40 % *((void *)&v61 + 1);
          }
          else {
            unint64_t v31 = v40;
          }
        }
        else
        {
          unint64_t v31 = (*((void *)&v61 + 1) - 1) & v40;
        }
      }
      uint64_t v52 = v61;
      uint64_t v53 = *(void **)(v61 + 8 * v31);
      if (v53)
      {
        *uint64_t v44 = *v53;
        goto LABEL_107;
      }
      *uint64_t v44 = v62;
      *(void *)&long long v62 = v44;
      *(void *)(v52 + 8 * v31) = &v62;
      if (*v44)
      {
        unint64_t v54 = *(void *)(*v44 + 8);
        if ((v41 & (v41 - 1)) != 0)
        {
          if (v54 >= v41) {
            v54 %= v41;
          }
        }
        else
        {
          v54 &= v41 - 1;
        }
        uint64_t v53 = (void *)(v61 + 8 * v54);
LABEL_107:
        *uint64_t v53 = v44;
      }
      ++*((void *)&v62 + 1);
LABEL_109:
      int v55 = *((_DWORD *)v44 + 8) - 1;
      *((_DWORD *)v44 + 8) = v55;
      if (!v55) {
        realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t *)&v65, &v59);
      }
      if (*((void *)&v59 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v59 + 1));
      }
      unint64_t v34 = (void *)*v34;
      if (!v34) {
        goto LABEL_114;
      }
      continue;
    }
  }
LABEL_121:
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::~__hash_table((uint64_t)&v61);
  if (*((void *)&v64 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
  }
  *(void *)&long long v61 = &v65;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
}

void sub_23F632DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,char a23)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  a15 = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::findRoots(uint64_t a1, uint64_t *a2)
{
  uint64_t v23 = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate(a2);
  *a2 = 0;
  a2[1] = 0;
  unint64_t v18 = a2;
  a2[2] = 0;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  size_t v24 = (void **)&v21;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v24);
  uint64_t v4 = *(void **)(a1 + 16);
  if (!v4) {
    return;
  }
  unint64_t v5 = (void *)(a1 + 40);
  do
  {
    uint64_t v6 = v4 + 8;
    unint64_t v19 = v4;
    while (1)
    {
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        break;
      }
      uint64_t v7 = (uint64_t *)v6[6];
      uint64_t v8 = v6[9];
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (v7)
      {
        float v20 = v6;
        while (1)
        {
          LODWORD(v21) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v21 + 1, (_DWORD *)v7 + 4);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v21 + 2, (_DWORD *)v7 + 5);
          uint64_t v22 = v8;
          if ((v8 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v22 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v9 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<realityio::BuilderDependencyDAG::SocketQuery>(v5, (uint64_t)&v21);
          if (v9 && (unint64_t v10 = v9, (v11 = (std::__shared_weak_count *)v9[6]) != 0))
          {
            unint64_t v12 = std::__shared_weak_count::lock(v11);
            unint64_t v13 = v12;
            if (v12)
            {
              uint64_t v14 = v10[5];
              atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            else
            {
              uint64_t v14 = 0;
            }
          }
          else
          {
            uint64_t v14 = 0;
            unint64_t v13 = 0;
          }
          if ((v22 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21 + 4);
          if (v13)
          {
            uint8x8_t v15 = std::__shared_weak_count::lock(v13);
            std::__shared_weak_count::__release_weak(v13);
            if (v15)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
              if (v14) {
                break;
              }
            }
          }
          uint64_t v7 = (uint64_t *)*v7;
          if (!v7)
          {
            char v16 = 0;
            goto LABEL_29;
          }
        }
        char v16 = 1;
LABEL_29:
        uint64_t v4 = v19;
        uint64_t v6 = v20;
        if ((v8 & 7) == 0) {
          goto LABEL_31;
        }
      }
      else
      {
        char v16 = 0;
        if ((v8 & 7) == 0) {
          goto LABEL_31;
        }
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
LABEL_31:
      if (v16) {
        goto LABEL_38;
      }
    }
    long long v21 = 0uLL;
    BOOL v17 = (std::__shared_weak_count *)v4[3];
    if (v17)
    {
      *((void *)&v21 + 1) = std::__shared_weak_count::lock(v17);
      if (*((void *)&v21 + 1)) {
        *(void *)&long long v21 = v4[2];
      }
    }
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(v18, &v21);
    if (*((void *)&v21 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
    }
LABEL_38:
    uint64_t v4 = (void *)*v4;
  }
  while (v4);
}

void sub_23F6330FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (v3 == v4)
  {
    uint64_t v5 = (uint64_t)v3;
  }
  else
  {
    uint64_t v5 = (uint64_t)v3;
    while (*(void *)v5 != *a2)
    {
      v5 += 16;
      if ((uint64_t *)v5 == v4)
      {
        uint64_t v5 = (uint64_t)a1[1];
        break;
      }
    }
  }
  if ((uint64_t *)v5 != v4)
  {
    if ((uint64_t *)v5 == v3)
    {
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(v3, (uint64_t)a1[1], (uint64_t)&v19, ((char *)v4 - (char *)v3) >> 4);
      char v16 = a1[1];
      BOOL v17 = (std::__shared_weak_count *)*(v16 - 1);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      a1[1] = v16 - 2;
    }
    else
    {
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *,std::shared_ptr<RIO_MTLX::Element> *>((uint64_t)&v20, (long long *)(v5 + 16), (long long *)a1[1], v5);
      uint64_t v7 = v6;
      uint64_t v8 = a1[1];
      if (v8 != v6)
      {
        do
        {
          uint64_t v9 = (std::__shared_weak_count *)*(v8 - 1);
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
          v8 -= 2;
        }
        while (v8 != v7);
      }
      a1[1] = v7;
      uint64_t v10 = (uint64_t)*a1;
      uint64_t v11 = (uint64_t)v7 - v10;
      if ((uint64_t)v7 - v10 >= 17)
      {
        uint64_t v12 = v11 >> 4;
        unint64_t v13 = (unint64_t)((v11 >> 4) - 2) >> 1;
        unint64_t v14 = v13 + 1;
        uint8x8_t v15 = (void *)(v10 + 16 * v13);
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(v10, (uint64_t)&v21, v12, v15);
          v15 -= 2;
          --v14;
        }
        while (v14);
      }
    }
  }
  return v5 != (void)v4;
}

void **std::vector<std::shared_ptr<realityio::Builder>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    uint8x8_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint8x8_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<realityio::Builder>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F633360(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::findDownstreamDependencies(void *a1, long long **a2, uint64_t *a3)
{
  BOOL v32 = 0;
  int8x8_t v33 = 0;
  unint64_t v34 = 0;
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      long long v8 = *v5;
      uint64_t v9 = *((void *)v5 + 1);
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
      }
      if ((unint64_t)v7 >= v34)
      {
        long long v29 = v8;
        uint64_t v10 = (v7 - v32) >> 4;
        if ((unint64_t)(v10 + 1) >> 60) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = (uint64_t)(v34 - (void)v32) >> 3;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if (v34 - (unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        unint64_t v38 = &v34;
        unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v34, v12);
        unint64_t v14 = &v13[16 * v10];
        *(void *)&long long v35 = v13;
        *((void *)&v35 + 1) = v14;
        unint64_t v37 = &v13[16 * v15];
        *(_OWORD *)unint64_t v14 = v29;
        unint64_t v36 = v14 + 16;
        std::vector<std::weak_ptr<realityio::Builder>>::__swap_out_circular_buffer((uint64_t *)&v32, &v35);
        uint64_t v7 = v33;
        std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer((void **)&v35);
      }
      else
      {
        *(void *)uint64_t v7 = v8;
        *((void *)v7 + 1) = v9;
        v7 += 16;
      }
      int8x8_t v33 = v7;
      ++v5;
    }
    while (v5 != v6);
  }
  unint64_t v37 = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate(a3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v36 = 0;
  long long v35 = 0uLL;
  uint64_t v30 = (void **)&v35;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v30);
  uint64_t v16 = v33;
  if (v32 != v33)
  {
    while (1)
    {
      long long v17 = v16 - 16;
      uint64_t v30 = (void **)*((void *)v16 - 2);
      unint64_t v18 = (std::__shared_weak_count *)*((void *)v16 - 1);
      unint64_t v31 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v19 = (std::__shared_weak_count *)*((void *)v16 - 1);
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      int8x8_t v33 = v17;
      unsigned int v20 = atomic_load((unsigned int *)(a1[16] + 28));
      if (v20 == 1)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v35, "findDownstreamDependenciesCancel");
        realityio::ImportSession::CancelledException::CancelledException(exception, &v35);
      }
      char v21 = v31;
      if (v31)
      {
        char v21 = std::__shared_weak_count::lock(v31);
        uint64_t v22 = v30;
        if (!v21) {
          uint64_t v22 = 0;
        }
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = (void ***)*a3;
      size_t v24 = (void ***)a3[1];
      if ((void ***)*a3 != v24)
      {
        while (*v23 != v22)
        {
          v23 += 2;
          if (v23 == v24)
          {
            uint64_t v23 = (void ***)a3[1];
            break;
          }
        }
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      uint64_t v25 = v31;
      if (v23 == v24) {
        break;
      }
      if (v31) {
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v16 = v33;
      if (v32 == v33) {
        goto LABEL_48;
      }
    }
    long long v35 = 0uLL;
    if (v31)
    {
      *((void *)&v35 + 1) = std::__shared_weak_count::lock(v31);
      if (*((void *)&v35 + 1)) {
        *(void *)&long long v35 = v30;
      }
    }
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a3, &v35);
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    unint64_t v26 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v30);
    if (!v26) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    for (uint64_t i = v26 + 23;
          ;
          std::vector<std::weak_ptr<realityio::Builder>>::push_back[abi:ne180100]((uint64_t *)&v32, (long long *)(i + 3)))
    {
      uint64_t i = (void *)*i;
      if (!i) {
        break;
      }
    }
    uint64_t v25 = v31;
    if (!v31) {
      goto LABEL_35;
    }
LABEL_34:
    std::__shared_weak_count::__release_weak(v25);
    goto LABEL_35;
  }
LABEL_48:
  *(void *)&long long v35 = &v32;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_23F633680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  a11 = &a13;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void **std::vector<std::weak_ptr<realityio::Builder>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::weak_ptr<realityio::Builder>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_23F633824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::BuilderDependencyDAG::findUnsatisfiableBuilders(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::__deallocate_node(a2, *(void **)(a2 + 16));
    *(void *)(a2 + 16) = 0;
    uint64_t v3 = *(void *)(a2 + 8);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)a2 + 8 * i) = 0;
    }
    *(void *)(a2 + 24) = 0;
  }
  memset(v87, 0, sizeof(v87));
  int v88 = 1065353216;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  realityio::BuilderDependencyDAG::findRoots((uint64_t)a1, (uint64_t *)&v84);
  unint64_t v5 = v84;
  uint64_t v6 = v85;
  if (v84 != (uint64_t *)v85)
  {
    uint64_t v76 = a2;
    unint64_t v77 = (void *)(a2 + 16);
    while (1)
    {
      uint64_t v7 = v5[1];
      *(void *)&long long v83 = *v5;
      *((void *)&v83 + 1) = v7;
      if (v7)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        uint64_t v6 = v85;
      }
      std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(v5, v6, (uint64_t)&v93, (v6 - (uint64_t)v5) >> 4);
      uint64_t v8 = v85;
      uint64_t v9 = *(std::__shared_weak_count **)(v85 - 8);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      uint64_t v85 = v8 - 16;
      long long v89 = v83;
      if (*((void *)&v83 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, (unint64_t *)&v89);
      if (!v10) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (*((void *)&v89 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v89 + 1));
      }
      std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t)v87, &v83, &v83);
      int64x2_t v81 = 0uLL;
      uint64_t v82 = 0;
      unint64_t v79 = v10;
      unint64_t v11 = (uint64_t *)v10[8];
      if (!v11) {
        goto LABEL_158;
      }
      do
      {
        if (*((_DWORD *)v11 + 6) != 1)
        {
          uint64_t v12 = (uint64_t *)v11[6];
          if (v12)
          {
            while (1)
            {
              LODWORD(v89) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v89 + 1, (_DWORD *)v12 + 4);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v89 + 2, (_DWORD *)v12 + 5);
              unint64_t v13 = v11[9];
              unint64_t v90 = v13;
              if ((v13 & 7) != 0)
              {
                char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
                unint64_t v13 = v90;
                if ((add_explicit & 1) == 0)
                {
                  unint64_t v13 = v90 & 0xFFFFFFFFFFFFFFF8;
                  v90 &= 0xFFFFFFFFFFFFFFF8;
                }
              }
              uint64_t v15 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<realityio::BuilderDependencyDAG::SocketQuery>(a1 + 5, (uint64_t)&v89);
              uint64_t v16 = v15;
              if (v15)
              {
                long long v17 = v15;
                do
                  long long v17 = (uint64_t *)*v17;
                while (v17
                     && *((_DWORD *)v17 + 4) == v89
                     && *(uint64_t *)((char *)v17 + 20) == *(void *)((char *)&v89 + 4)
                     && (v17[4] & 0xFFFFFFFFFFFFFFF8) == (v13 & 0xFFFFFFFFFFFFFFF8));
              }
              else
              {
                long long v17 = 0;
              }
              if ((v13 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89 + 4);
              if (v17 != v16) {
                break;
              }
              uint64_t v12 = (uint64_t *)*v12;
              if (!v12) {
                goto LABEL_35;
              }
            }
          }
          else
          {
LABEL_35:
            uint64_t v18 = v11[2];
            *(void *)&long long v89 = v18;
            if ((v18 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)&long long v89 = v89 & 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v19 = v11[9];
            *((void *)&v89 + 1) = v19;
            if ((v19 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *((void *)&v89 + 1) &= 0xFFFFFFFFFFFFFFF8;
            }
            std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)&v90, (uint64_t)(v11 + 4));
            uint64_t v20 = v81.i64[1];
            if (v81.i64[1] >= (unint64_t)v82)
            {
              uint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((v81.i64[1] - v81.i64[0]) >> 3);
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) > 0x492492492492492) {
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              }
              if (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v82 - v81.i64[0]) >> 3) > v23) {
                unint64_t v23 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v82 - v81.i64[0]) >> 3);
              }
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v82 - v81.i64[0]) >> 3)) >= 0x249249249249249) {
                unint64_t v24 = 0x492492492492492;
              }
              else {
                unint64_t v24 = v23;
              }
              int v96 = &v82;
              if (v24)
              {
                if (v24 > 0x492492492492492) {
                  std::__throw_bad_array_new_length[abi:ne180100]();
                }
                uint64_t v25 = (void **)operator new(56 * v24);
              }
              else
              {
                uint64_t v25 = 0;
              }
              uint64_t v93 = v25;
              v94.i64[0] = (uint64_t)&v25[7 * v22];
              v94.i64[1] = v94.i64[0];
              uint64_t v95 = &v25[7 * v24];
              std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::construct[abi:ne180100]<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo,realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>(v94.i64[0], &v89);
              uint64_t v26 = v94.i64[0];
              uint64_t v21 = v94.i64[1] + 56;
              v94.i64[1] += 56;
              int64x2_t v27 = v81;
              if (v81.i64[1] == v81.i64[0])
              {
                int64x2_t v32 = vdupq_n_s64(v81.u64[1]);
              }
              else
              {
                uint64_t v28 = 0;
                do
                {
                  uint64_t v29 = v26 + v28;
                  uint64_t v30 = *(void *)(v27.i64[1] + v28 - 56);
                  *(void *)(v26 + v28 - 56) = v30;
                  if ((v30 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    *(void *)(v29 - 56) &= 0xFFFFFFFFFFFFFFF8;
                  }
                  uint64_t v31 = *(void *)(v27.i64[1] + v28 - 48);
                  *(void *)(v29 - 48) = v31;
                  if ((v31 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    *(void *)(v29 - 48) &= 0xFFFFFFFFFFFFFFF8;
                  }
                  std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set(v26 + v28 - 40, v27.i64[1] + v28 - 40);
                  v28 -= 56;
                }
                while (v27.i64[1] + v28 != v27.i64[0]);
                int64x2_t v32 = v81;
                uint64_t v21 = v94.i64[1];
                v26 += v28;
              }
              v81.i64[0] = v26;
              v81.i64[1] = v21;
              int64x2_t v94 = v32;
              int8x8_t v33 = v82;
              uint64_t v82 = v95;
              uint64_t v95 = v33;
              uint64_t v93 = (void **)v32.i64[0];
              std::__split_buffer<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::~__split_buffer((uint64_t)&v93);
            }
            else
            {
              std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::construct[abi:ne180100]<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo,realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>((void *)v81.i64[1], &v89);
              uint64_t v21 = v20 + 56;
            }
            v81.i64[1] = v21;
            std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)&v90);
            if ((BYTE8(v89) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v89 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v89 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
        }
        unint64_t v11 = (uint64_t *)*v11;
      }
      while (v11);
      uint64_t v34 = v81.i64[1];
      long long v35 = (void *)v81.i64[0];
      uint64_t v36 = 1;
      if (v81.i64[0] == v81.i64[1]) {
        goto LABEL_158;
      }
      unint64_t v37 = (void *)v79[23];
      if (v37)
      {
        do
        {
          long long v89 = 0uLL;
          unint64_t v38 = (std::__shared_weak_count *)v37[4];
          if (v38)
          {
            *((void *)&v89 + 1) = std::__shared_weak_count::lock(v38);
            if (*((void *)&v89 + 1)) {
              *(void *)&long long v89 = v37[3];
            }
          }
          if (!std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(v87, &v89))realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t *)&v84, &v89); {
          if (*((void *)&v89 + 1))
          }
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v89 + 1));
          unint64_t v37 = (void *)*v37;
        }
        while (v37);
        uint64_t v34 = v81.i64[1];
        long long v35 = (void *)v81.i64[0];
      }
      unint64_t v39 = (void *)v83;
      long long v89 = v83;
      uint64_t v80 = (atomic_ullong *)*((void *)&v83 + 1);
      long long v83 = 0uLL;
      unint64_t v90 = (unint64_t)v35;
      uint64_t v91 = (void *)v34;
      float v74 = v82;
      uint64_t v75 = (void *)v34;
      uint64_t v92 = v82;
      uint64_t v82 = 0;
      int64x2_t v81 = 0uLL;
      unint64_t v40 = 0x9DDFEA08EB382D69 * (((8 * v89) + 8) ^ DWORD1(v89));
      unint64_t v41 = 0x9DDFEA08EB382D69 * (DWORD1(v89) ^ (v40 >> 47) ^ v40);
      unint64_t v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
      unint64_t v43 = *(void *)(v76 + 8);
      if (v43)
      {
        uint8x8_t v44 = (uint8x8_t)vcnt_s8((int8x8_t)v43);
        v44.i16[0] = vaddlv_u8(v44);
        if (v44.u32[0] > 1uLL)
        {
          unint64_t v45 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
          if (v42 >= v43) {
            unint64_t v45 = v42 % v43;
          }
        }
        else
        {
          unint64_t v45 = v42 & (v43 - 1);
        }
        uint64_t v36 = v45;
        int v46 = *(void **)(*(void *)v76 + 8 * v45);
        if (v46)
        {
          for (uint64_t j = (void *)*v46; j; uint64_t j = (void *)*j)
          {
            unint64_t v48 = j[1];
            if (v48 == v42)
            {
              if ((void *)j[2] == v39) {
                goto LABEL_156;
              }
            }
            else
            {
              if (v44.u32[0] > 1uLL)
              {
                if (v48 >= v43) {
                  v48 %= v43;
                }
              }
              else
              {
                v48 &= v43 - 1;
              }
              if (v48 != v45) {
                break;
              }
            }
          }
        }
      }
      unint64_t v49 = (void **)operator new(0x38uLL);
      uint64_t v93 = v49;
      v94.i64[0] = (uint64_t)v77;
      *unint64_t v49 = 0;
      v49[1] = (void *)v42;
      v49[2] = v39;
      v49[3] = v80;
      if (v80)
      {
        atomic_fetch_add_explicit(v80 + 1, 1uLL, memory_order_relaxed);
        long long v35 = (void *)v90;
        unint64_t v50 = v91;
        size_t v51 = v92;
      }
      else
      {
        size_t v51 = v74;
        unint64_t v50 = v75;
      }
      void v49[4] = v35;
      v49[5] = v50;
      v49[6] = v51;
      uint64_t v91 = 0;
      uint64_t v92 = 0;
      unint64_t v90 = 0;
      v94.i8[8] = 1;
      float v52 = (float)(unint64_t)(*(void *)(v76 + 24) + 1);
      float v53 = *(float *)(v76 + 32);
      if (!v43 || (float)(v53 * (float)v43) < v52) {
        break;
      }
LABEL_146:
      BOOL v69 = *(void ***)(*(void *)v76 + 8 * v36);
      unint64_t v70 = v93;
      if (v69)
      {
        *uint64_t v93 = *v69;
      }
      else
      {
        *uint64_t v93 = *(void **)(v76 + 16);
        *(void *)(v76 + 16) = v70;
        *(void *)(*(void *)v76 + 8 * v36) = v77;
        if (!*v70) {
          goto LABEL_155;
        }
        unint64_t v71 = *((void *)*v70 + 1);
        if ((v43 & (v43 - 1)) != 0)
        {
          if (v71 >= v43) {
            v71 %= v43;
          }
        }
        else
        {
          v71 &= v43 - 1;
        }
        BOOL v69 = (void **)(*(void *)v76 + 8 * v71);
      }
      *BOOL v69 = v70;
LABEL_155:
      uint64_t v93 = 0;
      ++*(void *)(v76 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v93);
LABEL_156:
      uint64_t v93 = (void **)&v90;
      std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](&v93);
      if (*((void *)&v89 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v89 + 1));
      }
LABEL_158:
      *(void *)&long long v89 = &v81;
      std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      if (*((void *)&v83 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
      }
      unint64_t v5 = v84;
      uint64_t v6 = v85;
      if (v84 == (uint64_t *)v85) {
        goto LABEL_171;
      }
    }
    BOOL v54 = (v43 & (v43 - 1)) != 0;
    if (v43 < 3) {
      BOOL v54 = 1;
    }
    unint64_t v55 = v54 | (2 * v43);
    unint64_t v56 = vcvtps_u32_f32(v52 / v53);
    if (v55 <= v56) {
      int8x8_t prime = (int8x8_t)v56;
    }
    else {
      int8x8_t prime = (int8x8_t)v55;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v43 = *(void *)(v76 + 8);
    if (*(void *)&prime > v43) {
      goto LABEL_112;
    }
    if (*(void *)&prime < v43)
    {
      unint64_t v64 = vcvtps_u32_f32((float)*(unint64_t *)(v76 + 24) / *(float *)(v76 + 32));
      if (v43 < 3 || (uint8x8_t v65 = (uint8x8_t)vcnt_s8((int8x8_t)v43), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
      {
        unint64_t v64 = std::__next_prime(v64);
      }
      else
      {
        uint64_t v66 = 1 << -(char)__clz(v64 - 1);
        if (v64 >= 2) {
          unint64_t v64 = v66;
        }
      }
      if (*(void *)&prime <= v64) {
        int8x8_t prime = (int8x8_t)v64;
      }
      if (*(void *)&prime >= v43)
      {
        unint64_t v43 = *(void *)(v76 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_112:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v58 = operator new(8 * *(void *)&prime);
          long long v59 = *(void **)v76;
          *(void *)uint64_t v76 = v58;
          if (v59) {
            operator delete(v59);
          }
          uint64_t v60 = 0;
          *(int8x8_t *)(v76 + 8) = prime;
          do
            *(void *)(*(void *)v76 + 8 * v60++) = 0;
          while (*(void *)&prime != v60);
          long long v61 = (void *)*v77;
          if (*v77)
          {
            unint64_t v62 = v61[1];
            uint8x8_t v63 = (uint8x8_t)vcnt_s8(prime);
            v63.i16[0] = vaddlv_u8(v63);
            if (v63.u32[0] > 1uLL)
            {
              if (v62 >= *(void *)&prime) {
                v62 %= *(void *)&prime;
              }
            }
            else
            {
              v62 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)v76 + 8 * v62) = v77;
            uint64_t v67 = (void *)*v61;
            if (*v61)
            {
              do
              {
                unint64_t v68 = v67[1];
                if (v63.u32[0] > 1uLL)
                {
                  if (v68 >= *(void *)&prime) {
                    v68 %= *(void *)&prime;
                  }
                }
                else
                {
                  v68 &= *(void *)&prime - 1;
                }
                if (v68 != v62)
                {
                  if (!*(void *)(*(void *)v76 + 8 * v68))
                  {
                    *(void *)(*(void *)v76 + 8 * v68) = v61;
                    goto LABEL_137;
                  }
                  *long long v61 = *v67;
                  *uint64_t v67 = **(void **)(*(void *)v76 + 8 * v68);
                  **(void **)(*(void *)v76 + 8 * v68) = v67;
                  uint64_t v67 = v61;
                }
                unint64_t v68 = v62;
LABEL_137:
                long long v61 = v67;
                uint64_t v67 = (void *)*v67;
                unint64_t v62 = v68;
              }
              while (v67);
            }
          }
          unint64_t v43 = (unint64_t)prime;
          goto LABEL_141;
        }
        int8x8_t v72 = *(void **)v76;
        *(void *)uint64_t v76 = 0;
        if (v72) {
          operator delete(v72);
        }
        unint64_t v43 = 0;
        *(void *)(v76 + 8) = 0;
      }
    }
LABEL_141:
    if ((v43 & (v43 - 1)) != 0)
    {
      if (v42 >= v43) {
        uint64_t v36 = v42 % v43;
      }
      else {
        uint64_t v36 = v42;
      }
    }
    else
    {
      uint64_t v36 = (v43 - 1) & v42;
    }
    goto LABEL_146;
  }
LABEL_171:
  *(void *)&long long v89 = &v84;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
  return std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)v87);
}

void sub_23F63424C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,std::__shared_weak_count *a34)
{
  a33 = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::shared_ptr<realityio::Builder> const,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>::~pair(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 16);
  std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t realityio::BuilderDependencyDAG::removeBuilder(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, (_DWORD *)(*a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, (_DWORD *)(v4 + 12));
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 24))(&v10);
  unint64_t v5 = std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::find<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>(a1 + 10, &v8);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1 + 10, v5, (uint64_t)&v11);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v11, 0);
  realityio::BuilderDependencyDAG::removeInputDataForGraphNode(a1, a2);
  realityio::BuilderDependencyDAG::removeOutputDataForGraphNode(a1, a2);
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  unint64_t v11 = *a2;
  uint64_t v12 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__erase_unique<std::weak_ptr<realityio::Builder>>(a1, &v11);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
}

void sub_23F63451C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::~BuilderAtPrimPathQuery((realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(a1 + 32);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__node_insert_multi(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a2 + 20)+ ((*(unsigned int *)(a2 + 20)+ (unint64_t)*(unsigned int *)(a2 + 16)+ (*(unsigned int *)(a2 + 20) + (unint64_t)*(unsigned int *)(a2 + 16))* (*(unsigned int *)(a2 + 20) + (unint64_t)*(unsigned int *)(a2 + 16))) >> 1)));
  *(void *)(a2 + 8) = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      int8x8_t prime = (int8x8_t)v10;
    }
    else {
      int8x8_t prime = (int8x8_t)v9;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v5) {
      goto LABEL_92;
    }
    if (*(void *)&prime >= v5) {
      goto LABEL_43;
    }
    unint64_t v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v19 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v19.i16[0] = vaddlv_u8(v19), v19.u32[0] > 1uLL))
    {
      unint64_t v18 = std::__next_prime(v18);
    }
    else
    {
      uint64_t v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2) {
        unint64_t v18 = v20;
      }
    }
    if (*(void *)&prime <= v18) {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = operator new(8 * *(void *)&prime);
      unint64_t v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v14 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (*(void *)&prime != v14);
      uint64_t v15 = *(void **)(a1 + 16);
      if (v15)
      {
        unint64_t v16 = v15[1];
        uint8x8_t v17 = (uint8x8_t)vcnt_s8(prime);
        v17.i16[0] = vaddlv_u8(v17);
        if (v17.u32[0] > 1uLL)
        {
          if (v16 >= *(void *)&prime) {
            v16 %= *(void *)&prime;
          }
        }
        else
        {
          v16 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v16) = a1 + 16;
        for (uint64_t i = (void *)*v15; *v15; uint64_t i = (void *)*v15)
        {
          unint64_t v22 = i[1];
          if (v17.u32[0] > 1uLL)
          {
            if (v22 >= *(void *)&prime) {
              v22 %= *(void *)&prime;
            }
          }
          else
          {
            v22 &= *(void *)&prime - 1;
          }
          if (v22 == v16)
          {
            uint64_t v15 = i;
          }
          else
          {
            unint64_t v23 = i;
            if (*(void *)(*(void *)a1 + 8 * v22))
            {
              do
              {
                unint64_t v24 = v23;
                unint64_t v23 = (void *)*v23;
              }
              while (v23 && i[2] == v23[2]);
              void *v15 = v23;
              void *v24 = **(void **)(*(void *)a1 + 8 * v22);
              **(void **)(*(void *)a1 + 8 * v22) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v22) = v15;
              uint64_t v15 = i;
              unint64_t v16 = v22;
            }
          }
        }
      }
      unint64_t v5 = (unint64_t)prime;
    }
    else
    {
      uint64_t v36 = *(void **)a1;
      *(void *)a1 = 0;
      if (v36) {
        operator delete(v36);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    unint64_t v26 = v4;
    if (v5 <= v4) {
      unint64_t v26 = v4 % v5;
    }
  }
  else
  {
    unint64_t v26 = (v5 - 1) & v4;
  }
  int64x2_t v27 = *(void **)(*(void *)a1 + 8 * v26);
  if (v27)
  {
    int v28 = 0;
    do
    {
      uint64_t v29 = v27;
      int64x2_t v27 = (void *)*v27;
      if (!v27) {
        break;
      }
      unint64_t v30 = v27[1];
      if (v25.u32[0] > 1uLL)
      {
        unint64_t v31 = v27[1];
        if (v30 >= v5) {
          unint64_t v31 = v30 % v5;
        }
      }
      else
      {
        unint64_t v31 = v30 & (v5 - 1);
      }
      if (v31 != v26) {
        break;
      }
      BOOL v32 = v30 == v4 && v27[2] == *(void *)(a2 + 16);
      int v33 = v28 & !v32;
      v28 |= v32;
    }
    while (v33 != 1);
  }
  else
  {
    uint64_t v29 = 0;
  }
  unint64_t v34 = *(void *)(a2 + 8);
  if (v25.u32[0] > 1uLL)
  {
    if (v34 >= v5) {
      v34 %= v5;
    }
  }
  else
  {
    v34 &= v5 - 1;
  }
  if (!v29)
  {
    *(void *)a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v34) = a1 + 16;
    if (!*(void *)a2) {
      goto LABEL_79;
    }
    unint64_t v35 = *(void *)(*(void *)a2 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v35 >= v5) {
        v35 %= v5;
      }
    }
    else
    {
      v35 &= v5 - 1;
    }
LABEL_78:
    *(void *)(*(void *)a1 + 8 * v35) = a2;
    goto LABEL_79;
  }
  *(void *)a2 = *v29;
  *uint64_t v29 = a2;
  if (*(void *)a2)
  {
    unint64_t v35 = *(void *)(*(void *)a2 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v35 >= v5) {
        v35 %= v5;
      }
    }
    else
    {
      v35 &= v5 - 1;
    }
    if (v35 != v34) {
      goto LABEL_78;
    }
  }
LABEL_79:
  ++*(void *)(a1 + 24);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,0>(void *a1)
{
  uint64_t v2 = a1[7];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t result = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)(a1 + 2));
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v2 = __p[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = __p[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[4];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v5 = v2[2];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *realityio::ImportSession::CancelledException::CancelledException(void *a1, long long *a2)
{
  *a1 = &unk_26F33EDB8;
  uint64_t v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_23F634CE4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>,0>(void *a1)
{
  uint64_t v2 = a1[3];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t realityio::BuilderDependencyDAG::BuilderGraphNode::BuilderGraphNode(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(a1 + 16, (uint64_t *)(a2 + 16));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__hash_table(a1 + 56, (uint64_t *)(a2 + 56));
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v6;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  if (v6)
  {
    unint64_t v7 = *(void *)(v5 + 8);
    unint64_t v8 = *(void *)(a1 + 104);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v4 + 8 * v7) = a1 + 112;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
  }
  uint64_t v9 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 136) = v9;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 144) = 0;
  uint64_t v10 = *(void *)(a2 + 152);
  *(void *)(a1 + 152) = v10;
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 160) = v11;
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  if (v11)
  {
    unint64_t v12 = *(void *)(v10 + 8);
    unint64_t v13 = *(void *)(a1 + 144);
    if ((v13 & (v13 - 1)) != 0)
    {
      if (v12 >= v13) {
        v12 %= v13;
      }
    }
    else
    {
      v12 &= v13 - 1;
    }
    *(void *)(v9 + 8 * v12) = a1 + 152;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
  }
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  return a1;
}

uint64_t std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>::pair[abi:ne180100]<realityio::BuilderDependencyDAG::SocketQuery&,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 4), (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a1 + 40) = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  return a1;
}

void realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo::~UnsatisfiedInputDescriptorInfo(realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo *this)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)this + 16);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::construct[abi:ne180100]<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo,realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>(void *a1, void *a2)
{
  *a1 = *a2;
  *a2 = 0;
  a1[1] = a2[1];
  a2[1] = 0;
  return std::unordered_set<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::unordered_set((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t result = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table((uint64_t)(a2 + 2));
  uint64_t v4 = a2[1];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t std::__split_buffer<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 56;
    std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::destroy[abi:ne180100](v4, (void *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::weak_ptr<realityio::Builder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<realityio::Builder>>,std::reverse_iterator<std::weak_ptr<realityio::Builder>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::weak_ptr<realityio::Builder>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::weak_ptr<realityio::Builder>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder>>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v14;
  *long long v14 = i;
  *(void *)(v21 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23F6356A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<realityio::BuilderDependencyDAG::SocketQuery>(void *a1, uint64_t a2)
{
  unint64_t v4 = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()((unsigned int *)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
    {
      unint64_t v9 = i[1];
      if (v4 == v9)
      {
        if (*((_DWORD *)i + 4) == *(_DWORD *)a2
          && *(uint64_t *)((char *)i + 20) == *(void *)(a2 + 4)
          && (i[4] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8))
        {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v5) {
            v9 %= *(void *)&v5;
          }
        }
        else
        {
          v9 &= *(void *)&v5 - 1;
        }
        if (v9 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

unint64_t realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()(unsigned int *a1)
{
  unint64_t v1 = (((unint64_t)*a1 << 6)
      + ((unint64_t)*a1 >> 2)
      - 0x61C8864680B583E9
      + bswap64(0x9E3779B97F4A7C55* (a1[2]+ ((a1[2] + (unint64_t)a1[1] + (a1[2] + (unint64_t)a1[1]) * (a1[2] + (unint64_t)a1[1])) >> 1)))) ^ *a1;
  return (bswap64(0x9E3779B97F4A7C55 * (*((void *)a1 + 2) & 0xFFFFFFFFFFFFFFF8))
        + (v1 << 6)
        + (v1 >> 2)
        - 0x61C8864680B583E9) ^ v1;
}

void *std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(void *a1, unint64_t *a2)
{
  unint64_t v4 = realityio::WeakBuilderPtrHash::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v6 == v13)
      {
        if (realityio::WeakBuilderPtrEqual::operator()(v12, v11 + 2, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;

  unint64_t v4 = realityio::WeakBuilderPtrHash::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint8x8_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void *)*v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = v11[1];
      if (v13 == v6)
      {
        if (realityio::WeakBuilderPtrEqual::operator()(v12, v11 + 2, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t realityio::WeakBuilderPtrHash::operator()(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (v2)
  {
    unint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4) {
      unint64_t v5 = *a2;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    unint64_t v5 = 0;
  }
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(v5) ^ (v6 >> 47) ^ v6);
  return 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
}

BOOL realityio::WeakBuilderPtrEqual::operator()(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    unint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6) {
      uint64_t v7 = *a2;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
  }
  unint64_t v8 = (std::__shared_weak_count *)a3[1];
  if (v8)
  {
    unint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      BOOL v10 = v7 == *a3;
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (!v6) {
        return v10;
      }
      goto LABEL_11;
    }
  }
  BOOL v10 = v7 == 0;
  if (v6) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v10;
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::__equal_range_multi<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * (a3 & 0xFFFFFFFFFFFFFFF8));
  uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= a2) {
      unint64_t v6 = v4 % a2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (a2 - 1);
  }
  unint64_t v8 = *(void **)(a1 + 8 * v6);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (!*v8) {
    return result;
  }
  while (1)
  {
    unint64_t v9 = result[1];
    if (v4 == v9) {
      break;
    }
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= a2) {
        v9 %= a2;
      }
    }
    else
    {
      v9 &= a2 - 1;
    }
    if (v9 != v6) {
      return 0;
    }
LABEL_18:
    uint64_t result = (void *)*result;
    if (!result) {
      return result;
    }
  }
  if ((result[2] & 0xFFFFFFFFFFFFFFF8) != v3) {
    goto LABEL_18;
  }
  BOOL v10 = result;
  do
    BOOL v10 = (void *)*v10;
  while (v10 && (v10[2] & 0xFFFFFFFFFFFFFFF8) == v3);
  return result;
}

void std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

BOOL realityio::operator==(uint64_t a1, int8x8_t *a2)
{
  if (*(_DWORD *)a1 == a2->i32[0] && *(void *)(a1 + 32) == *(void *)&a2[4])
  {
    uint64_t v2 = *(uint64_t ***)(a1 + 24);
    if (!v2) {
      return (*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) == (*(void *)&a2[6] & 0xFFFFFFFFFFFFFFF8);
    }
    int8x8_t v3 = a2[2];
    if (v3)
    {
      uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
      v4.i16[0] = vaddlv_u8(v4);
      uint64_t v5 = *(void *)&v3 - 1;
LABEL_6:
      unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (*((unsigned int *)v2 + 5)+ ((*((unsigned int *)v2 + 5)+ (unint64_t)*((unsigned int *)v2 + 4)+ (*((unsigned int *)v2 + 5) + (unint64_t)*((unsigned int *)v2 + 4))* (*((unsigned int *)v2 + 5) + (unint64_t)*((unsigned int *)v2 + 4))) >> 1)));
      if (v4.u32[0] > 1uLL)
      {
        unint64_t v7 = v6;
        if (v6 >= *(void *)&v3) {
          unint64_t v7 = v6 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v7 = v6 & v5;
      }
      unint64_t v8 = *(void **)(*(void *)&a2[1] + 8 * v7);
      if (!v8) {
        return 0;
      }
      unint64_t v9 = (void *)*v8;
      if (!v9) {
        return 0;
      }
      do
      {
        unint64_t v10 = v9[1];
        if (v6 == v10)
        {
          if ((uint64_t *)v9[2] == v2[2])
          {
            uint64_t v2 = (uint64_t **)*v2;
            if (!v2) {
              return (*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8) == (*(void *)&a2[6] & 0xFFFFFFFFFFFFFFF8);
            }
            goto LABEL_6;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v10 >= *(void *)&v3) {
              v10 %= *(void *)&v3;
            }
          }
          else
          {
            v10 &= v5;
          }
          if (v10 != v7) {
            return 0;
          }
        }
        unint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
  }
  return 0;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v6 = v4 >> 1;
    unint64_t v7 = (void *)(a1 + 16 * (v4 >> 1));
    unint64_t v8 = (void *)(a2 - 16);
    uint64_t v9 = *(void *)(a2 - 16);
    if (*(_DWORD *)(*v7 + 176) > *(_DWORD *)(v9 + 176))
    {
      uint64_t v10 = *(void *)(a2 - 8);
      void *v8 = 0;
      *(void *)(a2 - 8) = 0;
      uint64_t v11 = *v7;
      do
      {
        uint64_t v12 = v7;
        uint64_t v13 = v7[1];
        void *v12 = 0;
        v12[1] = 0;
        long long v14 = (std::__shared_weak_count *)v8[1];
        void *v8 = v11;
        v8[1] = v13;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        unint64_t v7 = (void *)(a1 + 16 * v6);
        uint64_t v11 = *v7;
        unint64_t v8 = v12;
      }
      while (*(_DWORD *)(*v7 + 176) > *(_DWORD *)(v9 + 176));
      float v15 = (std::__shared_weak_count *)v12[1];
      void *v12 = v9;
      v12[1] = v10;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,realityio::BuilderDependencyDAG::BuilderGraphNode>,0>(v2 + 2);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,realityio::BuilderDependencyDAG::BuilderGraphNode>,0>(void *a1)
{
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(a1 + 24);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)(a1 + 19));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::~__hash_table((uint64_t)(a1 + 14));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedOutputDescriptorData>>>::~__hash_table((uint64_t)(a1 + 9));
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ComputedInputDescriptorData>>>::~__hash_table((uint64_t)(a1 + 4));
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__equal_range_multi<realityio::BuilderDependencyDAG::SocketQuery>(void *a1, uint64_t a2)
{
  unint64_t v4 = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()((unsigned int *)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v8 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t result = *v9;
  if (!*v9) {
    return result;
  }
  while (1)
  {
    unint64_t v11 = result[1];
    if (v11 == v6) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v5) {
        v11 %= *(void *)&v5;
      }
    }
    else
    {
      v11 &= *(void *)&v5 - 1;
    }
    if (v11 != v8) {
      return 0;
    }
LABEL_18:
    uint64_t result = (uint64_t *)*result;
    if (!result) {
      return result;
    }
  }
  if (*((_DWORD *)result + 4) != *(_DWORD *)a2
    || *(uint64_t *)((char *)result + 20) != *(void *)(a2 + 4)
    || (result[4] & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8))
  {
    goto LABEL_18;
  }
  uint64_t v12 = result;
  do
    uint64_t v12 = (uint64_t *)*v12;
  while (v12
       && *((_DWORD *)v12 + 4) == *(_DWORD *)a2
       && *(uint64_t *)((char *)v12 + 20) == *(void *)(a2 + 4)
       && (v12[4] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8));
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  unint64_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    uint8x8_t v7 = v6;
    unint64_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  void *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)uint64_t result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::SocketQuery const,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::SocketQuery const,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,0>(void *a1)
{
  uint64_t v2 = a1[5];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  int8x8_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = a1[2];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 4);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__emplace_multi<std::pair<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::shared_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t ***)(a1 + 16);
  uint8x8_t v5 = (char *)operator new(0x40uLL);
  v44[0] = v5;
  v44[1] = v4;
  *((_DWORD *)v5 + 4) = *(_DWORD *)a2;
  unint64_t v6 = (unsigned int *)(v5 + 16);
  *(void *)uint8x8_t v5 = 0;
  *((void *)v5 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 5, (_DWORD *)(a2 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5 + 6, (_DWORD *)(a2 + 8));
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *((void *)v5 + 4) = v7;
  *((void *)v5 + 5) = v8;
  uint64_t v9 = *(void *)(a2 + 32);
  *((void *)v5 + 6) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  *((void *)v5 + 7) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  char v45 = 1;
  *((void *)v5 + 1) = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()(v6);
  unint64_t v10 = realityio::BuilderDependencyDAG::SocketQuery::Hash::operator()(v6);
  *((void *)v5 + 1) = v10;
  unint64_t v11 = *(void *)(a1 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v11 || (float)(v13 * (float)v11) < v12)
  {
    BOOL v14 = 1;
    if (v11 >= 3) {
      BOOL v14 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v11);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v11) {
      goto LABEL_98;
    }
    if (*(void *)&prime >= v11) {
      goto LABEL_47;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v11 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v11)
    {
      unint64_t v11 = *(void *)(a1 + 8);
      goto LABEL_47;
    }
    if (prime)
    {
LABEL_98:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v18 = operator new(8 * *(void *)&prime);
      unint64_t v19 = *(void **)a1;
      *(void *)a1 = v18;
      if (v19) {
        operator delete(v19);
      }
      uint64_t v20 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v20++) = 0;
      while (*(void *)&prime != v20);
      uint64_t v21 = *v4;
      if (*v4)
      {
        unint64_t v22 = (unint64_t)v21[1];
        uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          if (v22 >= *(void *)&prime) {
            v22 %= *(void *)&prime;
          }
        }
        else
        {
          v22 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v22) = v4;
        for (uint64_t i = *v21; *v21; uint64_t i = *v21)
        {
          unint64_t v28 = i[1];
          if (v23.u32[0] > 1uLL)
          {
            if (v28 >= *(void *)&prime) {
              v28 %= *(void *)&prime;
            }
          }
          else
          {
            v28 &= *(void *)&prime - 1;
          }
          if (v28 == v22)
          {
            uint64_t v21 = (uint64_t **)i;
          }
          else
          {
            uint64_t v29 = i;
            if (*(void *)(*(void *)a1 + 8 * v28))
            {
              do
              {
                unint64_t v30 = v29;
                uint64_t v29 = (uint64_t *)*v29;
              }
              while (v29
                   && *((_DWORD *)i + 4) == *((_DWORD *)v29 + 4)
                   && *(uint64_t *)((char *)i + 20) == *(uint64_t *)((char *)v29 + 20)
                   && (i[4] & 0xFFFFFFFFFFFFFFF8) == (v29[4] & 0xFFFFFFFFFFFFFFF8));
              std::__shared_weak_count *v21 = v29;
              *unint64_t v30 = **(void **)(*(void *)a1 + 8 * v28);
              **(void **)(*(void *)a1 + 8 * v28) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v28) = v21;
              uint64_t v21 = (uint64_t **)i;
              unint64_t v22 = v28;
            }
          }
        }
      }
      unint64_t v11 = (unint64_t)prime;
    }
    else
    {
      unint64_t v43 = *(void **)a1;
      *(void *)a1 = 0;
      if (v43) {
        operator delete(v43);
      }
      unint64_t v11 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_47:
  uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    unint64_t v32 = v10;
    if (v11 <= v10) {
      unint64_t v32 = v10 % v11;
    }
  }
  else
  {
    unint64_t v32 = (v11 - 1) & v10;
  }
  int v33 = *(void **)a1;
  unint64_t v34 = *(uint64_t **)(*(void *)a1 + 8 * v32);
  if (v34)
  {
    int v35 = 0;
    do
    {
      uint64_t v36 = v34;
      unint64_t v34 = (uint64_t *)*v34;
      if (!v34) {
        break;
      }
      unint64_t v37 = v34[1];
      if (v31.u32[0] > 1uLL)
      {
        unint64_t v38 = v34[1];
        if (v37 >= v11) {
          unint64_t v38 = v37 % v11;
        }
      }
      else
      {
        unint64_t v38 = v37 & (v11 - 1);
      }
      if (v38 != v32) {
        break;
      }
      BOOL v39 = v37 == v10
         && *((_DWORD *)v34 + 4) == *((_DWORD *)v5 + 4)
         && *(uint64_t *)((char *)v34 + 20) == *(void *)(v5 + 20)
         && (v34[4] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 4) & 0xFFFFFFFFFFFFFFF8);
      int v40 = v35 & !v39;
      v35 |= v39;
    }
    while (v40 != 1);
  }
  else
  {
    uint64_t v36 = 0;
  }
  unint64_t v41 = *((void *)v5 + 1);
  if (v31.u32[0] > 1uLL)
  {
    if (v41 >= v11) {
      v41 %= v11;
    }
  }
  else
  {
    v41 &= v11 - 1;
  }
  if (!v36)
  {
    *(void *)uint8x8_t v5 = *v4;
    *uint64_t v4 = (uint64_t **)v5;
    v33[v41] = v4;
    if (!*(void *)v5) {
      goto LABEL_85;
    }
    unint64_t v42 = *(void *)(*(void *)v5 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
LABEL_84:
    *(void *)(*(void *)a1 + 8 * v42) = v5;
    goto LABEL_85;
  }
  *(void *)uint8x8_t v5 = *v36;
  *uint64_t v36 = v5;
  if (*(void *)v5)
  {
    unint64_t v42 = *(void *)(*(void *)v5 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
    if (v42 != v41) {
      goto LABEL_84;
    }
  }
LABEL_85:
  ++*(void *)(a1 + 24);
  v44[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)v44);
}

void sub_23F636A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::DependentBuilder>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void **)(a1 + 16);
  uint8x8_t v5 = (char *)operator new(0x30uLL);
  unint64_t v6 = v5;
  v44[0] = v5;
  v44[1] = v4;
  *(void *)uint8x8_t v5 = 0;
  *((void *)v5 + 1) = 0;
  uint64_t v7 = *a2;
  *((void *)v5 + 2) = *a2;
  if ((v7 & 7) != 0)
  {
    char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    uint64_t v7 = *((void *)v5 + 2);
    if ((add_explicit & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      *((void *)v5 + 2) = v7;
    }
  }
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 1);
  uint64_t v9 = a2[3];
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  *((void *)v5 + 5) = v9;
  char v45 = 1;
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (v7 & 0xFFFFFFFFFFFFFFF8));
  *((void *)v5 + 1) = v10;
  unint64_t v11 = *(void *)(a1 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v11 || (float)(v13 * (float)v11) < v12)
  {
    BOOL v14 = 1;
    if (v11 >= 3) {
      BOOL v14 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v11);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v11) {
      goto LABEL_95;
    }
    if (*(void *)&prime >= v11) {
      goto LABEL_46;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v11 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v11)
    {
      unint64_t v11 = *(void *)(a1 + 8);
      goto LABEL_46;
    }
    if (prime)
    {
LABEL_95:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v18 = operator new(8 * *(void *)&prime);
      unint64_t v19 = *(void **)a1;
      *(void *)a1 = v18;
      if (v19) {
        operator delete(v19);
      }
      uint64_t v20 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v20++) = 0;
      while (*(void *)&prime != v20);
      uint64_t v21 = *v4;
      if (*v4)
      {
        unint64_t v22 = v21[1];
        uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          if (v22 >= *(void *)&prime) {
            v22 %= *(void *)&prime;
          }
        }
        else
        {
          v22 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v22) = v4;
        for (uint64_t i = (void *)*v21; *v21; uint64_t i = (void *)*v21)
        {
          unint64_t v28 = i[1];
          if (v23.u32[0] > 1uLL)
          {
            if (v28 >= *(void *)&prime) {
              v28 %= *(void *)&prime;
            }
          }
          else
          {
            v28 &= *(void *)&prime - 1;
          }
          if (v28 == v22)
          {
            uint64_t v21 = i;
          }
          else
          {
            uint64_t v29 = i;
            if (*(void *)(*(void *)a1 + 8 * v28))
            {
              do
              {
                unint64_t v30 = v29;
                uint64_t v29 = (void *)*v29;
              }
              while (v29 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v29[2] & 0xFFFFFFFFFFFFFFF8));
              void *v21 = v29;
              *unint64_t v30 = **(void **)(*(void *)a1 + 8 * v28);
              **(void **)(*(void *)a1 + 8 * v28) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v28) = v21;
              uint64_t v21 = i;
              unint64_t v22 = v28;
            }
          }
        }
      }
      unint64_t v11 = (unint64_t)prime;
    }
    else
    {
      unint64_t v43 = *(void **)a1;
      *(void *)a1 = 0;
      if (v43) {
        operator delete(v43);
      }
      unint64_t v11 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_46:
  uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    unint64_t v32 = v10;
    if (v11 <= v10) {
      unint64_t v32 = v10 % v11;
    }
  }
  else
  {
    unint64_t v32 = (v11 - 1) & v10;
  }
  int v33 = *(void **)a1;
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v32);
  if (v34)
  {
    int v35 = 0;
    do
    {
      uint64_t v36 = v34;
      unint64_t v34 = (void *)*v34;
      if (!v34) {
        break;
      }
      unint64_t v37 = v34[1];
      if (v31.u32[0] > 1uLL)
      {
        unint64_t v38 = v34[1];
        if (v37 >= v11) {
          unint64_t v38 = v37 % v11;
        }
      }
      else
      {
        unint64_t v38 = v37 & (v11 - 1);
      }
      if (v38 != v32) {
        break;
      }
      BOOL v39 = v37 == v10 && (v34[2] & 0xFFFFFFFFFFFFFFF8) == (v6[2] & 0xFFFFFFFFFFFFFFF8);
      int v40 = v35 & !v39;
      v35 |= v39;
    }
    while (v40 != 1);
  }
  else
  {
    uint64_t v36 = 0;
  }
  unint64_t v41 = v6[1];
  if (v31.u32[0] > 1uLL)
  {
    if (v41 >= v11) {
      v41 %= v11;
    }
  }
  else
  {
    v41 &= v11 - 1;
  }
  if (!v36)
  {
    *unint64_t v6 = *v4;
    *uint64_t v4 = v6;
    v33[v41] = v4;
    if (!*v6) {
      goto LABEL_82;
    }
    unint64_t v42 = *(void *)(*v6 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
LABEL_81:
    *(void *)(*(void *)a1 + 8 * v42) = v6;
    goto LABEL_82;
  }
  *unint64_t v6 = *v36;
  *uint64_t v36 = v6;
  if (*v6)
  {
    unint64_t v42 = *(void *)(*v6 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
    if (v42 != v41) {
      goto LABEL_81;
    }
  }
LABEL_82:
  ++*(void *)(a1 + 24);
  v44[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v44);
}

void sub_23F636EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::ProvidingBuilder>>>::__emplace_multi<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::BuilderDependencyDAG::ProvidingBuilder>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (void **)(a1 + 16);
  uint8x8_t v5 = (char *)operator new(0x30uLL);
  unint64_t v6 = v5;
  v44[0] = v5;
  v44[1] = v4;
  *(void *)uint8x8_t v5 = 0;
  *((void *)v5 + 1) = 0;
  uint64_t v7 = *a2;
  *((void *)v5 + 2) = *a2;
  if ((v7 & 7) != 0)
  {
    char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    uint64_t v7 = *((void *)v5 + 2);
    if ((add_explicit & 1) == 0)
    {
      v7 &= 0xFFFFFFFFFFFFFFF8;
      *((void *)v5 + 2) = v7;
    }
  }
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 1);
  uint64_t v9 = a2[3];
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  *((void *)v5 + 5) = v9;
  char v45 = 1;
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (v7 & 0xFFFFFFFFFFFFFFF8));
  *((void *)v5 + 1) = v10;
  unint64_t v11 = *(void *)(a1 + 8);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v11 || (float)(v13 * (float)v11) < v12)
  {
    BOOL v14 = 1;
    if (v11 >= 3) {
      BOOL v14 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v11);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v11) {
      goto LABEL_95;
    }
    if (*(void *)&prime >= v11) {
      goto LABEL_46;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v11 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v11)
    {
      unint64_t v11 = *(void *)(a1 + 8);
      goto LABEL_46;
    }
    if (prime)
    {
LABEL_95:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v18 = operator new(8 * *(void *)&prime);
      unint64_t v19 = *(void **)a1;
      *(void *)a1 = v18;
      if (v19) {
        operator delete(v19);
      }
      uint64_t v20 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v20++) = 0;
      while (*(void *)&prime != v20);
      uint64_t v21 = *v4;
      if (*v4)
      {
        unint64_t v22 = v21[1];
        uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
        v23.i16[0] = vaddlv_u8(v23);
        if (v23.u32[0] > 1uLL)
        {
          if (v22 >= *(void *)&prime) {
            v22 %= *(void *)&prime;
          }
        }
        else
        {
          v22 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v22) = v4;
        for (uint64_t i = (void *)*v21; *v21; uint64_t i = (void *)*v21)
        {
          unint64_t v28 = i[1];
          if (v23.u32[0] > 1uLL)
          {
            if (v28 >= *(void *)&prime) {
              v28 %= *(void *)&prime;
            }
          }
          else
          {
            v28 &= *(void *)&prime - 1;
          }
          if (v28 == v22)
          {
            uint64_t v21 = i;
          }
          else
          {
            uint64_t v29 = i;
            if (*(void *)(*(void *)a1 + 8 * v28))
            {
              do
              {
                unint64_t v30 = v29;
                uint64_t v29 = (void *)*v29;
              }
              while (v29 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v29[2] & 0xFFFFFFFFFFFFFFF8));
              void *v21 = v29;
              *unint64_t v30 = **(void **)(*(void *)a1 + 8 * v28);
              **(void **)(*(void *)a1 + 8 * v28) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v28) = v21;
              uint64_t v21 = i;
              unint64_t v22 = v28;
            }
          }
        }
      }
      unint64_t v11 = (unint64_t)prime;
    }
    else
    {
      unint64_t v43 = *(void **)a1;
      *(void *)a1 = 0;
      if (v43) {
        operator delete(v43);
      }
      unint64_t v11 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_46:
  uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v31.i16[0] = vaddlv_u8(v31);
  if (v31.u32[0] > 1uLL)
  {
    unint64_t v32 = v10;
    if (v11 <= v10) {
      unint64_t v32 = v10 % v11;
    }
  }
  else
  {
    unint64_t v32 = (v11 - 1) & v10;
  }
  int v33 = *(void **)a1;
  unint64_t v34 = *(void **)(*(void *)a1 + 8 * v32);
  if (v34)
  {
    int v35 = 0;
    do
    {
      uint64_t v36 = v34;
      unint64_t v34 = (void *)*v34;
      if (!v34) {
        break;
      }
      unint64_t v37 = v34[1];
      if (v31.u32[0] > 1uLL)
      {
        unint64_t v38 = v34[1];
        if (v37 >= v11) {
          unint64_t v38 = v37 % v11;
        }
      }
      else
      {
        unint64_t v38 = v37 & (v11 - 1);
      }
      if (v38 != v32) {
        break;
      }
      BOOL v39 = v37 == v10 && (v34[2] & 0xFFFFFFFFFFFFFFF8) == (v6[2] & 0xFFFFFFFFFFFFFFF8);
      int v40 = v35 & !v39;
      v35 |= v39;
    }
    while (v40 != 1);
  }
  else
  {
    uint64_t v36 = 0;
  }
  unint64_t v41 = v6[1];
  if (v31.u32[0] > 1uLL)
  {
    if (v41 >= v11) {
      v41 %= v11;
    }
  }
  else
  {
    v41 &= v11 - 1;
  }
  if (!v36)
  {
    *unint64_t v6 = *v4;
    *uint64_t v4 = v6;
    v33[v41] = v4;
    if (!*v6) {
      goto LABEL_82;
    }
    unint64_t v42 = *(void *)(*v6 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
LABEL_81:
    *(void *)(*(void *)a1 + 8 * v42) = v6;
    goto LABEL_82;
  }
  *unint64_t v6 = *v36;
  *uint64_t v36 = v6;
  if (*v6)
  {
    unint64_t v42 = *(void *)(*v6 + 8);
    if (v31.u32[0] > 1uLL)
    {
      if (v42 >= v11) {
        v42 %= v11;
      }
    }
    else
    {
      v42 &= v11 - 1;
    }
    if (v42 != v41) {
      goto LABEL_81;
    }
  }
LABEL_82:
  ++*(void *)(a1 + 24);
  v44[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)v44);
}

void sub_23F6373CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::BuilderDependencyDAG::DependentBuilder>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint8x8_t v5 = a4;
    uint64_t v7 = (uint64_t)a4 - a1;
    uint64_t v8 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      uint64_t v10 = v7 >> 3;
      uint64_t v11 = (v7 >> 3) | 1;
      float v12 = (void *)(a1 + 16 * v11);
      uint64_t v13 = v10 + 2;
      if (v10 + 2 >= a3)
      {
        uint64_t v14 = *v12;
      }
      else
      {
        uint64_t v14 = *v12;
        if (*(_DWORD *)(*v12 + 176) > *(_DWORD *)(v12[2] + 176))
        {
          uint64_t v14 = v12[2];
          v12 += 2;
          uint64_t v11 = v13;
        }
      }
      uint64_t v15 = *a4;
      if (*(_DWORD *)(v14 + 176) <= *(_DWORD *)(*a4 + 176))
      {
        uint64_t v16 = a4[1];
        *a4 = 0;
        a4[1] = 0;
        uint64_t v17 = *v12;
        do
        {
          unint64_t v18 = v5;
          uint8x8_t v5 = v12;
          uint64_t v19 = v12[1];
          *uint8x8_t v5 = 0;
          v5[1] = 0;
          uint64_t v20 = (std::__shared_weak_count *)v18[1];
          *unint64_t v18 = v17;
          v18[1] = v19;
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          if (v8 < v11) {
            break;
          }
          float v12 = (void *)(a1 + 16 * ((2 * v11) | 1));
          if (2 * v11 + 2 >= a3)
          {
            uint64_t v17 = *v12;
            uint64_t v11 = (2 * v11) | 1;
          }
          else
          {
            uint64_t v17 = *v12;
            if (*(_DWORD *)(*v12 + 176) <= *(_DWORD *)(v12[2] + 176))
            {
              uint64_t v11 = (2 * v11) | 1;
            }
            else
            {
              uint64_t v17 = v12[2];
              v12 += 2;
              uint64_t v11 = 2 * v11 + 2;
            }
          }
        }
        while (*(_DWORD *)(v17 + 176) <= *(_DWORD *)(v15 + 176));
        uint64_t v21 = (std::__shared_weak_count *)v5[1];
        *uint8x8_t v5 = v15;
        v5[1] = v16;
        if (v21)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
      }
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int8x8_t v3 = (void *)*v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      uint64_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint8x8_t v5 = operator new(8 * prime);
  unint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *uint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    int8x8_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    size_t v9 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(a1, a3, a4);
    uint8x8_t v10 = v9;
    if ((void *)(a2 - 16) == v9)
    {
      size_t v15 = (std::__shared_weak_count *)v9[1];
      *uint8x8_t v10 = v8;
      v10[1] = v7;
      if (v15)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      uint8x8_t v12 = (std::__shared_weak_count *)v9[1];
      *(_OWORD *)uint8x8_t v10 = v11;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      uint64_t v13 = (uint64_t)(v10 + 2);
      uint64_t v14 = *(std::__shared_weak_count **)(a2 - 8);
      *(void *)(a2 - 16) = v8;
      *(void *)(a2 - 8) = v7;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>((uint64_t)a1, v13, a3, (v13 - (uint64_t)a1) >> 4);
    }
  }
}

void sub_23F637908(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,realityio::OrderedAndDeterministicBuilderGreaterThan &,std::__wrap_iter<std::shared_ptr<realityio::Builder> *>>(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = a3 - 2;
  if (a3 < 2) {
    uint64_t v5 = a3 - 1;
  }
  uint64_t v6 = v5 >> 1;
  do
  {
    uint64_t v7 = &a1[2 * v4 + 2];
    if (2 * v4 + 2 >= a3)
    {
      uint64_t v8 = *v7;
      uint64_t v4 = (2 * v4) | 1;
    }
    else
    {
      uint64_t v8 = *v7;
      if (*(_DWORD *)(*v7 + 176) <= *(_DWORD *)(a1[2 * v4 + 4] + 176))
      {
        uint64_t v4 = (2 * v4) | 1;
      }
      else
      {
        uint64_t v8 = a1[2 * v4 + 4];
        uint64_t v7 = &a1[2 * v4 + 4];
        uint64_t v4 = 2 * v4 + 2;
      }
    }
    uint64_t v9 = v7[1];
    void *v7 = 0;
    v7[1] = 0;
    uint8x8_t v10 = (std::__shared_weak_count *)a1[1];
    *a1 = v8;
    a1[1] = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    a1 = v7;
  }
  while (v4 <= v6);
  return v7;
}

uint64_t std::vector<std::shared_ptr<realityio::Builder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<realityio::Builder>>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<realityio::Builder>>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::Builder>>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<realityio::Builder>>,std::reverse_iterator<std::shared_ptr<realityio::Builder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<RIO_MTLX::GeomInfo>>,std::reverse_iterator<std::shared_ptr<RIO_MTLX::GeomInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<realityio::Builder>>::__clear[abi:ne180100]((uint64_t *)v2);
    int8x8_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::weak_ptr<realityio::Builder>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        std::allocator<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int8x8_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<realityio::Builder> const,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<realityio::Builder> const,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,0>(uint64_t a1)
{
  int8x8_t v3 = (void **)(a1 + 16);
  std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void *std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    long long v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  uint64_t v15 = a3[1];
  i[2] = *a3;
  i[3] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint8x8_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_40:
    void *v23 = i;
    goto LABEL_41;
  }
  *uint64_t i = *v14;
  *long long v14 = i;
  *(void *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint8x8_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_23F637F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<realityio::Builder> const,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__erase_unique<std::weak_ptr<realityio::Builder>>(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::find<std::weak_ptr<realityio::Builder>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,realityio::BuilderDependencyDAG::BuilderGraphNode>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::SocketQuery const,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,0>(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t RIOPxrUsdRelationshipSetTargets(uint64_t a1, CFArrayRef theArray)
{
  if (a1) {
    uint64_t v2 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v2 = 0;
  }
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    for (CFIndex i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
      unint64_t v8 = ValueAtIndex + 4;
      unint64_t v9 = v15;
      if ((unint64_t)v15 >= v16)
      {
        uint8x8_t v10 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14, v8);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, v8);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, ValueAtIndex + 5);
        uint8x8_t v10 = v9 + 2;
      }
      uint64_t v15 = v10;
    }
  }
  uint64_t v11 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdRelationship>(v2);
  std::recursive_mutex::lock(v11);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets();
  std::recursive_mutex::unlock(v11);
  float v17 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  return v12;
}

void sub_23F63821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::recursive_mutex::unlock(v12);
  a12 = &a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdRelationship>(realityio::UsdLayerMutexTracker *a1)
{
  uint64_t v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v14, a1);
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v14);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    uint64_t v5 = EditTarget[1];
    uint64_t v12 = *EditTarget;
    uint64_t v13 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v6 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  double v7 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v12);
  uint64_t v9 = v8;
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v10 + 8))(v10, v7);
  }
  return v9;
}

void sub_23F638354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdRelationshipClearTargets(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  unint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdRelationship *)(a1 + 24);
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdRelationship>((realityio::UsdLayerMutexTracker *)(a1 + 24));
  std::recursive_mutex::lock(v2);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(v1);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_23F638414(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFMutableArrayRef RIOPxrUsdRelationshipCopyTargets(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  memset(v3, 0, sizeof(v3));
  if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()) {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  }
  else {
    CFMutableArrayRef Mutable = 0;
  }
  uint64_t v4 = (void **)v3;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v4);
  return Mutable;
}

void sub_23F6384DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFStringRef realityio::DirtyMetadataDescriptor::description@<X0>(realityio::DirtyMetadataDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  unint64_t v3 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
  if (v3)
  {
    uint64_t v4 = (const char *)(v3 + 16);
    if (*(char *)(v3 + 39) < 0) {
      uint64_t v4 = *(const char **)v4;
    }
  }
  else
  {
    uint64_t v4 = "";
  }
  CFStringRef result = CFStringCreateWithFormat(0, 0, @"<DirtyMetadataDescriptor: %p { metadataName: %s } >", this, v4);
  *a2 = result;
  return result;
}

void sub_23F638570(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t getLocalTransformation(uint64_t result, unsigned char *a2, void *a3, uint64_t a4)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  if (result)
  {
    uint64_t v6 = (_OWORD *)result;
    unint64_t v7 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
    float64x2_t v8 = v162;
    v6[4] = v161;
    v6[5] = v8;
    float64x2_t v9 = v164;
    v6[6] = v163;
    v6[7] = v9;
    float64x2_t v10 = v158;
    *uint64_t v6 = *(_OWORD *)__s1;
    v6[1] = v10;
    float64x2_t v11 = v160;
    v6[2] = v159;
    v6[3] = v11;
    if (a2)
    {
      *a2 = 0;
      if (*a3)
      {
        uint64_t v12 = a3[4] + 8 * *a3;
        __asm { FMOV            V0.2D, #1.0 }
        float64x2_t v118 = _Q0;
        uint64_t v119 = a2;
        do
        {
          unint64_t v19 = (unint64_t *)(v12 - 8);
          uint64_t v18 = *(void *)(v12 - 8);
          v129[0] = v18;
          if ((v18 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v129[0] &= 0xFFFFFFFFFFFFFFF8;
          }
          if ((*v19 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t EmptyString = (*v19 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v7);
          }
          if ((*((void *)v21 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v22 = (*((void *)v21 + 3) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v22 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
          }
          if (*(char *)(v22 + 23) >= 0) {
            uint8x8_t v23 = (const char *)v22;
          }
          else {
            uint8x8_t v23 = *(const char **)v22;
          }
          int v24 = *(char *)(EmptyString + 23);
          if (v24 >= 0) {
            size_t v25 = *(unsigned __int8 *)(EmptyString + 23);
          }
          else {
            size_t v25 = *(void *)(EmptyString + 8);
          }
          size_t v26 = strlen(v23);
          if (v25 < v26
            || ((size_t v27 = v26, v24 >= 0) ? (v28 = (const char *)EmptyString) : (v28 = *(const char **)EmptyString),
                uint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)strncmp(v28, v23, v27),
                v29))
          {
            int v30 = 0;
          }
          else
          {
            if ((*v19 & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v34 = (const std::string *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              unint64_t v34 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
            }
            if ((*((void *)v61 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v62 = (*((void *)v61 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            else {
              unint64_t v62 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v61);
            }
            if (*(char *)(v62 + 23) < 0) {
              std::string::size_type v63 = *(void *)(v62 + 8);
            }
            else {
              std::string::size_type v63 = *(unsigned __int8 *)(v62 + 23);
            }
            std::string::basic_string((std::string *)__s1, v34, v63, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v121);
            MEMORY[0x2455CF830](__n, __s1);
            if ((v129[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v129[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            v129[0] = __n[0];
            __n[0] = 0;
            if (SHIBYTE(v158.f64[0]) < 0) {
              operator delete(__s1[0]);
            }
            int v30 = 1;
          }
          unint64_t v7 = (unint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::find<pxrInternal__aapl__pxrReserved__::TfToken>(a4, v129);
          unint64_t v31 = v7;
          if (a4 + 8 == v7) {
            goto LABEL_263;
          }
          if (v19 == (unint64_t *)a3[4]) {
            goto LABEL_103;
          }
          if ((*((void *)v32 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            int v33 = (const void **)((*((void *)v32 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else
          {
            unint64_t v32 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
            int v33 = (const void **)v32;
          }
          if ((*v19 & 0xFFFFFFFFFFFFFFF8) != 0) {
            int v35 = (const void **)((*v19 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            int v35 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
          }
          uint64_t v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v33, v35, (uint64_t)__s1);
          if ((*(void *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v7 = (*(void *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          }
          char v37 = HIBYTE(v158.f64[0]);
          if (v158.f64[0] >= 0.0) {
            unint64_t v38 = (void *)HIBYTE(v158.f64[0]);
          }
          else {
            unint64_t v38 = __s1[1];
          }
          BOOL v39 = (void *)*(unsigned __int8 *)(v7 + 23);
          int v40 = (char)v39;
          if ((char)v39 < 0) {
            BOOL v39 = *(void **)(v7 + 8);
          }
          if (v38 == v39)
          {
            if (v40 >= 0) {
              unint64_t v41 = (unsigned __int8 *)v7;
            }
            else {
              unint64_t v41 = *(unsigned __int8 **)v7;
            }
            if ((HIBYTE(v158.f64[0]) & 0x80) != 0)
            {
              unint64_t v43 = __s1[0];
              if (!memcmp(__s1[0], v41, (size_t)__s1[1]))
              {
                uint64_t v75 = v43;
LABEL_145:
                operator delete(v75);
LABEL_146:
                char v37 = 0;
LABEL_147:
                v12 -= 8;
                goto LABEL_264;
              }
            }
            else
            {
              if (!HIBYTE(v158.f64[0])) {
                goto LABEL_147;
              }
              uint64_t v42 = 0;
              while (*((unsigned __int8 *)__s1 + v42) == v41[v42])
              {
                if (HIBYTE(v158.f64[0]) == ++v42) {
                  goto LABEL_146;
                }
              }
            }
          }
          if ((*((void *)v44 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            char v45 = (const void **)((*((void *)v44 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else
          {
            uint8x8_t v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
            char v45 = (const void **)v44;
          }
          if ((*(void *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) != 0) {
            int v46 = (const void **)((*(void *)(v12 - 16) & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else {
            int v46 = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          float v47 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v45, v46, (uint64_t)__n);
          if ((*v19 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v7 = (*v19 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v7 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v47);
          }
          if (v150.f64[0] >= 0.0) {
            size_t v48 = HIBYTE(v150.f64[0]);
          }
          else {
            size_t v48 = __n[1];
          }
          uint64_t v49 = *(unsigned __int8 *)(v7 + 23);
          int v50 = (char)v49;
          if ((v49 & 0x80u) != 0) {
            uint64_t v49 = *(void *)(v7 + 8);
          }
          if (v48 == v49)
          {
            if (v50 >= 0) {
              size_t v51 = (unsigned __int8 *)v7;
            }
            else {
              size_t v51 = *(unsigned __int8 **)v7;
            }
            if ((HIBYTE(v150.f64[0]) & 0x80) != 0)
            {
              uint64_t v60 = (void *)__n[0];
              BOOL v59 = memcmp((const void *)__n[0], v51, __n[1]) == 0;
              goto LABEL_98;
            }
            if (!HIBYTE(v150.f64[0]))
            {
              if (SHIBYTE(v158.f64[0]) < 0)
              {
                uint64_t v75 = __s1[0];
                goto LABEL_145;
              }
              goto LABEL_146;
            }
            uint64_t v52 = HIBYTE(v150.f64[0]) - 1;
            float v53 = __n;
            do
            {
              int v55 = *(unsigned __int8 *)v53;
              float v53 = (size_t *)((char *)v53 + 1);
              int v54 = v55;
              int v57 = *v51++;
              int v56 = v57;
              BOOL v58 = v52-- != 0;
              BOOL v59 = v54 == v56;
            }
            while (v54 == v56 && v58);
            if ((HIBYTE(v150.f64[0]) & 0x80) == 0) {
              goto LABEL_99;
            }
          }
          else
          {
            BOOL v59 = 0;
            if ((HIBYTE(v150.f64[0]) & 0x80) == 0) {
              goto LABEL_99;
            }
          }
          uint64_t v60 = (void *)__n[0];
LABEL_98:
          operator delete(v60);
LABEL_99:
          if (SHIBYTE(v158.f64[0]) < 0)
          {
            operator delete(__s1[0]);
            if (v59) {
              goto LABEL_146;
            }
          }
          else if (v59)
          {
            goto LABEL_146;
          }
LABEL_103:
          unint64_t v7 = atomic_load(MEMORY[0x263F90570]);
          if (!v7) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType>>::_TryToCreateData();
          }
          if ((*v19 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v7 + 104) & 0xFFFFFFFFFFFFFFF8))
          {
            float64x2_t v127 = 0u;
            float64x2_t v128 = 0u;
            float64x2_t v125 = 0u;
            float64x2_t v126 = 0u;
            float64x2_t v123 = 0u;
            float64x2_t v124 = 0u;
            float64x2_t v121 = 0u;
            float64x2_t v122 = 0u;
            unint64_t v64 = *v19;
            if ((*v19 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v64 &= 0xFFFFFFFFFFFFFFF8;
            }
            pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v165, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v31 + 40));
            unint64_t v65 = v64;
            if ((v64 & 7) != 0)
            {
              if (atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed))unint64_t v65 = v64; {
              else
              }
                unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40718, memory_order_acquire) & 1) == 0)
            {
              int v117 = (pxrInternal__aapl__pxrReserved__::UsdObject *)__cxa_guard_acquire(&qword_268C40718);
              if (v117)
              {
                _MergedGlobals_22 = pxrInternal__aapl__pxrReserved__::UsdObject::GetNamespaceDelimiter(v117);
                __cxa_guard_release(&qword_268C40718);
                a2 = v119;
              }
            }
            unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFF8;
            if ((v65 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v67 = (char *)(v66 + 16);
              if (*(char *)(v66 + 39) < 0) {
                uint64_t v67 = *(char **)v67;
              }
            }
            else
            {
              uint64_t v67 = "";
            }
            int v68 = _MergedGlobals_22;
            BOOL v69 = strchr(v67, _MergedGlobals_22);
            if (v69)
            {
              unint64_t v70 = v69 + 1;
              unint64_t v71 = strchr(v69 + 1, v68);
              if (!v71) {
                unint64_t v71 = &v70[strlen(v70)];
              }
              switch(v71 - v70)
              {
                case 5:
                  if (strncmp("scale", v70, 5uLL)) {
                    goto LABEL_132;
                  }
                  int v72 = 0;
                  int v73 = 0;
                  uint64_t v74 = 2;
                  goto LABEL_158;
                case 6:
                  if (strncmp("orient", v70, 6uLL)) {
                    goto LABEL_132;
                  }
                  int v72 = 0;
                  int v73 = 1;
                  uint64_t v74 = 12;
                  goto LABEL_158;
                case 7:
                  if (!strncmp("rotateX", v70, 7uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 3;
                  }
                  else if (!strncmp("rotateY", v70, 7uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 4;
                  }
                  else
                  {
                    if (strncmp("rotateZ", v70, 7uLL)) {
                      goto LABEL_132;
                    }
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 5;
                  }
                  goto LABEL_158;
                case 9:
                  if (!strncmp("transform", v70, 9uLL))
                  {
                    int v73 = 0;
                    int v72 = 1;
                    uint64_t v74 = 13;
                    goto LABEL_158;
                  }
                  if (!strncmp("translate", v70, 9uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 1;
                    goto LABEL_158;
                  }
                  if (!strncmp("rotateXYZ", v70, 9uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 6;
                    goto LABEL_158;
                  }
                  if (!strncmp("rotateXZY", v70, 9uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 7;
                    goto LABEL_158;
                  }
                  if (!strncmp("rotateYXZ", v70, 9uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 8;
                    goto LABEL_158;
                  }
                  if (!strncmp("rotateYZX", v70, 9uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 9;
                    goto LABEL_158;
                  }
                  if (!strncmp("rotateZXY", v70, 9uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 10;
                    goto LABEL_158;
                  }
                  if (!strncmp("rotateZYX", v70, 9uLL))
                  {
                    int v72 = 0;
                    int v73 = 0;
                    uint64_t v74 = 11;
LABEL_158:
                    a2 = v119;
                    goto LABEL_159;
                  }
LABEL_132:
                  __s1[0] = "V2/XFormUtils.mm";
                  __s1[1] = "getTransformOpType";
                  *(void *)&v158.f64[0] = 105;
                  *(void *)&v158.f64[1] = "XformOpType (anonymous namespace)::getTransformOpType(TfToken)";
                  LOBYTE(v159.f64[0]) = 0;
                  std::string::__init_with_size[abi:ne180100]<char *,char *>(__n, v70, v71, v71 - v70);
                  a2 = v119;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
                  if (SHIBYTE(v150.f64[0]) < 0) {
                    operator delete((void *)__n[0]);
                  }
                  break;
                default:
                  goto LABEL_132;
              }
            }
            else
            {
              __s1[0] = "V2/XFormUtils.mm";
              __s1[1] = "getTransformOpType";
              *(void *)&v158.f64[0] = 94;
              *(void *)&v158.f64[1] = "XformOpType (anonymous namespace)::getTransformOpType(TfToken)";
              LOBYTE(v159.f64[0]) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
            }
            int v72 = 0;
            int v73 = 0;
            uint64_t v74 = 0;
LABEL_159:
            if ((v65 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)v66, 0xFFFFFFFE, memory_order_release);
            }
            if (v72)
            {
              pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
              {
                if ((v166 & 4) != 0) {
                  uint64_t v76 = (float64x2_t *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
                }
                else {
                  uint64_t v76 = v165;
                }
                float64x2_t v77 = *v76;
                float64x2_t v78 = v76[1];
                float64x2_t v79 = v76[3];
                float64x2_t v159 = v76[2];
                float64x2_t v160 = v79;
                *(float64x2_t *)__s1 = v77;
                float64x2_t v158 = v78;
                float64x2_t v80 = v76[4];
                float64x2_t v81 = v76[5];
                float64x2_t v82 = v76[7];
                float64x2_t v163 = v76[6];
                float64x2_t v164 = v82;
                float64x2_t v161 = v80;
                float64x2_t v162 = v81;
                if (!v30) {
                  goto LABEL_180;
                }
LABEL_179:
                *(void *)&long long v143 = 0;
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((uint64_t *)__n, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (double *)&v143, 0.0);
                float64x2_t v161 = v153;
                float64x2_t v162 = v154;
                float64x2_t v163 = v155;
                float64x2_t v164 = v156;
                *(_OWORD *)__s1 = *(_OWORD *)__n;
                float64x2_t v158 = v150;
                float64x2_t v159 = v151;
                float64x2_t v160 = v152;
                goto LABEL_180;
              }
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
              {
                if ((v166 & 4) != 0) {
                  uint64_t v87 = (*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
                }
                else {
                  uint64_t v87 = (uint64_t)v165;
                }
                MEMORY[0x2455CE520](__n, v87);
                float64x2_t v161 = v153;
                float64x2_t v162 = v154;
                float64x2_t v163 = v155;
                float64x2_t v164 = v156;
                *(_OWORD *)__s1 = *(_OWORD *)__n;
                float64x2_t v158 = v150;
                float64x2_t v159 = v151;
                float64x2_t v160 = v152;
                if (v30) {
                  goto LABEL_179;
                }
LABEL_180:
                float64x2_t v125 = v161;
                float64x2_t v126 = v162;
                float64x2_t v127 = v163;
                float64x2_t v128 = v164;
                float64x2_t v121 = *(float64x2_t *)__s1;
                float64x2_t v122 = v158;
                float64x2_t v123 = v159;
                float64x2_t v124 = v160;
LABEL_258:
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v165);
                if ((v64 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (!atomic_load(&qword_268C40710)) {
                  operator new();
                }
                unint64_t v7 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
                if ((v7 & 1) == 0) {
                  unint64_t v7 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=();
                }
LABEL_263:
                char v37 = 0;
                goto LABEL_264;
              }
LABEL_237:
              pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v121, 1.0);
              goto LABEL_258;
            }
            if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
            {
              if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
              {
                if ((v166 & 4) != 0) {
                  uint64_t v85 = (float *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
                }
                else {
                  uint64_t v85 = (float *)&v165;
                }
                float v86 = *v85;
              }
              else
              {
                if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165)) {
                  goto LABEL_193;
                }
                if ((v166 & 4) != 0) {
                  int v88 = (unsigned __int16 *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8)
                }
                                                                                      + 168))(&v165);
                else {
                  int v88 = (unsigned __int16 *)&v165;
                }
                float v86 = *(float *)(MEMORY[0x263F90640] + 4 * *v88);
              }
              double v84 = v86;
              goto LABEL_186;
            }
            if ((v166 & 4) != 0) {
              long long v83 = (double *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
            }
            else {
              long long v83 = (double *)&v165;
            }
            double v84 = *v83;
LABEL_186:
            if (v30) {
              double v89 = -v84;
            }
            else {
              double v89 = v84;
            }
            switch(v74)
            {
              case 5:
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                __n[1] = 0;
                __n[0] = 0;
                v150.f64[0] = 1.0;
                v150.f64[1] = v89;
                unint64_t v90 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
                goto LABEL_257;
              case 4:
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                *(_OWORD *)__n = xmmword_23F7C96E0;
                v150.f64[0] = 0.0;
                v150.f64[1] = v89;
                unint64_t v90 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
                goto LABEL_257;
              case 3:
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                __n[0] = 0x3FF0000000000000;
                __n[1] = 0;
                v150.f64[0] = 0.0;
                v150.f64[1] = v89;
                unint64_t v90 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
LABEL_257:
                float64x2_t v106 = *v90;
                float64x2_t v107 = v90[1];
                float64x2_t v108 = v90[3];
                float64x2_t v123 = v90[2];
                float64x2_t v124 = v108;
                float64x2_t v121 = v106;
                float64x2_t v122 = v107;
                float64x2_t v109 = v90[4];
                float64x2_t v110 = v90[5];
                float64x2_t v111 = v90[7];
                float64x2_t v127 = v90[6];
                float64x2_t v128 = v111;
                float64x2_t v125 = v109;
                float64x2_t v126 = v110;
                goto LABEL_258;
            }
LABEL_193:
            memset(v148, 0, 24);
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
            {
              if ((v166 & 4) != 0) {
                uint64_t v91 = (float32x2_t *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
              }
              else {
                uint64_t v91 = (float32x2_t *)v165;
              }
              float64_t v92 = v91[1].f32[0];
              v148[0] = vcvtq_f64_f32(*v91);
              v148[1].f64[0] = v92;
              goto LABEL_208;
            }
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
            {
              if ((v166 & 4) != 0) {
                uint64_t v93 = (*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
              }
              else {
                uint64_t v93 = (uint64_t)v165;
              }
              float64x2_t v94 = *(float64x2_t *)v93;
              v148[1].f64[0] = *(float64_t *)(v93 + 16);
              v148[0] = v94;
              goto LABEL_208;
            }
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
            {
              if ((v166 & 4) != 0) {
                uint64_t v95 = (unsigned __int16 *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
              }
              else {
                uint64_t v95 = (unsigned __int16 *)&v165;
              }
              float64_t v96 = *(float *)(MEMORY[0x263F90640] + 4 * v95[1]);
              float64_t v97 = *(float *)(MEMORY[0x263F90640] + 4 * v95[2]);
              v148[0].f64[0] = *(float *)(MEMORY[0x263F90640] + 4 * *v95);
              v148[0].f64[1] = v96;
              v148[1].f64[0] = v97;
LABEL_208:
              if (v74 == 2)
              {
                if (v30)
                {
                  v148[0] = vdivq_f64(v118, v148[0]);
                  v148[1].f64[0] = 1.0 / v148[1].f64[0];
                }
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                unint64_t v90 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale();
              }
              else if (v74 == 1)
              {
                if (v30)
                {
                  v148[0] = vnegq_f64(v148[0]);
                  v148[1].f64[0] = -v148[1].f64[0];
                }
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                unint64_t v90 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate();
              }
              else
              {
                double v98 = v148[0].f64[0];
                if (v30)
                {
                  double v98 = -v148[0].f64[0];
                  v148[0].f64[0] = -v148[0].f64[0];
                  *(float64x2_t *)((char *)v148 + 8) = vnegq_f64(*(float64x2_t *)((char *)v148 + 8));
                }
                v153.f64[0] = 0.0;
                float64x2_t v151 = 0u;
                float64x2_t v152 = 0u;
                *(_OWORD *)__n = 0u;
                float64x2_t v150 = 0u;
                __s1[0] = (void *)0x3FF0000000000000;
                __s1[1] = 0;
                v158.f64[0] = 0.0;
                v158.f64[1] = v98;
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)__n, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__s1);
                float64_t v147 = 0.0;
                float64x2_t v145 = 0u;
                float64x2_t v146 = 0u;
                long long v143 = 0u;
                float64x2_t v144 = 0u;
                *(_OWORD *)__s1 = xmmword_23F7C96E0;
                v158.f64[0] = 0.0;
                v158.f64[1] = v148[0].f64[1];
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v143, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__s1);
                float64_t v142 = 0.0;
                float64x2_t v140 = 0u;
                float64x2_t v141 = 0u;
                long long v138 = 0u;
                float64x2_t v139 = 0u;
                __s1[1] = 0;
                __s1[0] = 0;
                v158.f64[0] = 1.0;
                v158.f64[1] = v148[1].f64[0];
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v138, (const pxrInternal__aapl__pxrReserved__::GfRotation *)__s1);
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v136, 1.0);
                switch(v74)
                {
                  case 6:
                    if (v30)
                    {
                      float64x2_t v133 = v140;
                      float64x2_t v134 = v141;
                      float64_t v135 = v142;
                      *(_OWORD *)unint64_t v131 = v138;
                      float64x2_t v132 = v139;
                    }
                    else
                    {
                      float64x2_t v133 = v151;
                      float64x2_t v134 = v152;
                      float64_t v135 = v153.f64[0];
                      *(_OWORD *)unint64_t v131 = *(_OWORD *)__n;
                      float64x2_t v132 = v150;
                    }
                    break;
                  case 7:
                    if (v30)
                    {
                      float64x2_t v133 = v145;
                      float64x2_t v134 = v146;
                      float64_t v135 = v147;
                      *(_OWORD *)unint64_t v131 = v143;
                      float64x2_t v132 = v144;
                    }
                    else
                    {
                      float64x2_t v133 = v151;
                      float64x2_t v134 = v152;
                      float64_t v135 = v153.f64[0];
                      *(_OWORD *)unint64_t v131 = *(_OWORD *)__n;
                      float64x2_t v132 = v150;
                    }
                    break;
                  case 8:
                    if (v30)
                    {
                      float64x2_t v133 = v140;
                      float64x2_t v134 = v141;
                      float64_t v135 = v142;
                      *(_OWORD *)unint64_t v131 = v138;
                      float64x2_t v132 = v139;
                    }
                    else
                    {
                      float64x2_t v133 = v145;
                      float64x2_t v134 = v146;
                      float64_t v135 = v147;
                      *(_OWORD *)unint64_t v131 = v143;
                      float64x2_t v132 = v144;
                    }
                    break;
                  case 9:
                    if (v30)
                    {
                      float64x2_t v133 = v151;
                      float64x2_t v134 = v152;
                      float64_t v135 = v153.f64[0];
                      *(_OWORD *)unint64_t v131 = *(_OWORD *)__n;
                      float64x2_t v132 = v150;
                    }
                    else
                    {
                      float64x2_t v133 = v145;
                      float64x2_t v134 = v146;
                      float64_t v135 = v147;
                      *(_OWORD *)unint64_t v131 = v143;
                      float64x2_t v132 = v144;
                    }
                    break;
                  case 10:
                    if (v30)
                    {
                      float64x2_t v133 = v145;
                      float64x2_t v134 = v146;
                      float64_t v135 = v147;
                      *(_OWORD *)unint64_t v131 = v143;
                      float64x2_t v132 = v144;
                    }
                    else
                    {
                      float64x2_t v133 = v140;
                      float64x2_t v134 = v141;
                      float64_t v135 = v142;
                      *(_OWORD *)unint64_t v131 = v138;
                      float64x2_t v132 = v139;
                    }
                    break;
                  case 11:
                    if (v30)
                    {
                      float64x2_t v133 = v151;
                      float64x2_t v134 = v152;
                      float64_t v135 = v153.f64[0];
                      *(_OWORD *)unint64_t v131 = *(_OWORD *)__n;
                      float64x2_t v132 = v150;
                    }
                    else
                    {
                      float64x2_t v133 = v140;
                      float64x2_t v134 = v141;
                      float64_t v135 = v142;
                      *(_OWORD *)unint64_t v131 = v138;
                      float64x2_t v132 = v139;
                    }
                    break;
                  default:
                    __s1[0] = "V2/XFormUtils.mm";
                    __s1[1] = "GetOpTransform";
                    *(void *)&v158.f64[0] = 221;
                    *(void *)&v158.f64[1] = "GfMatrix4d (anonymous namespace)::GetOpTransform(TfToken, VtValue, BOOL)";
                    LOBYTE(v159.f64[0]) = 0;
                    pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
                    pxrInternal__aapl__pxrReserved__::TfStringify<pxrInternal__aapl__pxrReserved__::VtValue>();
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
                    if (v130 < 0) {
                      operator delete((void *)v129[1]);
                    }
                    if (SHIBYTE(v132.f64[0]) < 0) {
                      operator delete(v131[0]);
                    }
                    goto LABEL_237;
                }
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
                float64x2_t v159 = v133;
                float64x2_t v160 = v134;
                v161.f64[0] = v135;
                *(_OWORD *)__s1 = *(_OWORD *)v131;
                float64x2_t v158 = v132;
                pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=();
                v136[2] = v159;
                v136[3] = v160;
                float64_t v137 = v161.f64[0];
                v136[0] = *(_OWORD *)__s1;
                v136[1] = v158;
                pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, 1.0);
                unint64_t v90 = (float64x2_t *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)__s1, (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)v136);
              }
              goto LABEL_257;
            }
            if (!v73) {
              goto LABEL_237;
            }
            *(_OWORD *)__s1 = 0u;
            float64x2_t v158 = 0u;
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
            {
              if ((v166 & 4) != 0) {
                uint64_t v99 = (float64x2_t *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
              }
              else {
                uint64_t v99 = v165;
              }
              float64x2_t v100 = *v99;
              float64x2_t v101 = v99[1];
              goto LABEL_246;
            }
            if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
            {
              if ((v166 & 4) != 0) {
                long long v102 = (float32x2_t *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8) + 168))(&v165);
              }
              else {
                long long v102 = (float32x2_t *)v165;
              }
              float64x2_t v100 = vcvtq_f64_f32(*v102);
              float64x2_t v101 = vcvtq_f64_f32(v102[1]);
LABEL_246:
              *(float64x2_t *)__s1 = v100;
              float64x2_t v158 = v101;
            }
            else if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>((pxrInternal__aapl__pxrReserved__::VtValue *)&v165))
            {
              if ((v166 & 4) != 0) {
                BOOL v113 = (unsigned __int16 *)(*(uint64_t (**)(float64x2_t **))((v166 & 0xFFFFFFFFFFFFFFF8)
              }
                                                                                     + 168))(&v165);
              else {
                BOOL v113 = (unsigned __int16 *)&v165;
              }
              float64_t v114 = *(float *)(MEMORY[0x263F90640] + 4 * v113[3]);
              double v115 = *(float *)(MEMORY[0x263F90640] + 4 * v113[1]);
              float64_t v116 = *(float *)(MEMORY[0x263F90640] + 4 * v113[2]);
              *(double *)__s1 = *(float *)(MEMORY[0x263F90640] + 4 * *v113);
              __s1[1] = *(void **)&v115;
              v158.f64[0] = v116;
              v158.f64[1] = v114;
            }
            pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat();
            if (v30)
            {
              __n[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetInverse((pxrInternal__aapl__pxrReserved__::GfRotation *)__n);
              __n[1] = v103;
              v150.f64[0] = v104;
              v150.f64[1] = v105;
            }
            long long v143 = 0uLL;
            v144.f64[0] = 0.0;
            pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d();
            goto LABEL_258;
          }
          char v37 = 1;
          *a2 = 1;
LABEL_264:
          if ((v129[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v129[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          v12 -= 8;
          if (v12 == a3[4]) {
            char v37 = 1;
          }
        }
        while ((v37 & 1) == 0);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_23F6399D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  __cxa_guard_abort(&qword_268C40718);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v39 - 136));
  if (a19) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStaticData<anonymous namespace'::anonymous namespace'::_tokens_PrivateStaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<anonymous namespace'::anonymous namespace'::_tokens_PrivateStaticTokenType>>::operator->()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  if (!v0) {
    operator new();
  }
  return v0;
}

{
  unint64_t v0;
  uint64_t v2;

  uint64_t v2 = *MEMORY[0x263EF8340];
  if (!v0) {
    operator new();
  }
  return v0;
}

void sub_23F639DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v12, 0x60C408C7DC519);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringify<pxrInternal__aapl__pxrReserved__::VtValue>()
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v1);
  pxrInternal__aapl__pxrReserved__::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 2pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(this + 4)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x2455D2B30](&v3);
}

void sub_23F639FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfRotation::GetInverse(pxrInternal__aapl__pxrReserved__::GfRotation *this)
{
  double result = *(double *)this;
  double v2 = *((double *)this + 1) * *((double *)this + 1) + result * result + *((double *)this + 2) * *((double *)this + 2);
  if (fabs(v2 + -1.0) >= 1.0e-10)
  {
    double v3 = sqrt(v2);
    double v4 = 1.0 / v3;
    BOOL v5 = v3 <= 1.0e-10;
    double v6 = 1.0e10;
    if (!v5) {
      double v6 = v4;
    }
    return result * v6;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetNamespaceDelimiter(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  unint64_t v1 = atomic_load(MEMORY[0x263F90530]);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v2 = *(void *)(v1 + 80) & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    double v3 = (const char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0) {
      double v3 = *(const char **)v3;
    }
  }
  else
  {
    double v3 = "";
  }
  return *v3;
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F63A12C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40374522CDLL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdGeomXformOpTypes_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F63A1CC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C405FAED287);
  _Unwind_Resume(a1);
}

realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType *realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType::CylinderMeshBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "Cylinder", 0) + 8);
  MEMORY[0x2455CF820](v2, "axis", 0);
  MEMORY[0x2455CF820](this + 2, "height", 0);
  MEMORY[0x2455CF820](this + 3, "radius", 0);
  MEMORY[0x2455CF820](this + 4, "material:binding", 0);
  double v3 = *this;
  unint64_t v19 = v3;
  if ((v3 & 7) != 0)
  {
    double v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v19 = v4;
    }
  }
  BOOL v5 = *v2;
  unint64_t v20 = v5;
  if ((v5 & 7) != 0)
  {
    double v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v20 = v6;
    }
  }
  unint64_t v7 = this[2];
  size_t v21 = v7;
  if ((v7 & 7) != 0)
  {
    float64x2_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      size_t v21 = v8;
    }
  }
  float64x2_t v9 = this[3];
  unint64_t v22 = v9;
  if ((v9 & 7) != 0)
  {
    float64x2_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v22 = v10;
    }
  }
  float64x2_t v11 = this[4];
  uint8x8_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint8x8_t v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  uint64_t v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    uint64_t v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    uint64_t v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType *)this;
}

void sub_23F63A418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getCylinderMeshBuilderDirtyStageDescriptor(realityio *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F63A8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  MEMORY[0x2455D2BD0](v29, 0x10A1C40F82F910ELL);
  *(void *)(v30 - 160) = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  MEMORY[0x2455D2BD0](v28, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CylinderMeshBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F63ABE4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4070C77B98);
  _Unwind_Resume(a1);
}

realityio::UsdPropertyDelta *realityio::UsdPropertyDelta::UsdPropertyDelta(realityio::UsdPropertyDelta *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  *(void *)this = &unk_26F33EDF0;
  uint64_t v3 = *(void *)a2;
  *((void *)this + 1) = *(void *)a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)this + 1) &= 0xFFFFFFFFFFFFFFF8;
  }
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  *((void *)this + 2) = &unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)this + 24, (uint64_t)v5);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v5);
  return this;
}

void sub_23F63ACC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a9);
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *realityio::UsdPropertyDelta::updateWithPropertyDelta(void *this, const realityio::UsdPropertyDelta *a2)
{
  if ((this[1] & 0xFFFFFFFFFFFFFFF8) == (*((void *)a2 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v2 = (void *)*((void *)a2 + 5);
    if (v2)
    {
      uint64_t v3 = (uint64_t)(this + 3);
      do
      {
        this = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v3, v2 + 2, v2 + 2);
        unint64_t v2 = (void *)*v2;
      }
      while (v2);
    }
  }
  return this;
}

const void **realityio::UsdPropertyDelta::description@<X0>(realityio::UsdPropertyDelta *this@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  unint64_t v4 = *((void *)this + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    BOOL v5 = (const char *)(v4 + 16);
    if (*(char *)(v4 + 39) < 0) {
      BOOL v5 = *(const char **)v5;
    }
  }
  else
  {
    BOOL v5 = "";
  }
  realityio::UsdMetadataDelta::description((realityio::UsdPropertyDelta *)((char *)this + 16), (CFStringRef *)&v7);
  *a2 = CFStringCreateWithFormat(0, 0, @"<UsdPropertyDelta: %p { property name: %s, metadata: %@ }>", this, v5, v7);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v7);
}

void sub_23F63ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v4);
  _Unwind_Resume(a1);
}

void realityio::internal::TexturePrimToMaterialPrimMap::makeTexturePrimToMaterialMap(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v73 = (uint64_t *)&v74;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(&v69, v3);
  v32[16] = 0;
  *(int64x2_t *)unint64_t v32 = vdupq_n_s64(1uLL);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdPrimRange *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::UsdPrimRange((uint64_t)v66, (uint64_t)&v69, v32);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::begin(v4, (uint64_t)&v61);
  unint64_t v31 = *(uint64_t (**)(uint64_t *))(MEMORY[0x263F90740] + 48);
  uint64_t v29 = *(uint64_t (**)(uint64_t *))(MEMORY[0x263F906F0] + 48);
  while (1)
  {
    *(void *)unint64_t v32 = v67;
    *(void *)&v32[8] = v66;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(_DWORD *)&v32[24] = 0;
    *(_WORD *)&v32[28] = 0;
    if (v61 == *(_OWORD *)v32)
    {
      BOOL v5 = 1;
      if (v62 == *(void *)&v32[16] && !v63 && !v64) {
        BOOL v5 = v65 != 0;
      }
    }
    else
    {
      BOOL v5 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32[16]);
    if (!v5) {
      break;
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::operator*((uint64_t)&v61, (uint64_t)v57);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::_GetStaticTfType(v6);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()
      && (realityio::hasMaterialXSurface((realityio *)v57, v7) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v55 = MEMORY[0x263F90740] + 16;
      if (v56 && (*(unsigned char *)(v56 + 57) & 8) == 0 && (v31(&v55) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr(&v51, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v55);
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v51))
        {
          unint64_t v8 = atomic_load(MEMORY[0x263F90550]);
          if (!v8) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
          }
          uint64_t v9 = *(void *)(v8 + 216);
          if ((v9 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v9 &= 0xFFFFFFFFFFFFFFF8;
          }
          memset(v32, 0, 24);
          unint64_t v43 = (void **)v32;
          LOBYTE(v44) = 0;
          float64x2_t v10 = operator new(8uLL);
          *(void *)unint64_t v32 = v10;
          *(void *)&v32[8] = v10;
          *float64x2_t v10 = v9;
          *(void *)&v32[16] = v10 + 1;
          if ((v9 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v10 &= 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)&v32[8] = v10 + 1;
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
          unint64_t v43 = (void **)v32;
          std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v43);
          if ((v9 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v50
            && (*(unsigned char *)(v50 + 57) & 8) == 0
            && ((*(uint64_t (**)(uint64_t *))(v49 + 32))(&v49) & 1) != 0)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v49);
            uint64_t v12 = v47;
            uint64_t v11 = v48;
            uint64_t v30 = v48;
            while (v12 != v11)
            {
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v12)
                && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
                && MEMORY[0x2455D0E10](v12))
              {
                realityio::findOriginalSourceAttribute(v12, (uint64_t)&v43);
                if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v43))
                {
                  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v39, &v44, &v45);
                  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v39))
                  {
                    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                    uint64_t v37 = MEMORY[0x263F906F0] + 16;
                    if (v38 && (*(unsigned char *)(v38 + 57) & 8) == 0 && (v29(&v37) & 1) != 0)
                    {
                      *(void *)&long long v35 = 0;
                      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((uint64_t *)v32, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v37);
                      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v32)) {
                        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
                      }
                      if ((v32[24] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v32[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32[16]);
                      if (*(void *)&v32[8]) {
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v32[8]);
                      }
                      MEMORY[0x2455CF810](v32, "UsdUVTexture");
                      uint64_t v13 = v35;
                      unint64_t v14 = (atomic_uint *)(*(void *)v32 & 0xFFFFFFFFFFFFFFF8);
                      if ((v32[0] & 7) != 0) {
                        atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
                      }
                      if ((v35 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8) == v14)
                      {
                        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v39, v32);
                        size_t v27 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v73, v32);
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
                        if (&v74 != v27) {
                          goto LABEL_56;
                        }
                        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v39, v76);
                        *((void *)&v35 + 1) = 0;
                        uint64_t v36 = 0;
                        *(void *)&long long v35 = (char *)&v35 + 8;
                        std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>((uint64_t)v32, v76, &v35);
                        uint64_t v15 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>(&v73, v32, (uint64_t)v32);
                        char v25 = v16;
                        size_t v27 = v15;
                        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy((uint64_t)&v32[8], *(void **)&v32[16]);
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
                        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy((uint64_t)&v35, *((void **)&v35 + 1));
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v76);
                        if (v25)
                        {
LABEL_56:
                          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v57, v32);
                          size_t v26 = (char **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)(v27 + 5), v32);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
                          if (v27 + 6 != (uint64_t **)v26) {
                            goto LABEL_58;
                          }
                          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v57, v34);
                          long long v35 = 0uLL;
                          uint64_t v36 = 0;
                          *(_DWORD *)unint64_t v32 = v34[0];
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
                          *(_DWORD *)&v32[4] = v34[1];
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
                          *(_OWORD *)&v32[8] = v35;
                          *(void *)&v32[24] = v36;
                          uint64_t v36 = 0;
                          long long v35 = 0uLL;
                          size_t v26 = (char **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>(v27 + 5, v32, (uint64_t)v32);
                          char v28 = v17;
                          v76[0] = (void **)&v32[8];
                          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v76);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v32);
                          v76[0] = (void **)&v35;
                          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v76);
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v34);
                          if (v28)
                          {
LABEL_58:
                            long long v33 = 0u;
                            memset(v32, 0, sizeof(v32));
                            Baseuint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)&v35, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v43);
                            if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0) {
                              unint64_t EmptyString = (const std::string *)((v35 & 0xFFFFFFFFFFFFFFF8) + 16);
                            }
                            else {
                              unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(BaseName);
                            }
                            std::string::operator=((std::string *)&v32[24], EmptyString);
                            if ((v35 & 7) != 0) {
                              atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                            }
                            unint64_t v20 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v35, v12);
                            if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0) {
                              size_t v21 = (const std::string *)((v35 & 0xFFFFFFFFFFFFFFF8) + 16);
                            }
                            else {
                              size_t v21 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v20);
                            }
                            std::string::operator=((std::string *)v32, v21);
                            if ((v35 & 7) != 0) {
                              atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                            }
                            std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::push_back[abi:ne180100](v26 + 5, (long long *)v32);
                            if (SHIBYTE(v33) < 0) {
                              operator delete(*(void **)&v32[24]);
                            }
                            if ((v32[23] & 0x80000000) != 0) {
                              operator delete(*(void **)v32);
                            }
                          }
                        }
                      }
                    }
                    MEMORY[0x2455CECB0](&v37);
                  }
                  if ((v42 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
                  if (v40) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v40);
                  }
                }
                if ((v46 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45);
                if (v44) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v44);
                }
              }
              uint64_t v12 = (realityio *)((char *)v12 + 32);
              uint64_t v11 = v30;
            }
            *(void *)unint64_t v32 = &v47;
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
          }
          MEMORY[0x2455CECB0](&v49);
        }
        if ((v54 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v53);
        if (v52) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v52);
        }
      }
      MEMORY[0x2455CEF40](&v55);
    }
    if ((v60 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v59);
    if (v58) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v58);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v61);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v62);
  unint64_t v22 = v74;
  *a2 = v73;
  a2[1] = v22;
  uint8x8_t v23 = a2 + 1;
  uint64_t v24 = v75;
  a2[2] = v75;
  if (v24)
  {
    v22[2] = v23;
    int v73 = (uint64_t *)&v74;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
  }
  else
  {
    *a2 = v23;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v68);
  if ((v72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
  if (v70) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy((uint64_t)&v73, v74);
}

void sub_23F63B780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a58);
  MEMORY[0x2455CEF40](&a62);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a65);
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::~iterator((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)(v65 - 240));
  pxrInternal__aapl__pxrReserved__::UsdPrimRange::~UsdPrimRange((pxrInternal__aapl__pxrReserved__::UsdPrimRange *)(v65 - 208));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v65 - 152));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(v65 - 120, *(void **)(v65 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>::~pair(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    uint64_t v28 = result;
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>(result, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    char v16 = &v15[48 * v11];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)char v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    float64x2_t v10 = v16 + 48;
    unint64_t v19 = *a1;
    unint64_t v20 = (unint64_t)a1[1];
    if ((char *)v20 == *a1)
    {
      int64x2_t v23 = vdupq_n_s64(v20);
    }
    else
    {
      do
      {
        long long v21 = *(_OWORD *)(v20 - 48);
        *((void *)v16 - 4) = *(void *)(v20 - 32);
        *((_OWORD *)v16 - 3) = v21;
        *(void *)(v20 - 40) = 0;
        *(void *)(v20 - 32) = 0;
        *(void *)(v20 - 48) = 0;
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v16 - 1) = *(void *)(v20 - 8);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 48;
        *(void *)(v20 - 16) = 0;
        *(void *)(v20 - 8) = 0;
        *(void *)(v20 - 24) = 0;
        v20 -= 48;
      }
      while ((char *)v20 != v19);
      int64x2_t v23 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = v10;
    int64x2_t v26 = v23;
    uint64_t v24 = a1[2];
    a1[2] = &v15[48 * v14];
    size_t v27 = v24;
    uint64_t v25 = v23.i64[0];
    uint64_t result = std::__split_buffer<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::~__split_buffer((uint64_t)&v25);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    float64x2_t v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
  return result;
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>(uint64_t a1, _DWORD *a2, void *a3)
{
  unint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  *(void *)(a1 + 8) = *a3;
  unint64_t v7 = a3 + 1;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = a1 + 16;
  uint64_t v10 = a3[2];
  *(void *)(a1 + 24) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *a3 = v7;
    void *v7 = 0;
    a3[2] = 0;
  }
  else
  {
    *(void *)(a1 + 8) = v9;
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 8);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

_DWORD *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v15, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x40uLL);
    v13[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 9, (_DWORD *)(a3 + 4));
    uint64_t v8 = (void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 16);
    *((void *)v6 + 5) = *(void *)(a3 + 8);
    *((void *)v6 + 6) = v9;
    uint64_t v10 = (char *)(v6 + 12);
    uint64_t v11 = *(void *)(a3 + 24);
    *((void *)v6 + 7) = v11;
    if (v11)
    {
      *(void *)(v9 + 16) = v10;
      *(void *)(a3 + 8) = v8;
      void *v8 = 0;
      *(void *)(a3 + 24) = 0;
    }
    else
    {
      *((void *)v6 + 5) = v10;
    }
    char v14 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v15, v7, (uint64_t *)v6);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

char *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v11, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x40uLL);
    v9[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 9, (_DWORD *)(a3 + 4));
    *(_OWORD *)(v6 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v6 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor(uint64_t a1, void **a2, void **a3)
{
  *(void *)a1 = &unk_26F33EE30;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((void *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>*>((void *)(a1 + 32), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(unsigned char *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_23F63C164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  if (!*(void *)(a7 + 24) || !*(void *)(a8 + 24) || !*(void *)(a9 + 24)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v37, this, a2);
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37);
  char v16 = a3 ? IsValid : 1;
  if (v16)
  {
    char v17 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v33, a3, a2);
    char v18 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v33);
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    char v17 = v18 ^ 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
    if (v34) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
    }
  }
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  if (v38) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
  }
  if (v17) {
    return 0;
  }
  uint64_t v19 = a1;
  unint64_t v20 = *(uint64_t **)(a1 + 16);
  uint64_t v32 = v19;
  long long v21 = *(uint64_t **)(v19 + 8);
  if (v20 != v21)
  {
    while (1)
    {
      uint64_t v23 = *v21;
      long long v22 = (std::__shared_weak_count *)v21[1];
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v43, a7);
      if (!v44) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      char v24 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v44 + 48))(v44, a2, v23);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v43);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (v24) {
        break;
      }
      v21 += 2;
      if (v21 == v20) {
        return 0;
      }
    }
  }
  size_t v27 = *(uint64_t **)(v32 + 32);
  uint64_t v28 = *(uint64_t **)(v32 + 40);
  if (v27 == v28) {
    return 1;
  }
  do
  {
    uint64_t v30 = *v27;
    uint64_t v29 = (std::__shared_weak_count *)v27[1];
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v42, a8);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v41, a9);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::UsdStage *, pxrInternal__aapl__pxrReserved__::UsdStage *, void *, void *))(*(void *)v30 + 24))(v30, a2, a3, this, v42, v41);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v41);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v42);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    v27 += 2;
    if (v27 == v28) {
      char v31 = 1;
    }
    else {
      char v31 = v25;
    }
  }
  while ((v31 & 1) == 0);
  return v25;
}

void sub_23F63C448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::_isEmpty(realityio::PrimitiveDirtyPrimDescriptor *this)
{
  unint64_t v2 = (uint64_t *)*((void *)this + 1);
  for (uint64_t i = (uint64_t *)*((void *)this + 2); v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v4 = (std::__shared_weak_count *)v2[1];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      int v6 = *(unsigned __int8 *)(v5 + 8);
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (!v6) {
        return 0;
      }
    }
    else if (!*(unsigned char *)(v5 + 8))
    {
      return 0;
    }
  }
  unint64_t v7 = (uint64_t *)*((void *)this + 4);
  uint64_t v8 = (uint64_t *)*((void *)this + 5);
  if (v7 == v8) {
    return 1;
  }
  do
  {
    uint64_t v9 = *v7;
    char v10 = (std::__shared_weak_count *)v7[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v7 += 2;
    if (v7 == v8) {
      char v12 = 0;
    }
    else {
      char v12 = v11;
    }
  }
  while ((v12 & 1) != 0);
  return v11;
}

void sub_23F63C5D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

const void **realityio::PrimitiveDirtyPrimDescriptor::description@<X0>(uint64_t **this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef v7 = realityio::joinAsCFStringRef<realityio::DirtyMetadataDescriptor>(this + 1, (void (*)(void **__return_ptr, void *))realityio::DirtyMetadataDescriptor::description, 0, (const __CFArray *)", ");
  CFStringRef v4 = realityio::joinAsCFStringRef<realityio::PrimitiveDirtyPropertyDescriptor>(this + 4);
  CFTypeRef cf = v4;
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, @"<PrimitiveDirtyPrimDescriptor: %p { dirtyPrimMetadataContainAnyOf: (%lu) [ %@ ], dirtyPropertiesContainAnyOf: (%lu) [ %@ ] } >", this, ((char *)this[2] - (char *)this[1]) >> 4, v7, ((char *)this[5] - (char *)this[4]) >> 4, v4);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v7);
}

void sub_23F63C6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v7);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v8 - 40));
  _Unwind_Resume(a1);
}

CFStringRef realityio::joinAsCFStringRef<realityio::PrimitiveDirtyPropertyDescriptor>(uint64_t **a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  CFStringRef v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      uint64_t v6 = *v4;
      CFStringRef v7 = (std::__shared_weak_count *)v4[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void **__return_ptr))(*(void *)v6 + 16))(&value);
      CFArrayAppendValue(Mutable, value);
      realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  CFStringRef v8 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v2);
  CFRelease(Mutable);
  return v8;
}

void sub_23F63C7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

unsigned char *realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(unsigned char *a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6 = (void *)realityio::PrimitiveDirtyPrimDescriptor::PrimitiveDirtyPrimDescriptor((uint64_t)a1, a3, a4);
  *uint64_t v6 = &unk_26F33EE78;
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](v6 + 8, a2);
  a1[56] = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_23F63C8A4(_Unwind_Exception *a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v2, *((void **)v1 + 9));
  realityio::PrimitiveDirtyPrimDescriptor::~PrimitiveDirtyPrimDescriptor(v1);
  _Unwind_Resume(a1);
}

void realityio::TypeNameDirtyPrimDescriptor::~TypeNameDirtyPrimDescriptor(realityio::TypeNameDirtyPrimDescriptor *this)
{
  *(void *)this = &unk_26F33EE78;
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)this + 64, *((void **)this + 9));
  *(void *)this = &unk_26F33EE30;
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  uint64_t vars8;

  realityio::TypeNameDirtyPrimDescriptor::~TypeNameDirtyPrimDescriptor(this);

  JUMPOUT(0x2455D2BD0);
}

unsigned char *realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(unsigned char *a1, uint64_t *a2, void **a3, void **a4)
{
  v12[1] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  v12[0] = v7;
  if ((v7 & 7) != 0)
  {
    CFStringRef v8 = (atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      v12[0] = (uint64_t)v8;
    }
  }
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)v10, v12, 1);
  realityio::TypeNameDirtyPrimDescriptor::TypeNameDirtyPrimDescriptor(a1, (uint64_t)v10, a3, a4);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)v10, v11);
  if ((v12[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  a1[56] = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 48))(a1);
  return a1;
}

void sub_23F63CA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  realityio::TypeNameDirtyPrimDescriptor::~TypeNameDirtyPrimDescriptor(v13);
  _Unwind_Resume(a1);
}

void realityio::PrimitiveDirtyPrimDescriptor::~PrimitiveDirtyPrimDescriptor(realityio::PrimitiveDirtyPrimDescriptor *this)
{
  *(void *)this = &unk_26F33EE30;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v1;
  void **v2;

  *(void *)this = &unk_26F33EE30;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_26F33EE30;
  uint64_t v2 = (void **)((char *)this + 8);
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2455D2BD0](this, 0x10A1C402FEF67C7);
}

char *realityio::TypeNameDirtyPrimDescriptor::getExplicitPrimTypes@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = (char *)*((void *)this + 8);
  uint64_t v3 = this + 72;
  if (v2 != this + 72)
  {
    this = 0;
    do
    {
      uint64_t v5 = (uint64_t *)(v2 + 32);
      if ((unint64_t)this >= *(void *)(a2 + 16))
      {
        this = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)a2, v5);
      }
      else
      {
        uint64_t v6 = *v5;
        *(void *)this = *v5;
        if ((v6 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)this &= 0xFFFFFFFFFFFFFFF8;
        }
        this += 8;
      }
      *(void *)(a2 + 8) = this;
      uint64_t v7 = (char *)*((void *)v2 + 1);
      if (v7)
      {
        do
        {
          CFStringRef v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CFStringRef v8 = (char *)*((void *)v2 + 2);
          BOOL v9 = *(void *)v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
  return this;
}

void sub_23F63CC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::TypeNameDirtyPrimDescriptor::validate(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::UsdStage *a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, int a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void v39[4] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v33, this, a2);
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v33);
  if (a3) {
    char v17 = IsValid;
  }
  else {
    char v17 = 1;
  }
  if (v17)
  {
    char v18 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v29, a3, a2);
    char v19 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v29);
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    char v18 = v19 ^ 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
  }
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
  if (v34) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v34);
  }
  if (v18) {
    return 0;
  }
  if (!*(void *)(a1 + 80)) {
    goto LABEL_27;
  }
  long long v21 = *(void **)(a1 + 64);
  long long v22 = (void *)(a1 + 72);
  if (v21 != (void *)(a1 + 72))
  {
    while ((v21[4] & 0xFFFFFFFFFFFFFFF8) != (*a6 & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v23 = (void *)v21[1];
      if (v23)
      {
        do
        {
          char v24 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          char v24 = (void *)v21[2];
          BOOL v25 = *v24 == (void)v21;
          long long v21 = v24;
        }
        while (!v25);
      }
      long long v21 = v24;
      if (v24 == v22) {
        return 0;
      }
    }
  }
  if (v22 == v21) {
    return 0;
  }
LABEL_27:
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v39, a7);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v38, a8);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v37, a9);
  uint64_t v20 = realityio::PrimitiveDirtyPrimDescriptor::validate(a1, a2, a3, this, v26, v27, (uint64_t)v39, (uint64_t)v38, (uint64_t)v37);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v37);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v38);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v39);
  return v20;
}

void sub_23F63CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((void *)(v10 - 120));
  _Unwind_Resume(a1);
}

BOOL realityio::TypeNameDirtyPrimDescriptor::_isEmpty(realityio::TypeNameDirtyPrimDescriptor *this)
{
  uint64_t v1 = (realityio::TypeNameDirtyPrimDescriptor *)*((void *)this + 8);
  if (v1 == (realityio::TypeNameDirtyPrimDescriptor *)((char *)this + 72)) {
    return *((unsigned char *)this + 56) != 0;
  }
  int v2 = 1;
  while (1)
  {
    uint64_t v3 = *((void *)v1 + 4);
    BOOL v4 = v3 != 0;
    if (!v3) {
      break;
    }
    uint64_t v5 = (realityio::TypeNameDirtyPrimDescriptor *)*((void *)v1 + 1);
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = *(realityio::TypeNameDirtyPrimDescriptor **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (realityio::TypeNameDirtyPrimDescriptor *)*((void *)v1 + 2);
        BOOL v7 = *(void *)v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    v2 &= v4;
    uint64_t v1 = v6;
    if (v6 == (realityio::TypeNameDirtyPrimDescriptor *)((char *)this + 72))
    {
      if (v2) {
        return *((unsigned char *)this + 56) != 0;
      }
      return 0;
    }
  }
  return 0;
}

uint64_t realityio::PrimitiveDirtyPrimDescriptor::isEmpty(realityio::PrimitiveDirtyPrimDescriptor *this)
{
  return *((unsigned __int8 *)this + 56);
}

const void **realityio::TypeNameDirtyPrimDescriptor::description@<X0>(realityio::TypeNameDirtyPrimDescriptor *this@<X0>, CFStringRef *a2@<X8>)
{
  CFStringRef v11 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ", ");
  CFStringRef v4 = realityio::joinAsCFStringRef((std::string *)((char *)this + 64), (const void **)__p);
  if (v11) {
    CFRelease(v11);
  }
  CFStringRef v11 = v4;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  CFStringRef v5 = realityio::joinAsCFStringRef<realityio::DirtyMetadataDescriptor>((uint64_t **)this + 1, (void (*)(void **__return_ptr, void *))realityio::DirtyMetadataDescriptor::description, 0, (const __CFArray *)", ");
  if (__p[0]) {
    CFRelease(__p[0]);
  }
  CFTypeRef cf = 0;
  __p[0] = (void *)v5;
  CFStringRef v6 = realityio::joinAsCFStringRef<realityio::PrimitiveDirtyPropertyDescriptor>((uint64_t **)this + 4);
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, @"<TypeNameDirtyPrimDescriptor: %p { typeNameIsAnyOf: [ %lu ](%@), dirtyPrimMetadataContainAnyOf: (%lu) [ %@ ], dirtyPropertiesContainAnyOf: (%lu) [ %@ ] } >", this, *((void *)this + 10), v11, (uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 4, __p[0], (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 4, v6, v6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)__p);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v11);
}

void sub_23F63D090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  CFStringRef v11 = va_arg(va1, const void *);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v8);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v9 - 40));
  _Unwind_Resume(a1);
}

void sub_23F63D0D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x23F63D0C4);
}

void realityio::PrimitiveDirtyPrimDescriptor::getExplicitPrimTypes(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::TfToken,std::__tree_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F63D21C(_Unwind_Exception *a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::TfToken,std::__tree_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    CFStringRef v4 = a2;
    CFStringRef v5 = (uint64_t **)result;
    CFStringRef v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(v5, v6, v4 + 4, v4 + 4);
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          CFStringRef v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          CFStringRef v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          CFStringRef v4 = v8;
        }
        while (!v9);
      }
      CFStringRef v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

realityio::tokens::PhysicsBuilderTokens_StaticTokenType *realityio::tokens::PhysicsBuilderTokens_StaticTokenType::PhysicsBuilderTokens_StaticTokenType(realityio::tokens::PhysicsBuilderTokens_StaticTokenType *this)
{
  int v2 = (uint64_t *)MEMORY[0x2455CF820](this, "preliminary_isSceneGroundPlane", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  void v2[3] = 0;
  CFStringRef v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  *CFStringRef v4 = v3;
  CFStringRef v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_23F63D388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsMaterialsDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40730, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40730))
  {
    operator new();
  }
  uint64_t v3 = *(void *)algn_268C40728;
  *a1 = _MergedGlobals_23;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F63D934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  MEMORY[0x2455D2BD0](v46, 0x10E1C40C8742A8BLL);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  for (; v47 != v48 - 240; v47 -= 16)
  {
    uint64_t v49 = *(std::__shared_weak_count **)(v47 - 8);
    if (v49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
    }
  }
  *(void *)(v48 - 240) = &a32;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 240));
  MEMORY[0x2455D2BD0](v45, 0x10A1C402FEF67C7);
  *(void *)(v48 - 240) = &a40;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 240));
  MEMORY[0x2455D2BD0](v44, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](a11, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40730);
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsRigidBodyDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40748))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40740;
  *a1 = qword_268C40738;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F63E128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  MEMORY[0x2455D2BD0](v28, 0x10E1C40C8742A8BLL);
  *(void *)(v30 - 176) = &a18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 176));
  MEMORY[0x2455D2BD0](v27, 0x10A1C402FEF67C7);
  *(void *)(v30 - 176) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 176));
  MEMORY[0x2455D2BD0](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v29, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40748);
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsColliderDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40760, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40760))
  {
    operator new();
  }
  uint64_t v3 = *(void *)algn_268C40758;
  *a1 = qword_268C40750;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F63E744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  MEMORY[0x2455D2BD0](v28, 0x10E1C40C8742A8BLL);
  *(void *)(v30 - 176) = &a18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 176));
  MEMORY[0x2455D2BD0](v27, 0x10A1C402FEF67C7);
  *(void *)(v30 - 176) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 176));
  MEMORY[0x2455D2BD0](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v29, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40760);
  _Unwind_Resume(a1);
}

void realityio::generatePhysicsSceneGroundPlaneDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40778, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40778))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40770;
  *a1 = qword_268C40768;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F63ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  MEMORY[0x2455D2BD0](v28, 0x10E1C40C8742A8BLL);
  *(void *)(v30 - 176) = &a18;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 176));
  MEMORY[0x2455D2BD0](v27, 0x10A1C402FEF67C7);
  *(void *)(v30 - 176) = &a26;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 176));
  MEMORY[0x2455D2BD0](v26, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v29, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40778);
  _Unwind_Resume(a1);
}

uint64_t realityio::isSceneGroundPlane(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (result)
  {
    uint64_t v9 = 0;
    uint64_t v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::PhysicsBuilderTokens);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::PhysicsBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(this, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
    if (*(unsigned char *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v8)) {
      goto LABEL_6;
    }
    CFStringRef v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::PhysicsBuilderTokens);
    if (!v5) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::PhysicsBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(v7, this, v5);
    int v6 = *(unsigned __int8 *)pxrInternal__aapl__pxrReserved__::VtValue::Get<BOOL>((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    if (v6)
    {
LABEL_6:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
      return 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v8);
      return 0;
    }
  }
  return result;
}

void sub_23F63F114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::getUsdPhysicsAttributeDoubleValue(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, double *a5)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v11, this, a2);
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v16, this, a3);
      LODWORD(v11) = v16;
      uint64_t v8 = v17;
      uint64_t v17 = 0;
      uint64_t v9 = v12;
      uint64_t v12 = v8;
      if (v9) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v13, &v18);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v14);
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v15 = v19;
      uint64_t v19 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
      if (v17) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
      }
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
    {
      uint64_t v17 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>((pxrInternal__aapl__pxrReserved__::VtValue *)&v16)) {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>();
      }
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>((pxrInternal__aapl__pxrReserved__::VtValue *)&v16)) {
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v16);
    }
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v13);
    if (v12) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
    }
  }
  return 0;
}

void sub_23F63F344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va1);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>::New()
{
}

void sub_23F63F424(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C4074E012CELL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType::~AaplUsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType *this)
{
  uint64_t v10 = (void **)((char *)this + 72);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v2 = *((void *)this + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 7);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 6);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::PhysicsBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::PhysicsBuilderTokens_StaticTokenType>::New()
{
}

void sub_23F63F62C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C405399E965);
  _Unwind_Resume(a1);
}

uint64_t RIOBuilderPropertyDeltaGetTypeID()
{
  if (RIOBuilderPropertyDeltaGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderPropertyDeltaGetTypeID::onceToken, &__block_literal_global_13);
  }
  return RIOBuilderPropertyDeltaGetTypeID::typeID;
}

void __RIOBuilderPropertyDeltaGetTypeID_block_invoke()
{
  if (!RIOBuilderPropertyDeltaGetTypeID::typeID) {
    RIOBuilderPropertyDeltaGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderPropertyDeltaCopyPropertyName(uint64_t a1)
{
  return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>((uint64_t *)(a1 + 16));
}

__CFArray *RIOBuilderPropertyDeltaCopyDirtyMetadata(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  for (uint64_t i = *(void **)(a1 + 40); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i + 2);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  return Mutable;
}

uint64_t _RIOBuilderPropertyDeltaCFFinalize(void *a1)
{
  uint64_t result = std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)(a1 + 3));
  uint64_t v3 = a1[2];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

BOOL _RIOBuilderPropertyDeltaCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOBuilderPropertyDeltaCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOBuilderPropertyDeltaCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderPropertyDelta %p>", a1);
}

CFStringRef _RIOBuilderPropertyDeltaCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderPropertyDelta %p>", a1);
}

BOOL realityio::replication::read(realityio *a1, uint64_t a2, std::string *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  std::string::size_type __n = 0;
  BOOL result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&__n, 1uLL);
  if (result)
  {
    if (__n > 0x7A120)
    {
      uint64_t v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_DWORD *)__int16 buf = 134217984;
      uint64_t v14 = 500000;
      uint64_t v7 = "String count exceeded maximum of %zu";
      uint64_t v8 = v6;
      uint32_t v9 = 12;
LABEL_8:
      _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, v7, buf, v9);
      return 0;
    }
    std::string::resize(a3, __n, 0);
    uint64_t v10 = (realityio *)std::istream::read();
    if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
    {
      uint64_t v11 = *(NSObject **)(realityio::logObjects(v10) + 40);
      BOOL result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_WORD *)__int16 buf = 0;
      uint64_t v7 = "Failed to read";
      uint64_t v8 = v11;
      uint32_t v9 = 2;
      goto LABEL_8;
    }
    return 1;
  }
  return result;
}

BOOL realityio::replication::read(realityio *a1, uint64_t a2, uint64_t *a3)
{
  memset(&__p, 0, sizeof(__p));
  BOOL v4 = realityio::replication::read(a1, a2, &__p);
  if (v4)
  {
    MEMORY[0x2455CF830](&v7, &__p);
    uint64_t v5 = *a3;
    *a3 = v7;
    uint64_t v7 = v5;
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_23F63F9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::read(realityio *a1, uint64_t a2, uint64_t a3)
{
  memset(&v12, 0, sizeof(v12));
  BOOL v4 = realityio::replication::read(a1, a2, &v12);
  if (v4)
  {
    MEMORY[0x2455CE830](__p, &v12);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v9;
    HIBYTE(v9) = 0;
    LOBYTE(__p[0]) = 0;
    uint64_t v5 = (void **)(a3 + 24);
    if (*(char *)(a3 + 47) < 0)
    {
      operator delete(*v5);
      int v6 = SHIBYTE(v9);
      *(_OWORD *)uint64_t v5 = v10;
      *(void *)(a3 + 40) = v11;
      HIBYTE(v11) = 0;
      LOBYTE(v10) = 0;
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v5 = v10;
      *(void *)(a3 + 40) = v11;
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v4;
}

{
  BOOL v4;
  int v6;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  BOOL v4 = realityio::replication::read(a1, a2, &__p);
  if (v4)
  {
    MEMORY[0x2455CF7A0](&v6, &__p);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

{
  BOOL v5;
  uint64_t v6;
  std::string v8;
  std::string v9;
  void *__p;
  char v11;
  std::string v12;

  memset(&v8, 0, sizeof(v8));
  if (realityio::replication::read(a1, a2, &v8))
  {
    MEMORY[0x2455CE830](&v9, &v8);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v12, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    }
    else {
      std::string v12 = v9;
    }
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(std::string *)a3 = v12;
    *((unsigned char *)&v12.__r_.__value_.__s + 23) = 0;
    v12.__r_.__value_.__s.__data_[0] = 0;
    if (v11 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    if (realityio::replication::read(a1, v6, (uint64_t)&v12))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 24, &v12);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a3 + 28, (_DWORD *)v12.__r_.__value_.__r.__words + 1);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v9, 0.0, 1.0);
      uint64_t v5 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v9, 1uLL);
      if (v5) {
        *(_OWORD *)(a3 + 32) = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_23F63FAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::details::readMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(realityio *a1, uint64_t a2)
{
  v11[2] = *MEMORY[0x263EF8340];
  unint64_t v10 = 0;
  BOOL result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL);
  if (result)
  {
    if (v10)
    {
      for (unint64_t i = 0; i < v10; ++i)
      {
        memset(&__p, 0, sizeof(__p));
        if (realityio::replication::read(a1, v5, &__p))
        {
          v11[1] = 0;
          if (realityio::replication::read(a1, a2, v11))
          {
            uint64_t v7 = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]();
            pxrInternal__aapl__pxrReserved__::VtValue::operator=(v7, v11);
            int v8 = 0;
          }
          else
          {
            int v8 = 1;
          }
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
        }
        else
        {
          int v8 = 1;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        BOOL result = v8 == 0;
        if (v8) {
          break;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_23F63FC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
}

void sub_23F63FD08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F63FE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::read(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  if ((realityio::replication::read(a1, a2, &v21) & 1) == 0) {
    goto LABEL_17;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v22 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                      + 168))(&v21);
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue();
    goto LABEL_14;
  }
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    uint64_t v5 = (realityio *)pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
    if (v5)
    {
      if ((v22 & 4) != 0) {
        (*(void (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v22 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                        + 168))(&v21);
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue();
      goto LABEL_14;
    }
    uint64_t v7 = *(id *)(realityio::logObjects(v5) + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((uint64_t *)v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
      int v9 = v16;
      unint64_t v10 = (void **)v15[0];
      pxrInternal__aapl__pxrReserved__::TfStringify<pxrInternal__aapl__pxrReserved__::VtValue>();
      uint64_t v11 = v15;
      if (v9 < 0) {
        uint64_t v11 = v10;
      }
      if (v14 >= 0) {
        std::vector<unsigned int>::pointer p_p = &__p;
      }
      else {
        std::vector<unsigned int>::pointer p_p = __p;
      }
      *(_DWORD *)__int16 buf = 136315394;
      int v18 = v11;
      __int16 v19 = 2080;
      uint64_t v20 = p_p;
      _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Deserialized SdfUnregisteredValue contains invalid type '%s' = '%s'; expected string, VtDictionary or SdfUnregis"
        "teredValueListOp",
        buf,
        0x16u);
      if (v14 < 0) {
        operator delete(__p);
      }
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }

LABEL_17:
    uint64_t v6 = 0;
    goto LABEL_18;
  }
  if ((v22 & 4) != 0) {
    BOOL v4 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::VtDictionary **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
  }
  else {
    BOOL v4 = v21;
  }
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v15, v4);
LABEL_14:
  pxrInternal__aapl__pxrReserved__::VtValue::operator=(a3, v15);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  uint64_t v6 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
  return v6;
}

void sub_23F6400E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 - 56));
  _Unwind_Resume(a1);
}

BOOL realityio::replication::read(void *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  BOOL v2 = realityio::replication::details::readBuffer<unsigned char,0>(a1);
  BOOL result = 0;
  if (v2)
  {
    BOOL v4 = realityio::replication::details::readBuffer<unsigned short,0>(a1);
    uint64_t v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)__int16 buf = 67109120;
      int v7 = 0;
      _os_log_error_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_ERROR, "Deserialized VtValue has invalid value type '%u'", buf, 8u);
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  size_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    size_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            uint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<BOOL,0>(a1))
      {
        *(void *)&v11[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F640CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  size_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    size_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            uint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<unsigned char,0>(a1))
      {
        *(void *)&v11[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F640F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<int>>(realityio *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t v7 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v7, 1uLL);
  if (v2)
  {
    if (v7 <= 0x7A120)
    {
      int v8 = 0;
      *(void *)&long long buf = &v8;
      pxrInternal__aapl__pxrReserved__::VtArray<int>::resize<pxrInternal__aapl__pxrReserved__::VtArray<int>::assign(unsigned long,int const&)::_Filler>((unint64_t *)v5, v7, (_DWORD **)&buf);
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
      if (realityio::replication::details::readBuffer<int,0>(a1, v6, v7))
      {
        *((void *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
      }
    }
    else
    {
      size_t v3 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v5);
  return 0;
}

void sub_23F6410E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 4 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F641378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 8 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F64160C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 8 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F6418A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 2 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::pxr_half::half,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F641B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<float>>(realityio *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t v7 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v7, 1uLL);
  if (v2)
  {
    if (v7 <= 0x7A120)
    {
      int v8 = 0;
      *(void *)&long long buf = &v8;
      pxrInternal__aapl__pxrReserved__::VtArray<float>::resize<pxrInternal__aapl__pxrReserved__::VtArray<float>::resize(unsigned long,float const&)::{lambda(float *,float *)#1}>((unint64_t *)v5, v7, (_DWORD **)&buf);
      pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
      if (realityio::replication::details::readBuffer<int,0>(a1, v6, v7))
      {
        *((void *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
      }
    }
    else
    {
      unint64_t v3 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v5);
  return 0;
}

void sub_23F641CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<double>>(realityio *a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  unint64_t v9 = 0;
  BOOL v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v4)
  {
    if (v9 <= 0x7A120)
    {
      uint64_t v10 = 0;
      *(void *)&long long buf = &v10;
      pxrInternal__aapl__pxrReserved__::VtArray<double>::resize<pxrInternal__aapl__pxrReserved__::VtArray<double>::resize(unsigned long,double const&)::{lambda(double *,double *)#1}>((unint64_t *)v7, v9, (uint64_t **)&buf);
      pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<double,0>(a1, a2, v8, v9))
      {
        *((void *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>::_PlaceCopy();
      }
    }
    else
    {
      uint64_t v5 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F641E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(realityio *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  memset(v14, 0, sizeof(v14));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v16, 1uLL);
  if (v2)
  {
    unint64_t v3 = v16;
    if (v16 <= 0x7A120)
    {
      *(_DWORD *)((char *)&buf + 3) = 0;
      LODWORD(buf) = 0;
      if (*(void *)&v14[0] != v16)
      {
        if (v16)
        {
          New = (std::string *)pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew((uint64_t)v14, v16);
          bzero(New, 24 * v3 - (24 * (int)v3 - 24) % 0x18u);
          if (New != v15)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v14);
            uint64_t v15 = New;
          }
          *(void *)&v14[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::clear(v14);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
      unint64_t v7 = v16;
      if (!v16) {
        goto LABEL_19;
      }
      uint64_t v8 = v15;
      if (realityio::replication::read(a1, v6, v15))
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 1;
        do
        {
          if (v7 - 1 == v10) {
            goto LABEL_19;
          }
          BOOL v12 = realityio::replication::read(a1, v9, v11++);
          ++v10;
        }
        while (v12);
        if (v10 >= v7)
        {
LABEL_19:
          *((void *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
        }
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v14);
  return 0;
}

void sub_23F6421CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(realityio *a1)
{
  *(void *)&v18[5] = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  memset(v14, 0, sizeof(v14));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v16, 1uLL);
  if (v2)
  {
    unint64_t v3 = v16;
    if (v16 <= 0x7A120)
    {
      if (v16 != *(void *)&v14[0])
      {
        if (v16)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew((uint64_t)v14, v16);
          bzero(New, 8 * v3);
          if (New != v15)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v14);
            uint64_t v15 = New;
          }
          *(void *)&v14[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::clear(v14);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
      unint64_t v7 = v16;
      if (!v16) {
        goto LABEL_19;
      }
      uint64_t v8 = v15;
      if (realityio::replication::read(a1, v6, v15))
      {
        unint64_t v10 = 0;
        uint64_t v11 = v8 + 1;
        do
        {
          if (v7 - 1 == v10) {
            goto LABEL_19;
          }
          BOOL v12 = realityio::replication::read(a1, v9, v11++);
          ++v10;
        }
        while (v12);
        if (v10 >= v7)
        {
LABEL_19:
          *(void *)&v18[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
        }
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v18 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v14);
  return 0;
}

void sub_23F642488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(realityio *a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  memset(v14, 0, sizeof(v14));
  BOOL v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v16, 1uLL);
  if (v4)
  {
    unint64_t v5 = v16;
    if (v16 <= 0x7A120)
    {
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)buf);
      if (*(void *)&v14[0] != v5)
      {
        if (v5)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew((uint64_t)v14, v5);
          std::__uninitialized_fill[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath*,pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)New, (uint64_t)&New[6 * v5], (long long *)buf);
          if (New != v15)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(v14);
            uint64_t v15 = New;
          }
          *(void *)&v14[0] = v5;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::clear(v14);
        }
      }
      if (v19 < 0) {
        operator delete(__p);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
      unint64_t v8 = v16;
      if (!v16) {
        goto LABEL_23;
      }
      uint64_t v9 = (uint64_t)v15;
      if (realityio::replication::read(a1, a2, (uint64_t)v15))
      {
        unint64_t v10 = 0;
        uint64_t v11 = v9 + 48;
        do
        {
          if (v8 - 1 == v10) {
            goto LABEL_23;
          }
          BOOL v12 = realityio::replication::read(a1, a2, v11);
          v11 += 48;
          ++v10;
        }
        while (v12);
        if (v10 >= v8)
        {
LABEL_23:
          *(void *)&uint8_t buf[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(void)::ti;
          pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
        }
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(v14);
  return 0;
}

void sub_23F6427CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(realityio *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_AllocateNew((uint64_t)v7, v9);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            unint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F642AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(realityio *a1)
{
  *(void *)&v10[5] = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t v7 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v7, 1uLL);
  if (v2)
  {
    if (v7 <= 0x7A120)
    {
      unint64_t v8 = buf;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfQuatf const&)::_Filler>((unint64_t *)v5, v7, (_OWORD **)&v8);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, v6, v7))
      {
        *(void *)&v10[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      unint64_t v3 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)unint64_t v10 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v5);
  return 0;
}

void sub_23F642C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew((uint64_t)v7, v9);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            unint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F642E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(realityio *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      memset(buf, 0, sizeof(buf));
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 16 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            unint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F643148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 8 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            unint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F6433DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 4 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            unint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F643670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  unint64_t v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 8 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            unint64_t v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F643904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(realityio *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t v7 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v7, 1uLL);
  if (v2)
  {
    if (v7 <= 0x7A120)
    {
      long long buf = 0uLL;
      uint64_t v10 = 0;
      p_long long buf = &buf;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfVec3d*,pxrInternal__aapl__pxrReserved__::GfVec3d*)#1}>((unint64_t *)v5, v7, &p_buf);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3d,0>(a1, v6, v7))
      {
        *((void *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      unint64_t v3 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v5);
  return 0;
}

void sub_23F643A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(realityio *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t v7 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v7, 1uLL);
  if (v2)
  {
    if (v7 <= 0x7A120)
    {
      DWORD2(buf) = 0;
      p_long long buf = &buf;
      *(void *)&long long buf = 0;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3f const&)::_Filler>((unint64_t *)v5, v7, (uint64_t **)&p_buf);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, v6, v7))
      {
        *((void *)&buf + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      unint64_t v3 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v5);
  return 0;
}

void sub_23F643C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(realityio *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t v7 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v7, 1uLL);
  if (v2)
  {
    if (v7 <= 0x7A120)
    {
      __int16 v9 = 0;
      int v8 = 0;
      *(void *)&long long buf = &v8;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::assign(unsigned long,pxrInternal__aapl__pxrReserved__::GfVec3h const&)::_Filler>((unint64_t *)v5, v7, (int **)&buf);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3h,0>(a1, v6, v7))
      {
        *((void *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      unint64_t v3 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v5);
  return 0;
}

void sub_23F643DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(realityio *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      DWORD2(buf) = 0;
      *(void *)&long long buf = 0;
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 12 * v3 - (12 * v3 - 12 - 12 * (((12 * v3 - 12) & 0xFFFFFFFC) / 0xC)));
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, (uint64_t)v8, v9))
      {
        *((void *)&buf + 1) = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F6440DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(realityio *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      *(_OWORD *)long long buf = 0u;
      long long v11 = 0u;
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 32 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F6443B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(realityio *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      memset(buf, 0, sizeof(buf));
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 16 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F644668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(realityio *a1)
{
  *(void *)&v11[5] = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      if (v9 != *(void *)&v7[0])
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 8 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&v11[1] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)uint64_t v11 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F6448FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(realityio *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      memset(buf, 0, sizeof(buf));
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 16 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F644BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(realityio *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      *(_OWORD *)long long buf = 0u;
      long long v11 = 0u;
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 32 * v3);
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F644E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(realityio *a1)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  int v8 = 0;
  unint64_t v9 = 0;
  memset(v7, 0, sizeof(v7));
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v9, 1uLL);
  if (v2)
  {
    unint64_t v3 = v9;
    if (v9 <= 0x7A120)
    {
      uint64_t v14 = 0;
      long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v11 = 0u;
      if (*(void *)&v7[0] != v9)
      {
        if (v9)
        {
          New = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew((uint64_t)v7, v9);
          bzero(New, 72 * v3 - (72 * v3 - 72 - 72 * (((72 * v3 - 72) & 0xFFFFFFF8) / 0x48)));
          if (New != v8)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
            int v8 = New;
          }
          *(void *)&v7[0] = v3;
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::clear(v7);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v7);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix3d,0>(a1, (uint64_t)v8, v9))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v7);
  return 0;
}

void sub_23F645210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(realityio *a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  unint64_t v7 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v7, 1uLL);
  if (v2)
  {
    if (v7 <= 0x7A120)
    {
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v10 = 0u;
      int v8 = buf;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::resize(unsigned long,pxrInternal__aapl__pxrReserved__::GfMatrix4d const&)::{lambda(pxrInternal__aapl__pxrReserved__::GfMatrix4d*,pxrInternal__aapl__pxrReserved__::GfMatrix4d*)#1}>((unint64_t *)v5, v7, (long long **)&v8);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v5);
      if (realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix4d,0>(a1, v6, v7))
      {
        *(void *)&uint8_t buf[8] = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtArray<realityio::WrappedRERef<REAsset *>>>::_PlaceCopy();
      }
    }
    else
    {
      unint64_t v3 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v5);
  return 0;
}

void sub_23F6453AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL realityio::replication::readContents<BOOL>(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  BOOL v4 = realityio::replication::details::readBuffer<BOOL,0>(a1);
  if (v4)
  {
    unint64_t v7 = &unk_26F333523;
    v6[0] = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v4;
}

BOOL realityio::replication::readContents<unsigned char>(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<unsigned char,0>(a1);
  if (v3)
  {
    uint64_t v6 = &unk_26F3377BB;
    v5[0] = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v5);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  }
  return v3;
}

BOOL realityio::replication::readContents<int>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v5 = 0;
  BOOL v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    uint64_t v7 = &unk_26F33764B;
    int v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<unsigned int>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v5 = 0;
  BOOL v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    uint64_t v7 = &unk_26F337873;
    int v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<long long>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  BOOL v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = &unk_26F337703;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<unsigned long long>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = 0;
  BOOL v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = &unk_26F33792B;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::pxr_half::half>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::pxr_half::half,0>(a1, (uint64_t)&v5, 1);
  if (v3)
  {
    uint64_t v7 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(void)::ti
       + 3;
    __int16 v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<float>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v5 = 0;
  BOOL v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    uint64_t v7 = &unk_26F333A9B;
    int v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<double>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  _OWORD v7[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  BOOL v4 = realityio::replication::details::readBuffer<double,0>(a1, a2, (uint64_t)&v6, 1uLL);
  if (v4)
  {
    v7[1] = &unk_26F33366B;
    v7[0] = v6;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  }
  return v4;
}

BOOL realityio::replication::readContents<std::string>(realityio *a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  memset(&__p, 0, sizeof(__p));
  BOOL v2 = realityio::replication::read(a1, a2, &__p);
  if (v2)
  {
    int v5 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy();
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v2;
}

void sub_23F645A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::TfToken>(realityio *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  void v9[2] = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  BOOL v4 = realityio::replication::read(a1, a2, &v8);
  if (!v4)
  {
    uint64_t v5 = v8;
    if ((v8 & 7) == 0) {
      return v4;
    }
LABEL_8:
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    return v4;
  }
  uint64_t v5 = v8;
  v9[0] = v8;
  v9[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
        + 1;
  uint64_t v6 = v8 & 7;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v9[0] = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v9);
  if (v6) {
    goto LABEL_8;
  }
  return v4;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(realityio *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v6);
  BOOL v4 = realityio::replication::read(a1, a2, (uint64_t)v6);
  if (v4)
  {
    long long v10 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_PlaceCopy();
  }
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v4;
}

void sub_23F645C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)va);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfQuatd>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(void)::ti;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfQuatf>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(void)::ti;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfQuath>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(void)::ti
          + 1;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2d>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2f>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
          + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2h>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    char v7 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(void)::ti
       + 3;
    int v6 = v5;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec2i>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(void)::ti
          + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3d>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3d,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3f>(realityio *a1)
{
  *(void *)&v3[7] = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, (uint64_t)v3, 1uLL);
  if (v1)
  {
    *(void *)&v3[5] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                      + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3h>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3h,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    char v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(void)::ti
       + 3;
    int v7 = v5;
    __int16 v8 = v6;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec3i>(realityio *a1)
{
  *(void *)&v3[7] = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(a1, (uint64_t)v3, 1uLL);
  if (v1)
  {
    *(void *)&v3[5] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(void)::ti
                      + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4d>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4f>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4h>(realityio *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  v6[2] = *MEMORY[0x263EF8340];
  BOOL v3 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v5, 1uLL);
  if (v3)
  {
    v6[0] = v5;
    v6[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(void)::ti
          + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  return v3;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfVec4i>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix3d,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(realityio *a1)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  BOOL v1 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix4d,0>(a1, (uint64_t)&v3, 1uLL);
  if (v1)
  {
    BOOL v4 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(void)::ti
       + 2;
    operator new();
  }
  return v1;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtDictionary>(realityio *a1, uint64_t a2)
{
  uint64_t v4[3] = *MEMORY[0x263EF8340];
  v4[0] = 0;
  BOOL v2 = realityio::replication::details::readMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1, a2);
  if (v2)
  {
    v4[2] = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::VtDictionary>::_PlaceCopy();
  }
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](v4, 0);
  return v2;
}

void sub_23F646A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
}

void sub_23F646D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  *(void *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(void *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(void *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(void *)(v30 - 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

void sub_23F647078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  *(void *)(v30 - 88) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(void *)(v30 - 168) = v30 - 144;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(void *)(v30 - 144) = v30 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(void *)(v30 - 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v30 - 80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
}

void sub_23F6473E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  *(void *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(void *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(void *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(void *)(v30 - 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
}

void sub_23F647758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  *(void *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(void *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(void *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(void *)(v30 - 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
}

void sub_23F647AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(void *)(v29 - 136) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(void *)(v29 - 88) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(void *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
}

void sub_23F647DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(void *)(v29 - 136) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(void *)(v29 - 88) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(void *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
}

void sub_23F648130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(void *)(v29 - 136) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(void *)(v29 - 88) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(void *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
}

void sub_23F648474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(void *)(v29 - 136) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(void **)(v29 - 120);
  if (v32)
  {
    *(void *)(v29 - 112) = v32;
    operator delete(v32);
  }
  uint64_t v33 = *(void **)(v29 - 96);
  if (v33)
  {
    *(void *)(v29 - 88) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(v29 - 64);
  if (v34)
  {
    *(void *)(v29 - 56) = v34;
    operator delete(v34);
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(&a9);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(realityio *a1, uint64_t a2)
{
  _OWORD v5[2] = *(void ***)MEMORY[0x263EF8340];
  memset(v4, 0, sizeof(v4));
  uint64_t v2 = realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, a2, v4);
  if (v2)
  {
    v5[1] = (void **)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>::_PlaceCopy();
  }
  v5[0] = (void **)v4;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](v5);
  return v2;
}

void sub_23F6485BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::readContents<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(realityio *a1, uint64_t a2)
{
  v6[2] = *(void ***)MEMORY[0x263EF8340];
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  uint64_t v2 = realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, a2, &v4);
  if (v2)
  {
    v6[1] = (void **)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy();
  }
  v6[0] = (void **)&v4;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v6);
  return v2;
}

void sub_23F648688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v4 = (realityio *)std::istream::read();
  int v5 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    __int16 v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    char v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(void)::ti
       + 3;
    *(_DWORD *)long long buf = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfPermission>(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v4 = (realityio *)std::istream::read();
  int v5 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    __int16 v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    char v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>(void)::ti
       + 3;
    *(_DWORD *)long long buf = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfVariability>(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  long long v4 = (realityio *)std::istream::read();
  int v5 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    __int16 v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    char v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>(void)::ti
       + 3;
    *(_DWORD *)long long buf = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

uint64_t realityio::replication::readContents<std::map<std::string,std::string>>(realityio *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v8[0] = 0;
  v8[1] = 0;
  int v7 = (uint64_t *)v8;
  unint64_t v10 = 0;
  if (realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v10, 1uLL))
  {
    if (!v10)
    {
LABEL_15:
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<std::string,std::string>>(void)::ti;
      pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>::_PlaceCopy();
    }
    uint64_t v3 = 0;
    while (1)
    {
      memset(&__p, 0, sizeof(__p));
      if (realityio::replication::read(a1, v2, &__p))
      {
        memset(&__str, 0, sizeof(__str));
        if (realityio::replication::read(a1, v2, &__str))
        {
          std::vector<unsigned int>::pointer p_p = &__p;
          long long v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v7, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
          std::string::operator=((std::string *)(v4 + 7), &__str);
          int v5 = 0;
        }
        else
        {
          int v5 = 1;
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v5 = 1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v5) {
        break;
      }
      if (v10 <= ++v3) {
        goto LABEL_15;
      }
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7, v8[0]);
  return 0;
}

void sub_23F648B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfPayload>(realityio *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  long long v12 = 0;
  uint64_t v13 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v6, 0.0, 1.0);
  MEMORY[0x2455CE630](__p, &v11, &v7, v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (SHIBYTE(v13) < 0) {
    operator delete(v11);
  }
  BOOL v4 = realityio::replication::read(a1, a2, (uint64_t)__p);
  if (v4)
  {
    long long v12 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PlaceCopy();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_23F648CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  pxrInternal__aapl__pxrReserved__::SdfPayload::~SdfPayload((void **)va);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<std::vector<double>>(realityio *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  unint64_t v12 = 0;
  BOOL v4 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v12, 1uLL);
  if (!v4) {
    return 0;
  }
  unint64_t v5 = v12;
  if (v12 > 0x7A120)
  {
    __int16 v6 = *(NSObject **)(realityio::logObjects((realityio *)v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)uint64_t v14 = 500000;
      _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    return 0;
  }
  if (v12)
  {
    char v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v12);
    bzero(v9, 8 * v5);
    unint64_t v10 = v12;
    uint64_t v11 = v9;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  BOOL v7 = realityio::replication::details::readBuffer<double,0>(a1, a2, (uint64_t)v11, v10);
  if (v7)
  {
    *(void *)&v14[4] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<double>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>::_PlaceCopy();
  }
  if (v11) {
    operator delete(v11);
  }
  return v7;
}

void sub_23F648EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::replication::readContents<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(realityio *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unint64_t v11 = 0;
  BOOL v2 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v11, 1uLL);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = v11;
  if (v11 > 0x7A120)
  {
    BOOL v4 = *(NSObject **)(realityio::logObjects((realityio *)v2) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)uint64_t v13 = 500000;
      _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
    }
    return 0;
  }
  if (v11)
  {
    BOOL v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v11);
    uint64_t v8 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v7[v8], 0.0, 1.0);
      v8 += 16;
    }
    while (16 * v3 != v8);
    char v9 = v7;
    unint64_t v10 = v11;
  }
  else
  {
    unint64_t v10 = 0;
    char v9 = 0;
  }
  BOOL v5 = realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)v9, v10);
  if (v5)
  {
    *(void *)&unsigned char v13[4] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>::_PlaceCopy();
  }
  if (v9) {
    operator delete(v9);
  }
  return v5;
}

void sub_23F649090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::replication::readContents<std::vector<std::string>>(realityio *a1, uint64_t a2)
{
  _OWORD v5[2] = *(void ***)MEMORY[0x263EF8340];
  memset(v4, 0, sizeof(v4));
  uint64_t v2 = realityio::replication::details::readVector<std::vector<std::string>>(a1, a2, v4);
  if (v2)
  {
    v5[1] = (void **)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<std::string>>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>::_PlaceCopy();
  }
  v5[0] = (void **)v4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  return v2;
}

void sub_23F64916C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  BOOL v4 = (realityio *)std::istream::read();
  int v5 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    __int16 v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    char v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(void)::ti
       + 3;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v7);
  uint64_t v4 = realityio::replication::read(a1, a2, v7);
  if (v4)
  {
    __int16 v6 = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PlaceCopy();
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  return v4;
}

void sub_23F649348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp();
}

void sub_23F649638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  *(void *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(void *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(void *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(void *)(v30 - 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

void realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
}

void sub_23F6499A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  *(void *)(v30 - 88) = v29;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  a29 = (void **)(v30 - 168);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&a29);
  *(void *)(v30 - 168) = v30 - 144;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 168));
  *(void *)(v30 - 144) = v30 - 120;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 144));
  *(void *)(v30 - 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v30 - 80;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::~SdfListOp(&a10);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(void *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio *)std::istream::read();
  int v5 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v5)
  {
    __int16 v6 = *(NSObject **)(realityio::logObjects(v4) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Failed to read", buf, 2u);
    }
  }
  else
  {
    *(void *)long long buf = 0;
    char v9 = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(void)::ti
       + 1;
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a2, (pxrInternal__aapl__pxrReserved__::VtValue *)buf);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
  }
  return v5 == 0;
}

uint64_t realityio::replication::readContents<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  uint64_t v4 = realityio::replication::read(a1, a2, v7);
  if (v4)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
    pxrInternal__aapl__pxrReserved__::VtValue::Swap(a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v6);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  return v4;
}

void sub_23F649BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readBuffer<unsigned long long,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 61)
  {
    unint64_t v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    unint64_t v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60)
  {
    unint64_t v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    unint64_t v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<unsigned char,0>(void *a1)
{
  uint64_t v2 = (realityio *)std::istream::read();
  int v3 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(realityio::logObjects(v2) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v6 = 0;
      _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Failed to read", v6, 2u);
    }
  }
  return v3 == 0;
}

BOOL realityio::replication::details::readBuffer<unsigned short,0>(void *a1)
{
  uint64_t v2 = (realityio *)std::istream::read();
  int v3 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(realityio::logObjects(v2) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v6 = 0;
      _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Failed to read", v6, 2u);
    }
  }
  return v3 == 0;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::VtValue::Swap(pxrInternal__aapl__pxrReserved__::VtValue *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((void *)this + 1))
  {
    uint64_t v13 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v14, (uint64_t)&v12);
    uint64_t v4 = *((void *)this + 1);
    int v5 = ~*((_DWORD *)this + 2);
    uint64_t v13 = v4;
    if ((v5 & 3) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(this, &v12);
    }
    else {
      uint64_t v12 = *(void *)this;
    }
    *((void *)this + 1) = 0;
    if (v15) {
      (*(void (**)(unsigned char *))(v15 + 32))(v14);
    }
    __int16 v6 = (uint64_t *)((char *)a2 + 8);
    if (!*((void *)a2 + 1))
    {
      uint64_t v8 = *((void *)this + 1);
      if (v8 && (*((void *)this + 1) & 3) != 3) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(this);
      }
      *((void *)this + 1) = 0;
      goto LABEL_19;
    }
  }
  else
  {
    __int16 v6 = (uint64_t *)((char *)a2 + 8);
    if (!*((void *)a2 + 1)) {
      return this;
    }
    uint64_t v13 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v14, (uint64_t)this);
  uint64_t v7 = *v6;
  *((void *)this + 1) = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, this);
  }
  else {
    *(void *)this = *(void *)a2;
  }
  *__int16 v6 = 0;
  if (v15) {
    (*(void (**)(unsigned char *))(v15 + 32))(v14);
  }
LABEL_19:
  if (v13)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v14, (uint64_t)a2);
    uint64_t v9 = v13;
    char v10 = ~(_BYTE)v13;
    *__int16 v6 = v13;
    if ((v10 & 3) != 0) {
      (*(void (**)(uint64_t *, pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    }
    else {
      *(void *)a2 = v12;
    }
    uint64_t v13 = 0;
    if (v15) {
      (*(void (**)(unsigned char *))(v15 + 32))(v14);
    }
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    }
    *__int16 v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
  return this;
}

void sub_23F64A104(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readBuffer<BOOL,0>(void *a1)
{
  uint64_t v2 = (realityio *)std::istream::read();
  int v3 = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 32) & 5;
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(realityio::logObjects(v2) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int16 v6 = 0;
      _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, "Failed to read", v6, 2u);
    }
  }
  return v3 == 0;
}

BOOL realityio::replication::details::readBuffer<int,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    int v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::pxr_half::half,0>(realityio *a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    int v5 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v7 = "Read size overflowed";
    uint64_t v8 = buf;
    goto LABEL_7;
  }
  uint64_t v4 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v5 = *(NSObject **)(realityio::logObjects(v4) + 40);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    uint64_t v7 = "Failed to read";
    uint64_t v8 = (uint8_t *)&v9;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_ERROR, v7, v8, 2u);
    return 0;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<double,0>(realityio *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4 >> 61)
  {
    uint64_t v4 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v11 = 0;
    __int16 v6 = "Read size overflowed";
    uint64_t v7 = (uint8_t *)&v11;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_ERROR, v6, v7, 2u);
    return 0;
  }
  __int16 v9 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    uint64_t v4 = *(NSObject **)(realityio::logObjects(v9) + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    __int16 v6 = "Failed to read";
    uint64_t v7 = (uint8_t *)&v10;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfQuatd,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 59)
  {
    int v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3d,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (!is_mul_ok(a3, 0x18uLL))
  {
    int v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3f,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (!is_mul_ok(a3, 0xCuLL))
  {
    int v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfVec3h,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (!is_mul_ok(a3, 6uLL))
  {
    int v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix3d,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (!is_mul_ok(a3, 0x48uLL))
  {
    int v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

BOOL realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::GfMatrix4d,0>(realityio *a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 57)
  {
    int v3 = *(NSObject **)(realityio::logObjects(a1) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v10 = 0;
    int v5 = "Read size overflowed";
    __int16 v6 = (uint8_t *)&v10;
LABEL_7:
    _os_log_error_impl(&dword_23F4EA000, v3, OS_LOG_TYPE_ERROR, v5, v6, 2u);
    return 0;
  }
  uint64_t v8 = (realityio *)std::istream::read();
  if ((*((unsigned char *)a1 + *(void *)(*(void *)a1 - 24) + 32) & 5) != 0)
  {
    int v3 = *(NSObject **)(realityio::logObjects(v8) + 40);
    BOOL result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    __int16 v9 = 0;
    int v5 = "Failed to read";
    __int16 v6 = (uint8_t *)&v9;
    goto LABEL_7;
  }
  return 1;
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(realityio *a1, uint64_t a2, long long *a3)
{
  buf[5] = *MEMORY[0x263EF8340];
  unint64_t v36 = 0;
  uint64_t result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v36, 1uLL);
  if (!result) {
    return result;
  }
  uint64_t v7 = v36;
  if (v36 > 0x7A120)
  {
    uint64_t v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
    uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = 500000;
      _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)buf, 0xCu);
      return 0;
    }
    return result;
  }
  __int16 v9 = *(uint64_t **)a3;
  __int16 v10 = (uint64_t *)*((void *)a3 + 1);
  unint64_t v11 = ((uint64_t)v10 - *(void *)a3) >> 3;
  if (v36 <= v11)
  {
    if (v36 >= v11) {
      goto LABEL_24;
    }
    char v24 = &v9[v36];
    while (v10 != v24)
    {
      uint64_t v26 = *--v10;
      uint64_t v25 = v26;
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
  else
  {
    unint64_t v12 = v36 - v11;
    uint64_t v13 = *((void *)a3 + 2);
    if (v36 - v11 > (v13 - (uint64_t)v10) >> 3)
    {
      uint64_t v14 = v13 - (void)v9;
      if (v14 >> 2 > v36) {
        uint64_t v7 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v7;
      }
      uint8_t buf[4] = a3 + 1;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a3 + 1), v15);
      uint64_t v18 = *(uint64_t **)a3;
      uint64_t v17 = (uint64_t *)*((void *)a3 + 1);
      char v19 = &v16[8 * v11];
      long long v21 = &v16[8 * v20];
      bzero(v19, 8 * v12);
      uint64_t v22 = &v19[8 * v12];
      while (v17 != v18)
      {
        uint64_t v23 = *--v17;
        *((void *)v19 - 1) = v23;
        v19 -= 8;
        uint64_t *v17 = 0;
      }
      long long v27 = *a3;
      *(void *)a3 = v19;
      *((void *)a3 + 1) = v22;
      *(_OWORD *)&buf[1] = v27;
      uint64_t v28 = *((void *)a3 + 2);
      *((void *)a3 + 2) = v21;
      _OWORD buf[3] = v28;
      buf[0] = v27;
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)buf);
      goto LABEL_24;
    }
    bzero(*((void **)a3 + 1), 8 * v12);
    char v24 = &v10[v12];
  }
  *((void *)a3 + 1) = v24;
LABEL_24:
  unint64_t v29 = v36;
  if (!v36) {
    return 1;
  }
  uint64_t v30 = *(uint64_t **)a3;
  uint64_t result = realityio::replication::read(a1, v6, v30);
  if (result)
  {
    uint64_t v32 = v30 + 1;
    uint64_t v33 = 1;
    do
    {
      unint64_t v34 = v33;
      if (v29 == v33) {
        break;
      }
      BOOL v35 = realityio::replication::read(a1, v31, v32);
      uint64_t v33 = v34 + 1;
      ++v32;
    }
    while (v35);
    return v34 >= v29;
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(unsigned __int8 **a1)
{
  BOOL v1 = *a1;
  unint64_t v2 = **a1;
  int v3 = (uint64_t *)*((void *)*a1 + 1);
  uint64_t v4 = *((void *)*a1 + 2) - (void)v3;
  if (v4)
  {
    uint64_t v5 = v4 >> 3;
    do
    {
      uint64_t v6 = *v3++;
      unint64_t v2 = (v6 & 0xFFFFFFFFFFFFFFF8)
         + (((v6 & 0xFFFFFFFFFFFFFFF8) + v2 + ((v6 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v6 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v5;
    }
    while (v5);
  }
  uint64_t v7 = (uint64_t *)v1[4];
  uint64_t v8 = v1[5] - (void)v7;
  if (v8)
  {
    uint64_t v9 = v8 >> 3;
    do
    {
      uint64_t v10 = *v7++;
      unint64_t v2 = (v10 & 0xFFFFFFFFFFFFFFF8)
         + (((v10 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v10 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v10 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v9;
    }
    while (v9);
  }
  unint64_t v11 = (uint64_t *)v1[7];
  uint64_t v12 = v1[8] - (void)v11;
  if (v12)
  {
    uint64_t v13 = v12 >> 3;
    do
    {
      uint64_t v14 = *v11++;
      unint64_t v2 = (v14 & 0xFFFFFFFFFFFFFFF8)
         + (((v14 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v14 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v14 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v13;
    }
    while (v13);
  }
  unint64_t v15 = (uint64_t *)v1[10];
  uint64_t v16 = v1[11] - (void)v15;
  if (v16)
  {
    uint64_t v17 = v16 >> 3;
    do
    {
      uint64_t v18 = *v15++;
      unint64_t v2 = (v18 & 0xFFFFFFFFFFFFFFF8)
         + (((v18 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v18 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v18 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v17;
    }
    while (v17);
  }
  char v19 = (uint64_t *)v1[13];
  uint64_t v20 = v1[14] - (void)v19;
  if (v20)
  {
    uint64_t v21 = v20 >> 3;
    do
    {
      uint64_t v22 = *v19++;
      unint64_t v2 = (v22 & 0xFFFFFFFFFFFFFFF8)
         + (((v22 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v22 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v22 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v21;
    }
    while (v21);
  }
  uint64_t v23 = (uint64_t *)v1[16];
  uint64_t v24 = v1[17] - (void)v23;
  if (v24)
  {
    uint64_t v25 = v24 >> 3;
    do
    {
      uint64_t v26 = *v23++;
      unint64_t v2 = (v26 & 0xFFFFFFFFFFFFFFF8)
         + (((v26 & 0xFFFFFFFFFFFFFFF8)
           + v2
           + ((v26 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v26 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v25;
    }
    while (v25);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64AE54(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 104);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 80);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C40D6643E80);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy()
{
}

void sub_23F64B070(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::~SdfListOp(void **a1)
{
  int v3 = a1 + 16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t realityio::replication::details::readVector<std::vector<std::string>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unint64_t v29 = 0;
  uint64_t result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v29, 1uLL);
  if (result)
  {
    uint64_t v7 = v29;
    if (v29 <= 0x7A120)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = a3[1];
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a3) >> 3);
      unint64_t v12 = v29 - v11;
      if (v29 <= v11)
      {
        if (v29 < v11)
        {
          uint64_t v20 = v9 + 24 * v29;
          while (v10 != v20)
          {
            if (*(char *)(v10 - 1) < 0) {
              operator delete(*(void **)(v10 - 24));
            }
            v10 -= 24;
          }
          a3[1] = v20;
        }
      }
      else
      {
        uint64_t v13 = a3[2];
        if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 3) >= v12)
        {
          size_t v21 = 24 * ((24 * v12 - 24) / 0x18) + 24;
          bzero((void *)a3[1], v21);
          a3[1] = v10 + v21;
        }
        else
        {
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 3);
          if (2 * v14 > v29) {
            uint64_t v7 = 2 * v14;
          }
          if (v14 >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v7;
          }
          buf.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 2);
          uint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>((uint64_t)(a3 + 2), v15);
          uint64_t v17 = v16 + v11;
          buf.__first_ = v16;
          buf.__begin_ = v17;
          buf.__end_cap_.__value_ = &v16[v18];
          size_t v19 = 24 * ((24 * v12 - 24) / 0x18) + 24;
          bzero(v17, v19);
          buf.__end_ = (std::string *)((char *)v17 + v19);
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &buf);
          std::__split_buffer<std::string>::~__split_buffer(&buf);
        }
      }
      unint64_t v22 = v29;
      if (v29)
      {
        uint64_t v23 = (std::string *)*a3;
        uint64_t result = realityio::replication::read(a1, v6, v23);
        if (result)
        {
          uint64_t v25 = v23 + 1;
          uint64_t v26 = 1;
          do
          {
            unint64_t v27 = v26;
            if (v22 == v26) {
              break;
            }
            BOOL v28 = realityio::replication::read(a1, v24, v25);
            uint64_t v26 = v27 + 1;
            ++v25;
          }
          while (v28);
          return v27 >= v22;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      uint64_t v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        LODWORD(buf.__first_) = 134217984;
        *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)500000;
        _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

void sub_23F64B3A0(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::string> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_Hash(unsigned __int8 **a1)
{
  uint64_t v1 = (uint64_t)*a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 16) - *(void *)(v1 + 8)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 40) - *(void *)(v1 + 32)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 64) - *(void *)(v1 + 56)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 88) - *(void *)(v1 + 80)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 112) - *(void *)(v1 + 104)) >> 3));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, *(uint64_t **)(v1 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 136) - *(void *)(v1 + 128)) >> 3));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64B580(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 104);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 80);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 56);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 32);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C40D6643E80);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 32), *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 56), *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 104), *(long long **)(a2 + 104), *(long long **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 128), *(long long **)(a2 + 128), *(long long **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  return a1;
}

void sub_23F64B878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>::_PlaceCopy()
{
}

void sub_23F64B944(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unint64_t v15 = 0;
  uint64_t result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v15, 1uLL);
  if (result)
  {
    if (v15 <= 0x7A120)
    {
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::resize(a3, v15);
      unint64_t v8 = v15;
      if (v15)
      {
        uint64_t v9 = *a3;
        uint64_t result = realityio::replication::read(a1, v7, v9);
        if (result)
        {
          uint64_t v11 = v9 + 8;
          uint64_t v12 = 1;
          do
          {
            unint64_t v13 = v12;
            if (v8 == v12) {
              break;
            }
            BOOL v14 = realityio::replication::read(a1, v10, v11);
            uint64_t v12 = v13 + 1;
            v11 += 8;
          }
          while (v14);
          return v13 >= v8;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      uint64_t v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      uint64_t result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
        uint64_t v17 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::~SdfListOp(void **a1)
{
  int v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

BOOL realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unint64_t v34 = 0;
  BOOL v6 = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v34, 1uLL);
  if (!v6) {
    return 0;
  }
  unint64_t v8 = v34;
  if (v34 > 0x7A120)
  {
    uint64_t v9 = *(NSObject **)(realityio::logObjects((realityio *)v6) + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 500000;
      _os_log_error_impl(&dword_23F4EA000, v9, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", (uint8_t *)&__p, 0xCu);
    }
    return 0;
  }
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  unint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - *a3) >> 3);
  unint64_t v15 = v34 - v14;
  if (v34 <= v14)
  {
    if (v34 < v14)
    {
      unint64_t v26 = v12 + 56 * v34;
      while (v13 != v26)
      {
        v13 -= 56;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100]((uint64_t)(a3 + 2), v13);
      }
      a3[1] = v26;
    }
  }
  else
  {
    uint64_t v16 = a3[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v16 - v13) >> 3) >= v15)
    {
      unint64_t v27 = v13 + 56 * v15;
      uint64_t v28 = 56 * v34 - 8 * ((v13 - *a3) >> 3);
      do
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference>(v13);
        v13 += 56;
        v28 -= 56;
      }
      while (v28);
      a3[1] = v27;
    }
    else
    {
      unint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((v16 - v12) >> 3);
      uint64_t v18 = 2 * v17;
      if (2 * v17 <= v34) {
        uint64_t v18 = v34;
      }
      if (v17 >= 0x249249249249249) {
        unint64_t v19 = 0x492492492492492;
      }
      else {
        unint64_t v19 = v18;
      }
      uint64_t v41 = a3 + 2;
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>((uint64_t)(a3 + 2), v19);
      std::string::size_type v21 = (std::string::size_type)&v20[56 * v14];
      __p.__r_.__value_.__l.__size_ = v21;
      __p.__r_.__value_.__r.__words[2] = v21;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      uint64_t v40 = &v20[56 * v22];
      uint64_t v23 = 56 * v8;
      std::string::size_type v24 = (std::string::size_type)&v20[56 * v8];
      unint64_t v25 = v23 - 56 * v14;
      do
      {
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference>(v21);
        v21 += 56;
        v25 -= 56;
      }
      while (v25);
      __p.__r_.__value_.__r.__words[2] = v24;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__swap_out_circular_buffer(a3, &__p);
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::~__split_buffer((void **)&__p.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v29 = v34;
  if (v34)
  {
    unint64_t v30 = 0;
    BOOL v10 = 0;
    uint64_t v31 = *a3 + 48;
    do
    {
      memset(&__p, 0, sizeof(__p));
      if (realityio::replication::read(a1, v7, &__p))
      {
        pxrInternal__aapl__pxrReserved__::SdfReference::SetAssetPath(v31 - 48);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        if (realityio::replication::read(a1, v32, (uint64_t)&v37)
          && (pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v31 - 24, &v37), pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v31 - 20, &v38), pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v36, 0.0, 1.0), realityio::replication::details::readBuffer<pxrInternal__aapl__pxrReserved__::SdfLayerOffset,0>(a1, (uint64_t)&v36, 1uLL)))
        {
          *(_OWORD *)(v31 - 16) = v36;
          uint64_t v35 = 0;
          BOOL v33 = realityio::replication::details::readMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1, a2);
          if (v33) {
            pxrInternal__aapl__pxrReserved__::VtDictionary::operator=();
          }
          std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v35, 0);
        }
        else
        {
          BOOL v33 = 0;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v37);
      }
      else
      {
        BOOL v33 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v33) {
        break;
      }
      ++v30;
      v31 += 56;
      BOOL v10 = v29 <= v30;
    }
    while (v29 != v30);
  }
  else
  {
    return 1;
  }
  return v10;
}

void sub_23F64BEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference>(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  uint64_t v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v3, 0.0, 1.0);
  uint64_t v2 = 0;
  MEMORY[0x2455CE860](a1, __p, &v4, v3, &v2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v2, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F64C068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  _OWORD v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      long long v10 = *(_OWORD *)(v9 - 56);
      *(void *)(v7 - 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(void *)(v9 - 40);
      *(_OWORD *)(v7 - 56) = v10;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
      *(void *)(v9 - 56) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 32), (_DWORD *)(v9 - 32));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 28), (_DWORD *)(v9 - 28));
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(v9 - 24);
      uint64_t v11 = *(void *)(v9 - 8);
      *(void *)(v9 - 8) = 0;
      *(void *)(v7 - 8) = v11;
      uint64_t v7 = *((void *)&v17 + 1) - 56;
      *((void *)&v17 + 1) -= 56;
      v9 -= 56;
    }
    while (v9 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,std::reverse_iterator<pxrInternal__aapl__pxrReserved__::SdfReference*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)(a2 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void **std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](v4, i - 56);
  }
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_Hash(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v29 = 1;
  uint64_t v28 = v2;
  uint64_t v3 = (const char *)v1[1];
  uint64_t v4 = v1[2] - (void)v3;
  if (v4)
  {
    uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * (v4 >> 3);
    do
    {
      --v5;
      uint64_t v6 = v3 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v3);
      uint64_t v3 = v6;
    }
    while (v5);
  }
  uint64_t v7 = (const char *)v1[4];
  uint64_t v8 = v1[5] - (void)v7;
  if (v8)
  {
    uint64_t v9 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    do
    {
      --v9;
      long long v10 = v7 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v7);
      uint64_t v7 = v10;
    }
    while (v9);
  }
  uint64_t v11 = (const char *)v1[7];
  uint64_t v12 = v1[8] - (void)v11;
  if (v12)
  {
    uint64_t v13 = 0x6DB6DB6DB6DB6DB7 * (v12 >> 3);
    do
    {
      --v13;
      unint64_t v14 = v11 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v11);
      uint64_t v11 = v14;
    }
    while (v13);
  }
  char v15 = (const char *)v1[10];
  uint64_t v16 = v1[11] - (void)v15;
  if (v16)
  {
    uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 3);
    do
    {
      --v17;
      uint64_t v18 = v15 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v15);
      char v15 = v18;
    }
    while (v17);
  }
  unint64_t v19 = (const char *)v1[13];
  uint64_t v20 = v1[14] - (void)v19;
  if (v20)
  {
    uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * (v20 >> 3);
    do
    {
      --v21;
      uint64_t v22 = v19 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v19);
      unint64_t v19 = v22;
    }
    while (v21);
  }
  uint64_t v23 = (const char *)v1[16];
  uint64_t v24 = v1[17] - (void)v23;
  if (v24)
  {
    uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * (v24 >> 3);
    do
    {
      --v25;
      unint64_t v26 = v23 + 56;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>((uint64_t)&v28, v23);
      uint64_t v23 = v26;
    }
    while (v25);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v28));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64C674(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 104);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 80);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C40D6643E80);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfReference const&>(uint64_t a1, const char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)(a2 + 48);
  uint64_t v12 = 0;
  char v13 = 0;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v12, a2);
  uint64_t v7 = *((unsigned int *)v2 + 6);
  uint64_t v6 = *((unsigned int *)v2 + 7);
  if (v13) {
    v7 += (unint64_t)(v12 + v7 + (v12 + v7) * (v12 + v7)) >> 1;
  }
  else {
    char v13 = 1;
  }
  uint64_t v12 = v6 + ((unint64_t)(v7 + v6 + (v7 + v6) * (v7 + v6)) >> 1);
  uint64_t Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(v4);
  if (v13) {
    Hash += (unint64_t)(v12 + Hash + (v12 + Hash) * (v12 + Hash)) >> 1;
  }
  else {
    char v13 = 1;
  }
  uint64_t v12 = Hash;
  unint64_t result = pxrInternal__aapl__pxrReserved__::hash_value(v5, v9);
  if (v13) {
    result += (v12 + result + (v12 + result) * (v12 + result)) >> 1;
  }
  unint64_t v11 = bswap64(0x9E3779B97F4A7C55 * result);
  if (*(unsigned char *)(a1 + 8)) {
    v11 += (*(void *)a1 + v11 + (*(void *)a1 + v11) * (*(void *)a1 + v11)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v11;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 32), *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 56), *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 104), *(long long **)(a2 + 104), *(long long **)(a2 + 112), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>((std::string *)(a1 + 128), *(long long **)(a2 + 128), *(long long **)(a2 + 136), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  return a1;
}

void sub_23F64CAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfReference*,pxrInternal__aapl__pxrReserved__::SdfReference*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    words = result->__r_.__value_.__r.__words;
    if (a4 >= 0x492492492492493) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t result = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>((uint64_t)&result->__r_.__value_.__r.__words[2], a4);
    uint64_t v7 = result;
    void *words = result;
    words[1] = result;
    words[2] = (char *)result + 56 * v8;
    uint64_t v9 = result;
    if (a2 != a3)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(result, a2);
        a2 = (long long *)((char *)a2 + 56);
        unint64_t result = (std::string *)((char *)v9 + 56);
        uint64_t v9 = (std::string *)((char *)v9 + 56);
      }
      while (a2 != a3);
      uint64_t v7 = result;
    }
    words[1] = v7;
  }
  return result;
}

void sub_23F64CBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

std::string *pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[1], (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)a2 + 7);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = a2[2];
  MEMORY[0x2455CE980](&this[2], a2 + 3);
  return this;
}

void sub_23F64CCAC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>,pxrInternal__aapl__pxrReserved__::SdfReference*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 56;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>::_PlaceCopy()
{
}

void sub_23F64CDA4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfListOp<int>::~SdfListOp(void *a1)
{
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

BOOL realityio::replication::details::readVector<std::vector<int>>(realityio *a1, std::vector<unsigned int> *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  std::vector<unsigned int>::size_type __sz = 0;
  BOOL result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&__sz, 1uLL);
  if (result)
  {
    if (__sz <= 0x7A120)
    {
      std::vector<int>::resize(a2, __sz);
      return realityio::replication::details::readBuffer<int,0>(a1, (uint64_t)a2->__begin_, __sz);
    }
    else
    {
      uint64_t v5 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
        uint64_t v8 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Hash(const char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(unsigned __int8 *)*a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64D0E4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>::_PlaceCopy();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  return a1;
}

void sub_23F64D3A8(_Unwind_Exception *exception_object)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  long long v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  unint64_t v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23F64D484(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>::_PlaceCopy()
{
}

void sub_23F64D504(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readVector<std::vector<long long>>(realityio *a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v23 = 0;
  BOOL result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v23, 1uLL);
  if (result)
  {
    uint64_t v5 = v23;
    if (v23 > 0x7A120)
    {
      uint64_t v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
        uint64_t v25 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
      return result;
    }
    uint64_t v7 = *a2;
    size_t v8 = (char *)a2[1];
    unint64_t v9 = (uint64_t)&v8[-*a2] >> 3;
    if (v23 <= v9)
    {
      if (v23 >= v9) {
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      }
      unint64_t v22 = v7 + 8 * v23;
    }
    else
    {
      uint64_t v10 = v23 - v9;
      unint64_t v11 = (char *)a2[2];
      if (v23 - v9 > (v11 - v8) >> 3)
      {
        uint64_t v12 = (uint64_t)&v11[-v7];
        if (v12 >> 2 > v23) {
          uint64_t v5 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v5;
        }
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v13);
        char v15 = (char *)*a2;
        uint64_t v16 = (char *)a2[1];
        uint64_t v17 = &v14[8 * v9];
        unint64_t v19 = &v14[8 * v18];
        bzero(v17, 8 * v10);
        uint64_t v20 = &v17[8 * v10];
        while (v16 != v15)
        {
          uint64_t v21 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        *a2 = (uint64_t)v17;
        a2[1] = (uint64_t)v20;
        a2[2] = (uint64_t)v19;
        if (v15) {
          operator delete(v15);
        }
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      }
      bzero((void *)a2[1], 8 * v10);
      unint64_t v22 = (unint64_t)&v8[8 * v10];
    }
    a2[1] = v22;
    return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Hash(const char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(unsigned __int8 *)*a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64D888(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIxEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>::_PlaceCopy();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_23F64DA84(_Unwind_Exception *exception_object)
{
  size_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  unint64_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  unint64_t v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23F64DB7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>::_PlaceCopy()
{
}

void sub_23F64DBFC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Hash(const char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(unsigned __int8 *)*a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64DDC4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>::_PlaceCopy();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  return a1;
}

void sub_23F64DFC0(_Unwind_Exception *exception_object)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  size_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  unint64_t v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>::_PlaceCopy()
{
}

void sub_23F64E0A0(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

BOOL realityio::replication::details::readVector<std::vector<unsigned long long>>(realityio *a1, uint64_t *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  unint64_t v23 = 0;
  BOOL result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v23, 1uLL);
  if (result)
  {
    uint64_t v5 = v23;
    if (v23 > 0x7A120)
    {
      uint64_t v6 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      BOOL result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
        uint64_t v25 = 500000;
        _os_log_error_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
      return result;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = (char *)a2[1];
    unint64_t v9 = (uint64_t)&v8[-*a2] >> 3;
    if (v23 <= v9)
    {
      if (v23 >= v9) {
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      }
      unint64_t v22 = v7 + 8 * v23;
    }
    else
    {
      uint64_t v10 = v23 - v9;
      unint64_t v11 = (char *)a2[2];
      if (v23 - v9 > (v11 - v8) >> 3)
      {
        uint64_t v12 = (uint64_t)&v11[-v7];
        if (v12 >> 2 > v23) {
          uint64_t v5 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v5;
        }
        unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v13);
        char v15 = (char *)*a2;
        uint64_t v16 = (char *)a2[1];
        uint64_t v17 = &v14[8 * v9];
        unint64_t v19 = &v14[8 * v18];
        bzero(v17, 8 * v10);
        uint64_t v20 = &v17[8 * v10];
        while (v16 != v15)
        {
          uint64_t v21 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        *a2 = (uint64_t)v17;
        a2[1] = (uint64_t)v20;
        a2[2] = (uint64_t)v19;
        if (v15) {
          operator delete(v15);
        }
        return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
      }
      bzero((void *)a2[1], 8 * v10);
      unint64_t v22 = (unint64_t)&v8[8 * v10];
    }
    a2[1] = v22;
    return realityio::replication::details::readBuffer<unsigned long long,0>(a1, *a2, v23);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Destroy(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Hash(const char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(unsigned __int8 *)*a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[1]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[4]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[7]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[10]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[13]);
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1[16]);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64E424(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIyEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>::_PlaceCopy();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_23F64E620(_Unwind_Exception *exception_object)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  unint64_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  unint64_t v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  uint64_t v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23F64E718(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>::_PlaceCopy()
{
}

void sub_23F64E798(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1010C406E576252);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Hash(uint64_t *a1)
{
  return pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&>((uint64_t)&v2, *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_Equal(uint64_t **a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, *a2);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7TfTokenENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)v2;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C4055CCDE27);
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHash::operator()<std::vector<pxrInternal__aapl__pxrReserved__::TfToken> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3)
  {
    unint64_t v4 = 0;
    uint64_t v5 = v3 >> 3;
    char v6 = 1;
    do
    {
      uint64_t v7 = *v2++;
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 1) == 0) {
        v8 += (v8 + v4 + (v8 + v4) * (v8 + v4)) >> 1;
      }
      char v6 = 0;
      unint64_t v4 = v8;
      --v5;
    }
    while (v5);
  }
  else
  {
    unint64_t v8 = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * v8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>,void>::Equal(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = *(uint64_t **)a2;
  if (v2 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) == (v6 & 0xFFFFFFFFFFFFFFF8);
    BOOL v8 = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8) || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_GetMutableObj(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)a1 + 24));
  if (v1 != 1) {
    operator new();
  }
  return *(void *)a1;
}

void sub_23F64EAD4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy()
{
}

void sub_23F64EB6C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetPyObj()
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::SdfSpecifier,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtStreamOut<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(uint64_t a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_23F64ED3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetPyObj()
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_StreamOut(uint64_t a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_23F64EE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfPermissionE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::SdfPermission,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPermission>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_CopyInit(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_Move(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_Hash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_Equal(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_EqualPtr(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetPyObj()
{
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_StreamOut(uint64_t a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_23F64F010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__14SdfVariabilityE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetProxiedTypeid()
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::SdfVariability,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>>::_GetProxiedAsVtValue@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfVariability>(void)::ti
                      + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_Hash(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v4 = (void *)*v1;
  uint64_t v2 = v1 + 1;
  uint64_t v3 = v4;
  if (v4 == v2)
  {
    unint64_t v14 = 0;
  }
  else
  {
    do
    {
      uint64_t v5 = (void *)v3[1];
      uint64_t v6 = v3;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          uint64_t v6 = v7;
        }
        while (!v8);
      }
      if (*((char *)v3 + 55) >= 0) {
        size_t v9 = (const char *)(v3 + 4);
      }
      else {
        size_t v9 = (const char *)v3[4];
      }
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, v9);
      uint64_t v12 = (const char *)v3[7];
      unint64_t v11 = (const char *)(v3 + 7);
      uint64_t v10 = v12;
      if (v11[23] >= 0) {
        unint64_t v13 = v11;
      }
      else {
        unint64_t v13 = v10;
      }
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, v13);
      uint64_t v3 = v7;
    }
    while (v7 != v2);
    unint64_t v14 = 0x9E3779B97F4A7C55 * v16;
  }
  return bswap64(v14);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_Equal(void **a1, void ***a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<std::string,std::string>,void>::Equal(*a1, **a2, (uint64_t)(*a2)[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_EqualPtr(void **a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<std::string,std::string>,void>::Equal(*a1, *(void **)a2, *(void *)(a2 + 16));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 24));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64F2B4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000023F7C9A54 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::map<std::string,std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::map<std::string,std::string>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::map<std::string,std::string>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(void **)(v2 + 8));
    MEMORY[0x2455D2BD0](v2, 0x1020C401C4E69EBLL);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_ProxyHelper<std::map<std::string,std::string>,void>::Equal(void *a1, void *a2, uint64_t a3)
{
  if (a1[2] != a3) {
    return 0;
  }
  uint64_t v3 = a1 + 1;
  uint64_t v4 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v4 + 55);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = *((unsigned __int8 *)v4 + 55);
      }
      else {
        uint64_t v7 = v4[5];
      }
      uint64_t v8 = *((unsigned __int8 *)a2 + 55);
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = a2[5];
      }
      if (v7 != v8) {
        return 0;
      }
      uint64_t v10 = (const void **)(v4 + 4);
      if (v9 >= 0) {
        unint64_t v11 = (unsigned __int8 *)(a2 + 4);
      }
      else {
        unint64_t v11 = (unsigned __int8 *)a2[4];
      }
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(*v10, v11, v4[5])) {
          return 0;
        }
      }
      else if (*((unsigned char *)v4 + 55))
      {
        while (*(unsigned __int8 *)v10 == *v11)
        {
          uint64_t v10 = (const void **)((char *)v10 + 1);
          ++v11;
          if (!--v6) {
            goto LABEL_18;
          }
        }
        return 0;
      }
LABEL_18:
      uint64_t v12 = *((unsigned __int8 *)v4 + 79);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = *((unsigned __int8 *)v4 + 79);
      }
      else {
        uint64_t v13 = v4[8];
      }
      uint64_t v14 = *((unsigned __int8 *)a2 + 79);
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = a2[8];
      }
      if (v13 != v14) {
        return 0;
      }
      uint64_t v16 = (const void **)(v4 + 7);
      if (v15 >= 0) {
        char v17 = (unsigned __int8 *)(a2 + 7);
      }
      else {
        char v17 = (unsigned __int8 *)a2[7];
      }
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*v16, v17, v4[8])) {
          return 0;
        }
      }
      else if (*((unsigned char *)v4 + 79))
      {
        while (*(unsigned __int8 *)v16 == *v17)
        {
          uint64_t v16 = (const void **)((char *)v16 + 1);
          ++v17;
          if (!--v12) {
            goto LABEL_33;
          }
        }
        return 0;
      }
LABEL_33:
      uint64_t v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          unint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          unint64_t v19 = (void *)v4[2];
          BOOL v20 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v20);
      }
      uint64_t v21 = (void *)a2[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unint64_t v22 = (void *)a2[2];
          BOOL v20 = *v22 == (void)a2;
          a2 = v22;
        }
        while (!v20);
      }
      uint64_t result = 1;
      a2 = v22;
      uint64_t v4 = v19;
      if (v19 == v3) {
        return result;
      }
    }
  }
  return 1;
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v3, v5 + 4, (long long *)v5 + 2);
      uint64_t v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = (const void ***)v6;
          uint64_t v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (const void ***)v5[2];
          BOOL v8 = *v7 == v5;
          uint64_t v5 = (const void **)v7;
        }
        while (!v8);
      }
      uint64_t v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23F64F66C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::string>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_23F64F770(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::map<std::string,std::string>>::_PlaceCopy()
{
}

void sub_23F64F7EC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C401C4E69EBLL);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfPayload::~SdfPayload(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_Hash(const char **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (unsigned int *)(*a1 + 24);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(*a1 + 32);
  uint64_t v5 = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfLayerOffset const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_Equal(void *a1, void *a2)
{
  return MEMORY[0x270FA40F0](*a1, *a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_EqualPtr(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA40F0](*a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 48));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64F980(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C4009C0B816);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_StreamOut(void *a1, uint64_t a2)
{
  return MEMORY[0x270FA3ED0](a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10SdfPayloadE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfPayload,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2 + 24);
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x2455D2BD0](v2, 0x1012C4009C0B816);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfLayerOffset const&>(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2, unsigned int *a3, pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a4)
{
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);
  pxrInternal__aapl__pxrReserved__::TfHashAppend<pxrInternal__aapl__pxrReserved__::Tf_HashState>((uint64_t)a1, a3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(a4);
  if (*((unsigned char *)a1 + 8)) {
    result += (unint64_t)(*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *((unsigned char *)a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfPayload>::_Counted(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[1], (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)a2 + 7);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = a2[2];
  atomic_store(0, (unsigned int *)&this[2]);
  return this;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfPayload>::_PlaceCopy()
{
}

void sub_23F64FC54(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C4009C0B816);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_Hash(double ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (char *)(*a1)[1] - (char *)v1;
  if (v2)
  {
    double v3 = 0.0;
    uint64_t v4 = v2 >> 3;
    char v5 = 1;
    do
    {
      double v6 = *v1++;
      double v7 = v6;
      if (v6 == 0.0) {
        double v7 = 0.0;
      }
      double v8 = v7;
      if ((v5 & 1) == 0) {
        *(void *)&double v8 = *(void *)&v7
      }
                       + ((*(void *)&v3
                         + *(void *)&v7
                         + (*(void *)&v3 + *(void *)&v7) * (*(void *)&v3 + *(void *)&v7)) >> 1);
      char v5 = 0;
      double v3 = v8;
      --v4;
    }
    while (v4);
  }
  else
  {
    double v8 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * *(void *)&v8);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_Equal(uint64_t **a1, double ***a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    double v6 = *v4++;
    BOOL result = *(double *)(v5 - 8) == v6;
    BOOL v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_EqualPtr(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = *(double **)a2;
  if (v2 - v3 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    double v6 = *v4++;
    BOOL result = *(double *)(v5 - 8) == v6;
    BOOL v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 24));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F64FE70(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1080C40AA79BA9DLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000023F7C9AF8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<double>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<double>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<double>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x2455D2BD0](v2, 0x1080C40AA79BA9DLL);
  }
  return a1;
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    BOOL result = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(a4);
    double v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      BOOL result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23F650058(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<double>>::_PlaceCopy()
{
}

void sub_23F6500E8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1080C40AA79BA9DLL);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_Hash(pxrInternal__aapl__pxrReserved__::SdfLayerOffset ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (*a1)[1] - v1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 4;
    char v5 = 1;
    do
    {
      uint64_t Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(v1);
      if ((v5 & 1) == 0) {
        Hash += (unint64_t)(Hash + v3 + (Hash + v3) * (Hash + v3)) >> 1;
      }
      char v5 = 0;
      uint64_t v1 = (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)((char *)v1 + 16);
      uint64_t v3 = Hash;
      --v4;
    }
    while (v4);
  }
  else
  {
    uint64_t Hash = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * Hash);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_Equal(uint64_t **a1, uint64_t **a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = **a2;
  if (v3 - v2 != (*a2)[1] - v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==();
    if (!result) {
      break;
    }
    v2 += 16;
    v4 += 16;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_EqualPtr(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = *a2;
  if (v3 - v2 != a2[1] - *a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==();
    if (!result) {
      break;
    }
    v2 += 16;
    v4 += 16;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 24));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F65035C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__14SdfLayerOffsetENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *(void *)(v2 + 8) = v3;
      operator delete(v3);
    }
    MEMORY[0x2455D2BD0](v2, 0x1020C4055CCDE27);
  }
  return a1;
}

void *std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfLayerOffset*,pxrInternal__aapl__pxrReserved__::SdfLayerOffset*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(a4);
    double v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[2 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_23F65053C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>::_PlaceCopy()
{
}

void sub_23F6505CC(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_Hash(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = 0;
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendContiguous<std::string>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v3, *(uint64_t **)v1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 3));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_Equal(unsigned __int8 ***a1, unsigned __int8 ***a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  char v4 = **a2;
  if (v3 - v2 != (*a2)[1] - v4) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_EqualPtr(unsigned __int8 ***a1, uint64_t a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  char v4 = *(unsigned __int8 **)a2;
  if (v3 - v2 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 24));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F65083C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_StreamOut(void *a1, uint64_t a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000023F7C9B75 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<std::vector<std::string>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<std::string>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<std::vector<std::string>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    char v4 = (void **)v2;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C4055CCDE27);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<std::string>>::_PlaceCopy()
{
}

void sub_23F650A2C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_CanHash()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_Hash()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_Equal()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_EqualPtr()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3EF0](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfValueBlockE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetProxiedTypeid()
{
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::SdfValueBlock,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(void)::ti
                      + 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_Move(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_Hash(pxrInternal__aapl__pxrReserved__::VtValue **a1)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(*a1));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_Equal()
{
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_EqualPtr()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 16));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F650C4C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1060C40F2FE4B89);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_StreamOut()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__20SdfUnregisteredValueE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PlaceCopy();
}

atomic_uint **boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::~intrusive_ptr(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit(v2 + 4, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v2);
    MEMORY[0x2455D2BD0]();
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::_PlaceCopy()
{
}

void sub_23F650E00(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1060C40F2FE4B89);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::~SdfListOp(void **a1)
{
  uint64_t v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(realityio *a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v34 = 0;
  uint64_t result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v34, 1uLL);
  if (!result) {
    return result;
  }
  unint64_t v7 = v34;
  if (v34 > 0x7A120)
  {
    uint64_t v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
    uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
      *(void *)&uint8_t buf[4] = 500000;
      _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
      return 0;
    }
    return result;
  }
  size_t v9 = (void *)*a3;
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)a3[1];
  unint64_t v11 = ((uint64_t)v10 - *a3) >> 4;
  if (v34 <= v11)
  {
    if (v34 >= v11) {
      goto LABEL_26;
    }
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)&v9[2 * v34];
    while (v10 != v25)
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 - 16);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v10);
    }
  }
  else
  {
    uint64_t v12 = a3[2];
    if (v34 - v11 > (v12 - (uint64_t)v10) >> 4)
    {
      uint64_t v13 = v12 - (void)v9;
      uint64_t v14 = v13 >> 3;
      if (v13 >> 3 <= v34) {
        uint64_t v14 = v34;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      int v37 = a3 + 2;
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v15);
      char v17 = (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)&v16[16 * v11];
      *(void *)&uint8_t buf[8] = v17;
      *(void *)&uint8_t buf[16] = v17;
      *(void *)std::__split_buffer<std::string> buf = v16;
      long long v36 = &v16[16 * v18];
      unint64_t v19 = &v16[16 * v7];
      uint64_t v20 = 16 * v7 - 16 * v11;
      do
      {
        pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(v17);
        char v17 = (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)((char *)v17 + 16);
        v20 -= 16;
      }
      while (v20);
      unint64_t v22 = (void *)*a3;
      uint64_t v21 = (void *)a3[1];
      unint64_t v23 = *(void **)&buf[8];
      if (v21 == (void *)*a3)
      {
        int64x2_t v24 = vdupq_n_s64((unint64_t)v21);
      }
      else
      {
        do
        {
          v21 -= 2;
          unint64_t v23 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v23 - 2, v21);
        }
        while (v21 != v22);
        int64x2_t v24 = *(int64x2_t *)a3;
      }
      *a3 = v23;
      a3[1] = v19;
      *(int64x2_t *)&uint8_t buf[8] = v24;
      unint64_t v27 = (char *)a3[2];
      a3[2] = v36;
      long long v36 = v27;
      *(void *)std::__split_buffer<std::string> buf = v24.i64[0];
      std::__split_buffer<pxrInternal__aapl__pxrReserved__::VtValue>::~__split_buffer((uint64_t)buf);
      goto LABEL_26;
    }
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16 * (v34 - v11));
    uint64_t v26 = 16 * v34 - 16 * v11;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(v10);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v10 + 16);
      v26 -= 16;
    }
    while (v26);
  }
  a3[1] = v25;
LABEL_26:
  unint64_t v28 = v34;
  if (!v34) {
    return 1;
  }
  char v29 = (void *)*a3;
  uint64_t result = realityio::replication::read((uint64_t)a1, a2, v29);
  if (result)
  {
    unint64_t v30 = v29 + 2;
    uint64_t v31 = 1;
    do
    {
      unint64_t v32 = v31;
      if (v28 == v31) {
        break;
      }
      char v33 = realityio::replication::read((uint64_t)a1, a2, v30);
      uint64_t v31 = v32 + 1;
      v30 += 2;
    }
    while ((v33 & 1) != 0);
    return v28 <= v32;
  }
  return result;
}

void sub_23F651130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_Hash(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)*((void *)*a1 + 1);
  uint64_t v4 = v1[2] - (void)v3;
  if (v4)
  {
    uint64_t v5 = v4 >> 4;
    do
    {
      --v5;
      char v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v3 + 16);
      uint64_t Hash = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v3);
      unint64_t v2 = Hash + ((Hash + v2 + (Hash + v2) * (Hash + v2)) >> 1);
      uint64_t v3 = v6;
    }
    while (v5);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[4];
  uint64_t v9 = v1[5] - (void)v8;
  if (v9)
  {
    uint64_t v10 = v9 >> 4;
    do
    {
      --v10;
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v8 + 16);
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v8);
      unint64_t v2 = v12 + ((v12 + v2 + (v12 + v2) * (v12 + v2)) >> 1);
      uint64_t v8 = v11;
    }
    while (v10);
  }
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[7];
  uint64_t v14 = v1[8] - (void)v13;
  if (v14)
  {
    uint64_t v15 = v14 >> 4;
    do
    {
      --v15;
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v13 + 16);
      uint64_t v17 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v13);
      unint64_t v2 = v17 + ((v17 + v2 + (v17 + v2) * (v17 + v2)) >> 1);
      uint64_t v13 = v16;
    }
    while (v15);
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[10];
  uint64_t v19 = v1[11] - (void)v18;
  if (v19)
  {
    uint64_t v20 = v19 >> 4;
    do
    {
      --v20;
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v18 + 16);
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v18);
      unint64_t v2 = v22 + ((v22 + v2 + (v22 + v2) * (v22 + v2)) >> 1);
      uint64_t v18 = v21;
    }
    while (v20);
  }
  unint64_t v23 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[13];
  uint64_t v24 = v1[14] - (void)v23;
  if (v24)
  {
    uint64_t v25 = v24 >> 4;
    do
    {
      --v25;
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v23 + 16);
      uint64_t v27 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v23);
      unint64_t v2 = v27 + ((v27 + v2 + (v27 + v2) * (v27 + v2)) >> 1);
      unint64_t v23 = v26;
    }
    while (v25);
  }
  unint64_t v28 = (pxrInternal__aapl__pxrReserved__::VtValue *)v1[16];
  uint64_t v29 = v1[17] - (void)v28;
  if (v29)
  {
    uint64_t v30 = v29 >> 4;
    do
    {
      --v30;
      uint64_t v31 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v28 + 16);
      uint64_t v32 = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(v28);
      unint64_t v2 = v32 + ((v32 + v2 + (v32 + v2) * (v32 + v2)) >> 1);
      unint64_t v28 = v31;
    }
    while (v30);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F651398(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_20SdfUnregisteredValueEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 104);
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 80);
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C40D6643E80);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((void *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((void *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((void *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>((void *)(a1 + 128), *(void *)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
  return a1;
}

void sub_23F651660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*,pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    char v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(a4);
    unint64_t v7 = result;
    *char v6 = result;
    v6[1] = result;
    v6[2] = &result[2 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v7[v9 / 8], (const pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + v9));
        v9 += 16;
      }
      while (a2 + v9 != a3);
      unint64_t v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23F65176C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>::_PlaceCopy()
{
}

void sub_23F651808(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::~SdfListOp(void **a1)
{
  uint64_t v3 = a1 + 16;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 13;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 7;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 4;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t realityio::replication::details::readVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(realityio *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  unint64_t v41 = 0;
  uint64_t result = realityio::replication::details::readBuffer<unsigned long long,0>(a1, (uint64_t)&v41, 1uLL);
  if (result)
  {
    unint64_t v7 = v41;
    if (v41 <= 0x7A120)
    {
      uint64_t v9 = *a3;
      uint64_t v10 = a3[1];
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - *a3) >> 4);
      unint64_t v12 = v41 - v11;
      if (v41 <= v11)
      {
        if (v41 < v11)
        {
          unint64_t v31 = v9 + 48 * v41;
          while (v10 != v31)
          {
            v10 -= 48;
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](v10);
          }
          a3[1] = v31;
        }
      }
      else
      {
        uint64_t v13 = a3[2];
        if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 4) >= v12)
        {
          unint64_t v32 = v10 + 48 * v12;
          uint64_t v33 = 48 * v41 - 16 * ((v10 - *a3) >> 4);
          do
          {
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload>(v10);
            v10 += 48;
            v33 -= 48;
          }
          while (v33);
          a3[1] = v32;
        }
        else
        {
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v13 - v9) >> 4);
          uint64_t v15 = 2 * v14;
          if (2 * v14 <= v41) {
            uint64_t v15 = v41;
          }
          if (v14 >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v16 = 0x555555555555555;
          }
          else {
            unint64_t v16 = v15;
          }
          uint64_t v44 = a3 + 2;
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>>(v16);
          uint64_t v18 = (uint64_t)&v17[48 * v11];
          *(void *)&uint8_t buf[8] = v18;
          *(void *)&uint8_t buf[16] = v18;
          *(void *)std::__split_buffer<std::string> buf = v17;
          unint64_t v43 = &v17[48 * v19];
          uint64_t v20 = 3 * v7;
          uint64_t v21 = &v17[48 * v7];
          uint64_t v22 = 16 * v20 - 48 * v11;
          do
          {
            std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload>(v18);
            v18 += 48;
            v22 -= 48;
          }
          while (v22);
          uint64_t v24 = *a3;
          unint64_t v23 = a3[1];
          uint64_t v25 = *(void *)&buf[8];
          if (v23 == *a3)
          {
            int64x2_t v30 = vdupq_n_s64(v23);
          }
          else
          {
            uint64_t v26 = 0;
            do
            {
              uint64_t v27 = v25 + v26;
              uint64_t v28 = v23 + v26;
              long long v29 = *(_OWORD *)(v23 + v26 - 48);
              *(void *)(v27 - 32) = *(void *)(v23 + v26 - 32);
              *(_OWORD *)(v27 - 48) = v29;
              *(void *)(v28 - 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
              *(void *)(v28 - 32) = 0;
              *(void *)(v28 - 48) = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v25 + v26 - 24), (_DWORD *)(v23 + v26 - 24));
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v25 + v26 - 20), (_DWORD *)(v23 + v26 - 20));
              *(_OWORD *)(v27 - 16) = *(_OWORD *)(v23 + v26 - 16);
              v26 -= 48;
            }
            while (v23 + v26 != v24);
            int64x2_t v30 = *(int64x2_t *)a3;
            v25 += v26;
          }
          *a3 = v25;
          a3[1] = (uint64_t)v21;
          *(int64x2_t *)&uint8_t buf[8] = v30;
          unint64_t v34 = (char *)a3[2];
          a3[2] = (uint64_t)v43;
          unint64_t v43 = v34;
          *(void *)std::__split_buffer<std::string> buf = v30.i64[0];
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPayload>::~__split_buffer((uint64_t)buf);
        }
      }
      unint64_t v35 = v41;
      if (v41)
      {
        uint64_t v36 = *a3;
        uint64_t result = realityio::replication::read(a1, a2, v36);
        if (result)
        {
          uint64_t v37 = v36 + 48;
          uint64_t v38 = 1;
          do
          {
            unint64_t v39 = v38;
            if (v35 == v38) {
              break;
            }
            BOOL v40 = realityio::replication::read(a1, a2, v37);
            uint64_t v38 = v39 + 1;
            v37 += 48;
          }
          while (v40);
          return v39 >= v35;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      uint64_t v8 = *(NSObject **)(realityio::logObjects((realityio *)result) + 40);
      uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)std::__split_buffer<std::string> buf = 134217984;
        *(void *)&uint8_t buf[4] = 500000;
        _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Vector count exceeded maximum of %zu", buf, 0xCu);
        return 0;
      }
    }
  }
  return result;
}

void sub_23F651BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v13 + 8) = v14;
  _Unwind_Resume(exception_object);
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::construct[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload>(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v2, 0.0, 1.0);
  MEMORY[0x2455CE630](a1, __p, &v3, v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F651C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a1);
}

void std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfPayload>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_CopyInit(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_Move(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::~intrusive_ptr(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_Hash(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v29 = 1;
  uint64_t v28 = v2;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2] - v3;
  if (v4)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 4);
    do
    {
      --v5;
      uint64_t v6 = v3 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v3);
      uint64_t v3 = v6;
    }
    while (v5);
  }
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5] - v7;
  if (v8)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    do
    {
      --v9;
      uint64_t v10 = v7 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v7);
      uint64_t v7 = v10;
    }
    while (v9);
  }
  uint64_t v11 = v1[7];
  uint64_t v12 = v1[8] - v11;
  if (v12)
  {
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v12 >> 4);
    do
    {
      --v13;
      uint64_t v14 = v11 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v11);
      uint64_t v11 = v14;
    }
    while (v13);
  }
  uint64_t v15 = v1[10];
  uint64_t v16 = v1[11] - v15;
  if (v16)
  {
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 4);
    do
    {
      --v17;
      uint64_t v18 = v15 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v15);
      uint64_t v15 = v18;
    }
    while (v17);
  }
  uint64_t v19 = v1[13];
  uint64_t v20 = v1[14] - v19;
  if (v20)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (v20 >> 4);
    do
    {
      --v21;
      uint64_t v22 = v19 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v19);
      uint64_t v19 = v22;
    }
    while (v21);
  }
  uint64_t v23 = v1[16];
  uint64_t v24 = v1[17] - v23;
  if (v24)
  {
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 4);
    do
    {
      --v25;
      uint64_t v26 = v23 + 48;
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>((uint64_t)&v28, v23);
      uint64_t v23 = v26;
    }
    while (v25);
  }
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v28));
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_Equal()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_EqualPtr()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_MakeMutable(uint64_t result)
{
  unsigned int v1 = atomic_load((unsigned int *)(*(void *)result + 152));
  if (v1 != 1) {
    operator new();
  }
  return result;
}

void sub_23F652090(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetPyObj()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_StreamOut()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedObjPtr(uint64_t a1)
{
  return *(void *)a1;
}

void pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>,boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>,pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::_GetProxiedAsVtValue(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_PlaceCopy();
}

uint64_t *boost::intrusive_ptr<pxrInternal__aapl__pxrReserved__::VtValue::_Counted<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>>::~intrusive_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 104);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 80);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 56);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 32);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(v2 + 8);
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100](&v4);
    MEMORY[0x2455D2BD0](v2, 0x1020C40D6643E80);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_Append<pxrInternal__aapl__pxrReserved__::SdfPayload const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfLayerOffset const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, (const char *)a2, (unsigned int *)(a2 + 24), (pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 32));
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((void *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4));
  *(void *)(a1 + 8std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((void *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((void *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>((void *)(a1 + 128), *(void *)(a2 + 128), *(void *)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4));
  return a1;
}

void sub_23F65240C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPayload*,pxrInternal__aapl__pxrReserved__::SdfPayload*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    char v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a4);
    uint64_t v7 = result;
    *char v6 = result;
    v6[1] = result;
    v6[2] = &result[6 * v8];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = (std::string *)&v7[v9 / 8];
        uint64_t v11 = (long long *)(a2 + v9);
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *v11;
          v10->__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7[v9 / 8 + 3], (_DWORD *)(a2 + v9 + 24));
        uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v7[v9 / 8 + 3] + 1, (_DWORD *)(a2 + v9 + 28));
        *(_OWORD *)&v7[v9 / 8 + 4] = *(_OWORD *)(a2 + v9 + 32);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      uint64_t v7 = (void *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_23F652578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>::_PlaceCopy()
{
}

void sub_23F652614(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1020C40D6643E80);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_CopyInit(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_Move(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_CanHash()
{
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_Hash(double *a1)
{
  unint64_t v1 = 0x9E3779B97F4A7C55 * *(void *)a1;
  if (*a1 == 0.0) {
    unint64_t v1 = 0;
  }
  return bswap64(v1);
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_Equal(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_EqualPtr(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetPyObj()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_StreamOut(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA3ED8](a2, a1);
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetTypeid()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_IsArrayValued()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetElementTypeid()
{
  return MEMORY[0x263F8C288];
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetShapeData()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetNumElements()
{
  return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_ProxyHoldsType(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetProxiedType(uint64_t a1, const std::type_info *a2)
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetProxiedTypeid()
{
}

void *pxrInternal__aapl__pxrReserved__::VtValue::_TypeInfoImpl<pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::SdfTimeCode,pxrInternal__aapl__pxrReserved__::VtValue::_LocalTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::_GetProxiedAsVtValue@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(void)::ti
        + 1;
  return result;
}

void RIOPxrUsdNoticeObjectsChangedAddNoticeCallback(void *a1)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  id v1 = a1;
  operator new();
}

void sub_23F652D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  long long v12 = *(atomic_uint **)(v8 + 88);
  if (v12)
  {
    if (atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
    }
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const*,void * const*)>::~__value_func[abi:ne180100]((void *)(v8 + 48));
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__value_func[abi:ne180100](v10);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(v9, v13);
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__value_func[abi:ne180100](va);
  MEMORY[0x2455D2BD0](v8, 0x10E1C400AF9B268);

  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdNoticeObjectsChangedCopyChangedInfoOnlyPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    ChangedInfoOnlyPaths = (void *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedInfoOnlyPaths(a1);
    unint64_t v4 = ChangedInfoOnlyPaths + 1;
    uint64_t v5 = (void *)*ChangedInfoOnlyPaths;
    if ((void *)*ChangedInfoOnlyPaths != ChangedInfoOnlyPaths + 1)
    {
      do
      {
        char v6 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)v5 + 8);
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
        uint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v4);
    }
  }
  return Mutable;
}

__CFArray *RIOPxrUsdNoticeObjectsChangedCopyResyncedPaths(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    ResyncedPaths = (void *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(a1);
    unint64_t v4 = ResyncedPaths + 1;
    uint64_t v5 = (void *)*ResyncedPaths;
    if ((void *)*ResyncedPaths != ResyncedPaths + 1)
    {
      do
      {
        char v6 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)v5 + 8);
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
        uint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v4);
    }
  }
  return Mutable;
}

__CFArray *RIOPxrUsdNoticeObjectsChangedCopyChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1
    && a2
    && (pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16)) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetChangedFields(v15, a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v5 = (uint64_t *)v15[0];
    uint64_t v6 = v15[1];
    while (v5 != (uint64_t *)v6)
    {
      uint64_t v7 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v5);
      CFArrayAppendValue(Mutable, v7);
      CFRelease(v7);
      ++v5;
    }
    uint64_t v16 = (void **)v15;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v16);
  }
  else
  {
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    int v9 = *(char *)(String + 23);
    if (v9 < 0)
    {
      if (*(void *)(String + 8) != 1) {
        return Mutable;
      }
      uint64_t String = *(void *)String;
    }
    else if (v9 != 1)
    {
      return Mutable;
    }
    if (*(unsigned char *)String == 47)
    {
      ResyncedPaths = (void *)pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::GetResyncedPaths(a1);
      if (ResyncedPaths)
      {
        if (ResyncedPaths[2] == 1)
        {
          uint64_t v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*ResyncedPaths + 32));
          int v12 = *(char *)(v11 + 23);
          if (v12 < 0)
          {
            if (*(void *)(v11 + 8) != 1) {
              return Mutable;
            }
            uint64_t v11 = *(void *)v11;
          }
          else if (v12 != 1)
          {
            return Mutable;
          }
          if (*(unsigned char *)v11 == 47)
          {
            MEMORY[0x2455CF810](v15, "defaultPrim");
            uint64_t v14 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(v15);
            if ((v15[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v15[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            CFArrayAppendValue(Mutable, v14);
            CFRelease(v14);
          }
        }
      }
    }
  }
  return Mutable;
}

void sub_23F65317C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdNoticeObjectsChangedHasChangedFields(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged *a1, uint64_t a2)
{
  if (a1 && a2) {
    return pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged::HasChangedFields(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  }
  else {
    return 0;
  }
}

void *RIOPxrUsdNoticeObjectsChangedCopyStagePointer(void *result)
{
  if (result)
  {
    id v1 = result;
    if (RIOPxrTfWeakPtrGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrTfWeakPtrGetTypeID::onceToken, &__block_literal_global_31);
    }
    uint64_t result = (void *)_CFRuntimeCreateInstance();
    if (result)
    {
      uint64_t v3 = v1[1];
      uint64_t v2 = v1[2];
      result[2] = &unk_26F340128;
      result[3] = v3;
      result[4] = v2;
      if (v2) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
      }
    }
  }
  return result;
}

void *RIOPxrUsdNoticeObjectsChangedStagePointer(void *result)
{
  if (result) {
    return RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&>(result + 1);
  }
  return result;
}

void *RIOPxrUsdNoticeObjectsChangedCopyStageRef(void *result)
{
  if (result) {
    return RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&>(result + 1);
  }
  return result;
}

void *RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage> const&>(uint64_t *a1)
{
  if (RIOPxrUsdStageGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdStageGetTypeID::onceToken, &__block_literal_global_23);
  }
  uint64_t Instance = (void *)_CFRuntimeCreateInstance();
  if (Instance)
  {
    if (!a1[1]
      || !*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(a1 + 1)
                   + 14)
      || (uint64_t v3 = *a1) == 0
      || (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero() & 1) == 0)
    {
      uint64_t v3 = 0;
    }
    Instance[3] = 0;
    Instance[4] = 0;
    Instance[2] = v3;
  }
  return Instance;
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__func(uint64_t a1)
{
  return a1;
}

void std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__func(uint64_t a1)
{
  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_26F33FFA0;
  v2[1] = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  return v2;
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F33FFA0;
  uint64_t result = MEMORY[0x2455D3180](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0,std::allocator<RIOPxrUsdNoticeObjectsChangedAddNoticeCallback::$_0>,void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::didReceiveNotice(uint64_t a1)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((pxrInternal__aapl__pxrReserved__::TfNotice::Key *)(a1 + 80));
  if (result)
  {
    uint64_t result = *(void *)(a1 + 40);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 48);
      return v3();
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase(pxrInternal__aapl__pxrReserved__::TfWeakBase *this, const void *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    *(unsigned char *)(v2 + 14) = 0;
    if (*(unsigned char *)(v2 + 13)) {
      pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2((pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier *)v2, a2);
    }
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }
}

void realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::~NoticeListener(void *a1)
{
  realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::~NoticeListener(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::cancel(uint64_t a1)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((pxrInternal__aapl__pxrReserved__::TfNotice::Key *)(a1 + 80));
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::TfNotice::Revoke();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::_Deliverer(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(void *)a1 = &unk_26F3400B0;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *a2;
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_23F6537A8(_Unwind_Exception *a1)
{
  uint64_t v3 = (atomic_uint *)*((void *)v1 + 6);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>::~_Deliverer(uint64_t a1)
{
  *(void *)a1 = &unk_26F3400B0;
  (**(void (***)(void))(a1 + 56))();
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1);
}

{
  atomic_uint *v2;
  uint64_t vars8;

  *(void *)a1 = &unk_26F3400B0;
  (**(void (***)(void))(a1 + 56))();
  uint64_t v2 = *(atomic_uint **)(a1 + 48);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::_SendToListener(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9 = a1[6];
  uint64_t v8 = a1 + 6;
  if (!v9) {
    return 0;
  }
  int v12 = v8 - 1;
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v8);
  uint64_t v14 = *v12;
  BOOL v15 = !*(unsigned char *)(v13 + 14) || v14 == 0;
  if (v15
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    (*(void (**)(uint64_t *))(*a1 + 40))(a1);
    pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>::operator->(v12);
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery();
  }
  unint64_t v17 = (void (*)(void *, uint64_t))a1[11];
  uint64_t v18 = a1[12];
  uint64_t v19 = (void *)(v14 + (v18 >> 1));
  if (v18) {
    unint64_t v17 = *(void (**)(void *, uint64_t))(*v19 + v17);
  }
  v17(v19, a2);
  if (*a7 != a7[1]) {
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery();
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetNoticeType(uint64_t a1, const std::type_info *a2)
{
  uint64_t v2 = MEMORY[0x263F90670];
  uint64_t v3 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F90670], a2);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v14);
  if (v14[0] == v3)
  {
    v14[0] = "tf/notice.h";
    v14[1] = "GetNoticeType";
    _OWORD v14[2] = 563;
    void v14[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal"
             "__aapl__pxrReserved__::UsdNotice::ObjectsChanged, void *>>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,"
             " void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged, void *>::*)(c"
             "onst pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged &), pxrInternal__aapl__pxrReserved__::UsdN"
             "otice::ObjectsChanged>>::GetNoticeType() const [Derived = pxrInternal__aapl__pxrReserved__::TfNotice::_Deli"
             "verer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved_"
             "_::UsdNotice::ObjectsChanged, void *>>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (realityio::No"
             "ticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged, void *>::*)(const pxrInternal__aa"
             "pl__pxrReserved__::UsdNotice::ObjectsChanged &), pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>]";
    char v15 = 0;
    int v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)&v10, (pxrInternal__aapl__pxrReserved__ *)(*(void *)(v2 + 8) & 0x7FFFFFFFFFFFFFFFLL), v4);
    uint64_t v5 = std::string::insert(&v10, 0, "notice type ");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    uint64_t v7 = std::string::append(&v11, " undefined in the TfType system");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError();
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_23F653BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Delivers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::IsA();
  if (result)
  {
    long long v6 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    char IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v6);
    uint64_t result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0) {
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v6) == a3;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::GetSenderWeakBase(uint64_t a1)
{
  id v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (!pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL()) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>,pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr,void (realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::*)(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&),pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged>>::Clone()
{
}

void sub_23F653DA0(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x10E1C40FFBCCEBFLL);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>>::operator->(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         uint64_t result = *a1,
         v4)
      ? (BOOL v6 = result == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid(pxrInternal__aapl__pxrReserved__::TfNotice::Key *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::*)(void)const(this);
  return v3 & 1 | (unint64_t)v2
      && *(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator->((uint64_t *)this)
                  + 32) != 0;
}

uint64_t (*pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::*)(void)const(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                          + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::_FetchPointer;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator->(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((int v4 = *(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                                 + 14),
         uint64_t result = *a1,
         v4)
      ? (BOOL v6 = result == 0)
      : (BOOL v6 = 1),
        v6))
  {
    uint64_t v7 = strrchr[abi:ne180100]("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    FunctionLite::substringFromPreviousDelim("/AppleInternal/Library/BuildRoots/cb09429a-9ee5-11ef-b491-ce2c30f2a3e7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.2.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", v7, (const char *)0x2F);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase>::_FetchPointer(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v2)
                + 14))
    return *a1;
  return 0;
}

void *std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const*,void * const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *realityio::NoticeListener<pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged,void *>::~NoticeListener(void *a1)
{
  *a1 = &unk_26F340030;
  if (pxrInternal__aapl__pxrReserved__::TfNotice::Key::IsValid((pxrInternal__aapl__pxrReserved__::TfNotice::Key *)(a1 + 10))) {
    pxrInternal__aapl__pxrReserved__::TfNotice::Revoke();
  }
  uint64_t v2 = (atomic_uint *)a1[11];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const*,void * const*)>::~__value_func[abi:ne180100](a1 + 6);
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdNotice::ObjectsChanged const&)>::~__value_func[abi:ne180100](a1 + 2);
  pxrInternal__aapl__pxrReserved__::TfWeakBase::~TfWeakBase((pxrInternal__aapl__pxrReserved__::TfWeakBase *)(a1 + 1), v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::~_PointerHolder(void *a1)
{
  pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::~_PointerHolder(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::Clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26F340128;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::IsInvalid(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = (uint64_t *)(a1 + 16);
  return v2
      && *(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v1)
                  + 14) == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetUniqueIdentifier(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::_GetUniqueIdentifier(a1 + 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetWeakBase(uint64_t a1)
{
  return pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 8))
       + 16;
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::operator BOOL(uint64_t a1)
{
  uint64_t v1 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((void *)(a1 + 8));
  return (v2 & 1 | (unint64_t)v1) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::_IsConst()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetPythonObject()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetTypeInfo(uint64_t a1)
{
  char v2 = (void **)(a1 + 8);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((void *)(a1 + 8));
  if (!(v4 & 1 | (unint64_t)v3))
  {
    v14[0] = "tf/weakPtrFacade.h";
    v14[1] = "TfTypeid";
    _OWORD v14[2] = 233;
    void v14[3] = "const std::type_info &pxrInternal__aapl__pxrReserved__::TfTypeid(const Derived &)";
    char v15 = 0;
    int v16 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9TfWeakPtrINS_8UsdStageEEE" & 0x7FFFFFFFFFFFFFFFLL), v4);
    std::string v11 = v13 >= 0 ? (const char *)__p : (const char *)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v14, "Called TfTypeid on invalid %s", v11);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *(void *)(a1 + 16);
  BOOL v5 = (uint64_t *)(a1 + 16);
  if (!v6
    || ((uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v5),
         long long v8 = *v2,
         *(unsigned char *)(v7 + 14))
      ? (BOOL v9 = v8 == 0)
      : (BOOL v9 = 1),
        v9))
  {
    __cxa_bad_typeid();
  }
  return *(void *)(*v8 - 8);
}

void sub_23F654340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::GetType(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v2 = a1 + 16;
  if (!v3
    || ((uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)v2),
         BOOL v5 = *(void **)(a1 + 8),
         *(unsigned char *)(v2 + 14))
      ? (BOOL v6 = v5 == 0)
      : (BOOL v6 = 1),
        v6))
  {
    return MEMORY[0x270FA3AD0](v2);
  }
  else
  {
    uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::TfType **)(*v5 - 8);
    return pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(v7, v4);
  }
}

char *pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::_GetMostDerivedPtr(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const((void *)(a1 + 8));
  if (v4 & 1 | (unint64_t)v3
    && (v6 = *(void *)(a1 + 16), BOOL v5 = (uint64_t *)(a1 + 16), v6)
    && ((uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(v5),
         long long v8 = *v2,
         *(unsigned char *)(v7 + 14))
      ? (BOOL v9 = v8 == 0)
      : (BOOL v9 = 1),
        !v9))
  {
    return (char *)v8 + *(void *)(*v8 - 16);
  }
  else
  {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::_IsPolymorphic()
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_PointerHolder<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>>::~_PointerHolder(void *a1)
{
  *a1 = &unk_26F340128;
  uint64_t v2 = (atomic_uint *)a1[2];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  return MEMORY[0x270FA3228](a1);
}

uint64_t RIOPxrUsdObjectGetTypeID()
{
  if (RIOPxrUsdObjectGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdObjectGetTypeID::onceToken, &__block_literal_global_14);
  }
  return RIOPxrUsdObjectGetTypeID::typeID;
}

void __RIOPxrUsdObjectGetTypeID_block_invoke()
{
  if (!RIOPxrUsdObjectGetTypeID::typeID) {
    RIOPxrUsdObjectGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>(uint64_t a1, int *a2)
{
  if (RIOPxrUsdObjectGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdObjectGetTypeID::onceToken, &__block_literal_global_14);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v5 = Instance;
  if (Instance) {
    realityio::RIOPxrUsdObjectData::RIOPxrUsdObjectData(Instance + 16, a1, *a2);
  }
  return v5;
}

uint64_t RIOPxrUsdObjectCopyName(uint64_t a1)
{
  if (a1)
  {
    uint64_t Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24));
    return RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(Name);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v3);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectCopyPath(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24), &v3);
  uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
  return v1;
}

void sub_23F6546E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectIsValid(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24));
  }
  return result;
}

uint64_t UsdObjectCustomDataDictionarySetValue(const pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v13 = 0;
  uint64_t v6 = (unint64_t *)MEMORY[0x263F90528];
  unint64_t v7 = atomic_load(MEMORY[0x263F90528]);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v7 + 72));
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  unint64_t v9 = atomic_load(v6);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v9 + 72));
  uint64_t v11 = v10;
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
  return v11;
}

void sub_23F6547F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectHasMetadataValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
      uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24));
      if (result)
      {
        if (a3)
        {
          long long v8 = *(atomic_uint **)(a3 + 16);
          uint64_t v10 = v8;
          if ((v8 & 7) != 0)
          {
            unint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
            if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
              uint64_t v10 = v9;
            }
          }
        }
        else
        {
          uint64_t v10 = 0;
        }
        uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadataDictKey(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectClearMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a2)
  {
    uint64_t v6 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      unint64_t v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v6);
      std::recursive_mutex::lock(v7);
      if (a3)
      {
        long long v8 = *(atomic_uint **)(a3 + 16);
        uint64_t v11 = v8;
        if ((v8 & 7) != 0)
        {
          unint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
            uint64_t v11 = v9;
          }
        }
      }
      else
      {
        uint64_t v11 = 0;
      }
      uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11);
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::recursive_mutex::unlock(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_23F6549A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(realityio::UsdLayerMutexTracker *a1)
{
  uint64_t v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v14, a1);
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v14);
    EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    uint64_t v5 = EditTarget[1];
    uint64_t v12 = *EditTarget;
    uint64_t v13 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v6 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  double v7 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v12);
  uint64_t v9 = v8;
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v10 + 8))(v10, v7);
  }
  return v9;
}

void sub_23F654AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdObjectMetadataSetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a4)
  {
    uint64_t v8 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      uint64_t v9 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v8);
      std::recursive_mutex::lock(v9);
      if (a3)
      {
        uint64_t v10 = *(atomic_uint **)(a3 + 16);
        uint64_t v13 = v10;
        if ((v10 & 7) != 0)
        {
          uint64_t v11 = (atomic_uint *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
            uint64_t v13 = v11;
          }
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (const pxrInternal__aapl__pxrReserved__::VtValue *)(a4 + 16));
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::recursive_mutex::unlock(v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_23F654C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectMetadataCopyValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    double v7 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      if (a3)
      {
        uint64_t v8 = *(atomic_uint **)(a3 + 16);
        uint64_t v10 = v8;
        if ((v8 & 7) != 0)
        {
          uint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
            uint64_t v10 = v9;
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
      }
      uint64_t result = UsdObjectMetadataCopyValue(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t UsdObjectMetadataCopyValue(const pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v6 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v5))uint64_t v3 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)v5); {
  else
  }
    uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  return v3;
}

void sub_23F654D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectSetAllowedTokens(uint64_t a1, const __CFArray *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
      {
        uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v3);
        std::recursive_mutex::lock(v4);
        if (atomic_load(MEMORY[0x263F90528])) {
          RIOPxrVtValueCreateWithTokenArray(a2);
        }
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
    }
  }
  return 0;
}

void sub_23F654E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdObjectCopyAllowedTokens(__CFArray *result)
{
  if (result)
  {
    uint64_t v1 = (__CFArray *)((char *)result + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((__CFArray *)((char *)result + 24)))
    {
      unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
      if (!v2) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
      uint64_t v4 = 0;
      uint64_t v3 = UsdObjectMetadataCopyValue(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 8), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4);
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return RIOPxrVtValueCopyTokenArray(v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectClearColorSpace(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  unint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v1);
  std::recursive_mutex::lock(v2);
  unint64_t v3 = atomic_load(MEMORY[0x263F90528]);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v6 = 0;
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadataByDictKey(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_23F655004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectSetColorSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  v11[2] = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    uint64_t v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>((realityio::UsdLayerMutexTracker *)(a1 + 24));
    std::recursive_mutex::lock(v5);
    unint64_t v6 = atomic_load(MEMORY[0x263F90528]);
    if (!v6) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v7 = *(void *)(a2 + 16);
    v11[1] = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
           + 1;
    uint64_t v10 = 0;
    v11[0] = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        v11[0] = v8;
      }
    }
    uint64_t v2 = pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::recursive_mutex::unlock(v5);
  }
  return v2;
}

void sub_23F65514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectCopyColorSpace(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24);
    unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
    if (!v2) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v4 = 0;
    uint64_t v3 = UsdObjectMetadataCopyValue(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    return RIOPxrVtValueCopyToken(v3);
  }
  return result;
}

uint64_t RIOPxrUsdObjectSetInheritPaths(uint64_t a1, const __CFArray *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
      {
        uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v3);
        std::recursive_mutex::lock(v4);
        if (atomic_load(MEMORY[0x263F90528])) {
          RIOPxrVtValueCreateWithPathListOp(a2);
        }
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
    }
  }
  return 0;
}

void sub_23F6552F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdObjectCopyInheritPaths(__CFArray *result)
{
  if (result)
  {
    uint64_t v1 = (__CFArray *)((char *)result + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((__CFArray *)((char *)result + 24)))
    {
      unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
      if (!v2) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
      uint64_t v4 = 0;
      uint64_t v3 = UsdObjectMetadataCopyValue(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v2 + 192), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v4);
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      return RIOPxrVtValueCopyPathListOp(v3);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectCustomDataDictionarySetValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    uint64_t v8 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      uint64_t v9 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v8);
      std::recursive_mutex::lock(v9);
      uint64_t v4 = UsdObjectCustomDataDictionarySetValue(v8, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a4 + 16));
      std::recursive_mutex::unlock(v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_23F655468(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryClearValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v5 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      unint64_t v6 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v5);
      std::recursive_mutex::lock(v6);
      uint64_t v13 = 0;
      uint64_t v7 = (unint64_t *)MEMORY[0x263F90528];
      unint64_t v8 = atomic_load(MEMORY[0x263F90528]);
      if (!v8) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v8 + 72));
      if ((*(void *)(a3 + 16) & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      }
      pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath();
      unint64_t v10 = atomic_load(v7);
      if (!v10) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)v5, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v10 + 72));
      uint64_t v3 = v11;
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v13, 0);
      std::recursive_mutex::unlock(v6);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_23F6555A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectCustomDataDictionaryCopyValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  if (!a2) {
    return 0;
  }
  if (!a3) {
    return 0;
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }

  return UsdObjectCustomDataDictionaryCopyValue(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 16));
}

uint64_t UsdObjectCustomDataDictionaryCopyValue(const pxrInternal__aapl__pxrReserved__::UsdObject *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v10 = 0;
  unint64_t v5 = atomic_load(MEMORY[0x263F90528]);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v5 + 72));
  if (!v6) {
    goto LABEL_7;
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  ValueAtPath = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath();
  if (ValueAtPath) {
    uint64_t v8 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>(ValueAtPath);
  }
  else {
LABEL_7:
  }
    uint64_t v8 = 0;
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v10, 0);
  return v8;
}

void sub_23F6556FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectUiInfoDictionarySetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 && a3)
  {
    unint64_t v6 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      uint64_t v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v6);
      std::recursive_mutex::lock(v7);
      MEMORY[0x2455CF810](&v9, "ui");
      uint64_t v3 = UsdObjectCustomDataDictionarySetValue(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 16));
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::recursive_mutex::unlock(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_23F6557D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectUiInfoDictionaryCopyValue(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    unint64_t v5 = (const pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      MEMORY[0x2455CF810](&v6, "ui");
      uint64_t result = UsdObjectCustomDataDictionaryCopyValue(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t RIOPxrUsdObjectAccessibilityInfoDictionarySetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t v6 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      uint64_t v7 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v6);
      std::recursive_mutex::lock(v7);
      MEMORY[0x2455CF810](&v9, "accessibility_info");
      uint64_t v3 = UsdObjectCustomDataDictionarySetValue(v6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::VtValue *)(a3 + 16));
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::recursive_mutex::unlock(v7);
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void sub_23F655960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdObjectAccessibilityInfoDictionaryCopyValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v4 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      unint64_t v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdObject>(v4);
      std::recursive_mutex::lock(v5);
      MEMORY[0x2455CF810](&v7, "accessibility_info");
      uint64_t v2 = UsdObjectCustomDataDictionaryCopyValue(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
      if ((v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::recursive_mutex::unlock(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_23F655A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

__CFDictionary *RIOPxrVtValueCopyDictionary(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtDictionary **)(a1 + 16);
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>((pxrInternal__aapl__pxrReserved__::VtValue *)(a1 + 16))) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
  }
  else {
    uint64_t v4 = *v2;
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v4);
  uint64_t v15 = v6;
  while (1)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v4);
    uint64_t v9 = v14;
    if (v15 == v8 && (!v8 || v14 == v7)) {
      break;
    }
    if (RIOPxrTfTokenGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrTfTokenGetTypeID::onceToken, &__block_literal_global_25);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v11 = (const void *)Instance;
    if (Instance) {
      MEMORY[0x2455CF830](Instance + 16, v9 + 32);
    }
    uint64_t v12 = (const void *)RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(v14 + 56));
    CFDictionaryAddValue(Mutable, v11, v12);
    CFRelease(v11);
    CFRelease(v12);
    pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v14);
  }
  return Mutable;
}

__CFDictionary *RIOPxrUsdObjectCopyMetadata(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllMetadata((uint64_t *)&v10, v1);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v3 = v10;
  if (v10 != (uint64_t *)v11)
  {
    do
    {
      uint64_t v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3 + 4);
      unint64_t v5 = (const void *)RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 5));
      CFDictionaryAddValue(Mutable, v4, v5);
      CFRelease(v4);
      CFRelease(v5);
      uint64_t v6 = (uint64_t *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != (uint64_t *)v11);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v10, v11[0]);
  return Mutable;
}

void sub_23F655CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

__CFDictionary *RIOPxrUsdObjectCopyAuthoredMetadata(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata((uint64_t *)&v10, v1);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v3 = v10;
  if (v10 != (uint64_t *)v11)
  {
    do
    {
      uint64_t v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3 + 4);
      unint64_t v5 = (const void *)RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 5));
      CFDictionaryAddValue(Mutable, v4, v5);
      CFRelease(v4);
      CFRelease(v5);
      uint64_t v6 = (uint64_t *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != (uint64_t *)v11);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v10, v11[0]);
  return Mutable;
}

void sub_23F655E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

__CFArray *RIOPxrUsdObjectCopyRegisteredMetadataKeys(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
      int v4 = *(_DWORD *)(a1 + 16) % 100;
      if (v4 == 22 || v4 == 12 || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v2) & 1) != 0)
      {
        long long v19 = 0uLL;
        uint64_t v20 = 0;
        if (!atomic_load((unint64_t *)off_265071688)) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
        }
        pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields();
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v19);
        long long v19 = v17;
        uint64_t v20 = v18;
        uint64_t v18 = 0;
        long long v17 = 0uLL;
        *(void *)&long long v15 = &v17;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      }
      else
      {
        long long v19 = 0uLL;
        uint64_t v20 = 0;
        if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v2) & 1) != 0
          || (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2) & 1) == 0)
        {
          goto LABEL_21;
        }
        PrimDefinition = (const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimDefinition(*(pxrInternal__aapl__pxrReserved__::UsdPrim **)(a1 + 32), v9);
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::UsdPrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)&v17, PrimDefinition);
        unint64_t v11 = atomic_load((unint64_t *)off_265071680);
        if (!v11) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry>::_CreateInstance();
        }
        if (&v17 == *(long long **)(v11 + 112))
        {
          if (!atomic_load((unint64_t *)off_265071688)) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
          }
          pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetMetadataFields();
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::ListMetadataFields((uint64_t *)&v15, (pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *)&v17);
        }
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v19);
        long long v19 = v15;
        uint64_t v14 = v16;
        uint64_t v16 = 0;
        long long v15 = 0uLL;
        uint64_t v20 = v14;
        unint64_t v21 = (void **)&v15;
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v21);
        pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::~UsdPrimDefinition((atomic_uint **)&v17);
      }
      uint64_t v7 = (uint64_t *)*((void *)&v19 + 1);
      for (uint64_t i = (uint64_t *)v19; i != v7; ++i)
      {
        BOOL v8 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
        CFArrayAppendValue(Mutable, v8);
        CFRelease(v8);
      }
LABEL_21:
      *(void *)&long long v17 = &v19;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
      return Mutable;
    }
  }
  return 0;
}

void sub_23F656070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::~UsdPrimDefinition((atomic_uint **)&a13);
  a13 = (void **)(v13 - 64);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrimDefinition(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  if (!this || (*((unsigned char *)this + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(this, a2);
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)(*((void *)this + 3) + 56), memory_order_acquire);
  if (explicit) {
    return explicit;
  }

  return MEMORY[0x270FA4700]();
}

uint64_t _RIOPxrUsdObjectCFFinalize(void *a1)
{
  uint64_t v2 = a1[6];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t result = a1[4];
  if (result)
  {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
  }
  return result;
}

BOOL _RIOPxrUsdObjectCFEqual(_DWORD *a1, _DWORD *a2)
{
  return a1[6] == a2[6]
      && *((void *)a1 + 4) == *((void *)a2 + 4)
      && *((void *)a1 + 5) == *((void *)a2 + 5)
      && (*((void *)a1 + 6) & 0xFFFFFFFFFFFFFFF8) == (*((void *)a2 + 6) & 0xFFFFFFFFFFFFFFF8);
}

unint64_t _RIOPxrUsdObjectCFHash(void *a1)
{
  unint64_t v1 = bswap64(0x9E3779B97F4A7C55 * a1[4]);
  uint64_t v2 = *((unsigned int *)a1 + 10);
  uint64_t v3 = *((unsigned int *)a1 + 11);
  unint64_t v4 = v1
     + v2
     + ((v1 + *((unsigned int *)a1 + 6) + (v1 + *((unsigned int *)a1 + 6)) * (v1 + *((unsigned int *)a1 + 6))) >> 1);
  unint64_t v5 = v3 + v2 + ((v4 + v4 * v4) >> 1);
  unint64_t v6 = a1[6] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = v6 + v3 + ((v5 + v5 * v5) >> 1);
  return bswap64(0x9E3779B97F4A7C55 * (v6 + ((v7 + v7 * v7) >> 1)));
}

CFStringRef _RIOPxrUsdObjectCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdObject %p>", a1);
}

CFStringRef _RIOPxrUsdObjectCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdObject %p>", a1);
}

pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::UsdPrimDefinition(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, const pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *a2)
{
  unint64_t v2 = (unint64_t)a2;
  *(void *)this = *(void *)a2;
  unint64_t v4 = (_DWORD *)((char *)this + 12);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 2, (_DWORD *)a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4, (_DWORD *)(v2 + 12));
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  unint64_t v5 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 12) = *(_DWORD *)(v2 + 48);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)this + 16, *(void *)(v2 + 24));
  unint64_t v28 = v2;
  unint64_t v6 = *(uint64_t **)(v2 + 32);
  if (v6)
  {
    unint64_t v7 = (void *)((char *)this + 32);
    do
    {
      unint64_t v8 = v6[2] & 0xFFFFFFFFFFFFFFF8;
      unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * v8);
      unint64_t v10 = *((void *)this + 3);
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v9;
          if (v9 >= v10) {
            unint64_t v2 = v9 % v10;
          }
        }
        else
        {
          unint64_t v2 = v9 & (v10 - 1);
        }
        uint64_t v12 = *(void **)(*v5 + 8 * v2);
        if (v12)
        {
          for (uint64_t i = (void *)*v12; i; uint64_t i = (void *)*i)
          {
            unint64_t v14 = i[1];
            if (v14 == v9)
            {
              if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v8) {
                goto LABEL_44;
              }
            }
            else
            {
              if (v11.u32[0] > 1uLL)
              {
                if (v14 >= v10) {
                  v14 %= v10;
                }
              }
              else
              {
                v14 &= v10 - 1;
              }
              if (v14 != v2) {
                break;
              }
            }
          }
        }
      }
      long long v15 = operator new(0x28uLL);
      uint64_t v16 = v15;
      v29[0] = v15;
      v29[1] = (char *)this + 32;
      *(void *)long long v15 = 0;
      *((void *)v15 + 1) = v9;
      uint64_t v17 = v6[2];
      *((void *)v15 + 2) = v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)v15 + 2) &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v15 + 3) = v6[3];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15 + 8, (_DWORD *)v6 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v16 + 9, (_DWORD *)v6 + 9);
      char v30 = 1;
      float v18 = (float)(unint64_t)(*((void *)this + 5) + 1);
      float v19 = *((float *)this + 12);
      if (!v10 || (float)(v19 * (float)v10) < v18)
      {
        BOOL v20 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v10);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)this + 16, v23);
        unint64_t v10 = *((void *)this + 3);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v9 >= v10) {
            unint64_t v2 = v9 % v10;
          }
          else {
            unint64_t v2 = v9;
          }
        }
        else
        {
          unint64_t v2 = (v10 - 1) & v9;
        }
      }
      uint64_t v24 = *v5;
      unint64_t v25 = *(void **)(*v5 + 8 * v2);
      if (v25)
      {
        *(void *)uint64_t v16 = *v25;
      }
      else
      {
        *(void *)uint64_t v16 = *v7;
        void *v7 = v16;
        *(void *)(v24 + 8 * v2) = v7;
        if (!*(void *)v16) {
          goto LABEL_43;
        }
        unint64_t v26 = *(void *)(*(void *)v16 + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v26 >= v10) {
            v26 %= v10;
          }
        }
        else
        {
          v26 &= v10 - 1;
        }
        unint64_t v25 = (void *)(*v5 + 8 * v26);
      }
      void *v25 = v16;
LABEL_43:
      v29[0] = 0;
      ++*((void *)this + 5);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
LABEL_44:
      unint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)this + 7, *(uint64_t **)(v28 + 56), *(uint64_t **)(v28 + 64), (uint64_t)(*(void *)(v28 + 64) - *(void *)(v28 + 56)) >> 3);
  *((void *)this + 1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__init_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::TfToken*,pxrInternal__aapl__pxrReserved__::TfToken*>((void *)this + 10, *(uint64_t **)(v28 + 80), *(uint64_t **)(v28 + 88), (uint64_t)(*(void *)(v28 + 88) - *(void *)(v28 + 80)) >> 3);
  *((void *)this + 13) = *(void *)(v28 + 104);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)this + 13);
  return this;
}

void sub_23F6565D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>>>::~__hash_table(v3);
  pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath::~_LayerAndPath(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath::~_LayerAndPath(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath *this)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,0>(void *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 2));
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,0>(v2 + 2);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::~UsdPrimDefinition(atomic_uint **this)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(this + 13);
  unint64_t v2 = (void **)(this + 10);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = (void **)(this + 7);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::_LayerAndPath>>>::~__hash_table((uint64_t)(this + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 1));
}

uint64_t realityio::RIOPxrUsdObjectData::RIOPxrUsdObjectData(uint64_t a1, uint64_t a2, int a3)
{
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_DWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 24), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 28), (_DWORD *)(a2 + 20));
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_GetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x2455D22C0);
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }

  JUMPOUT(0x2455CFC70);
}

__CFArray *RIOPxrUsdPropertyCopyPropertyStack(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack();
    uint64_t v3 = v22;
    for (uint64_t i = v23; v3 != i; v3 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)v3 + 8))
    {
      uint64_t v5 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t *)__p, v5);
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)__p);
      uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v6);
      if (*(char *)(RealPath + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)RealPath, *(void *)(RealPath + 8));
      }
      else
      {
        long long v8 = *(_OWORD *)RealPath;
        v21.__r_.__value_.__r.__words[2] = *(void *)(RealPath + 16);
        *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
      }
      unint64_t v9 = __p[1];
      if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v9 + 8))(v9);
      }
      unint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::operator->(v3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(&v20, v10);
      pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v15, 0.0, 1.0);
      uint64_t v14 = 0;
      MEMORY[0x2455CE860](__p, &v21, &v20, v15, &v14);
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v14, 0);
      if (RIOPxrSdfReferenceGetTypeID::onceToken != -1) {
        dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
      }
      uint64_t Instance = _CFRuntimeCreateInstance();
      uint64_t v12 = (const void *)Instance;
      if (Instance) {
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference((std::string *)(Instance + 16), (long long *)__p);
      }
      CFArrayAppendValue(Mutable, v12);
      CFRelease(v12);
      std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v19, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
    }
    __p[0] = &v22;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  return Mutable;
}

void sub_23F656BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  a13 = &a28;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfSpec *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::operator->(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  unint64_t v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    _OWORD v7[2] = 96;
    void v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::op"
            "erator->() const [T = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__15SdfPropertySpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0) {
      unint64_t v4 = __p;
    }
    else {
      unint64_t v4 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", (const char *)v4);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v1;
}

void sub_23F656D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdPropertyCopyBaseName(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(&v1, (pxrInternal__aapl__pxrReserved__::UsdProperty *)(result + 24));
    uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v1);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t RIOPxrUsdPropertyCopyNamespace(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace(&v1, (pxrInternal__aapl__pxrReserved__::UsdProperty *)(result + 24));
    uint64_t result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v1);
    if ((v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

__CFArray *RIOPxrUsdPropertyCopySplitName(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::SplitName(v8, (pxrInternal__aapl__pxrReserved__::UsdProperty *)(a1 + 24));
    uint64_t v3 = v8[0];
    uint64_t v4 = v8[1];
    while (v3 != v4)
    {
      uint64_t v5 = (const char *)v3;
      if (*(char *)(v3 + 23) < 0) {
        uint64_t v5 = *(const char **)v3;
      }
      CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
      CFArrayAppendValue(Mutable, v6);
      CFRelease(v6);
      v3 += 24;
    }
    int v9 = (void **)v8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  return Mutable;
}

void sub_23F656EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPropertyIsAuthored(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA41E0](result + 24);
  }
  return result;
}

uint64_t RIOPxrUsdPropertyIsAuthoredAt(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x270FA41F8](result + 24, a2 + 16);
  }
  return result;
}

void realityio::generateSkeletonDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40798, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40798))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40790;
  *a1 = qword_268C40788;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F65737C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  MEMORY[0x2455D2BD0](v29, 0x10A1C40F82F910ELL);
  *(void *)(v31 - 192) = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 192));
  MEMORY[0x2455D2BD0](v28, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v30, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40798);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SkeletonBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SkeletonBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F65784C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v12, 0x60C40F64FA5DBLL);
      _Unwind_Resume(a1);
    }
  }
}

void realityio::generateTransformAnimationDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C407B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C407B8))
  {
    operator new();
  }
  uint64_t v3 = unk_268C407B0;
  *a1 = qword_268C407A8;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F657D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  MEMORY[0x2455D2BD0](v32, 0x10E1C40C8742A8BLL);
  uint64_t v36 = v34 - 144;
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  while (1)
  {
    uint64_t v37 = *(std::__shared_weak_count **)(v36 - 8);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    v36 -= 16;
    if (v36 == v34 - 208)
    {
      *(void *)(v34 - 20pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &a22;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 208));
      MEMORY[0x2455D2BD0](v31, 0x10A1C402FEF67C7);
      *(void *)(v34 - 20pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = &a30;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 208));
      MEMORY[0x2455D2BD0](v30, 0x10A1C401BF1BAA1);
      MEMORY[0x2455D2BD0](v33, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C407B8);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformAnimationBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F65829C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v12, 0x60C40F64FA5DBLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t RIOBuilderOutputsDescriptorGetTypeID()
{
  if (RIOBuilderOutputsDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderOutputsDescriptorGetTypeID::onceToken, &__block_literal_global_15);
  }
  return RIOBuilderOutputsDescriptorGetTypeID::typeID;
}

void __RIOBuilderOutputsDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderOutputsDescriptorGetTypeID::typeID) {
    RIOBuilderOutputsDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderOutputsDescriptorCreateWithOutputDescriptors(const __CFArray *a1)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      std::string::size_type v7 = *((void *)ValueAtIndex + 2);
      char v8 = (std::__shared_weak_count *)*((void *)ValueAtIndex + 3);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v13 = 0;
      }
      std::string::size_type v12 = v7;
      realityio::OutputsDescriptor::addOutputDescriptor(v3, &v12);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  if (RIOBuilderOutputsDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderOutputsDescriptorGetTypeID::onceToken, &__block_literal_global_15);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = v3;
    *(void *)(Instance + 24) = v2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  return v10;
}

void sub_23F658528(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderOutputsDescriptorCopyOutputDescriptors(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      uint64_t v5 = (void *)(v3 + 56);
      while (1)
      {
        uint64_t v5 = (void *)*v5;
        if (!v5) {
          break;
        }
        CFStringRef v6 = (const void *)RIOBuilderOutputDescriptorCreate<std::shared_ptr<realityio::OutputDescriptor const> const&>(v5 + 3);
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
      }
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F658600(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderOutputDescriptorCreate<std::shared_ptr<realityio::OutputDescriptor const> const&>(void *a1)
{
  if (RIOBuilderOutputDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderOutputDescriptorGetTypeID::onceToken, &__block_literal_global_22);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = a1[1];
    *(void *)(result + 16) = *a1;
    *(void *)(result + 24) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

__CFDictionary *RIOBuilderOutputsDescriptorCopyOutputDescriptorsByName(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v3 = Mutable;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4)
    {
      CFStringRef v6 = (void *)(v4 + 56);
      while (1)
      {
        CFStringRef v6 = (void *)*v6;
        if (!v6) {
          break;
        }
        if ((v6[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (v6[2] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
        }
        if (*(char *)(EmptyString + 23) >= 0) {
          char v8 = (const char *)EmptyString;
        }
        else {
          char v8 = *(const char **)EmptyString;
        }
        CFStringRef v9 = CFStringCreateWithCString(0, v8, 0x8000100u);
        uint64_t v10 = (const void *)RIOBuilderOutputDescriptorCreate<std::shared_ptr<realityio::OutputDescriptor const> const&>(v6 + 3);
        CFDictionaryAddValue(v3, v9, v10);
        CFRelease(v9);
        CFRelease(v10);
      }
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return v3;
}

void sub_23F658794(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void _RIOBuilderOutputsDescriptorCFFinalize(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderOutputsDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderOutputsDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderOutputsDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderOutputsDescriptor %p>", a1);
}

CFStringRef _RIOBuilderOutputsDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderOutputsDescriptor %p>", a1);
}

realityio::StageTimeCodeBuilder *realityio::StageTimeCodeBuilder::StageTimeCodeBuilder(realityio::StageTimeCodeBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "StageTimeCodeBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kStageTimeCodeBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C407D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C407D0))
  {
    operator new();
  }
  uint64_t v4 = *(std::__shared_weak_count **)algn_268C407C8;
  v6[0] = _MergedGlobals_26;
  v6[1] = *(void *)algn_268C407C8;
  if (*(void *)algn_268C407C8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C407C8 + 8), 1uLL, memory_order_relaxed);
  }
  realityio::EntityInputNoOutputStaticBuilder::EntityInputNoOutputStaticBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, v6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3402B8;
  return this;
}

void sub_23F658D80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  uint64_t v49 = *(std::__shared_weak_count **)(v47 - 104);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  *(void *)(v47 - 184) = &a23;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 184));
  a23 = &a42;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  uint64_t v50 = 56;
  while (1)
  {
    uint64_t v51 = *(std::__shared_weak_count **)(v47 - 176 + v50);
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    v50 -= 16;
    if (v50 == -8)
    {
      if (a28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a28);
      }
      if ((a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (a32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a32);
      }
      if ((a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (a36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a36);
      }
      if ((a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (a40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a40);
      }
      if ((a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v46, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C407D0);
      if (a16 < 0) {
        operator delete(__p);
      }
      if (a22 < 0) {
        operator delete(a17);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::StageTimeCodeBuilder::~StageTimeCodeBuilder(realityio::StageTimeCodeBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t RIOBuilderInputsDescriptorGetTypeID()
{
  if (RIOBuilderInputsDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderInputsDescriptorGetTypeID::onceToken, &__block_literal_global_16);
  }
  return RIOBuilderInputsDescriptorGetTypeID::typeID;
}

void __RIOBuilderInputsDescriptorGetTypeID_block_invoke()
{
  if (!RIOBuilderInputsDescriptorGetTypeID::typeID) {
    RIOBuilderInputsDescriptorGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOBuilderInputsDescriptorCreateWithInputDescriptors(const __CFArray *a1)
{
  unint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      uint64_t v7 = *((void *)ValueAtIndex + 2);
      char v8 = (std::__shared_weak_count *)*((void *)ValueAtIndex + 3);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = v8;
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v12 = v7;
      realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  if (RIOBuilderInputsDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderInputsDescriptorGetTypeID::onceToken, &__block_literal_global_16);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = v3;
    *(void *)(Instance + 24) = v2;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  return v10;
}

void sub_23F6592E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOBuilderInputsDescriptorCopyInputDescriptors(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3)
    {
      for (CFIndex i = *(void **)(v3 + 16); i; CFIndex i = (void *)*i)
      {
        CFStringRef v6 = (void *)i[3];
        uint64_t v7 = (void *)i[4];
        while (v6 != v7)
        {
          char v8 = (std::__shared_weak_count *)v6[1];
          v11[0] = *v6;
          v11[1] = v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFStringRef v9 = (const void *)RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v11);
          CFArrayAppendValue(Mutable, v9);
          CFRelease(v9);
          if (v8) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
          v6 += 2;
        }
      }
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return Mutable;
}

void sub_23F65940C(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(void *a1)
{
  if (RIOBuilderInputDescriptorGetTypeID::onceToken != -1) {
    dispatch_once(&RIOBuilderInputDescriptorGetTypeID::onceToken, &__block_literal_global_28);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v3 = a1[1];
    *(void *)(result + 16) = *a1;
    *(void *)(result + 24) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

__CFDictionary *RIOBuilderInputsDescriptorCopyInputDescriptorsByName(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v3 = Mutable;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v17 = v5;
    if (v4)
    {
      CFStringRef v6 = (void *)(v4 + 16);
      uint64_t v7 = (const CFArrayCallBacks *)MEMORY[0x263EFFF70];
      while (1)
      {
        CFStringRef v6 = (void *)*v6;
        if (!v6) {
          break;
        }
        if ((v6[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (v6[2] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Mutable);
        }
        if (*(char *)(EmptyString + 23) >= 0) {
          CFStringRef v9 = (const char *)EmptyString;
        }
        else {
          CFStringRef v9 = *(const char **)EmptyString;
        }
        CFStringRef v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
        uint64_t v11 = CFArrayCreateMutable(0, 0, v7);
        uint64_t v13 = (void *)v6[3];
        uint64_t v12 = (void *)v6[4];
        while (v13 != v12)
        {
          uint64_t v14 = (std::__shared_weak_count *)v13[1];
          v18[0] = *v13;
          v18[1] = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v15 = (const void *)RIOBuilderInputDescriptorCreate<std::shared_ptr<realityio::InputDescriptor const> &>(v18);
          CFArrayAppendValue(v11, v15);
          CFRelease(v15);
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          v13 += 2;
        }
        CFDictionaryAddValue(v3, v10, v11);
        CFRelease(v10);
        CFRelease(v11);
      }
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  return v3;
}

void sub_23F659630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void _RIOBuilderInputsDescriptorCFFinalize(void *a1)
{
  unint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

BOOL _RIOBuilderInputsDescriptorCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

unint64_t _RIOBuilderInputsDescriptorCFHash(void *a1)
{
  unint64_t v1 = a1[2];
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47));
}

CFStringRef _RIOBuilderInputsDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderInputsDescriptor %p>", a1);
}

CFStringRef _RIOBuilderInputsDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOBuilderInputsDescriptor %p>", a1);
}

uint64_t RIOPxrUsdPrimFlagsPredicateGetTypeID()
{
  if (qword_268C407E0 != -1) {
    dispatch_once(&qword_268C407E0, &__block_literal_global_17);
  }
  return _MergedGlobals_27;
}

void __RIOPxrUsdPrimFlagsPredicateGetTypeID_block_invoke()
{
  if (!_MergedGlobals_27) {
    _MergedGlobals_27 = _CFRuntimeRegisterClass();
  }
}

double RIOPxrUsdPrimFlagsPredicateCreate()
{
  __n128 v2 = 0uLL;
  char v3 = 0;
  uint64_t v1 = 0;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

__n128 RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(__n128 *a1, uint64_t *a2)
{
  if (qword_268C407E0 != -1) {
    dispatch_once(&qword_268C407E0, &__block_literal_global_17);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v6 = *a2;
    __n128 result = *a1;
    unint64_t v7 = a1[1].n128_u64[0];
    *(__n128 *)(Instance + 16) = *a1;
    *(void *)(Instance + 32) = v7;
    *(void *)(Instance + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v6;
  }
  return result;
}

double RIOPxrUsdPrimFlagsConjunctionPredicateCreate()
{
  __n128 v2 = 0uLL;
  char v3 = 0;
  uint64_t v1 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsDisjunctionPredicateCreate()
{
  __n128 v2 = 0uLL;
  char v3 = 1;
  uint64_t v1 = 2;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsPredicateCreateWithTerm(unint64_t a1, char a2)
{
  unint64_t v2 = RIOPxrUsdTermToUsdTerm(a1, a2);
  char v7 = 0;
  if (HIDWORD(v2)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 1 << v2;
  }
  v6.n128_u64[0] = 1 << v2;
  v6.n128_u64[1] = v3;
  uint64_t v5 = 0;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v6, &v5).n128_u64[0];
  return result;
}

unint64_t RIOPxrUsdTermToUsdTerm(unint64_t a1, char a2)
{
  unint64_t v2 = a1;
  if (a1 < 9) {
    unint64_t v2 = a1;
  }
  return v2 | ((unint64_t)(a2 & 1) << 32);
}

double RIOPxrUsdPrimFlagsPredicateCreateTautology()
{
  __n128 v2 = 0uLL;
  char v3 = 0;
  uint64_t v1 = 0;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsPredicateCreateContradiction()
{
  __n128 v2 = 0uLL;
  char v3 = 1;
  uint64_t v1 = 0;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

void *RIOPxrUsdPrimFlagsPredicateCopyTraverseInstanceProxies(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 32);
  if (a2) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 0x2000;
  }
  if (a2) {
    uint64_t v7 = 0x2000;
  }
  else {
    uint64_t v7 = 0;
  }
  if (qword_268C407E0 != -1) {
    dispatch_once(&qword_268C407E0, &__block_literal_global_17);
  }
  double result = (void *)_CFRuntimeCreateInstance();
  if (result)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    result[2] = v4 & 0xFFFFFFFFFFFFDFFFLL | v6;
    result[3] = v3 & 0xFFFFFFFFFFFFDFFFLL | v7;
    result[4] = v5;
    result[5] = v9;
  }
  return result;
}

uint64_t RIOPxrUsdPrimFlagsPredicateIncludeInstanceProxiesInTraversal(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 17) & 0x20) != 0) {
    return 0;
  }
  else {
    return (*(unsigned __int8 *)(a1 + 25) >> 5) & 1;
  }
}

uint64_t RIOPxrUsdPrimFlagsPredicateVerifyRIOPxrUsdPrim(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + 16;
  if (a2) {
    uint64_t v3 = a2 + 24;
  }
  else {
    uint64_t v3 = 0;
  }
  return MEMORY[0x270FA4B18](v2, v3);
}

double RIOPxrUsdPrimFlagsCreateConjunctionPredicateJoinWithTerm(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = RIOPxrUsdTermToUsdTerm(a2, a3);
  long long v9 = *(_OWORD *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = (__n128 *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)&v9, v4);
  __n128 v7 = *v5;
  unint64_t v8 = v5[1].n128_u64[0];
  *(void *)&long long v9 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v7, (uint64_t *)&v9).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateDisjunctionPredicateJoinWithTerm(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v4 = RIOPxrUsdTermToUsdTerm(a2, a3);
  long long v9 = *(_OWORD *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = (__n128 *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator|=((uint64_t)&v9, v4);
  __n128 v7 = *v5;
  unint64_t v8 = v5[1].n128_u64[0];
  *(void *)&long long v9 = 2;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v7, (uint64_t *)&v9).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsConjunctionPredicateNegation()
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!();
  uint64_t v1 = 2;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateConjunctionPredicateNegation()
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator!();
  uint64_t v1 = 2;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsDisjunctionPredicateNegation()
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!();
  uint64_t v1 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateDisjunctionPredicateNegation()
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsDisjunction::operator!();
  uint64_t v1 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(&v2, &v1).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsDefaultPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  UsdPrimDefaultPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);
  uint64_t v3 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimDefaultPredicate, &v3).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateDefaultPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  UsdPrimDefaultPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(a1);
  uint64_t v3 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimDefaultPredicate, &v3).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  UsdPrimAllPrimsPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(a1);
  uint64_t v3 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimAllPrimsPredicate, &v3).n128_u64[0];
  return result;
}

double RIOPxrUsdPrimFlagsCreateAllPrimsPredicate(pxrInternal__aapl__pxrReserved__ *a1)
{
  UsdPrimAllPrimsPredicate = (__n128 *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(a1);
  uint64_t v3 = 1;
  *(void *)&double result = RIOPxrUsdPrimFlagsPredicateCreate<pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate,RIOPxrUsdPrimFlagsPredicateType>(UsdPrimAllPrimsPredicate, &v3).n128_u64[0];
  return result;
}

BOOL _RIOPxrUsdPrimFlagsPredicateCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIOPxrUsdPrimFlagsPredicateCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIOPxrUsdPrimFlagsPredicateCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdPrimFlagsPredicate %p>", a1);
}

CFStringRef _RIOPxrUsdPrimFlagsPredicateCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrUsdPrimFlagsPredicate %p>", a1);
}

uint64_t realityio::SpatialAudioFileAssetBuilder::kOutputName(realityio::SpatialAudioFileAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::SpatialAudioFileAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F659E40(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::SpatialAudioFileAssetBuilder *realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(realityio::SpatialAudioFileAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "SpatialAudioFileAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kSpatialAudioFileAssetBuilderIdentifier);
  realityio::generateSpatialAudioDirtyStageSubscription(&v5);
  v12[0] = &unk_26F3404A8;
  void v12[3] = v12;
  v11[0] = &unk_26F340528;
  void v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F340430;
  *((void *)this + 35) = 0;
  return this;
}

void sub_23F659FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::SpatialAudioFileAssetBuilder::run(realityio::SpatialAudioFileAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v34 = a2;
  unint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v30, v5, v4);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  uint64_t v7 = realityio::Inputs::assetManager(a2);
  uint64_t v28 = *(void *)(*(void *)(*((void *)a2 + 5) + 16) + 16);
  uint64_t v29 = v7;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetEndTimeCode(v6);
  unint64_t v8 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v35);
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 24), (uint64_t)&v35, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v30, &v25);
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v35);
  }
  unint64_t v9 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v10 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v30, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 104), (uint64_t)&v35);
  if ((_BYTE)v35) {
    uint64_t v11 = v36;
  }
  else {
    uint64_t v11 = *(atomic_uint **)(v10 + 88);
  }
  uint64_t v24 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v24 = v12;
    }
  }
  if ((_BYTE)v35)
  {
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (v39 < 0)
  {
    operator delete(v38);
  }
  uint64_t v13 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v14 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v30, v13, (uint64_t)&v35);
  if ((_BYTE)v35) {
    uint64_t v15 = v36;
  }
  else {
    uint64_t v15 = *(atomic_uint **)(v14 + 120);
  }
  size_t v23 = v15;
  if ((v15 & 7) != 0)
  {
    uint64_t v16 = (atomic_uint *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
      size_t v23 = v16;
    }
  }
  if ((_BYTE)v35)
  {
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (v39 < 0)
  {
    operator delete(v38);
  }
  unint64_t v17 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v30, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v17 + 128), (uint64_t)&v35);
  if (!(_BYTE)v35 && v39 < 0) {
    operator delete(v38);
  }
  unint64_t v18 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v30, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v18 + 8), (uint64_t)&v35);
  if (!(_BYTE)v35 && v39 < 0) {
    operator delete(v38);
  }
  unint64_t v35 = 0;
  uint64_t v19 = (void *)*((void *)this + 35);
  if (v19)
  {
    *((void *)this + 35) = 0;
    unint64_t v35 = v19;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v35);
  uint64_t v20 = *((void *)v34 + 6);
  std::string v21 = operator new(0x48uLL);
  void *v21 = &unk_26F3405A8;
  v21[1] = &v28;
  v21[2] = &v25;
  v21[3] = this;
  v21[4] = &v29;
  v21[5] = &v30;
  v21[6] = &v34;
  v21[7] = &v23;
  v21[8] = &v24;
  uint64_t v38 = v21;
  (*(void (**)(uint64_t, void **))(*(void *)v20 + 16))(v20, &v35);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v35);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v27 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
  uint64_t result = v31;
  if (v31) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v31);
  }
  return result;
}

void sub_23F65A444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)va);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va1);
  _Unwind_Resume(a1);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>@<X0>(const pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdObject *a3@<X2>, std::string *a4@<X8>)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a3, a1, (uint64_t)v9);
  if (!v9[0])
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    }
    uint64_t v6 = a4 + 1;
    if (*(char *)(a2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
      return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v9);
    }
    uint64_t v7 = (const std::string::value_type **)(a2 + 24);
    goto LABEL_13;
  }
  if (SHIBYTE(v11) < 0)
  {
    std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)v10, *((std::string::size_type *)&v10 + 1));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v10;
    a4->__r_.__value_.__r.__words[2] = v11;
  }
  uint64_t v6 = a4 + 1;
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v7 = v12;
LABEL_13:
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    v6->__r_.__value_.__r.__words[2] = (std::string::size_type)v7[2];
    return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v9);
  }
  std::string::__init_copy_ctor_external(v6, v12[0], (std::string::size_type)v12[1]);
  return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v9);
}

void sub_23F65A5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::SpatialAudioFileAssetBuilder::clear(realityio::SpatialAudioFileAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v15 = 0;
  uint64_t v4 = *((void *)this + 35);
  if (v4)
  {
    *((void *)this + 35) = 0;
    uint64_t v15 = v4;
  }
  uint64_t v5 = (realityio::SpatialAudioFileAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v15);
  uint64_t v7 = (std::mutex *)*((void *)this + 2);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (const void **)realityio::SpatialAudioFileAssetBuilder::kOutputName(v5);
  realityio::Outputs::getRawValue<REAsset *>(v7, v8, (uint64_t)&v15);
  int v10 = v15;
  if (!(_BYTE)v15)
  {
    uint64_t v9 = (realityio::SpatialAudioFileAssetBuilder *)&v14;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v7 = (std::mutex *)v14.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v15 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v14 = __p;
      uint64_t v7 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10)
  {
    uint64_t v12 = *((void *)this + 2);
    std::string::size_type v11 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v13 = (const void **)realityio::SpatialAudioFileAssetBuilder::kOutputName(v9);
    std::mutex::lock((std::mutex *)(v12 + 64));
    if (v12 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v12 + 40, v13))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v12 + 40), v13); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v12, (unsigned __int8 *)v13);
    }
    std::mutex::unlock((std::mutex *)(v12 + 64));
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else if (v2 < 0)
  {
    operator delete(v7);
  }
}

void sub_23F65A7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a15 && a23 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void realityio::SpatialAudioFileAssetBuilder::~SpatialAudioFileAssetBuilder(realityio::SpatialAudioFileAssetBuilder *this)
{
  realityio::SpatialAudioFileAssetBuilder::~SpatialAudioFileAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F340430;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 35);
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  char v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F3404A8;
  return result;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3404A8;
}

char *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F340528;
  return result;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F340528;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::SpatialAudioFileAssetBuilder::kOutputName((realityio::SpatialAudioFileAssetBuilder *)v2);
  uint64_t v5 = (std::string::size_type *)atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, v5, &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F65AB8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::SpatialAudioFileAssetBuilder::SpatialAudioFileAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(unsigned char *)a3)
      {
        int v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v14 = *(void *)(a3 + 24);
          uint64_t v13 = a3 + 24;
          uint64_t v12 = v14;
          if (*(char *)(v13 + 23) >= 0) {
            uint64_t v12 = v13;
          }
          *(_DWORD *)std::__split_buffer<std::string> buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v15);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)buf;
      uint64_t v11 = v21;
      *(void *)(a3 + 24) = *(void *)&buf[16];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      LOBYTE(v11) = HIBYTE(v21);
      long long v21 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v11;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)buf;
    uint64_t v10 = v21;
    *(void *)(a3 + 24) = *(void *)&buf[16];
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
    LOBYTE(v1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = HIBYTE(v21);
    long long v21 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v10;
    if ((v18[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F65AE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      int v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v1std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F65B024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v35 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v34))
      {
        uint64_t v6 = (long long *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        realityio::types::Ok<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::Ok(&v26, v6);
        *(unsigned char *)a3 = 1;
        *(std::string *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v26;
        *(_OWORD *)(a3 + 32) = v27;
        *(void *)(a3 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v28;
        goto LABEL_38;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
      {
        char v12 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33, (const pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (v33.__r_.__value_.__l.__size_)
        {
          uint64_t v14 = (long long *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(v13);
          realityio::types::Ok<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::Ok(&v26, v14);
          *(unsigned char *)a3 = 1;
          *(std::string *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v26;
          *(_OWORD *)(a3 + 32) = v27;
          *(void *)(a3 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v28;
        }
        else
        {
          uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
          uint64_t v25 = v27;
          *(void *)(a3 + 24) = *((void *)&v26.__r_.__value_.__l + 2);
          *(void *)(a3 + 32) = v25;
          *(void *)(a3 + 39) = *(void *)((char *)&v27 + 7);
          LOBYTE(v25) = HIBYTE(v27);
          long long v27 = 0uLL;
          v26.__r_.__value_.__r.__words[2] = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v25;
          if (SHIBYTE(v32) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        goto LABEL_38;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
      uint64_t v23 = v27;
      *(void *)(a3 + 24) = *((void *)&v26.__r_.__value_.__l + 2);
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v27 + 7);
      LOBYTE(v23) = HIBYTE(v27);
      long long v27 = 0uLL;
      v26.__r_.__value_.__r.__words[2] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if ((SHIBYTE(v32) & 0x80000000) == 0)
      {
LABEL_38:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v34);
        return;
      }
      uint64_t v22 = __p[0];
    }
    else
    {
      unint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      std::operator+<char>();
      long long v15 = std::string::append(&v30, ") at the given time: ");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v29, *a2);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v17 = &v29;
      }
      else {
        unint64_t v17 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
      }
      uint64_t v19 = std::string::append(&v33, (const std::string::value_type *)v17, size);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      std::string::size_type v32 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
      uint64_t v21 = v27;
      *(void *)(a3 + 24) = *((void *)&v26.__r_.__value_.__l + 2);
      *(void *)(a3 + 32) = v21;
      *(void *)(a3 + 39) = *(void *)((char *)&v27 + 7);
      LOBYTE(v21) = HIBYTE(v27);
      long long v27 = 0uLL;
      v26.__r_.__value_.__r.__words[2] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v21;
      if (SHIBYTE(v32) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_38;
      }
      uint64_t v22 = (void *)v30.__r_.__value_.__r.__words[0];
    }
    operator delete(v22);
    goto LABEL_38;
  }
  int v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v26, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  uint64_t v9 = v27;
  *(void *)(a3 + 24) = *((void *)&v26.__r_.__value_.__l + 2);
  *(void *)(a3 + 32) = v9;
  *(void *)(a3 + 39) = *(void *)((char *)&v27 + 7);
  LOBYTE(v9) = HIBYTE(v27);
  long long v27 = 0uLL;
  v26.__r_.__value_.__r.__words[2] = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v9;
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F65B490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v26 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v26 - 56));
  _Unwind_Resume(a1);
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

std::string *realityio::types::Ok<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::Ok(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_23F65B620(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0)
    {
      char v2 = (void **)(a1 + 8);
LABEL_8:
      operator delete(*v2);
    }
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    char v2 = (void **)(a1 + 24);
    goto LABEL_8;
  }
  return a1;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x48uLL);
  *(void *)char v2 = &unk_26F3405A8;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3405A8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  char v2 = *(uint64_t **)(a1 + 24);
  REEngineGetServiceLocator();
  AudioService = (pxrInternal__aapl__pxrReserved__ *)REServiceLocatorGetAudioService();
  pxrInternal__aapl__pxrReserved__::ArGetResolver(AudioService);
  Extension = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  pxrInternal__aapl__pxrReserved__::ArGetResolver(Extension);
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(char *)(v5 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
  }
  else {
    std::string v47 = *(std::string *)(v5 + 24);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (v43)
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v43 + 24))(&v47);
    long long v6 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
    CFTypeRef cf = 0;
    CFIndex v7 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 16))(v43);
    CFTypeRef cf = CFDataCreate(0, (const UInt8 *)v6, v7);
    uint64_t v8 = *(void *)(a1 + 16);
    if (*(char *)(v8 + 47) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v8 + 24), *(void *)(v8 + 32));
    }
    else {
      std::string __str = *(std::string *)(v8 + 24);
    }
    std::string::size_type v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_23;
      }
    }
    else
    {
      if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
        goto LABEL_23;
      }
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v11 = size - 1;
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (__str.__r_.__value_.__s.__data_[v11] != 93) {
        goto LABEL_23;
      }
LABEL_20:
      std::string::basic_string(&v47, &__str, 0, v9 - 1, (std::allocator<char> *)v54);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v47;
      goto LABEL_23;
    }
    if (*(unsigned char *)(__str.__r_.__value_.__r.__words[0] + v11) == 93)
    {
      std::string::size_type v9 = __str.__r_.__value_.__l.__size_;
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v12 = REAudioFileAssetCreateWithMappedDataNullable();
    long long v13 = v2 + 35;
    if (v2[35]) {
      RERelease();
    }
    uint64_t *v13 = v12;
    uint64_t v14 = (realityio *)cf;
    if (cf)
    {
      CFRelease(cf);
      uint64_t v12 = *v13;
    }
    CFTypeRef cf = 0;
    if (v12)
    {
      REAssetSetMetadataString();
      uint64_t v15 = *(void *)(*(void *)(*(void *)(**(void **)(a1 + 48) + 40) + 16) + 40);
      if (v15) {
        realityio::LiveSceneManager::queueForDeferredAssetLoad(v15, v2 + 35);
      }
      std::string::size_type v40 = *v13;
      if (v40)
      {
        RERetain();
        uint64_t v16 = *(void *)(**(void **)(a1 + 48) + 40);
        v47.__r_.__value_.__r.__words[0] = v40;
        if (v40) {
          RERetain();
        }
      }
      else
      {
        uint64_t v16 = *(void *)(**(void **)(a1 + 48) + 40);
        v47.__r_.__value_.__r.__words[0] = 0;
      }
      v47.__r_.__value_.__l.__size_ = (std::string::size_type)AudioService;
      std::string::size_type v22 = **(void **)(a1 + 56);
      v47.__r_.__value_.__r.__words[2] = v22;
      if ((v22 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v47.__r_.__value_.__r.__words[2] &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v23 = *(int **)(a1 + 40);
      int v48 = *v23;
      uint64_t v24 = *((void *)v23 + 1);
      uint64_t v49 = v24;
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v50, v23 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v51, v23 + 5);
      uint64_t v25 = *((void *)v23 + 3);
      uint64_t v52 = v25;
      if ((v25 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v52 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v26 = **(void **)(a1 + 64);
      uint64_t v53 = v26;
      if ((v26 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v53 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v55 = 0;
      long long v27 = (char *)operator new(0x48uLL);
      uint64_t v28 = v27;
      *(void *)long long v27 = &unk_26F340618;
      long long v29 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)(v27 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v29;
      std::string::size_type v30 = v47.__r_.__value_.__r.__words[2];
      *((void *)v27 + 3) = *((void *)&v47.__r_.__value_.__l + 2);
      if ((v30 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)v27 + 3) &= 0xFFFFFFFFFFFFFFF8;
      }
      *((_DWORD *)v27 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v48;
      uint64_t v31 = v49;
      *((void *)v27 + 5) = v49;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 48), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v27 + 12, &v50);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v28 + 13, &v51);
      uint64_t v32 = v52;
      *((void *)v28 + 7) = v52;
      if ((v32 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)v28 + 7) &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v33 = v53;
      *((void *)v28 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v53;
      if ((v33 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *((void *)v28 + 8) &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v55 = v28;
      realityio::ImportSession::performBlockPostAssetLoadOnEngineQueue(v16, (uint64_t)v54);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v54);
      if ((v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
      if (v49) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v49);
      }
      if ((v47.__r_.__value_.__s.__data_[16] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v47.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v47);
      uint64_t v39 = *v13;
      if (v39) {
        RERetain();
      }
      realityio::Builder::addAsset(v2, &v39, 0);
      uint64_t v34 = (realityio::SpatialAudioFileAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v39);
      uint64_t v36 = v2[2];
      uint64_t v35 = (std::__shared_weak_count *)v2[3];
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v37 = (long long *)realityio::SpatialAudioFileAssetBuilder::kOutputName(v34);
      uint64_t v38 = *v13;
      realityio::Outputs::storeValue<REAsset *>(v36, v37, &v38);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v40);
    }
    else
    {
      unint64_t v17 = *(id *)(realityio::logObjects(v14) + 24);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40));
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
        if (*(char *)(String + 23) >= 0) {
          std::string::size_type v21 = String;
        }
        else {
          std::string::size_type v21 = *(void *)String;
        }
        LODWORD(v47.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v47.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
        WORD2(v47.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v47.__r_.__value_.__r.__words[1] + 6) = v21;
        _os_log_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_DEFAULT, "Could not find or parse audio file '%s' on prim '%s'", (uint8_t *)&v47, 0x16u);
      }

      (*(void (**)(uint64_t *, void))(*v2 + 72))(v2, **(void **)(a1 + 48));
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v46 < 0) {
    operator delete(__p);
  }
}

void sub_23F65BE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,const void *a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&a23);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::Outputs::storeValue<REAsset *>(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  CFIndex v7 = operator new(0x28uLL);
  v7[1] = 0;
  _OWORD v7[2] = 0;
  void *v7 = &unk_26F340698;
  uint64_t v8 = *a3;
  void v7[3] = &unk_26F3406E8;
  void v7[4] = v8;
  std::string::size_type v11 = a2;
  std::string::size_type v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  uint64_t v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F65C0D8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F340618;
  uint64_t v2 = a1[8];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[7];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  uint64_t v4 = a1[5];
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  uint64_t v5 = a1[3];
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 1);
  return a1;
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F340618;
  uint64_t v2 = a1[8];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[7];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 6));
  uint64_t v4 = a1[5];
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  uint64_t v5 = a1[3];
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = &unk_26F340618;
  std::__compressed_pair_elem<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_23F65C2D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F340618;
  return std::__compressed_pair_elem<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(void *a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  REAudioFileAssetCompleteLoadWithService();
  unint64_t v2 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((a1[3] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v2 + 120) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_9;
  }
  uint64_t v3 = (realityio *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((a1[3] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 10) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_9:
    REAudioFileAssetSetInputMode();
  }
  else
  {
    uint64_t v4 = *(id *)(realityio::logObjects(v3) + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v5 = a1[3] & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        long long v6 = (const char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0) {
          long long v6 = *(const char **)v6;
        }
      }
      else
      {
        long long v6 = "";
      }
      PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 4));
      uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      if (*(char *)(String + 23) >= 0) {
        uint64_t v9 = String;
      }
      else {
        uint64_t v9 = *(void *)String;
      }
      int v27 = 136315394;
      uint64_t v28 = v6;
      __int16 v29 = 2080;
      uint64_t v30 = v9;
      _os_log_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_DEFAULT, "invalid audio auralMode '%s' on prim path '%s'", (uint8_t *)&v27, 0x16u);
    }
  }
  unint64_t v10 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v10 + 88) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_32;
  }
  unint64_t v11 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v11 + 96) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_32;
  }
  unint64_t v12 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v12 + 56) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_32;
  }
  unint64_t v13 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v13 + 64) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_32;
  }
  unint64_t v14 = atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((a1[8] & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v14 + 48) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_32:
    REAudioFileAssetSetLoopCount();
  }
  else
  {
    uint64_t v15 = (realityio *)atomic_load(&realityio::tokens::SpatialAudioBuilderTokens);
    if (!v15) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::SpatialAudioBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    BOOL v16 = (a1[8] & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 5) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v17 = *(id *)(realityio::logObjects(v15) + 24);
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v16)
    {
      if (v18)
      {
        std::string::size_type v21 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 4));
        uint64_t v22 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = *(void *)v22;
        }
        int v27 = 136315138;
        uint64_t v28 = (const char *)v23;
        _os_log_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_DEFAULT, "deprecated audio playbackMode 'loop' found on prim path '%s'", (uint8_t *)&v27, 0xCu);
      }

      REAudioFileAssetSetLoopCount();
    }
    else
    {
      if (v18)
      {
        unint64_t v19 = a1[8] & 0xFFFFFFFFFFFFFFF8;
        if (v19)
        {
          long long v20 = (const char *)(v19 + 16);
          if (*(char *)(v19 + 39) < 0) {
            long long v20 = *(const char **)v20;
          }
        }
        else
        {
          long long v20 = "";
        }
        uint64_t v24 = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 4));
        uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v24);
        if (*(char *)(v25 + 23) >= 0) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = *(void *)v25;
        }
        int v27 = 136315394;
        uint64_t v28 = v20;
        __int16 v29 = 2080;
        uint64_t v30 = v26;
        _os_log_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_DEFAULT, "invalid audio playbackMode '%s' on prim path '%s'", (uint8_t *)&v27, 0x16u);
      }
    }
  }
}

void sub_23F65C768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if (v4) {
    RERetain();
  }
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = a2[1];
  uint64_t v5 = a2[2];
  *(void *)(a1 + 16) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  uint64_t v6 = a2[4];
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 40), (_DWORD *)a2 + 10);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 44), (_DWORD *)a2 + 11);
  uint64_t v7 = a2[6];
  *(void *)(a1 + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 48) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = a2[7];
  *(void *)(a1 + 56) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 56) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void *std::__function::__alloc_func<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<realityio::SpatialAudioFileAssetBuilder::run(realityio::Inputs *)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[7];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a1[6];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 5));
  uint64_t v4 = a1[4];
  if (v4) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
  }
  uint64_t v5 = a1[2];
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REAsset *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F340698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REAsset *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F340698;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<REAsset *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *realityio::Inputs::prim@<X0>(realityio::Inputs *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (realityio::Inputs *)((char *)this + 32);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)this + 8));

  return pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(a2, v4, v3);
}

void realityio::Inputs::createStandardTextureAsset(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string::size_type *a5@<X8>)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v10 = *(std::string *)a3;
  }
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string __p = *(std::string *)(a3 + 24);
  }
  realityio::TextureBuilder::createStandardTextureAsset(a1, a2, (uint64_t)&v10, a4, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_23F65CB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::Inputs::createCubeMapTextureAsset(std::string::size_type a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string::size_type *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v10);
  std::string::basic_string[abi:ne180100]<0>(&v14, "");
  int v16 = 0;
  int v17 = realityio::TextureSwizzleChannels::kDefault;
  char v18 = 2;
  int v19 = 0;
  __int16 v20 = 512;
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  char v18 = 5;
  int v16 = 4;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v8 = *(std::string *)a3;
  }
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string __p = *(std::string *)(a3 + 24);
  }
  realityio::Inputs::createStandardTextureAsset(a1, a2, (uint64_t)&v8, (uint64_t)v10, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_23F65CCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  realityio::TextureImportOperationSettings::~TextureImportOperationSettings(&a19);
  _Unwind_Resume(a1);
}

void realityio::TextureImportOperationSettings::~TextureImportOperationSettings(void **this)
{
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t realityio::Inputs::assetManager(realityio::Inputs *this)
{
  if (*(void *)(*(void *)(*((void *)this + 5) + 16) + 16) && REEngineGetServiceLocator())
  {
    JUMPOUT(0x2455CDC30);
  }
  return 0;
}

realityio::IBLCubeMapAssetBuilder *realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(realityio::IBLCubeMapAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[11] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "IBLCubeMapAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kIBLCubeMapAssetBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C407F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C407F8))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_28;
  uint64_t v6 = (std::__shared_weak_count *)unk_268C407F0;
  if (unk_268C407F0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C407F0 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F3407A0;
  void v12[3] = v12;
  v11[0] = &unk_26F340820;
  void v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F340728;
  *((void *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::IBLCubeMapAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F65D210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  MEMORY[0x2455D2BD0](v43, 0x10A1C40F82F910ELL);
  a35 = &a38;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  MEMORY[0x2455D2BD0](v42, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v44, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C407F8);
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::IBLCubeMapAssetBuilder::kOutputName(realityio::IBLCubeMapAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::IBLCubeMapAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F65D508(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

uint64_t realityio::IBLCubeMapAssetBuilder::run(realityio::IBLCubeMapAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  __int16 v29 = a2;
  uint64_t v3 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v25, v4, v3);
  unint64_t v5 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v21, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 144));
  unint64_t v6 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v30);
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 144), (uint64_t)v30, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, &v19);
  if (v33 < 0) {
    operator delete(v32);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v18, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v18 = __p;
  }
  v30[0] = 0;
  uint64_t v7 = (void *)*((void *)this + 35);
  if (v7)
  {
    *((void *)this + 35) = 0;
    v30[0] = v7;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v30);
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v17 = MEMORY[0x2455CDC30]();
  uint64_t v9 = (realityio::IBLCubeMapAssetBuilder *)MEMORY[0x2455CDC60](ServiceLocator);
  int v16 = v9;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v18.__r_.__value_.__l.__size_) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (*((unsigned char *)&v18.__r_.__value_.__s + 23))
  {
LABEL_16:
    uint64_t v10 = *((void *)v29 + 6);
    char v11 = operator new(0x48uLL);
    void *v11 = &unk_26F3408A0;
    v11[1] = &v29;
    void v11[2] = &v21;
    void v11[3] = &v19;
    void v11[4] = &v18;
    v11[5] = &v17;
    v11[6] = &v16;
    _DWORD v11[7] = this;
    char v11[8] = &v25;
    uint64_t v32 = v11;
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 16))(v10, v30);
    uint64_t v9 = (realityio::IBLCubeMapAssetBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v30);
  }
LABEL_17:
  uint64_t v13 = *((void *)this + 2);
  unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v14 = (long long *)realityio::IBLCubeMapAssetBuilder::kOutputName(v9);
  v30[0] = *((void **)this + 35);
  realityio::Outputs::storeValue<REAsset *>(v13, v14, (uint64_t *)v30);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  }
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  uint64_t result = v26;
  if (v26) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  }
  return result;
}

void sub_23F65D840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_23F65D8DC()
{
}

void sub_23F65D8E4()
{
}

void realityio::IBLCubeMapAssetBuilder::clear(realityio::IBLCubeMapAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v15 = 0;
  uint64_t v4 = *((void *)this + 35);
  if (v4)
  {
    *((void *)this + 35) = 0;
    uint64_t v15 = v4;
  }
  unint64_t v5 = (realityio::IBLCubeMapAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v15);
  uint64_t v7 = (std::mutex *)*((void *)this + 2);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v8 = (const void **)realityio::IBLCubeMapAssetBuilder::kOutputName(v5);
  realityio::Outputs::getRawValue<REAsset *>(v7, v8, (uint64_t)&v15);
  int v10 = v15;
  if (!(_BYTE)v15)
  {
    uint64_t v9 = (realityio::IBLCubeMapAssetBuilder *)&v14;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v7 = (std::mutex *)v14.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v15 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v14 = __p;
      uint64_t v7 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10)
  {
    uint64_t v12 = *((void *)this + 2);
    char v11 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (const void **)realityio::IBLCubeMapAssetBuilder::kOutputName(v9);
    std::mutex::lock((std::mutex *)(v12 + 64));
    if (v12 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v12 + 40, v13))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v12 + 40), v13); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v12, (unsigned __int8 *)v13);
    }
    std::mutex::unlock((std::mutex *)(v12 + 64));
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else if (v2 < 0)
  {
    operator delete(v7);
  }
}

void sub_23F65DA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a15 && a23 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void realityio::IBLCubeMapAssetBuilder::~IBLCubeMapAssetBuilder(void **this)
{
  realityio::IBLCubeMapAssetBuilder::~IBLCubeMapAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F340728;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  char v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F3407A0;
  return result;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3407A0;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), &v7, &v8);
  unint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F65DD58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26F340820;
  return result;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F340820;
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::IBLCubeMapAssetBuilder::kOutputName((realityio::IBLCubeMapAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 80), &v7, &v8);
  unint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F65DF54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::IBLCubeMapAssetBuilder::IBLCubeMapAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x48uLL);
  *(void *)char v2 = &unk_26F3408A0;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3408A0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 4std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = result;
  return result;
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 16);
  std::string::size_type v3 = **(void **)(a1 + 8);
  long long v4 = *(long long **)(a1 + 24);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)v4, *((void *)v4 + 1));
  }
  else
  {
    long long v5 = *v4;
    v11.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 3), *((void *)v4 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)v4 + 24);
    __p.__r_.__value_.__r.__words[2] = *((void *)v4 + 5);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  realityio::Inputs::createCubeMapTextureAsset(v3, v2, (uint64_t)&v11, (std::string::size_type *)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = v13;
  if (v13)
  {
    REAssetSetMetadataString();
    uint64_t v8 = REAssetManagerImageBasedLightMemoryAssetCreateWithCubeMapNullable();
    if (v1[35]) {
      RERelease();
    }
    v1[35] = v8;
    uint64_t v10 = v8;
    if (v8) {
      RERetain();
    }
    realityio::Builder::addAsset(v1, &v10, 0);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v10);
    realityio::Builder::addAsset(v1, v7, 0);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v13);
}

void sub_23F65E200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::IBLCubeMapAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::tokens::ActionTokens_StaticTokenType::~ActionTokens_StaticTokenType(realityio::tokens::ActionTokens_StaticTokenType *this)
{
  uint64_t v49 = (void **)((char *)this + 384);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v49);
  uint64_t v2 = *((void *)this + 47);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 46);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 45);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 44);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 43);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 42);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 41);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 40);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 39);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 38);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 37);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 36);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 35);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 34);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 33);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 32);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 31);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 30);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 29);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 28);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 27);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 26);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 25);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 24);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 23);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 22);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 21);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 20);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 19);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 18);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 17);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 16);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 15);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *((void *)this + 14);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *((void *)this + 13);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *((void *)this + 12);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *((void *)this + 11);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *((void *)this + 10);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *((void *)this + 9);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *((void *)this + 8);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *((void *)this + 7);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *((void *)this + 6);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *((void *)this + 5);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *((void *)this + 4);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *((void *)this + 3);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *((void *)this + 2);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v48 = *((void *)this + 1);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::ActionTokens_StaticTokenType *realityio::tokens::ActionTokens_StaticTokenType::ActionTokens_StaticTokenType(realityio::tokens::ActionTokens_StaticTokenType *this)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  uint64_t v56 = (uint64_t *)(MEMORY[0x2455CF820](this, "/makeAmbientLightComponentRule", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 312, "/makeSkeletalPoseDefinitionAssetRule", 0);
  MEMORY[0x2455CF820]((char *)this + 320, "/makeSphereAssetDescriptorRule", 0);
  MEMORY[0x2455CF820]((char *)this + 328, "/makeSphereMeshDescriptorRule", 0);
  MEMORY[0x2455CF820]((char *)this + 336, "/makeSpotLightComponentRule", 0);
  MEMORY[0x2455CF820]((char *)this + 344, "/makeStatic3DTextComponentRule", 0);
  MEMORY[0x2455CF820]((char *)this + 352, "/makeStatic3DTextMeshDescriptorRule", 0);
  MEMORY[0x2455CF820]((char *)this + 360, "/makeTextureAsset", 0);
  MEMORY[0x2455CF820]((char *)this + 368, "/makeTransformAnimTimelineAssetRule", 0);
  MEMORY[0x2455CF820]((char *)this + 376, "/makeTransformComponentRule", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v57 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v56;
  uint64_t v58 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v59 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v60 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v61 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v62 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v63 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v64 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v65 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v66 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v67 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v68 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v69 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v70 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v71 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v72 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v73 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v74 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v75 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v76 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v77 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v78 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v79 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v80 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v81 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v82 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v83 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v84 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v85 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v86 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v87 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v88 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v89 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v90 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v91 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v92 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v93 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v94 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v95 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v96 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v97 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v98 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v98 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v44 = *((void *)this + 42);
  uint64_t v99 = v44;
  if ((v44 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v99 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = *((void *)this + 43);
  uint64_t v100 = v45;
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v46 = *((void *)this + 44);
  uint64_t v101 = v46;
  if ((v46 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v47 = *((void *)this + 45);
  uint64_t v102 = v47;
  if ((v47 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v102 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v48 = *((void *)this + 46);
  uint64_t v103 = v48;
  if ((v48 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v103 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v49 = *((void *)this + 47);
  uint64_t v104 = v49;
  if ((v49 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = 0;
  *((void *)this + 49) = 0;
  *((void *)this + 5std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = 0;
  int v50 = (char *)operator new(0x180uLL);
  uint64_t v51 = 0;
  *((void *)this + 4pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 8) = v50;
  *((void *)this + 49) = v50;
  *((void *)this + 5std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a9, 0) = v50 + 384;
  do
  {
    uint64_t v52 = *(uint64_t *)((char *)&v57 + v51);
    *(void *)&v50[v51] = v52;
    if ((v52 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v50[v51] &= 0xFFFFFFFFFFFFFFF8;
    }
    v51 += 8;
  }
  while (v51 != 384);
  *((void *)this + 49) = v50 + 384;
  for (uint64_t i = 376; i != -8; i -= 8)
  {
    uint64_t v54 = *(uint64_t *)((char *)&v57 + i);
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F65F5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void **a49,uint64_t a50,char a51)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a49);
  uint64_t v61 = 376;
  while (1)
  {
    uint64_t v62 = *(void *)(&a51 + v61);
    if ((v62 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v61 -= 8;
    if (v61 == -8)
    {
      if ((*v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v60 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F65FB5C()
{
}

void sub_23F65FB64()
{
}

void sub_23F65FB6C()
{
}

void sub_23F65FB74()
{
}

void sub_23F65FB7C()
{
}

void sub_23F65FB84()
{
}

void sub_23F65FB8C()
{
}

void sub_23F65FB94()
{
}

void sub_23F65FB9C()
{
}

void sub_23F65FBA4()
{
}

void sub_23F65FBAC()
{
}

void sub_23F65FBB4()
{
}

void sub_23F65FBBC()
{
}

void sub_23F65FBC4()
{
}

void sub_23F65FBCC()
{
}

void sub_23F65FBD4()
{
}

void sub_23F65FBDC()
{
}

void sub_23F65FBE4()
{
}

void sub_23F65FBEC()
{
}

void sub_23F65FBF4()
{
}

void sub_23F65FBFC()
{
}

void sub_23F65FC04()
{
}

void sub_23F65FC0C()
{
}

void sub_23F65FC14()
{
}

void sub_23F65FC1C()
{
}

void sub_23F65FC24()
{
}

void sub_23F65FC2C()
{
}

void sub_23F65FC34()
{
}

void sub_23F65FC3C()
{
}

void sub_23F65FC44()
{
}

void sub_23F65FC4C()
{
}

void sub_23F65FC54()
{
}

void sub_23F65FC5C()
{
}

void sub_23F65FC64()
{
}

void sub_23F65FC6C()
{
}

void sub_23F65FC74()
{
}

void sub_23F65FC7C()
{
}

void sub_23F65FC84()
{
}

void sub_23F65FC8C()
{
}

realityio::tokens::SamplingTokens_StaticTokenType *realityio::tokens::SamplingTokens_StaticTokenType::SamplingTokens_StaticTokenType(realityio::tokens::SamplingTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)MEMORY[0x2455CF820](this, "/__timeSamples", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  void v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  *uint64_t v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_23F65FD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

realityio::tokens::StageTokens_StaticTokenType *realityio::tokens::StageTokens_StaticTokenType::StageTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "/__stage.layerData", 0) + 8);
  MEMORY[0x2455CF820](v2, "/__root", 0);
  uint64_t v3 = *this;
  uint64_t v16 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v17 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  uint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  uint64_t v8 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    char v11 = v9;
    uint64_t v12 = (&v16)[v10];
    *(void *)&v7[v8] = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
    char v9 = 1;
    uint64_t v10 = 1;
  }
  while ((v11 & 1) == 0);
  this[3] = &v7[v8];
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v14 = (&v16)[i];
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::StageTokens_StaticTokenType *)this;
}

void sub_23F65FF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::tokens::RealityKitTokens_StaticTokenType::~RealityKitTokens_StaticTokenType(realityio::tokens::RealityKitTokens_StaticTokenType *this)
{
  uint64_t v15 = (void **)((char *)this + 112);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v15);
  uint64_t v2 = *((void *)this + 13);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 12);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 11);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 10);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 9);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 7);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 6);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 5);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 4);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 3);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 2);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 1);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::RealityKitTokens_StaticTokenType *realityio::tokens::RealityKitTokens_StaticTokenType::RealityKitTokens_StaticTokenType(realityio::tokens::RealityKitTokens_StaticTokenType *this)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v22 = (uint64_t *)(MEMORY[0x2455CF820](this, "Component", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 40, "height", 0);
  MEMORY[0x2455CF820]((char *)this + 48, "horizontalAlignment", 0);
  MEMORY[0x2455CF820]((char *)this + 56, "realitykit:innerDegrees", 0);
  MEMORY[0x2455CF820]((char *)this + 64, "pointSize", 0);
  MEMORY[0x2455CF820]((char *)this + 72, "shadow:bias", 0);
  MEMORY[0x2455CF820]((char *)this + 80, "Struct", 0);
  MEMORY[0x2455CF820]((char *)this + 88, "verticalAlignment", 0);
  MEMORY[0x2455CF820]((char *)this + 96, "width", 0);
  MEMORY[0x2455CF820]((char *)this + 104, "wrapMode", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v23 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v22;
  uint64_t v24 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v25 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v26 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v27 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v28 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v29 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v30 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v31 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v32 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v33 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v34 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v35 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v36 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  uint64_t v16 = (char *)operator new(0x70uLL);
  uint64_t v17 = 0;
  *((void *)this + 14) = v16;
  *((void *)this + 15) = v16;
  *((void *)this + 16) = v16 + 112;
  do
  {
    uint64_t v18 = *(uint64_t *)((char *)&v23 + v17);
    *(void *)&v16[v17] = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v16[v17] &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 += 8;
  }
  while (v17 != 112);
  *((void *)this + 15) = v16 + 112;
  for (uint64_t i = 104; i != -8; i -= 8)
  {
    uint64_t v20 = *(uint64_t *)((char *)&v23 + i);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F6605F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void **a15, uint64_t a16, char a17)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a15);
  uint64_t v27 = 104;
  while (1)
  {
    uint64_t v28 = *(void *)(&a17 + v27);
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v27 -= 8;
    if (v27 == -8)
    {
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F6607D8()
{
}

void sub_23F6607E0()
{
}

void sub_23F6607E8()
{
}

void sub_23F6607F0()
{
}

void sub_23F6607F8()
{
}

void realityio::tokens::EcsTokens_StaticTokenType::~EcsTokens_StaticTokenType(realityio::tokens::EcsTokens_StaticTokenType *this)
{
  uint64_t v55 = (void **)((char *)this + 432);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v55);
  uint64_t v2 = *((void *)this + 53);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 52);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 51);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 50);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 49);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 48);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 47);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 46);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 45);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 44);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 43);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 42);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 41);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 40);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 39);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 38);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 37);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 36);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 35);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 34);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 33);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 32);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 31);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 30);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 29);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 28);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 27);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 26);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 25);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 24);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 23);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 22);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 21);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *((void *)this + 20);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *((void *)this + 19);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *((void *)this + 18);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *((void *)this + 17);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *((void *)this + 16);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *((void *)this + 15);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *((void *)this + 14);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *((void *)this + 13);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *((void *)this + 12);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *((void *)this + 11);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *((void *)this + 10);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *((void *)this + 9);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *((void *)this + 8);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v48 = *((void *)this + 7);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v49 = *((void *)this + 6);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = *((void *)this + 5);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v51 = *((void *)this + 4);
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v52 = *((void *)this + 3);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v53 = *((void *)this + 2);
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v54 = *((void *)this + 1);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::EcsTokens_StaticTokenType *realityio::tokens::EcsTokens_StaticTokenType::EcsTokens_StaticTokenType(realityio::tokens::EcsTokens_StaticTokenType *this)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  uint64_t v62 = (uint64_t *)(MEMORY[0x2455CF820](this, "__ambientLightComponent", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 360, "__skelAnimTimelineAsset", 0);
  MEMORY[0x2455CF820]((char *)this + 368, "__skelPoseComponent", 0);
  MEMORY[0x2455CF820]((char *)this + 376, "__skelPoseDefinitionAsset", 0);
  MEMORY[0x2455CF820]((char *)this + 384, "__spotLightComponent", 0);
  MEMORY[0x2455CF820]((char *)this + 392, "__static3DTextComponent", 0);
  MEMORY[0x2455CF820]((char *)this + 400, "__transformComponent", 0);
  MEMORY[0x2455CF820]((char *)this + 408, "usdPrimitiveAxis", 0);
  MEMORY[0x2455CF820]((char *)this + 416, "__vertexDisplayColor", 0);
  MEMORY[0x2455CF820]((char *)this + 424, "__xformAnimTimelineAsset", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v63 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v62;
  uint64_t v64 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v65 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v66 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v67 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v68 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v69 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v70 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v71 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v72 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v73 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v74 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v75 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v76 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v77 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v78 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v79 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v80 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v81 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v82 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v83 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v84 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v85 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v86 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v87 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v88 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v89 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v90 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v91 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v91 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v92 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v93 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v93 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v94 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v94 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v95 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v95 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v96 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v96 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v97 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v98 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v98 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v99 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v99 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v100 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v101 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v102 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v102 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v103 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v103 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v104 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v44 = *((void *)this + 42);
  uint64_t v105 = v44;
  if ((v44 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = *((void *)this + 43);
  uint64_t v106 = v45;
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v46 = *((void *)this + 44);
  uint64_t v107 = v46;
  if ((v46 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v47 = *((void *)this + 45);
  uint64_t v108 = v47;
  if ((v47 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v108 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v48 = *((void *)this + 46);
  uint64_t v109 = v48;
  if ((v48 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v49 = *((void *)this + 47);
  uint64_t v110 = v49;
  if ((v49 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v50 = *((void *)this + 48);
  uint64_t v111 = v50;
  if ((v50 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v51 = *((void *)this + 49);
  uint64_t v112 = v51;
  if ((v51 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v52 = *((void *)this + 50);
  uint64_t v113 = v52;
  if ((v52 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v53 = *((void *)this + 51);
  uint64_t v114 = v53;
  if ((v53 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v54 = *((void *)this + 52);
  uint64_t v115 = v54;
  if ((v54 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v55 = *((void *)this + 53);
  uint64_t v116 = v55;
  if ((v55 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 56) = 0;
  uint64_t v56 = (char *)operator new(0x1B0uLL);
  uint64_t v57 = 0;
  *((void *)this + 54) = v56;
  *((void *)this + 55) = v56;
  *((void *)this + 56) = v56 + 432;
  do
  {
    uint64_t v58 = *(uint64_t *)((char *)&v63 + v57);
    *(void *)&v56[v57] = v58;
    if ((v58 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v56[v57] &= 0xFFFFFFFFFFFFFFF8;
    }
    v57 += 8;
  }
  while (v57 != 432);
  *((void *)this + 55) = v56 + 432;
  for (uint64_t i = 424; i != -8; i -= 8)
  {
    uint64_t v60 = *(uint64_t *)((char *)&v63 + i);
    if ((v60 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}