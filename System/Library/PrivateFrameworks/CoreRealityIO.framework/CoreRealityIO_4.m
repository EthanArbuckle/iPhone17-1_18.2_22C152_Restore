void sub_23F6E50E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  result = operator new(0x10uLL);
  void *result = &unk_26F3469D0;
  return result;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3469D0;
}

void std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  uint64_t v4 = realityio::MeshAssetBuilder::kOutputName((realityio::MeshAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 96), &v7, &v8);
  v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6E5284(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::MeshAssetBuilder::MeshAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::getAttributeValue<std::string>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      int v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<std::string>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F6E5498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<std::string>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v36 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v35))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
        }
        else
        {
          long long v7 = *(_OWORD *)v6;
          v32.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v7;
        }
        *(unsigned char *)a3 = 1;
        *(std::string *)(a3 + 8) = v32;
        goto LABEL_45;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
      {
        long long v13 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
        uint64_t v14 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34, (const pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        if (v34.__r_.__value_.__l.__size_)
        {
          uint64_t v15 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>(v14);
          if (*(char *)(v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
          }
          else
          {
            long long v16 = *(_OWORD *)v15;
            v32.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
          }
          *(unsigned char *)a3 = 1;
          *(std::string *)(a3 + 8) = v32;
        }
        else
        {
          Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
          uint64_t v27 = v33;
          *(void *)(a3 + 24) = *((void *)&v32.__r_.__value_.__l + 2);
          *(void *)(a3 + 32) = v27;
          *(void *)(a3 + 39) = *(void *)((char *)&v33 + 7);
          LOBYTE(v27) = HIBYTE(v33);
          long long v33 = 0uLL;
          v32.__r_.__value_.__r.__words[2] = 0;
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v27;
          if (SHIBYTE(v31) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v34);
        goto LABEL_45;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      uint64_t v25 = v33;
      *(void *)(a3 + 24) = *((void *)&v32.__r_.__value_.__l + 2);
      *(void *)(a3 + 32) = v25;
      *(void *)(a3 + 39) = *(void *)((char *)&v33 + 7);
      LOBYTE(v25) = HIBYTE(v33);
      long long v33 = 0uLL;
      v32.__r_.__value_.__r.__words[2] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v25;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_45:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
        return;
      }
      v24 = __p[0];
    }
    else
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      }
      std::operator+<char>();
      v17 = std::string::append(&v29, ") at the given time: ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v28, *a2);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v19 = &v28;
      }
      else {
        v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      v21 = std::string::append(&v34, (const std::string::value_type *)v19, size);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      std::string::size_type v31 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
      uint64_t v23 = v33;
      *(void *)(a3 + 24) = *((void *)&v32.__r_.__value_.__l + 2);
      *(void *)(a3 + 32) = v23;
      *(void *)(a3 + 39) = *(void *)((char *)&v33 + 7);
      LOBYTE(v23) = HIBYTE(v33);
      long long v33 = 0uLL;
      v32.__r_.__value_.__r.__words[2] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v23;
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_45;
      }
      v24 = (void *)v29.__r_.__value_.__r.__words[0];
    }
    operator delete(v24);
    goto LABEL_45;
  }
  std::string::size_type v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v32, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  uint64_t v10 = v33;
  *(void *)(a3 + 24) = *((void *)&v32.__r_.__value_.__l + 2);
  *(void *)(a3 + 32) = v10;
  *(void *)(a3 + 39) = *(void *)((char *)&v33 + 7);
  LOBYTE(v10) = HIBYTE(v33);
  long long v33 = 0uLL;
  v32.__r_.__value_.__r.__words[2] = 0;
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v10;
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F6E591C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 80));
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v20 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<realityio::MeshModelDescriptorBuilder::MeshModelDataT *,std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__shared_ptr_default_delete<realityio::MeshModelDescriptorBuilder::MeshModelDataT,realityio::MeshModelDescriptorBuilder::MeshModelDataT>,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

realityio::MeshModelDescriptorBuilder::MeshModelDataT *std::__shared_ptr_pointer<realityio::MeshModelDescriptorBuilder::MeshModelDataT *,std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__shared_ptr_default_delete<realityio::MeshModelDescriptorBuilder::MeshModelDataT,realityio::MeshModelDescriptorBuilder::MeshModelDataT>,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::__on_zero_shared(uint64_t a1)
{
  result = *(realityio::MeshModelDescriptorBuilder::MeshModelDataT **)(a1 + 24);
  if (result)
  {
    realityio::MeshModelDescriptorBuilder::MeshModelDataT::~MeshModelDataT(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::MeshModelDescriptorBuilder::MeshModelDataT *,std::shared_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::__shared_ptr_default_delete<realityio::MeshModelDescriptorBuilder::MeshModelDataT,realityio::MeshModelDescriptorBuilder::MeshModelDataT>,std::allocator<realityio::MeshModelDescriptorBuilder::MeshModelDataT>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

realityio::MeshModelDescriptorBuilder::MeshModelDataT *std::unique_ptr<realityio::MeshModelDescriptorBuilder::MeshModelDataT>::reset[abi:ne180100](realityio::MeshModelDescriptorBuilder::MeshModelDataT **a1)
{
  result = *a1;
  *a1 = 0;
  if (result)
  {
    realityio::MeshModelDescriptorBuilder::MeshModelDataT::~MeshModelDataT(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<MaterialIndexAssignor,realityio::DetailedError>::~Result(uint64_t a1, void *a2)
{
  if (*(unsigned char *)a1)
  {
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQuery<pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator>>>>,false>>::~concurrent_unordered_base(a1 + 712, a2);
    tbb::interface5::internal::concurrent_unordered_base<tbb::interface5::concurrent_unordered_map_traits<pxrInternal__aapl__pxrReserved__::SdfPath,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>,tbb::interface5::internal::hash_compare<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>>,tbb::tbb_allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::unique_ptr<pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::BindingsAtPrim>>>,false>>::~concurrent_unordered_base(a1 + 152, v3);
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(void **)(a1 + 136));
    unint64_t v5 = (void **)(a1 + 88);
    std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v5);
    std::__tree<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::__map_value_compare<MaterialIndexAssignor::MaterialKey,std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>,std::less<MaterialIndexAssignor::MaterialKey>,true>,std::allocator<std::__value_type<MaterialIndexAssignor::MaterialKey,unsigned long>>>::destroy(*(void **)(a1 + 72));
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,MaterialIndexAssignor::GPrimInfo>>>::destroy(*(void **)(a1 + 48));
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*(void **)(a1 + 24));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      long long v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  unint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void std::__shared_ptr_emplace<anonymous namespace'::DeduplicatingMeshAsset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::DeduplicatingMeshAsset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<anonymous namespace'::DeduplicatingMeshAsset>::__on_zero_shared(void *a1)
{
  a1[3] = &unk_26F346B18;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
  a1[3] = &unk_26F33E4A8;
  realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(a1 + 7);

  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 4);
}

void *anonymous namespace'::DeduplicatingMeshAsset::onComplete(_anonymous_namespace_::DeduplicatingMeshAsset *this)
{
  v1 = (void *)((char *)this + 8);
  uint64_t v3 = realityio::ImportSession::deduplicateMeshAsset(*((void *)this + 6), (uint64_t)this + 40, *((void *)this + 1), 0);
  return realityio::WrappedRERef<REAsset *>::operator=(v1, &v3);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder::MeshAssetDataT>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder::MeshAssetDataT>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346B48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::MeshAssetBuilder::MeshAssetDataT>::__on_zero_shared(uint64_t a1)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(a1 + 200));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 184);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>>>::destroy(a1 + 112, *(void **)(a1 + 120));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::destroy(a1 + 88, *(void **)(a1 + 96));
  uint64_t v3 = (void **)(a1 + 64);
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)(a1 + 40);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F346B98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_26F346BE8;
  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::MeshAssetBuilder::MeshAssetDataT>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void *std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F346C18;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F346C18;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x2455D2BD0);
}

char *std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  result = (char *)operator new(0x30uLL);
  *(void *)result = &unk_26F346C18;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)result + 5) = *(void *)(a1 + 40);
  return result;
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26F346C18;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a2 + 40) = *(void *)(result + 40);
  return result;
}

void std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  v1 = *(uint64_t **)(a1 + 16);
  REAssetCopyDependencyArray();
  uint64_t Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    uint64_t v3 = Size;
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t Asset = REAssetDynamicArrayGetAsset();
      CFStringRef Type = (const __CFString *)REAssetGetType();
      if (CFEqual(Type, @"Skeleton")) {
        realityio::Builder::addAsset(v1, Asset, 0);
      }
    }
  }

  return RERelease();
}

uint64_t std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::MeshAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::LiveSceneManager::insertEntityBuilders(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  v60 = 0;
  uint64_t v61 = 0;
  v59 = &v60;
  uint64_t v6 = *(void **)(a1 + 304);
  unint64_t v7 = (void *)(a1 + 312);
  if (v6 != (void *)(a1 + 312))
  {
    while (1)
    {
      uint64_t v8 = v60;
      if (v59 == &v60) {
        break;
      }
      uint64_t v9 = &v60;
      if (v60)
      {
        do
        {
          uint64_t v10 = (uint64_t **)v8;
          uint64_t v8 = (uint64_t *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v10 = (uint64_t **)v9[2];
          BOOL v11 = *v10 == (uint64_t *)v9;
          uint64_t v9 = v10;
        }
        while (v11);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v10 + 4, v6 + 4))
      {
        if (!v60) {
          goto LABEL_9;
        }
LABEL_11:
        __p = v10;
        char v12 = v10 + 1;
        goto LABEL_13;
      }
      char v12 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v59, &__p, v6 + 4);
LABEL_13:
      if (!*v12) {
        goto LABEL_14;
      }
LABEL_19:
      long long v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          long long v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (void *)v6[2];
          BOOL v11 = *v17 == (void)v6;
          uint64_t v6 = v17;
        }
        while (!v11);
      }
      uint64_t v6 = v17;
      if (v17 == v7) {
        goto LABEL_25;
      }
    }
    uint64_t v10 = &v60;
    if (!v60)
    {
LABEL_9:
      __p = &v60;
      char v12 = &v60;
LABEL_14:
      long long v13 = operator new(0x38uLL);
      v63 = &v60;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 8, (_DWORD *)v6 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v13 + 9, (_DWORD *)v6 + 9);
      *((void *)v13 + 5) = v6[5];
      uint64_t v14 = v6[6];
      *((void *)v13 + 6) = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      LOBYTE(v64) = 1;
      uint64_t v15 = __p;
      *(void *)long long v13 = 0;
      *((void *)v13 + 1) = 0;
      *((void *)v13 + 2) = v15;
      *char v12 = (uint64_t *)v13;
      if (*v59)
      {
        v59 = (uint64_t **)*v59;
        long long v13 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v60, (uint64_t *)v13);
      ++v61;
      v62 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v62);
      goto LABEL_19;
    }
    goto LABEL_11;
  }
LABEL_25:
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(a1 + 304, *(void **)(a1 + 312));
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = v7;
  v63 = 0;
  uint64_t v64 = 0;
  v62 = &v63;
  uint64_t v20 = (void *)*a2;
  v19 = a2 + 1;
  long long v18 = v20;
  if (v20 != v19)
  {
    v21 = v19;
    __s = (char *)realityio::kEntityBuilderIdentifier;
    do
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40B30, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_268C40B30))
      {
        MEMORY[0x2455CF810](&_MergedGlobals_46, __s);
        __cxa_guard_release(&qword_268C40B30);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40B40, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_268C40B40))
      {
        std::string::basic_string[abi:ne180100]<0>(&v53, __s);
        pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
        MEMORY[0x2455CF830](&qword_268C40B38, &__p);
        if (SHIBYTE(v58) < 0) {
          operator delete(__p);
        }
        if (v55 < 0) {
          operator delete(v53);
        }
        __cxa_guard_release(&qword_268C40B40);
      }
      v53 = 0;
      v54 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v52, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 36), (const pxrInternal__aapl__pxrReserved__::TfToken *)&qword_268C40B38);
      uint64_t v51 = qword_268C40B38;
      if ((qword_268C40B38 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(qword_268C40B38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v51 &= 0xFFFFFFFFFFFFFFF8;
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 36)))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "/__root");
        MEMORY[0x2455CF7A0](v49, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v50, (pxrInternal__aapl__pxrReserved__::SdfPath *)v49, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v52, (int *)&v50);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v52 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v50);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v49);
        if (SHIBYTE(v58) < 0) {
          operator delete(__p);
        }
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v18 + 28)) & 1) == 0)
      {
        long long v22 = v60;
        if (!v60) {
          goto LABEL_46;
        }
        uint64_t v23 = &v60;
        do
        {
          v24 = v23;
          uint64_t v25 = v22 + 4;
          int v26 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v22 + 4, &v52);
          uint64_t v27 = v22 + 1;
          if (!v26)
          {
            uint64_t v27 = v22;
            uint64_t v23 = (uint64_t **)v22;
          }
          long long v22 = (uint64_t *)*v27;
        }
        while (*v27);
        if (v23 == &v60
          || (!v26 ? (std::string v28 = v25) : (std::string v28 = (uint64_t *)(v24 + 4)),
              pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v52, v28)))
        {
LABEL_46:
          uint64_t v29 = *(void *)(a1 + 296);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v47, (_DWORD *)v18 + 9);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48, (_DWORD *)v18 + 10);
          uint64_t v50 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v29 + 64))(v29, &v47);
          if (v50) {
            RERetain();
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v47);
          v30 = operator new(0x148uLL);
          v30[1] = 0;
          v30[2] = 0;
          void *v30 = &unk_26F339C78;
          realityio::EntityBuilder::EntityBuilder();
        }
        std::string v34 = v23[5];
        long long v33 = (std::__shared_weak_count *)v23[6];
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v35 = v54;
        v53 = v34;
        v54 = v33;
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::shared_ptr<realityio::Builder>&,0>((uint64_t)&__p, &v52, &v53);
        std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>((uint64_t **)(a1 + 304), &__p, (uint64_t)&__p);
        if (v58) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p);
        std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v62, (unint64_t)v53, (uint64_t)v53, (uint64_t)v54);
      }
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v52);
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
      std::string::size_type v31 = (void *)v18[1];
      if (v31)
      {
        do
        {
          std::string v32 = v31;
          std::string::size_type v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          std::string v32 = (void *)v18[2];
          BOOL v11 = *v32 == (void)v18;
          long long v18 = v32;
        }
        while (!v11);
      }
      long long v18 = v32;
    }
    while (v32 != v21);
  }
  v57 = 0;
  v58 = 0;
  __p = &v57;
  uint64_t v36 = v59;
  if (v59 == &v60)
  {
    v43 = 0;
  }
  else
  {
    do
    {
      uint64_t v37 = (long long *)(v36 + 5);
      v38 = v63;
      if (v63)
      {
        unint64_t v39 = *(void *)v37;
        do
        {
          v40 = v38[4];
          if (v39 >= (unint64_t)v40)
          {
            if ((unint64_t)v40 >= v39) {
              goto LABEL_83;
            }
            ++v38;
          }
          v38 = (uint64_t **)*v38;
        }
        while (v38);
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a5, v37);
LABEL_83:
      v41 = v36[1];
      if (v41)
      {
        do
        {
          v42 = (uint64_t **)v41;
          v41 = (uint64_t *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          v42 = (uint64_t **)v36[2];
          BOOL v11 = *v42 == (uint64_t *)v36;
          uint64_t v36 = v42;
        }
        while (!v11);
      }
      uint64_t v36 = v42;
    }
    while (v42 != &v60);
    v43 = v57;
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy((uint64_t)&__p, v43);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v63);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy((uint64_t)&v59, v60);
}

void sub_23F6E69A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  __cxa_guard_abort(&qword_268C40B40);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*(void **)(v39 - 104));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(v39 - 136, *(void **)(v39 - 128));
  _Unwind_Resume(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath&,std::shared_ptr<realityio::Builder>&,0>(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v6 + 1, a2 + 1);
  uint64_t v7 = a3[1];
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::shared_ptr<realityio::Builder>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::shared_ptr<realityio::Builder>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,std::shared_ptr<realityio::Builder>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, &v10, a2);
  if (!*v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (char *)operator new(0x38uLL);
    v8[1] = a1 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 8, (_DWORD *)a3);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v7 + 9, (_DWORD *)(a3 + 4));
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    char v9 = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v10, v6, (uint64_t *)v7);
    v8[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8);
  }
}

uint64_t *std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(uint64_t *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v8 = (uint64_t **)(result + 1);
  uint64_t v7 = (uint64_t *)result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v7;
        unint64_t v10 = v7[4];
        if (v10 <= a2) {
          break;
        }
        uint64_t v7 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v10 >= a2) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    char v9 = (uint64_t **)(result + 1);
LABEL_9:
    BOOL v11 = (uint64_t *)operator new(0x30uLL);
    char v12 = v11;
    v11[4] = a3;
    v11[5] = a4;
    if (a4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
    }
    *BOOL v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *uint64_t v8 = v11;
    uint64_t v13 = *(void *)*v6;
    if (v13)
    {
      uint64_t *v6 = v13;
      char v12 = *v8;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v6[1], v12);
    ++v6[2];
  }
  return result;
}

double _ZTWN9realityio33kDummyLayerMutexForInvalidObjectsE(double a1)
{
  if (!*(unsigned char *)__tls_guard(&__tls_guard))
  {
    *(unsigned char *)v2(v3) = 1;
    context = (void *)MEMORY[0x2455D3010]();
    uint64_t v5 = realityio::kDummyLayerMutexForInvalidObjects(&realityio::kDummyLayerMutexForInvalidObjects);
    MEMORY[0x2455D2A10](v5);
  }
  realityio::kDummyLayerMutexForInvalidObjects(&realityio::kDummyLayerMutexForInvalidObjects);
  return a1;
}

realityio::tokens::TransformBuilderTokens_StaticTokenType *realityio::tokens::TransformBuilderTokens_StaticTokenType::TransformBuilderTokens_StaticTokenType(realityio::tokens::TransformBuilderTokens_StaticTokenType *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  v19 = (uint64_t *)(MEMORY[0x2455CF820](this, "face", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 16, "image", 0);
  MEMORY[0x2455CF820]((char *)this + 24, "plane", 0);
  MEMORY[0x2455CF820]((char *)this + 32, "vertical", 0);
  MEMORY[0x2455CF820]((char *)this + 40, "xformOp", 0);
  MEMORY[0x2455CF820]((char *)this + 48, "xformOpOrder", 0);
  MEMORY[0x2455CF820]((char *)this + 56, "disableAnchoringSchema", 0);
  MEMORY[0x2455CF820]((char *)this + 64, "preliminary:anchoring:type", 0);
  MEMORY[0x2455CF820]((char *)this + 72, "preliminary:planeAnchoring:alignment", 0);
  MEMORY[0x2455CF820]((char *)this + 80, "preliminary:imageAnchoring:referenceImage", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v20 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v19;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v22 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v23 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v24 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v26 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v27 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v28 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v29 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v30 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  uint64_t v13 = (char *)operator new(0x58uLL);
  uint64_t v14 = 0;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13;
  *((void *)this + 13) = v13 + 88;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v20 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 88);
  *((void *)this + 12) = v13 + 88;
  for (uint64_t i = 80; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v20 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F6E73A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void **a11, uint64_t a12, char a13)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a11);
  uint64_t v23 = 80;
  while (1)
  {
    uint64_t v24 = *(void *)(&a13 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F6E7534()
{
}

void sub_23F6E753C()
{
}

void realityio::generateTransformDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40B58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40B58))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40B50;
  *a1 = _MergedGlobals_47;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F6E78F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::string v34 = *(std::__shared_weak_count **)(v33 - 120);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  *(void *)(v33 - 184) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 184));
  v35 = *(std::__shared_weak_count **)(v33 - 136);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  *(void *)(v33 - 184) = &a17;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 184));
  uint64_t v36 = 24;
  while (1)
  {
    uint64_t v37 = *(std::__shared_weak_count **)(v33 - 176 + v36);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    v36 -= 16;
    if (v36 == -8)
    {
      if (a12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a12);
      }
      if ((a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (a16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a16);
      }
      if ((a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(v33 - 176) = &a20;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 176));
      *(void *)(v33 - 176) = &a28;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 176));
      MEMORY[0x2455D2BD0](v32, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40B58);
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F6E7BEC()
{
}

void sub_23F6E7C04()
{
}

realityio::RectAreaLightComponentBuilder *realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(realityio::RectAreaLightComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[18] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "RectAreaLightComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kRectAreaLightComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40B80, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40B80))
  {
    operator new();
  }
  uint64_t v5 = qword_268C40B70;
  uint64_t v6 = *(std::__shared_weak_count **)algn_268C40B78;
  if (*(void *)algn_268C40B78) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C40B78 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F346D10;
  v12[3] = v12;
  v11[0] = &unk_26F346D90;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F346C98;
  return this;
}

void sub_23F6E81D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  MEMORY[0x2455D2BD0](v55, 0x10A1C40F82F910ELL);
  *(void *)(v58 - 208) = &a44;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 208));
  MEMORY[0x2455D2BD0](v56, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v57, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40B80);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::RectAreaLightComponentBuilder::run(realityio::RectAreaLightComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v29 = a2;
  uint64_t v3 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v25, v4, v3);
  unint64_t v5 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeColor4FAndGamut((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 72), &v32, (__n128)xmmword_23F7CD1B0);
  __n128 v30 = v32;
  char v31 = v33;
  float v24 = 0.0;
  unint64_t v6 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 56), (uint64_t)&v32);
  if (v32.n128_u8[0])
  {
    unsigned __int32 v7 = v32.n128_u32[2];
  }
  else
  {
    unsigned __int32 v7 = 1.0;
    if (v35 < 0) {
      operator delete(__p);
    }
  }
  float v24 = *(float *)&v7;
  unsigned __int32 v23 = 0;
  unint64_t v8 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 64), (uint64_t)&v32);
  if (v32.n128_u8[0])
  {
    unsigned __int32 v9 = v32.n128_u32[2];
  }
  else
  {
    unsigned __int32 v9 = 0;
    if (v35 < 0) {
      operator delete(__p);
    }
  }
  unsigned __int32 v23 = v9;
  unsigned __int32 v22 = 0;
  unint64_t v10 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 104), (uint64_t)&v32);
  if (v32.n128_u8[0])
  {
    unsigned __int32 v11 = v32.n128_u32[2];
  }
  else
  {
    unsigned __int32 v11 = 1.0;
    if (v35 < 0) {
      operator delete(__p);
    }
  }
  unsigned __int32 v22 = v11;
  unsigned __int32 v21 = 0;
  unint64_t v12 = atomic_load(&realityio::tokens::LightBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::LightBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::LightBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 112), (uint64_t)&v32);
  if (v32.n128_u8[0])
  {
    unsigned __int32 v14 = v32.n128_u32[2];
  }
  else
  {
    unsigned __int32 v14 = 1.0;
    if (v35 < 0) {
      operator delete(__p);
    }
  }
  unsigned __int32 v21 = v14;
  float v24 = realityio::scaleLightIntensityByStageUnits((realityio *)&v25, v13, *MEMORY[0x263F36FA0] * v24);
  uint64_t v20 = 0;
  uint64_t v15 = *((void *)v29 + 6);
  long long v16 = operator new(0x48uLL);
  *long long v16 = &unk_26F346E10;
  v16[1] = &v29;
  v16[2] = &v25;
  v16[3] = &v20;
  v16[4] = &v24;
  v16[5] = &v23;
  v16[6] = &v30;
  v16[7] = &v22;
  v16[8] = &v21;
  __p = v16;
  (*(void (**)(uint64_t, __n128 *))(*(void *)v15 + 16))(v15, &v32);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v32);
  realityio::Builder::addComponent((uint64_t *)this, v20);
  uint64_t v18 = *((void *)this + 2);
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40B68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40B68))
  {
    operator new();
  }
  realityio::Outputs::storeValue<REComponent *&>(v18, (long long *)_MergedGlobals_48, &v20);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  uint64_t result = v26;
  if (v26) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
  }
  return result;
}

void sub_23F6E8914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MEMORY[0x2455D2BD0](v5, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C40B68);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void *realityio::RectAreaLightComponentBuilder::clear(realityio::RectAreaLightComponentBuilder *this, realityio::Inputs *a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a2 + 6);
  uint64_t v4 = a2;
  v5[0] = &unk_26F346F10;
  v5[1] = &v4;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F6E8A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::RectAreaLightComponentBuilder::~RectAreaLightComponentBuilder(realityio::RectAreaLightComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F346D10;
  return result;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F346D10;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), &v7, &v8);
  unint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6E8C30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F346D90;
  return result;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F346D90;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + 24) = 1065353216;
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v6 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,char const(&)[5],pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>("none", (std::string::size_type *)(v4 + 88), &v6, &v7);
  unint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F6E8E2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::RectAreaLightComponentBuilder::RectAreaLightComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_26F346E10;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F346E10;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v22);
  if (v22[0])
  {
    long long v4 = v23;
    unsigned __int32 v21 = v23;
    if (v23)
    {
      RERetain();
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&buf, *(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16));
      unint64_t v5 = (atomic_uint *)*((void *)&buf + 1);
      if (*((void *)&buf + 1))
      {
        if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&buf + 1)
                      + 14))
          unint64_t v5 = (atomic_uint *)buf;
        else {
          unint64_t v5 = 0;
        }
      }
      uint64_t v20 = v5;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v20);
      uint64_t v6 = *((void *)&buf + 1);
      if (*((void *)&buf + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      float v19 = 0.0;
      pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>((uint64_t *)&buf, (uint64_t *)&v20);
      pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
      float v8 = v7;
      uint64_t v9 = *((void *)&buf + 1);
      if (*((void *)&buf + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&buf + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      float v19 = v8;
      RERectAreaLightComponentGetComponentType();
      long long v17 = *(_OWORD *)(a1 + 40);
      long long v18 = *(_OWORD *)(a1 + 24);
      uint64_t v11 = *(void *)(a1 + 56);
      uint64_t v10 = *(void *)(a1 + 64);
      uint64_t v25 = 0;
      unint64_t v12 = (char *)operator new(0x40uLL);
      *(void *)unint64_t v12 = &unk_26F346E80;
      *(_OWORD *)(v12 + 8) = v18;
      *(_OWORD *)(v12 + 24) = v17;
      *((void *)v12 + 5) = v11;
      *((void *)v12 + 6) = &v19;
      *((void *)v12 + 7) = v10;
      uint64_t v25 = v12;
      uint64_t v13 = REEntityGetOrAddComponentByClass();
      std::function<void ()(REComponent *)>::operator()((uint64_t)&buf, v13);
      RENetworkMarkComponentDirty();
      std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](&buf);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v20);
      goto LABEL_18;
    }
  }
  else
  {
    unsigned __int32 v21 = 0;
  }
  unsigned __int32 v14 = *(id *)(realityio::logObjects(v4) + 24);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), &v20);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v20);
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = Text;
    _os_log_impl(&dword_23F4EA000, v14, OS_LOG_TYPE_DEFAULT, "Stopping operation to set rectAreaLight component because entity no longer exists for prim \"%s\"", (uint8_t *)&buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
  }

LABEL_18:
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v21);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v22);
}

void sub_23F6E921C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v10 = va_arg(va1, atomic_uint *);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v9 = *(atomic_uint **)(v7 - 88);
  if (v9)
  {
    if (atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
    }
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va1);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v2 = &unk_26F346E80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F346E80;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  **(void **)(a1 + 8) = *a2;
  exp2f(**(float **)(a1 + 24));
  RERectAreaLightComponentSetIntensity();
  RERectAreaLightComponentSetColorGamut3F();
  v4.n128_u32[0] = **(_DWORD **)(a1 + 40);
  v4.n128_u32[1] = **(_DWORD **)(a1 + 56);
  v4.n128_u64[0] = (unint64_t)vmul_n_f32((float32x2_t)v4.n128_u64[0], **(float **)(a1 + 48));

  return MEMORY[0x270F1F7C8](v3, v4);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio29RectAreaLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio29RectAreaLightComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio29RectAreaLightComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F346F10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F346F10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v1 = **((void **)a1 + 1);
  uint64_t v2 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v1, v2, (uint64_t)v5);
  if (v5[0])
  {
    uint64_t v4 = v6;
    if (v6)
    {
      RERetain();
      RERectAreaLightComponentGetComponentType();
      REEntityRemoveComponentByClass();
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v4);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v5);
}

void sub_23F6E9638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::RectAreaLightComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void realityio::internal::PrimToEntityMap::makePrimToEntityMap(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v60, 2044, (uint64_t)a1);
  v59[0] = 0;
  v59[1] = 0;
  uint64_t v58 = v59;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((uint64_t *)v51, v4);
  if ((v51[24] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v51[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51[16]);
  if (*(void *)&v51[8]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v51[8]);
  }
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  PseudoRoot = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(v48.i64, v5);
  uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(PseudoRoot);
  unint64_t v9 = *(void *)UsdPrimDefaultPredicate;
  unint64_t v8 = *(void *)(UsdPrimDefaultPredicate + 8);
  uint64_t v10 = *(void *)(UsdPrimDefaultPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v9 & 0x2000) != 0 || (v8 & 0x2000) == 0))
  {
    v9 |= 0x2000uLL;
    v8 &= ~0x2000uLL;
  }
  v45[0] = (void *)v9;
  v45[1] = (void *)v8;
  *(void *)&long long v46 = v10;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v48, (uint64_t *)v45, (uint64_t)v51);
  if ((BYTE8(v49) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v49 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v31 = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v49);
  if (v48.i64[1]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v48.i64[1]);
  }
  v48.i64[0] = *(void *)v51;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48.i32[2], &v51[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v48.i32[3], &v51[12]);
  long long v49 = *(_OWORD *)&v51[16];
  uint64_t v50 = v52;
  v45[0] = v53;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v45[1], &v54);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v45[1] + 1, &v55);
  long long v46 = v56;
  uint64_t v47 = v57;
  while (*(_OWORD *)&v48 != *(_OWORD *)v45
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v49, (uint64_t)&v46))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v48, (uint64_t)&v41);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v43);
    if (v42) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v42);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v48);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v45[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48.i64[1]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51[8]);
  int64x2_t v48 = 0uLL;
  *(void *)&long long v49 = 0;
  v45[0] = 0;
  v45[1] = 0;
  *(void *)&long long v46 = 0;
  v42 = 0;
  uint64_t v43 = 0;
  v40[1] = 0;
  v41 = (uint64_t *)&v42;
  uint64_t v39 = (uint64_t *)v40;
  v40[0] = 0;
  v38[0] = 0;
  v38[1] = 0;
  v36[1] = 0;
  uint64_t v37 = v38;
  char v35 = (uint64_t *)v36;
  v36[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a1);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot((uint64_t *)v51, v11);
  if ((v51[24] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v51[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v51[16]);
  if (*(void *)&v51[8]) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v51[8]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  char v33 = 0;
  uint64_t v34 = 0;
  __p = &v33;
  if (v48.i64[1] == v48.i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v48.u64[1]);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    if ((unint64_t)((v48.i64[1] - v48.i64[0]) / 104) <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = (v48.i64[1] - v48.i64[0]) / 104;
    }
    do
    {
      uint64_t v15 = (long long *)(v48.i64[0] + v12);
      if (*(char *)(v48.i64[0] + v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v51, *(const std::string::value_type **)v15, *((void *)v15 + 1));
      }
      else
      {
        long long v16 = *v15;
        *(void *)&v51[16] = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v51 = v16;
      }
      *(void *)&v51[24] = v13;
      long long v17 = std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)&__p, &v61, (const void **)v51);
      if (!*v17)
      {
        long long v18 = operator new(0x40uLL);
        v18[2] = *(_OWORD *)v51;
        long long v19 = *(_OWORD *)&v51[16];
        memset(v51, 0, 24);
        v18[3] = v19;
        uint64_t v20 = v61;
        *(void *)long long v18 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = v20;
        void *v17 = v18;
        if (*(void *)__p)
        {
          __p = *(void **)__p;
          long long v18 = (_OWORD *)*v17;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v33, (uint64_t *)v18);
        ++v34;
      }
      if ((v51[23] & 0x80000000) != 0) {
        operator delete(*(void **)v51);
      }
      ++v13;
      v12 += 104;
    }
    while (v14 != v13);
    int64x2_t v21 = v48;
  }
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v45;
  *(void *)(v31 + 16) = v46;
  v45[1] = 0;
  *(void *)&long long v46 = 0;
  v45[0] = 0;
  *(int64x2_t *)(v31 + 24) = v21;
  uint64_t v22 = v49;
  *(void *)&long long v49 = 0;
  int64x2_t v48 = 0uLL;
  float v24 = v41;
  unsigned __int32 v23 = v42;
  *(void *)(v31 + 40) = v22;
  *(void *)(v31 + 48) = v24;
  *(void *)(v31 + 56) = v23;
  uint64_t v25 = v31 + 56;
  uint64_t v26 = v43;
  *(void *)(v31 + 64) = v43;
  if (v26)
  {
    v23[2] = v25;
    v41 = (uint64_t *)&v42;
    v42 = 0;
    uint64_t v43 = 0;
  }
  else
  {
    *(void *)(v31 + 48) = v25;
  }
  uint64_t v28 = __p;
  uint64_t v27 = v33;
  *(void *)(v31 + 80) = v33;
  uint64_t v29 = v31 + 80;
  *(void *)(v31 + 72) = v28;
  uint64_t v30 = v34;
  *(void *)(v31 + 88) = v34;
  if (v30)
  {
    v27[2] = v29;
    __p = &v33;
    char v33 = 0;
    uint64_t v34 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    *(void *)(v31 + 72) = v29;
  }
  std::__tree<std::string>::destroy((uint64_t)&__p, (char *)v27);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v35, v36[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v37, v38[0]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v39, v40[0]);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&v41, v42);
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  *(void *)uint64_t v51 = &v48;
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy((uint64_t)&v58, v59[0]);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v60);
}

void sub_23F6E9C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,char a26,void *a27,uint64_t a28,char a29,void *a30,uint64_t a31,char a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v42 - 224));
  if (a22 < 0) {
    operator delete(__p);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a23, a24);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a26, a27);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a29, a30);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>>>::destroy((uint64_t)&a32, a33);
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  *(void *)(v42 - 224) = &a42;
  std::vector<realityio::internal::PrimToEntityMap::EntityData>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 224));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::destroy(v42 - 136, *(void **)(v42 - 128));
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)(v42 - 112));
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::anonymous namespace'::appendSkeletonsHelper(realityio::internal::_anonymous_namespace_ *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v17[3] = 0;
    v17[0] = MEMORY[0x263F90768] + 16;
    pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(v16, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v17);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v16, &v15);
    unint64_t v5 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a2, &v15);
    uint64_t v6 = (uint64_t *)((char *)a2 + 8);
    if ((uint64_t *)((char *)a2 + 8) == v5)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, &v15);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v13 + 1, (_DWORD *)&v15 + 1);
      memset(v14, 0, sizeof(v14));
      memset(v12, 0, sizeof(v12));
      uint64_t v7 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>>((uint64_t **)a2, &v13, (uint64_t)&v13);
      char v9 = v8;
      long long v18 = (void **)v14;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v18);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
      long long v18 = (void **)v12;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v18);
      if (v9) {
        unint64_t v5 = v7;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    if (v5 != v6)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v13);
      unint64_t v10 = v5[6];
      if (v10 >= v5[7])
      {
        uint64_t v11 = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath>(v5 + 5, &v13);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v5[6], &v13);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v10 + 4), (_DWORD *)&v13 + 1);
        uint64_t v11 = v10 + 8;
      }
      v5[6] = v11;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    MEMORY[0x2455CEDD0](v16);
    return MEMORY[0x2455CF050](v17);
  }
  return result;
}

void sub_23F6E9F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va1);
  MEMORY[0x2455CEDD0]((uint64_t *)va2);
  MEMORY[0x2455CF050](va3);
  _Unwind_Resume(a1);
}

void realityio::internal::anonymous namespace'::createEntitiesAndBuildInitialMappingsHelper(uint64_t a1, pxrInternal__aapl__pxrReserved__ **a2, int a3, uint64_t a4, uint64_t a5, int64x2_t *a6, uint64_t **a7, uint64_t a8, uint64_t **a9, uint64_t a10, uint64_t **a11)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v130 = *(std::string *)a1;
  }
  unsigned int v103 = realityio::getPrimEntityProvidingSetting((realityio *)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)a2) | a3;
  isEntityProviding = (uint64_t *)realityio::isEntityProviding((realityio *)a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v103);
  uint64_t v17 = a4;
  uint64_t v101 = a4;
  if (!isEntityProviding) {
    goto LABEL_80;
  }
  Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)a2);
  if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (*(void *)Name & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v116, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v20 = *(_OWORD *)EmptyString;
    *(void *)&v116[16] = *(void *)(EmptyString + 16);
    *(_OWORD *)v116 = v20;
  }
  int v21 = *(unsigned __int8 *)(a1 + 23);
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a1 + 23))
    {
      uint64_t v22 = (unsigned char *)a1;
      if (v21 != 1) {
        goto LABEL_22;
      }
      goto LABEL_18;
    }
LABEL_19:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, (const void **)v116, (uint64_t)v125);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v130.__r_.__value_.__l.__data_);
    }
    std::string v130 = *(std::string *)v125;
    goto LABEL_42;
  }
  uint64_t v23 = *(void *)(a1 + 8);
  if (!v23) {
    goto LABEL_19;
  }
  if (v23 != 1) {
    goto LABEL_22;
  }
  uint64_t v22 = *(unsigned char **)a1;
LABEL_18:
  if (*v22 == 47) {
    goto LABEL_19;
  }
LABEL_22:
  if ((v21 & 0x80u) == 0) {
    size_t v24 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v24 = *(void *)(a1 + 8);
  }
  uint64_t v25 = v125;
  std::string::basic_string[abi:ne180100]((uint64_t)v125, v24 + 1);
  if (v125[23] < 0) {
    uint64_t v25 = *(unsigned char **)v125;
  }
  if (v24)
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v26 = (const void *)a1;
    }
    else {
      uint64_t v26 = *(const void **)a1;
    }
    memmove(v25, v26, v24);
  }
  *(_WORD *)&v25[v24] = 47;
  if (v116[23] >= 0) {
    uint64_t v27 = v116;
  }
  else {
    uint64_t v27 = *(const std::string::value_type **)v116;
  }
  if (v116[23] >= 0) {
    std::string::size_type v28 = v116[23];
  }
  else {
    std::string::size_type v28 = *(void *)&v116[8];
  }
  uint64_t v29 = std::string::append((std::string *)v125, v27, v28);
  std::string::size_type v30 = v29->__r_.__value_.__r.__words[0];
  *(void *)v131 = v29->__r_.__value_.__l.__size_;
  *(void *)&v131[7] = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
  char v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  v130.__r_.__value_.__r.__words[0] = v30;
  v130.__r_.__value_.__l.__size_ = *(void *)v131;
  *(std::string::size_type *)((char *)&v130.__r_.__value_.__r.__words[1] + 7) = *(void *)&v131[7];
  *((unsigned char *)&v130.__r_.__value_.__s + 23) = v31;
  if ((v125[23] & 0x80000000) != 0) {
    operator delete(*(void **)v125);
  }
LABEL_42:
  uint64_t v32 = a6->i64[0];
  uint64_t v33 = a6->i64[1];
  uint64_t v129 = 0;
  long long v128 = 0u;
  long long v126 = 0u;
  memset(v127, 0, sizeof(v127));
  memset(v125, 0, sizeof(v125));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)&long long v126 = (char *)&v126 + 8;
  *((void *)&v126 + 1) = 0;
  v127[2] = 0;
  v127[3] = 0;
  v127[0] = 0;
  v127[1] = &v127[2];
  *((void *)&v128 + 1) = 0;
  uint64_t v129 = 0;
  *(void *)&long long v128 = (char *)&v128 + 8;
  unint64_t v34 = a6->u64[1];
  unint64_t v35 = a6[1].u64[0];
  if (v34 >= v35)
  {
    uint64_t v37 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v34 - a6->i64[0]) >> 3);
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) > 0x276276276276276) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v39 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v35 - a6->i64[0]) >> 3);
    if (2 * v39 > v38) {
      unint64_t v38 = 2 * v39;
    }
    if (v39 >= 0x13B13B13B13B13BLL) {
      unint64_t v40 = 0x276276276276276;
    }
    else {
      unint64_t v40 = v38;
    }
    v132 = a6 + 1;
    if (v40) {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::internal::PrimToEntityMap::EntityData>>((uint64_t)a6[1].i64, v40);
    }
    else {
      v41 = 0;
    }
    uint64_t v106 = a5;
    *(void *)v131 = v41;
    *(void *)&v131[8] = &v41[104 * v37];
    *(void *)&v131[16] = *(void *)&v131[8];
    *(void *)&v131[24] = &v41[104 * v40];
    realityio::internal::PrimToEntityMap::EntityData::EntityData(*(uint64_t *)&v131[8], (long long *)v125);
    uint64_t v42 = *(void *)&v131[8];
    uint64_t v36 = *(void *)&v131[16] + 104;
    *(void *)&v131[16] += 104;
    uint64_t v43 = a6;
    long long v46 = (uint64_t *)a6;
    uint64_t v44 = a6->i64[0];
    unint64_t v45 = v46[1];
    if (v45 == v44)
    {
      int64x2_t v48 = vdupq_n_s64(v45);
      a6 = v43;
    }
    else
    {
      uint64_t v104 = v33;
      uint64_t v47 = 0;
      do
      {
        realityio::internal::PrimToEntityMap::EntityData::EntityData((std::string *)(v42 + v47 - 104), (const realityio::internal::PrimToEntityMap::EntityData *)(v45 + v47 - 104));
        v47 -= 104;
      }
      while (v45 + v47 != v44);
      a6 = v43;
      int64x2_t v48 = *v43;
      uint64_t v36 = *(void *)&v131[16];
      v42 += v47;
      uint64_t v33 = v104;
    }
    a6->i64[0] = v42;
    a6->i64[1] = v36;
    *(int64x2_t *)&v131[8] = v48;
    uint64_t v49 = a6[1].i64[0];
    a6[1].i64[0] = *(void *)&v131[24];
    *(void *)&v131[24] = v49;
    *(void *)v131 = v48.i64[0];
    std::__split_buffer<realityio::internal::PrimToEntityMap::EntityData>::~__split_buffer((uint64_t)v131);
    a5 = v106;
  }
  else
  {
    realityio::internal::PrimToEntityMap::EntityData::EntityData(v34, (long long *)v125);
    uint64_t v36 = v34 + 104;
    a6->i64[1] = v34 + 104;
  }
  a6->i64[1] = v36;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v128, *((void **)&v128 + 1));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v127[1], (void *)v127[2]);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v126, *((void **)&v126 + 1));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  isEntityProviding = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v125[24]);
  a4 = v101;
  uint64_t v50 = v32;
  if ((v125[23] & 0x80000000) != 0) {
    operator delete(*(void **)v125);
  }
  unint64_t v51 = *(void *)(a5 + 16);
  uint64_t v52 = *(uint64_t **)(a5 + 8);
  if ((unint64_t)v52 >= v51)
  {
    isEntityProviding = *(uint64_t **)a5;
    uint64_t v54 = ((uint64_t)v52 - *(void *)a5) >> 3;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61) {
      std::vector<char const*>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v56 = v51 - (void)isEntityProviding;
    if (v56 >> 2 > v55) {
      unint64_t v55 = v56 >> 2;
    }
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v55;
    }
    if (v57)
    {
      uint64_t v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(a5 + 16, v57);
      isEntityProviding = *(uint64_t **)a5;
      uint64_t v52 = *(uint64_t **)(a5 + 8);
    }
    else
    {
      uint64_t v58 = 0;
    }
    v59 = &v58[8 * v54];
    v60 = &v58[8 * v57];
    *(void *)v59 = v101;
    v53 = v59 + 8;
    while (v52 != isEntityProviding)
    {
      uint64_t v61 = *--v52;
      *((void *)v59 - 1) = v61;
      v59 -= 8;
    }
    *(void *)a5 = v59;
    *(void *)(a5 + 8) = v53;
    *(void *)(a5 + 16) = v60;
    if (isEntityProviding) {
      operator delete(isEntityProviding);
    }
  }
  else
  {
    *uint64_t v52 = v101;
    v53 = v52 + 1;
  }
  uint64_t v62 = 0x4EC4EC4EC4EC4EC5 * ((v33 - v50) >> 3);
  *(void *)(a5 + 8) = v53;
  if ((v116[23] & 0x80000000) != 0) {
    operator delete(*(void **)v116);
  }
  uint64_t v17 = v62;
LABEL_80:
  v123 = 0;
  uint64_t v124 = 0;
  uint64_t v121 = 0;
  v122 = &v123;
  uint64_t v110 = v17;
  if (v17 == a4) {
    uint64_t v64 = (uint64_t **)a10;
  }
  else {
    uint64_t v64 = (uint64_t **)&v122;
  }
  *(void *)&long long v120 = (char *)&v120 + 8;
  *((void *)&v120 + 1) = 0;
  if (v17 != a4) {
    a9 = (uint64_t **)&v120;
  }
  *((void *)&v118 + 1) = 0;
  uint64_t v119 = 0;
  if (v17 != a4) {
    a11 = (uint64_t **)&v118;
  }
  v107 = a11;
  *(void *)&long long v118 = (char *)&v118 + 8;
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomMesh *)isEntityProviding);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA)
  {
    if ((IsA & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v125);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v64, v125, v125);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t IsA = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v125);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCube::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCube *)IsA);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t v68 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (v68) {
    goto LABEL_101;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomSphere::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomSphere *)v68);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t v69 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (v69) {
    goto LABEL_101;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCylinder::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCylinder *)v69);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t v70 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (v70) {
    goto LABEL_101;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCapsule::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCapsule *)v70);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t v71 = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (v71) {
    goto LABEL_101;
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomCone::_GetStaticTfType((pxrInternal__aapl__pxrReserved__::UsdGeomCone *)v71);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()) {
    goto LABEL_101;
  }
  v73 = a2[1];
  if (!v73 || (*((unsigned char *)v73 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a2[1], v72);
  }
  v74 = (void *)*((void *)v73 + 3);
  unint64_t v75 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v75) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*v74 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v75 + 112) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_101:
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v125);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(v107, v125, v125);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v125);
  }
  v105 = (uint64_t *)a6;
  memset(v125, 0, 17);
  uint64_t v76 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v125, 0);
  *(_OWORD *)v131 = *(_OWORD *)v76;
  *(void *)&v131[16] = *(void *)(v76 + 16);
  *(_OWORD *)v125 = *(_OWORD *)v131;
  v125[16] = v131[16];
  uint64_t v77 = pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v125, 1);
  *(_OWORD *)v116 = *(_OWORD *)v77;
  *(void *)&v116[16] = *(void *)(v77 + 16);
  *(_OWORD *)v125 = *(_OWORD *)v116;
  v125[16] = v116[16];
  v78 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsConjunction::operator&=((uint64_t)v125, 0x100000005);
  uint64_t v79 = *v78;
  uint64_t v80 = v78[1];
  uint64_t v81 = v78[2];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v82 = a5;
  *(void *)v131 = v79 & 0xFFFFFFFFFFFFDFFFLL;
  *(void *)&v131[8] = v80 | 0x2000;
  *(void *)&v131[16] = v81;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)a2, (uint64_t *)v131, (uint64_t)v125);
  *(void *)v131 = *(void *)v125;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v131[8], &v125[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v131[12], &v125[12]);
  *(_OWORD *)&v131[16] = *(_OWORD *)&v125[16];
  *(void *)v116 = *((void *)&v126 + 1);
  v132 = (int64x2_t *)v126;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v116[8], v127);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v116[12], (_DWORD *)v127 + 1);
  *(_OWORD *)&v116[16] = *(_OWORD *)&v127[1];
  uint64_t v117 = v127[3];
  v83 = (void *)(a8 + 8);
  if (v110 == v101) {
    v84 = (void *)(a10 + 8);
  }
  else {
    v84 = &v123;
  }
  while (*(_OWORD *)v131 != *(_OWORD *)v116
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v131[16], (uint64_t)&v116[16]))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v131, (uint64_t)v112);
    pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::_GetStaticTfType(v85);
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v112, &v111);
      v86 = (void *)*v83;
      if (!*v83) {
        goto LABEL_115;
      }
      v87 = (void *)(a8 + 8);
      do
      {
        int v88 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v86 + 4, &v111);
        v89 = v86 + 1;
        if (!v88)
        {
          v89 = v86;
          v87 = v86;
        }
        v86 = (void *)*v89;
      }
      while (*v89);
      if (v87 == v83 || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v111, v87 + 4)) {
LABEL_115:
      }
        v87 = (void *)(a8 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
      if (v83 != v87)
      {
        v90 = (void *)v87[5];
        v91 = (void *)v87[6];
        while (v90 != v91)
        {
          std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v64, v84, v90, v90);
          ++v90;
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v112, &v111);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>(a9, &v111, &v111);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v111);
    }
    if ((v115 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v115 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v114);
    if (v113) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v113);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v131);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v116[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v131[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v127);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v125[8]);
  if (v110 != v101)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v131);
    if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external((std::string *)v125, v130.__r_.__value_.__l.__data_, v130.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)v125 = v130;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v125[24], v131);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v125[28], &v131[4]);
    long long v126 = v120;
    v127[0] = v121;
    if (v121)
    {
      *(void *)(*((void *)&v120 + 1) + 16) = (char *)&v126 + 8;
      *(void *)&long long v120 = (char *)&v120 + 8;
      *((void *)&v120 + 1) = 0;
      uint64_t v121 = 0;
    }
    else
    {
      *(void *)&long long v126 = (char *)&v126 + 8;
    }
    v127[1] = v122;
    v127[2] = v123;
    v127[3] = v124;
    if (v124)
    {
      v123[2] = &v127[2];
      v122 = &v123;
      v123 = 0;
      uint64_t v124 = 0;
    }
    else
    {
      v127[1] = &v127[2];
    }
    v92 = (void *)*((void *)&v118 + 1);
    long long v128 = v118;
    uint64_t v129 = v119;
    if (v119)
    {
      *(void *)(*((void *)&v118 + 1) + 16) = (char *)&v128 + 8;
      *(void *)&long long v118 = (char *)&v118 + 8;
      *((void *)&v118 + 1) = 0;
      uint64_t v119 = 0;
    }
    else
    {
      *(void *)&long long v128 = (char *)&v128 + 8;
    }
    uint64_t v93 = *v105;
    uint64_t v94 = *v105 + 104 * v110;
    if ((unsigned char *)v94 != v125)
    {
      uint64_t v95 = *(void *)(v94 + 16);
      long long v96 = *(_OWORD *)v94;
      uint64_t v97 = *(void *)&v125[16];
      *(_OWORD *)uint64_t v94 = *(_OWORD *)v125;
      *(void *)(v94 + 16) = v97;
      *(_OWORD *)v125 = v96;
      *(void *)&v125[16] = v95;
      uint64_t v98 = v93 + 104 * v110;
      std::swap[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath>((int *)(v98 + 24), (int *)&v125[24]);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap((uint64_t *)(v98 + 32), (uint64_t)&v126);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap((uint64_t *)(v98 + 56), (uint64_t)&v127[1]);
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap((uint64_t *)(v98 + 80), (uint64_t)&v128);
      v92 = (void *)*((void *)&v128 + 1);
    }
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v128, v92);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v127[1], (void *)v127[2]);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v126, *((void **)&v126 + 1));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v125[24]);
    if ((v125[23] & 0x80000000) != 0) {
      operator delete(*(void **)v125);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v131);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)a2, v112);
  *(_DWORD *)v131 = v112[0];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  *(_DWORD *)&v131[4] = v112[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  *(void *)&v131[8] = v110;
  v99 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a7, v116, v131);
  if (!*v99)
  {
    v100 = operator new(0x30uLL);
    *(void *)&v125[8] = a7 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v100 + 8, v131);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v100 + 9, &v131[4]);
    *((void *)v100 + 5) = *(void *)&v131[8];
    v125[16] = 1;
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a7, *(uint64_t *)v116, v99, (uint64_t *)v100);
    *(void *)v125 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)v125, 0);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v131);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v112);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v118, *((void **)&v118 + 1));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v120, *((void **)&v120 + 1));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&v122, v123);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
}

void sub_23F6EAD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v51 - 144));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a44, (void *)a45);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a47, (void *)a48);
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)&a50, (void *)a51);
  if (*(char *)(v51 - 185) < 0) {
    operator delete(*(void **)(v51 - 208));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::PrimToEntityMap::EntityData::estimateMeshes@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  uint64_t v5 = *(void *)(result + 56);
  if (v5 != result + 64)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 28));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v23, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v22[0] = MEMORY[0x263F90690] + 16;
    MEMORY[0x2455CF810](&v17, "primvars:st");
    realityio::approximateGeomFromUsdGeomMesh((realityio *)v22, &v21);
  }
  uint64_t v7 = *(void **)(result + 80);
  uint64_t v8 = (void *)(result + 88);
  if (v7 != (void *)(result + 88))
  {
    do
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v23, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 28));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v17, v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
      realityio::approximateGeomWithPrimitivePrim((realityio *)&v17, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)0x40, 64, 64, 32, (uint64_t)v23);
      uint64_t v10 = v23[0];
      if (v23[0])
      {
        ++*(_DWORD *)a3;
        uint64_t v11 = *(void *)(a3 + 8) + v10;
        unint64_t v12 = v23[2];
        uint64_t v13 = *(void *)(a3 + 16) + v23[1];
        *(void *)(a3 + 8) = v11;
        *(void *)(a3 + 16) = v13;
        if (v12 > *(unsigned int *)(a3 + 24)) {
          *(_DWORD *)(a3 + 24) = v12;
        }
      }
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
      uint64_t result = v18;
      if (v18) {
        uint64_t result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
      }
      uint64_t v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          uint64_t v7 = v15;
        }
        while (!v16);
      }
      uint64_t v7 = v15;
    }
    while (v15 != v8);
  }
  return result;
}

uint64_t realityio::internal::anonymous namespace'::isBoundToSkeleton(realityio::internal::_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomMesh::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  if (!pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v6[3] = 0;
  v6[0] = MEMORY[0x263F90768] + 16;
  pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(&v4, (pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *)v6);
  if (!v5 || (*(unsigned char *)(v5 + 57) & 8) != 0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = (*(uint64_t (**)(uint64_t *))(v4 + 32))(&v4);
  }
  MEMORY[0x2455CEDD0](&v4);
  MEMORY[0x2455CF050](v6);
  return v2;
}

void realityio::internal::PrimToEntityMap::EntityData::~EntityData(realityio::internal::PrimToEntityMap::EntityData *this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t realityio::internal::PrimToEntityMap::EntityData::EntityData(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v18 = (uint64_t)a2 + 24;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 24), (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 28), (_DWORD *)a2 + 7);
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  uint64_t v6 = (void *)a2 + 5;
  uint64_t v5 = *((void *)a2 + 5);
  *(void *)(a1 + 40) = v5;
  uint64_t v7 = a1 + 40;
  uint64_t v8 = *((void *)a2 + 6);
  *(void *)(a1 + 48) = v8;
  if (v8)
  {
    *(void *)(v5 + 16) = v7;
    *((void *)a2 + 4) = v6;
    void *v6 = 0;
    *((void *)a2 + 6) = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v7;
  }
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  uint64_t v10 = a2 + 4;
  uint64_t v9 = *((void *)a2 + 8);
  *(void *)(a1 + 64) = v9;
  uint64_t v11 = a1 + 64;
  uint64_t v12 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v12;
  if (v12)
  {
    *(void *)(v9 + 16) = v11;
    *((void *)a2 + 7) = v10;
    *uint64_t v10 = 0;
    *((void *)a2 + 9) = 0;
  }
  else
  {
    *(void *)(a1 + 56) = v11;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  uint64_t v14 = (void *)a2 + 11;
  uint64_t v13 = *((void *)a2 + 11);
  *(void *)(a1 + 88) = v13;
  uint64_t v15 = a1 + 88;
  uint64_t v16 = *((void *)a2 + 12);
  *(void *)(a1 + 96) = v16;
  if (v16)
  {
    *(void *)(v13 + 16) = v15;
    *((void *)a2 + 10) = v14;
    *uint64_t v14 = 0;
    *((void *)a2 + 12) = 0;
  }
  else
  {
    *(void *)(a1 + 80) = v15;
  }
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v18, (int *)&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a2 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  MEMORY[0x2455D2770](a2, "");
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)a2 + 56, *((void **)a2 + 8));
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 7) = v10;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)(a2 + 2), *((void **)a2 + 5));
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 4) = v6;
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)(a2 + 5), *((void **)a2 + 11));
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 10) = v14;
  return a1;
}

void sub_23F6EB7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::SdfPath *a11)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v12, *(void **)(v11 + 88));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a9, *(void **)(v11 + 64));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(a10, *(void **)(v11 + 40));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(a11);
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::internal::PrimToEntityMap::EntityData>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a2);
}

std::string *realityio::internal::PrimToEntityMap::EntityData::EntityData(std::string *this, const realityio::internal::PrimToEntityMap::EntityData *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[1], (_DWORD *)a2 + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)a2 + 7);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100]((uint64_t *)&this[1].__r_.__value_.__l.__size_, (uint64_t)a2 + 32);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100]((uint64_t *)&this[3].__r_.__value_.__l.__size_, (uint64_t)a2 + 80);
  return this;
}

void sub_23F6EB8E0(_Unwind_Exception *a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v4, *(void **)(v1 + 64));
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v3, *(void **)(v1 + 40));
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::SdfPath,std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_23F6EB96C(_Unwind_Exception *a1)
{
  std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<pxrInternal__aapl__pxrReserved__::SdfPath>::insert[abi:ne180100]<std::__tree_const_iterator<pxrInternal__aapl__pxrReserved__::SdfPath,std::__tree_node<pxrInternal__aapl__pxrReserved__::SdfPath,void *> *,long>>(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(v5, v6, (void *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__split_buffer<realityio::internal::PrimToEntityMap::EntityData>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 104;
    std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](v4, i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::swap(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  uint64_t v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16);
  }
  void *result = (uint64_t)v3;
  uint64_t v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    uint64_t v6 = (void *)a2;
  }
  void *v6 = a2 + 8;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,unsigned long>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t realityio::logObjects(realityio *this)
{
  {
    operator new();
  }
  return realityio::logObjects(void)::logObjects;
}

void sub_23F6EBB88(_Unwind_Exception *a1)
{
}

realityio::LogObjects *realityio::LogObjects::LogObjects(realityio::LogObjects *this)
{
  *(void *)this = os_log_create("com.apple.corerio", "Foundation");
  *((void *)this + 1) = os_log_create("com.apple.corerio", "StateTracking");
  *((void *)this + 2) = os_log_create("com.apple.corerio", "Scheduler");
  *((void *)this + 3) = os_log_create("com.apple.corerio", "Builder");
  *((void *)this + 4) = os_log_create("com.apple.corerio", "CDM");
  *((void *)this + 5) = os_log_create("com.apple.corerio", "Replication");
  *((void *)this + 6) = os_log_create("com.apple.corerio", "Mtlx");
  *((void *)this + 7) = os_log_create("com.apple.corerio", "BuilderExecutor");
  return this;
}

BOOL RIOPxrUsdUtilsStageGetRealityKitOptionBool(uint64_t a1, uint64_t a2, BOOL a3)
{
  BOOL RealityKitStage = a3;
  BOOL v7 = a3;
  if (a1 && a2)
  {
    uint64_t v6 = *(atomic_uint **)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
    BOOL RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)&v6, (void *)(a2 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v6);
  }
  return RealityKitStage;
}

void sub_23F6EBCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9)
{
}

void RIOPxrUsdUtilsStageSetRealityKitOptionBool(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    uint64_t v6 = realityio::UsdLayerMutexTracker::instance((realityio::UsdLayerMutexTracker *)a1);
    uint64_t v8 = a1[2];
    BOOL v7 = a1 + 2;
    if (v8)
    {
      BOOL v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
      uint64_t EditTarget = pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v9);
      uint64_t v11 = *(atomic_uint **)(EditTarget + 8);
      __p = *(void **)EditTarget;
      uint64_t v23 = v11;
      if (v11) {
        atomic_fetch_add_explicit(v11 + 2, 1u, memory_order_relaxed);
      }
    }
    else
    {
      __p = 0;
      uint64_t v23 = 0;
    }
    double v12 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v6, &__p);
    uint64_t v14 = v13;
    uint64_t v15 = v23;
    if (v23 && atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *, double))(*(void *)v15 + 8))(v15, v12);
    }
    std::recursive_mutex::lock(v14);
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&__p, v16);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData(&v25, v17);
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)v23;
    if (v23 && atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v18 + 8))(v18);
    }
    uint64_t v27 = &unk_26F333523;
    v26[0] = a3;
    if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
    }
    std::operator+<char>();
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    if (v24 < 0) {
      operator delete(__p);
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v7);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&__p, v19);
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(v20, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)&v25);
    uint64_t v21 = v23;
    if (v23)
    {
      if (atomic_fetch_add_explicit(v23 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v21 + 8))(v21);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v26);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v25, 0);
    std::recursive_mutex::unlock(v14);
  }
}

void sub_23F6EBF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, __int16 a17, char a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a17);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a16, 0);
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrUsdUtilsPrimCopyRealityKitOptionString(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, CFStringRef a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    }
    std::operator+<char>();
    MEMORY[0x2455CF830](&v11, &__p);
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a1 + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetCustomDataByKey(v12, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11);
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v12))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        if (*(char *)(v6 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
        }
        else
        {
          long long v7 = *(_OWORD *)v6;
          __p.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
        }
        uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        a3 = CFStringCreateWithCString(0, (const char *)v8, 0x8000100u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v12);
    }
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return a3;
}

void sub_23F6EC1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&a17);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *realityio::AnimationLibraryComponentAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, void *a2@<X3>, void *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v7 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  uint64_t v18 = 0;
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REComponent *>>(v7))
  {
    uint64_t v8 = *((void *)a4 + 1);
    if ((v8 & 4) != 0) {
      BOOL v9 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a4);
    else {
      BOOL v9 = *(uint64_t **)a4;
    }
    realityio::WrappedRERef<REAsset *>::operator=(&v18, v9);
    uint64_t v10 = v18;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (a2[1] != *a2)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v11));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v19))
      {
        if ((v20 & 4) != 0) {
          uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(&v19);
        }
        else {
          uint64_t v14 = v19;
        }
        uint64_t v13 = *v14;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      ++v12;
      v11 += 16;
    }
    while (v12 < (uint64_t)(a2[1] - *a2) >> 3);
    if (v13)
    {
      if (!v10)
      {
        REAnimationLibraryComponentGetComponentType();
        uint64_t v15 = REComponentCreateByClass();
        uint64_t v19 = (uint64_t *)v15;
        if (v15) {
          RERetain();
        }
        uint64_t v16 = v18;
        if (v18 != v15)
        {
          uint64_t v18 = v15;
          uint64_t v19 = (uint64_t *)v16;
        }
        realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v19);
        unint64_t v20 = (unint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REComponent *>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REComponent *>>::_PlaceCopy();
      }
      REAnimationLibraryComponentAssignAnimationLibraryAsset();
      RENetworkMarkComponentDirty();
    }
  }
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v18);
}

void sub_23F6EC404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

realityio::tokens::CubeMeshBuilderTokens_StaticTokenType *realityio::tokens::CubeMeshBuilderTokens_StaticTokenType::CubeMeshBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "Cube", 0) + 8);
  MEMORY[0x2455CF820](v2, "size", 0);
  MEMORY[0x2455CF820](this + 2, "material:binding", 0);
  uint64_t v3 = *this;
  uint64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  long long v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  BOOL v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::CubeMeshBuilderTokens_StaticTokenType *)this;
}

void sub_23F6EC5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void realityio::getCubeMeshBuilderDirtyStageDescriptor(realityio *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F6EC990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  MEMORY[0x2455D2BD0](v25, 0x10A1C40F82F910ELL);
  *(void *)(v26 - 128) = &a24;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 128));
  MEMORY[0x2455D2BD0](v24, 0x10A1C401BF1BAA1);
  _Unwind_Resume(a1);
}

void realityio::tokens::CameraBuilderTokens_StaticTokenType::~CameraBuilderTokens_StaticTokenType(realityio::tokens::CameraBuilderTokens_StaticTokenType *this)
{
  long long v7 = (void **)((char *)this + 48);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v2 = *((void *)this + 5);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 4);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 1);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::CameraComponentBuilder *realityio::CameraComponentBuilder::CameraComponentBuilder(realityio::CameraComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[18] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "CameraComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kCameraComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40BA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40BA0))
  {
    operator new();
  }
  uint64_t v5 = qword_268C40B90;
  uint64_t v6 = *(std::__shared_weak_count **)algn_268C40B98;
  if (*(void *)algn_268C40B98) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_268C40B98 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F347040;
  uint64_t v12[3] = v12;
  v11[0] = &unk_26F3470C0;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F346FC8;
  return this;
}

void sub_23F6ED1BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  MEMORY[0x2455D2BD0](v55, 0x10A1C40F82F910ELL);
  *(void *)(v58 - 208) = &a44;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v58 - 208));
  MEMORY[0x2455D2BD0](v56, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v57, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40BA0);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::CameraComponentBuilder::run(realityio::CameraComponentBuilder *this, realityio::Inputs *a2)
{
  v30[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  PrimAtPath = (pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v26, v5, v4);
  pxrInternal__aapl__pxrReserved__::UsdGeomCamera::_GetStaticTfType(PrimAtPath);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA();
  if (IsA)
  {
    char v8 = *(NSObject **)(realityio::logObjects((realityio *)IsA) + 24);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_INFO);
    if (v9)
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_INFO, "Updating entity's camera", (uint8_t *)buf, 2u);
    }
    uint64_t v10 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v9);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v10, (uint64_t)v24);
    if (v24[0])
    {
      uint64_t v11 = v25;
      uint64_t v23 = v25;
      if (v25)
      {
        uint64_t v11 = (realityio *)RERetain();
        if (v23)
        {
          unint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomCamera *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v30[0] = MEMORY[0x263F906C0] + 16;
          unint64_t v19 = 0;
          pxrInternal__aapl__pxrReserved__::UsdGeomCamera::GetCamera(buf, v12, (const pxrInternal__aapl__pxrReserved__::UsdTimeCode *)&v19);
          MEMORY[0x2455CEA60](v30);
          pxrInternal__aapl__pxrReserved__::GfCamera::GetClippingRange((pxrInternal__aapl__pxrReserved__::GfCamera *)buf);
          unint64_t v19 = __PAIR64__(v14, v13);
          uint64_t v15 = *((void *)a2 + 6);
          uint64_t v16 = operator new(0x28uLL);
          *uint64_t v16 = &unk_26F347140;
          v16[1] = buf;
          v16[2] = &v23;
          uint64_t v16[3] = this;
          v16[4] = &v19;
          v30[3] = v16;
          (*(void (**)(uint64_t, void *))(*(void *)v15 + 16))(v15, v30);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v30);
          if (__p)
          {
            uint64_t v22 = __p;
            operator delete(__p);
          }
LABEL_12:
          realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v23);
          realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v24);
          goto LABEL_13;
        }
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v17 = *(NSObject **)(realityio::logObjects(v11) + 24);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the component because entity no longer exists", (uint8_t *)buf, 2u);
    }
    goto LABEL_12;
  }
LABEL_13:
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  uint64_t result = v27;
  if (v27) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
  }
  return result;
}

void sub_23F6ED7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v32 - 72));
  if (__p) {
    operator delete(__p);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(v32 - 160));
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result(v32 - 152);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v32 - 104));
  _Unwind_Resume(a1);
}

uint64_t realityio::CameraComponentBuilder::clear(realityio::CameraComponentBuilder *this, realityio::Inputs *a2)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = realityio::EntityBuilder::kInputName(this);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v3, (uint64_t)v7);
  if (v7[0])
  {
    uint64_t v6 = v8;
    if (v8)
    {
      RERetain();
      uint64_t v4 = *((void *)a2 + 6);
      v9[0] = &unk_26F3472C0;
      v9[1] = &v6;
      v9[3] = v9;
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v9);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v9);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v6);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v7);
}

void sub_23F6ED950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void realityio::CameraComponentBuilder::~CameraComponentBuilder(realityio::CameraComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::CameraBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::CameraBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_23F6EDC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v19 = 40;
  while (1)
  {
    uint64_t v20 = *(void *)(&a12 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455D2BD0](v12, 0x60C40D8CED4CELL);
      _Unwind_Resume(a1);
    }
  }
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F347040;
  return result;
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F347040;
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), &v7, &v8);
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F6EDF08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3470C0;
  return result;
}

void std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3470C0;
}

char *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::CameraComponentBuilder::CameraComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26F347140;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F347140;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::GfCamera::GetProjection(*(pxrInternal__aapl__pxrReserved__::GfCamera **)(a1 + 8)))
  {
    REOrthographicCameraComponentGetComponentType();
    uint64_t v3 = *(void *)(a1 + 32);
    v10[0] = &unk_26F347230;
    v10[1] = v2;
    v10[2] = v3;
    uint64_t v11 = v10;
    uint64_t v4 = REEntityGetOrAddComponentByClass();
    std::function<void ()(REComponent *)>::operator()((uint64_t)v10, v4);
    RENetworkMarkComponentDirty();
    std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v10);
    REPerspectiveCameraComponentGetComponentType();
  }
  else
  {
    REPerspectiveCameraComponentGetComponentType();
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = operator new(0x20uLL);
    *uint64_t v8 = &unk_26F3471B0;
    v8[1] = v2;
    void v8[2] = v6;
    v8[3] = v7;
    uint64_t v11 = v8;
    uint64_t v9 = REEntityGetOrAddComponentByClass();
    std::function<void ()(REComponent *)>::operator()((uint64_t)v10, v9);
    RENetworkMarkComponentDirty();
    std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v10);
    REOrthographicCameraComponentGetComponentType();
  }
  return REEntityRemoveComponentByClass();
}

void sub_23F6EE2D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F3471B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3471B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REPerspectiveCameraComponentSetNear();
  REPerspectiveCameraComponentSetFar();
  pxrInternal__aapl__pxrReserved__::GfCamera::GetFieldOfView();

  return MEMORY[0x270F1F1A8](v2);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F347230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F347230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  realityio::Builder::addComponent(*(uint64_t **)(a1 + 8), *a2);
  REOrthographicCameraComponentSetNear();
  v4.n128_u32[0] = *(_DWORD *)(*(void *)(a1 + 16) + 4);

  return MEMORY[0x270F1F0C8](v3, v4);
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio22CameraComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio22CameraComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3472C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3472C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()()
{
  REPerspectiveCameraComponentGetComponentType();
  REEntityRemoveComponentByClass();
  REOrthographicCameraComponentGetComponentType();

  return REEntityRemoveComponentByClass();
}

uint64_t std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::CameraComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void RIO_MTLX::getShaderNodes(RIO_MTLX::InterfaceElement **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v118[0] = 0;
  v118[1] = 0;
  uint64_t v117 = v118;
  RIO_MTLX::InterfaceElement::getActiveInputs(*a1, &v115);
  uint64_t v6 = v115;
  uint64_t v90 = v116;
  if (v115 == v116)
  {
LABEL_94:
    RIO_MTLX::Node::getNodeDef((std::string *)*a1, a3, 0, (RIO_MTLX::InterfaceElement **)&v113);
    uint64_t v54 = v113;
    if (v113)
    {
      uint64_t v55 = RIO_MTLX::EMPTY_STRING(v53);
      RIO_MTLX::NodeDef::getImplementation(v54, (uint64_t)v55, &v112);
      uint64_t v57 = v112;
      if ((void)v112)
      {
        uint64_t v58 = RIO_MTLX::EMPTY_STRING(v56);
        if (RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v57, (unsigned __int8 *)v58))
        {
          RIO_MTLX::Element::asA<RIO_MTLX::NodeGraph>(v112, &v110);
          v59 = (RIO_MTLX::InterfaceElement *)v113;
          uint64_t v61 = RIO_MTLX::EMPTY_STRING(v60);
          RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>((uint64_t)v59, (uint64_t)v61, (uint64_t *)&v109);
          uint64_t v62 = *((void *)&v109 + 1);
          uint64_t v63 = v109;
          if ((void)v109 != *((void *)&v109 + 1))
          {
            while (1)
            {
              v65 = *(unsigned __int8 **)v63;
              uint64_t v64 = *(std::__shared_weak_count **)(v63 + 8);
              if (v64) {
                atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              v66 = (size_t *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v65 + 56))(v65);
              v67 = (unsigned __int8 *)RIO_MTLX::MATERIAL_TYPE_STRING((RIO_MTLX *)v66);
              uint64_t v68 = *((unsigned __int8 *)v66 + 23);
              if ((v68 & 0x80u) == 0) {
                size_t v69 = *((unsigned __int8 *)v66 + 23);
              }
              else {
                size_t v69 = v66[1];
              }
              uint64_t v70 = v67[23];
              int v71 = (char)v70;
              if ((v70 & 0x80u) != 0) {
                uint64_t v70 = *((void *)v67 + 1);
              }
              if (v69 == v70) {
                break;
              }
LABEL_168:
              if (v64) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              }
              v63 += 16;
              if (v63 == v62) {
                goto LABEL_171;
              }
            }
            if (v71 >= 0) {
              v72 = v67;
            }
            else {
              v72 = *(unsigned __int8 **)v67;
            }
            if ((v68 & 0x80) != 0)
            {
              if (memcmp((const void *)*v66, v72, v66[1])) {
                goto LABEL_168;
              }
            }
            else if (*((unsigned char *)v66 + 23))
            {
              do
              {
                if (*(unsigned __int8 *)v66 != *v72) {
                  goto LABEL_168;
                }
                v66 = (size_t *)((char *)v66 + 1);
                ++v72;
                --v68;
              }
              while (v68);
            }
            RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>(v110, v65 + 48, &v107);
            RIO_MTLX::Element::traverseGraph(v107, (uint64_t)&__p);
            if (v99 == v100) {
              RIO_MTLX::GraphIterator::operator++(&__p);
            }
            *((void *)&v101 + 1) = 0;
            v102.std::__shared_count = __p.std::__shared_count;
            if (__p.__shared_owners_) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
            }
            v102.__shared_weak_owners_ = __p.__shared_weak_owners_;
            unsigned int v103 = v97;
            if (v97) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v97 + 1, 1uLL, memory_order_relaxed);
            }
            std::set<std::shared_ptr<RIO_MTLX::Element>>::set[abi:ne180100]((uint64_t *)&p_shared_weak_owners, (uint64_t)&v98);
            memset(v105, 0, sizeof(v105));
            std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__init_with_size[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v105, v99, v100, 0xAAAAAAAAAAAAAAABLL * (v100 - v99));
            long long v106 = v101;
            RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)&__p);
            while (1)
            {
              RIO_MTLX::NULL_GRAPH_ITERATOR(v73);
              if (RIO_MTLX::GraphIterator::operator==((uint64_t)&v102, (uint64_t)&RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v))
              {
                RIO_MTLX::GraphIterator::~GraphIterator((RIO_MTLX::GraphIterator *)&v102);
                if (v108) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v108);
                }
                goto LABEL_168;
              }
              std::__shared_count v74 = v102.std::__shared_count;
              if (v102.__shared_owners_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v102.__shared_owners_ + 8), 1uLL, memory_order_relaxed);
              }
              if (!v74.__vftable)
              {
                LOBYTE(v106) = 1;
                goto LABEL_163;
              }
              RIO_MTLX::Element::asA<RIO_MTLX::Node>((uint64_t)v74.__vftable, &v94);
              if (v94)
              {
                unint64_t v75 = (size_t *)(*(uint64_t (**)(uint64_t))(*(void *)v94 + 56))(v94);
                uint64_t v76 = (unsigned __int8 *)RIO_MTLX::MATERIAL_TYPE_STRING((RIO_MTLX *)v75);
                uint64_t v77 = *((unsigned __int8 *)v75 + 23);
                if ((v77 & 0x80u) == 0) {
                  size_t v78 = *((unsigned __int8 *)v75 + 23);
                }
                else {
                  size_t v78 = v75[1];
                }
                uint64_t v79 = v76[23];
                int v80 = (char)v79;
                if ((v79 & 0x80u) != 0) {
                  uint64_t v79 = *((void *)v76 + 1);
                }
                if (v78 == v79)
                {
                  if (v80 >= 0) {
                    uint64_t v81 = v76;
                  }
                  else {
                    uint64_t v81 = *(unsigned __int8 **)v76;
                  }
                  if ((v77 & 0x80) == 0)
                  {
                    if (*((unsigned char *)v75 + 23))
                    {
                      while (*(unsigned __int8 *)v75 == *v81)
                      {
                        unint64_t v75 = (size_t *)((char *)v75 + 1);
                        ++v81;
                        if (!--v77) {
                          goto LABEL_143;
                        }
                      }
                      goto LABEL_161;
                    }
LABEL_143:
                    uint64_t v82 = v95;
                    v93[0] = v94;
                    v93[1] = v95;
                    if (v95) {
                      atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    RIO_MTLX::getShaderNodes(&__p, v93, a2, a3);
                    if (v82) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
                    }
                    v84 = __p.__vftable;
                    uint64_t shared_owners = __p.__shared_owners_;
                    while (v84 != (std::__shared_weak_count_vtbl *)shared_owners)
                    {
                      v85 = v84->~__shared_weak_count;
                      v86 = v84->~__shared_weak_count_0;
                      *(void *)&long long v92 = v84->~__shared_weak_count;
                      *((void *)&v92 + 1) = v86;
                      if (v86) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)v86 + 1, 1uLL, memory_order_relaxed);
                      }
                      for (uint64_t i = v118[0]; i; uint64_t i = (void *)*i)
                      {
                        unint64_t v88 = i[4];
                        if ((unint64_t)v85 >= v88)
                        {
                          if (v88 >= (unint64_t)v85) {
                            goto LABEL_157;
                          }
                          ++i;
                        }
                      }
                      std::vector<std::shared_ptr<RIO_MTLX::Node>>::push_back[abi:ne180100](a4, &v92);
                      std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v117, v92, v92, *((uint64_t *)&v92 + 1));
LABEL_157:
                      if (*((void *)&v92 + 1)) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v92 + 1));
                      }
                      v84 = (std::__shared_weak_count_vtbl *)((char *)v84 + 16);
                    }
                    *(void *)&long long v92 = &__p;
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v92);
                    goto LABEL_161;
                  }
                  if (!memcmp((const void *)*v75, v81, v75[1])) {
                    goto LABEL_143;
                  }
                }
              }
LABEL_161:
              if (v95) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v95);
              }
LABEL_163:
              if (v74.__shared_owners_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74.__shared_owners_);
              }
              v73 = (RIO_MTLX *)RIO_MTLX::GraphIterator::operator++(&v102);
            }
          }
LABEL_171:
          v102.__vftable = (std::__shared_weak_count_vtbl *)&v109;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
          if (v111) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v111);
          }
        }
      }
      if (*((void *)&v112 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v112 + 1));
      }
    }
    if (v114) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v114);
    }
    goto LABEL_177;
  }
  do
  {
    uint64_t v8 = *(RIO_MTLX::Implementation **)v6;
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 8);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr, RIO_MTLX::Implementation *))(*(void *)v8 + 64))(&v109, v8);
    if (!(void)v109)
    {
LABEL_27:
      uint64_t v18 = (unsigned __int8 *)RIO_MTLX::PortElement::NODE_GRAPH_ATTRIBUTE((RIO_MTLX::PortElement *)v109);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v8 + 20, v18))goto LABEL_88; {
      uint64_t v19 = *a1;
      }
      uint64_t v20 = (std::__shared_weak_count *)*((void *)*a1 + 29);
      if (v20)
      {
        uint64_t v21 = std::__shared_weak_count::lock(v20);
        if (v21)
        {
          uint64_t v22 = *((void *)v19 + 28);
LABEL_33:
          NodeGraph = RIO_MTLX::Implementation::getNodeGraph(v8);
          RIO_MTLX::Element::getChildOfType<RIO_MTLX::NodeGraph>(v22, (unsigned __int8 *)NodeGraph, &v113);
          if (v113)
          {
            memset(&__p, 0, sizeof(__p));
            uint64_t v25 = (unsigned __int8 *)RIO_MTLX::PortElement::OUTPUT_ATTRIBUTE(v24);
            if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v8 + 20, v25))
            {
              uint64_t v26 = (RIO_MTLX::InterfaceElement *)v113;
              OutputString = RIO_MTLX::PortElement::getOutputString(v8);
              RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v26, (unsigned __int8 *)OutputString, &v112);
              uint64_t v28 = __p.__shared_owners_;
              if (__p.__shared_owners_ >= (unint64_t)__p.__shared_weak_owners_)
              {
                uint64_t v35 = (uint64_t)(__p.__shared_owners_ - (unint64_t)__p.__vftable) >> 4;
                unint64_t v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 60) {
                  std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
                }
                int64_t v37 = __p.__shared_weak_owners_ - (unint64_t)__p.__vftable;
                if ((uint64_t)(__p.__shared_weak_owners_ - (unint64_t)__p.__vftable) >> 3 > v36) {
                  unint64_t v36 = v37 >> 3;
                }
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v38 = v36;
                }
                p_shared_weak_owners = &__p.__shared_weak_owners_;
                unint64_t v39 = (std::__shared_weak_count_vtbl *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&__p.__shared_weak_owners_, v38);
                unint64_t v40 = (_OWORD *)((char *)v39 + 16 * v35);
                v102.__vftable = v39;
                v102.__shared_owners_ = (uint64_t)v40;
                unsigned int v103 = (char *)v39 + 16 * v41;
                _OWORD *v40 = v112;
                long long v112 = 0uLL;
                v102.__shared_weak_owners_ = (uint64_t)(v40 + 1);
                std::vector<std::shared_ptr<RIO_MTLX::Output>>::__swap_out_circular_buffer((uint64_t *)&__p, &v102);
                uint64_t v42 = __p.__shared_owners_;
                std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)&v102.__vftable);
                __p.__shared_owners_ = v42;
                if (*((void *)&v112 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v112 + 1));
                }
              }
              else
              {
                *(_OWORD *)__p.__shared_owners_ = v112;
                __p.__shared_owners_ = v28 + 16;
              }
            }
            else
            {
              uint64_t v29 = (RIO_MTLX::InterfaceElement *)v113;
              std::string::size_type v30 = RIO_MTLX::EMPTY_STRING(0);
              RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>((uint64_t)v29, (uint64_t)v30, (uint64_t *)&v102);
              char v31 = __p.__vftable;
              if (__p.__vftable)
              {
                uint64_t v32 = __p.__shared_owners_;
                uint64_t v33 = __p.__vftable;
                if ((std::__shared_weak_count_vtbl *)__p.__shared_owners_ != __p.__vftable)
                {
                  do
                  {
                    unint64_t v34 = *(std::__shared_weak_count **)(v32 - 8);
                    if (v34) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
                    }
                    v32 -= 16;
                  }
                  while ((std::__shared_weak_count_vtbl *)v32 != v31);
                  uint64_t v33 = __p.__vftable;
                }
                __p.__shared_owners_ = (uint64_t)v31;
                operator delete(v33);
              }
              std::__shared_weak_count __p = v102;
              memset(&v102, 0, sizeof(v102));
              *(void *)&long long v112 = &v102;
              std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
            }
            uint64_t v43 = __p.__vftable;
            uint64_t v44 = __p.__shared_owners_;
            while (v43 != (std::__shared_weak_count_vtbl *)v44)
            {
              unint64_t v45 = v43->~__shared_weak_count;
              long long v46 = (std::__shared_weak_count *)v43->~__shared_weak_count_0;
              if (v46) {
                atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(std::__shared_weak_count *__return_ptr))(*(void *)v45 + 64))(&v102);
              if (v102.__vftable)
              {
                for (j = v118[0]; j; j = (void *)*j)
                {
                  int64x2_t v48 = (std::__shared_weak_count_vtbl *)j[4];
                  if (v102.__vftable >= v48)
                  {
                    if (v48 >= v102.__vftable) {
                      goto LABEL_70;
                    }
                    ++j;
                  }
                }
                uint64_t v49 = *(unsigned __int8 *)(a3 + 23);
                if ((v49 & 0x80u) != 0) {
                  uint64_t v49 = *(void *)(a3 + 8);
                }
                if (!v49) {
                  goto LABEL_69;
                }
                RIO_MTLX::Node::getNodeDef((std::string *)v102.__vftable, a3, 0, (RIO_MTLX::InterfaceElement **)&v112);
                uint64_t v50 = v112;
                if (*((void *)&v112 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v112 + 1));
                }
                if (v50)
                {
LABEL_69:
                  std::vector<std::shared_ptr<RIO_MTLX::Node>>::push_back[abi:ne180100](a4, (long long *)&v102);
                  std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v117, (unint64_t)v102.__vftable, (uint64_t)v102.__vftable, v102.__shared_owners_);
                }
              }
LABEL_70:
              if (v102.__shared_owners_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__shared_owners_);
              }
              if (v46) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v46);
              }
              uint64_t v43 = (std::__shared_weak_count_vtbl *)((char *)v43 + 16);
            }
            v102.__vftable = (std::__shared_weak_count_vtbl *)&__p;
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
          }
          if (v114) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v114);
          }
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          goto LABEL_88;
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = 0;
      goto LABEL_33;
    }
    for (k = v118[0]; k; k = (void *)*k)
    {
      unint64_t v10 = k[4];
      if ((unint64_t)v109 >= v10)
      {
        if (v10 >= (unint64_t)v109) {
          goto LABEL_27;
        }
        ++k;
      }
    }
    uint64_t v11 = a2[23];
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *((void *)a2 + 1);
    }
    if (!v11) {
      goto LABEL_81;
    }
    uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v109 + 56))(v109);
    uint64_t v13 = v12[23];
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v12[23];
    }
    else {
      uint64_t v14 = *((void *)v12 + 1);
    }
    uint64_t v15 = a2[23];
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *((void *)a2 + 1);
    }
    if (v14 == v15)
    {
      if (v16 >= 0) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = *(unsigned __int8 **)a2;
      }
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v12, v17, *((void *)v12 + 1))) {
          goto LABEL_88;
        }
LABEL_81:
        uint64_t v51 = *(unsigned __int8 *)(a3 + 23);
        if ((v51 & 0x80u) != 0) {
          uint64_t v51 = *(void *)(a3 + 8);
        }
        if (!v51) {
          goto LABEL_87;
        }
        RIO_MTLX::Node::getNodeDef((std::string *)v109, a3, 0, (RIO_MTLX::InterfaceElement **)&v102);
        uint64_t v52 = v102.__vftable;
        if (v102.__shared_owners_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__shared_owners_);
        }
        if (v52)
        {
LABEL_87:
          std::vector<std::shared_ptr<RIO_MTLX::Node>>::push_back[abi:ne180100](a4, &v109);
          std::__tree<std::shared_ptr<realityio::Builder>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t *)&v117, v109, v109, *((uint64_t *)&v109 + 1));
        }
        goto LABEL_88;
      }
      if (!v12[23]) {
        goto LABEL_81;
      }
      while (*v12 == *v17)
      {
        ++v12;
        ++v17;
        if (!--v13) {
          goto LABEL_81;
        }
      }
    }
LABEL_88:
    if (*((void *)&v109 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    v6 += 16;
  }
  while (v6 != v90);
  if (v115 == v116) {
    goto LABEL_94;
  }
LABEL_177:
  v102.__vftable = (std::__shared_weak_count_vtbl *)&v115;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v118[0]);
}

void sub_23F6EF080(_Unwind_Exception *a1)
{
  __n128 v4 = *(std::__shared_weak_count **)(v2 - 184);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v2 - 168);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 - 144);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)(v2 - 152) = v2 - 136;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 152));
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*(void **)(v2 - 104));
  *(void *)(v2 - 112) = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 112));
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageDescriptor::DirtyStageDescriptor(uint64_t a1, void **a2, void **a3)
{
  *(void *)a1 = &unk_26F347340;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  std::vector<std::shared_ptr<realityio::DirtyMetadataDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::DirtyMetadataDescriptor const>*,std::shared_ptr<realityio::DirtyMetadataDescriptor const>*>((void *)(a1 + 8), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*,std::shared_ptr<realityio::PrimitiveDirtyPrimDescriptor const>*>((void *)(a1 + 32), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  *(unsigned char *)(a1 + 56) = realityio::DirtyStageDescriptor::_isEmpty((realityio::DirtyStageDescriptor *)a1);
  *(unsigned char *)(a1 + 57) = realityio::DirtyStageDescriptor::_isStageMetadataOnlyPredicate((realityio::DirtyStageDescriptor *)a1);
  return a1;
}

void sub_23F6EF34C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageDescriptor::_isEmpty(realityio::DirtyStageDescriptor *this)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 1);
  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  if (v2 == v3)
  {
LABEL_7:
    int v7 = 1;
    goto LABEL_9;
  }
  while (1)
  {
    uint64_t v5 = *v2;
    __n128 v4 = (std::__shared_weak_count *)v2[1];
    if (!v4) {
      break;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v6 = *(unsigned __int8 *)(v5 + 8);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (!v6) {
      goto LABEL_8;
    }
LABEL_6:
    v2 += 2;
    if (v2 == v3) {
      goto LABEL_7;
    }
  }
  if (*(unsigned char *)(v5 + 8)) {
    goto LABEL_6;
  }
LABEL_8:
  int v7 = 0;
LABEL_9:
  uint64_t v8 = (uint64_t *)*((void *)this + 4);
  uint64_t v9 = (uint64_t *)*((void *)this + 5);
  if (v8 == v9)
  {
    int v12 = 1;
  }
  else
  {
    do
    {
      uint64_t v10 = *v8;
      uint64_t v11 = (std::__shared_weak_count *)v8[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      v8 += 2;
      if (v8 == v9) {
        char v13 = 0;
      }
      else {
        char v13 = v12;
      }
    }
    while ((v13 & 1) != 0);
  }
  return v7 & v12;
}

void sub_23F6EF468(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::DirtyStageDescriptor::_isStageMetadataOnlyPredicate(realityio::DirtyStageDescriptor *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 1);
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (v1 == v2) {
    return 0;
  }
  while (1)
  {
    uint64_t v5 = *v1;
    __n128 v4 = (std::__shared_weak_count *)v1[1];
    if (!v4) {
      break;
    }
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v6 = *(unsigned __int8 *)(v5 + 8);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (!v6) {
      goto LABEL_8;
    }
LABEL_6:
    v1 += 2;
    if (v1 == v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(v5 + 8)) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v8 = (uint64_t *)*((void *)this + 4);
  uint64_t v9 = (uint64_t *)*((void *)this + 5);
  if (v8 == v9) {
    return 1;
  }
  do
  {
    uint64_t v10 = *v8;
    uint64_t v11 = (std::__shared_weak_count *)v8[1];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    v8 += 2;
    if (v8 == v9) {
      char v12 = 0;
    }
    else {
      char v12 = v7;
    }
  }
  while ((v12 & 1) != 0);
  return v7;
}

void sub_23F6EF56C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void realityio::DirtyStageDescriptor::getExplicitPrimTypes(realityio::DirtyStageDescriptor *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = 0;
  long long v3 = 0uLL;
  long long v14 = 0u;
  __n128 v4 = (uint64_t *)*((void *)this + 4);
  uint64_t v5 = (uint64_t *)*((void *)this + 5);
  if (v4 == v5)
  {
    uint64_t v9 = 0;
LABEL_13:
    *(_OWORD *)a2 = v3;
    *(void *)(a2 + 16) = v9;
    uint64_t v15 = 0;
    long long v14 = 0uLL;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v12 = 0uLL;
      uint64_t v13 = 0;
      (*(void (**)(long long *__return_ptr))(*(void *)v6 + 40))(&v10);
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vdeallocate((void **)&v12);
      long long v12 = v10;
      uint64_t v13 = v11;
      uint64_t v11 = 0;
      long long v10 = 0uLL;
      int v16 = (void **)&v10;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v16);
      long long v8 = v12;
      if ((void)v12 == *((void *)&v12 + 1))
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
      }
      else
      {
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__insert_with_size[abi:ne180100]<std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>,std::__wrap_iter<pxrInternal__aapl__pxrReserved__::TfToken*>>((uint64_t *)&v14, *((void **)&v14 + 1), (uint64_t *)v12, *((uint64_t **)&v12 + 1), (uint64_t)(*((void *)&v12 + 1) - v12) >> 3);
      }
      *(void *)&long long v10 = &v12;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if ((void)v8 == *((void *)&v8 + 1)) {
        break;
      }
      v4 += 2;
      if (v4 == v5)
      {
        long long v3 = v14;
        uint64_t v9 = v15;
        goto LABEL_13;
      }
    }
  }
  *(void *)&long long v12 = &v14;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_23F6EF6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a9 = &a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  a13 = (void **)&a17;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t realityio::DirtyStageDescriptor::validate(void *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::UsdStage *this, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  if (!*(void *)(a7 + 24) || !*(void *)(a8 + 24) || !*(void *)(a9 + 24) || !*(void *)(a10 + 24)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v46, this, a2);
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v46);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v48);
  if (v47) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v47);
  }
  if ((IsValid & 1) == 0) {
    return 0;
  }
  uint64_t v18 = (uint64_t *)a1[1];
  uint64_t v35 = (uint64_t *)a1[2];
  unint64_t v36 = this;
  if (v35 != v18)
  {
    while (1)
    {
      uint64_t v19 = *v18;
      uint64_t v20 = (std::__shared_weak_count *)v18[1];
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)&v47, a7);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v41, (uint64_t)&v47);
      char v21 = v50;
      char v43 = v50;
      unint64_t v45 = 0;
      uint64_t v22 = operator new(0x38uLL);
      uint64_t v23 = v22;
      *uint64_t v22 = &unk_26F347370;
      if (!v42) {
        break;
      }
      if (v42 != v41)
      {
        v22[5] = v42;
        uint64_t v24 = &v42;
LABEL_17:
        void *v24 = 0;
        goto LABEL_19;
      }
      v22[5] = v22 + 2;
      (*(void (**)(void *))(v41[0] + 24))(v41);
      char v21 = v43;
LABEL_19:
      v23[48] = v21;
      unint64_t v45 = v23;
      char v25 = (*(uint64_t (**)(unsigned char *, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)v23 + 48))(v23, a2, v19);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v44);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v41);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](&v47);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v25) {
        goto LABEL_26;
      }
      uint64_t v26 = 0;
      v18 += 2;
      if (v18 == v35) {
        return v26;
      }
    }
    uint64_t v24 = v22 + 5;
    goto LABEL_17;
  }
LABEL_26:
  uint64_t v28 = (uint64_t *)a1[4];
  uint64_t v29 = (uint64_t *)a1[5];
  if (v28 == v29) {
    return 1;
  }
  do
  {
    uint64_t v30 = *v28;
    char v31 = (std::__shared_weak_count *)v28[1];
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v40, a8);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v39, a9);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)v38, a10);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, pxrInternal__aapl__pxrReserved__::UsdStage *, uint64_t, uint64_t, void *, void *, void *))(*(void *)v30 + 16))(v30, a2, a3, v36, v33, v34, v40, v39, v38);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v38);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v39);
    std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v40);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    v28 += 2;
    if (v28 == v29) {
      char v32 = 1;
    }
    else {
      char v32 = v26;
    }
  }
  while ((v32 & 1) == 0);
  return v26;
}

void sub_23F6EFA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **realityio::DirtyStageDescriptor::description@<X0>(uint64_t **this@<X0>, CFStringRef *a2@<X8>)
{
  CFTypeRef v12 = 0;
  CFTypeRef cf = realityio::joinAsCFStringRef<realityio::DirtyMetadataDescriptor>(this + 1, (void (*)(void **__return_ptr, void *))realityio::DirtyMetadataDescriptor::description, 0, (const __CFArray *)", ");
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v6 = this[4];
  for (uint64_t i = this[5]; v6 != i; v6 += 2)
  {
    uint64_t v8 = *v6;
    uint64_t v9 = (std::__shared_weak_count *)v6[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v8 + 32))(&value);
    CFArrayAppendValue(Mutable, value);
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&value);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  CFStringRef v10 = realityio::joinAsCFStringRef(Mutable, (const __CFArray *)", ", v4);
  CFRelease(Mutable);
  *a2 = 0;
  *a2 = CFStringCreateWithFormat(0, 0, @"<DirtyStageDescriptor: %p { dirtyStageMetadataContainAnyOf: (%lu) [ %@ ], dirtyPrimsContainAnyOf: (%lu) [ %@ ] } >", this, ((char *)this[2] - (char *)this[1]) >> 4, cf, ((char *)this[5] - (char *)this[4]) >> 4, v10, v10);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v12);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F6EFCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, const void *);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va1);
  _Unwind_Resume(a1);
}

void realityio::DirtyStageDescriptor::~DirtyStageDescriptor(realityio::DirtyStageDescriptor *this)
{
  *(void *)this = &unk_26F347340;
  uint64_t v1 = (void **)((char *)this + 8);
  uint64_t v2 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = v1;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(void *)this = &unk_26F347340;
  uint64_t v2 = (void **)((char *)this + 8);
  long long v3 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  long long v3 = v2;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x2455D2BD0](this, 0x10A1C401BF1BAA1);
}

void *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func(void *a1)
{
  *a1 = &unk_26F347370;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func(void *a1)
{
  *a1 = &unk_26F347370;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](a1 + 2);

  JUMPOUT(0x2455D2BD0);
}

unsigned char *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F347370;
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 16), a1 + 16);
  v2[48] = *(unsigned char *)(a1 + 48);
  return v2;
}

void sub_23F6EFEFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F347370;
  uint64_t result = std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__value_func[abi:ne180100](a2 + 16, a1 + 16);
  *(unsigned char *)(a2 + 48) = *(unsigned char *)(a1 + 48);
  return result;
}

void *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
}

void std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](a1 + 2);

  operator delete(a1);
}

uint64_t std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>,std::allocator<std::__bind<std::function<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)> &,std::placeholders::__ph<2> const&>>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

uint64_t RIOPxrUsdPrimCreateEmpty()
{
  int v2 = 1;
  uint64_t v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v5 = 0;
  int v6 = 1;
  uint64_t v0 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v2, &v6);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  return v0;
}

void sub_23F6F00F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *RIOPxrUsdPrimCopyChildren(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(Mutable);
  uint64_t v5 = *UsdPrimDefaultPredicate;
  uint64_t v4 = UsdPrimDefaultPredicate[1];
  uint64_t v6 = UsdPrimDefaultPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  uint64_t v17 = v5;
  uint64_t v18 = v4;
  *(void *)&long long v19 = v6;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(v1, &v17, (uint64_t)&v21);
  uint64_t v17 = v21;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, &v22);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v18 + 1, &v23);
  long long v19 = v24;
  uint64_t v20 = v25;
  uint64_t v13 = v26;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, &v27);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v14 + 1, &v28);
  long long v15 = v29;
  uint64_t v16 = v30;
  while (v17 != v13
       || v18 != v14
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v19, (uint64_t)&v15))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v17, (uint64_t)v9);
    v31[0] = 1;
    uint64_t v7 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v9, v31);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    if (v10) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v17);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  return Mutable;
}

void sub_23F6F0368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

pxrInternal__aapl__pxrReserved__ *RIOPxrUsdPrimCopyDescendants(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t UsdPrimDefaultPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(Mutable);
  unint64_t v5 = *(void *)UsdPrimDefaultPredicate;
  uint64_t v4 = *(void *)(UsdPrimDefaultPredicate + 8);
  uint64_t v6 = *(void *)(UsdPrimDefaultPredicate + 16);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v5 & 0x2000) != 0 || (v4 & 0x2000) == 0))
  {
    v5 |= 0x2000uLL;
    v4 &= ~0x2000uLL;
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v5;
  uint64_t v18 = v4;
  *(void *)&long long v19 = v6;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange(v1, (uint64_t *)&v17, (uint64_t)&v21);
  uint64_t v17 = v21;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v18, &v22);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v18 + 1, &v23);
  long long v19 = v24;
  uint64_t v20 = v25;
  uint64_t v13 = v26;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, &v27);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v14 + 1, &v28);
  long long v15 = v29;
  uint64_t v16 = v30;
  while (v17 != v13
       || v18 != v14
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v19, (uint64_t)&v15))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v17, (uint64_t)v9);
    v31[0] = 1;
    uint64_t v7 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v9, v31);
    CFArrayAppendValue(Mutable, v7);
    CFRelease(v7);
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    if (v10) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v10);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v17);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  return Mutable;
}

void sub_23F6F0600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

__CFArray *RIOPxrUsdPrimCopyFilteredDescendants(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  unint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v6;
  uint64_t v19 = v5;
  *(void *)&long long v20 = v7;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange(v3, (uint64_t *)&v18, (uint64_t)&v22);
  uint64_t v18 = v22;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, &v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v19 + 1, &v24);
  long long v20 = v25;
  uint64_t v21 = v26;
  uint64_t v14 = v27;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, &v28);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v15 + 1, &v29);
  long long v16 = v30;
  uint64_t v17 = v31;
  while (v18 != v14
       || v19 != v15
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v20, (uint64_t)&v16))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v18, (uint64_t)v10);
    v32[0] = 1;
    uint64_t v8 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v10, v32);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment(&v18);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  return Mutable;
}

void sub_23F6F0894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t RIOPxrUsdPrimCopyParent(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent(v1, (uint64_t)v4);
  int v8 = 1;
  uint64_t v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v4, &v8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return v2;
}

void sub_23F6F0974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyFilteredChildren(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  uint64_t v18 = v6;
  uint64_t v19 = v5;
  *(void *)&long long v20 = v7;
  pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(v3, &v18, (uint64_t)&v22);
  uint64_t v18 = v22;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v19, &v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v19 + 1, &v24);
  long long v20 = v25;
  uint64_t v21 = v26;
  uint64_t v14 = v27;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v15, &v28);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v15 + 1, &v29);
  long long v16 = v30;
  uint64_t v17 = v31;
  while (v18 != v14
       || v19 != v15
       || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v20, (uint64_t)&v16))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v18, (uint64_t)v10);
    v32[0] = 1;
    int v8 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v10, v32);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
    if (v11) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v18);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  return Mutable;
}

void sub_23F6F0BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t RIOPxrUsdPrimCopyVariantSets(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(&v7, v1);
  if (RIOPxrUsdVariantSetsGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrUsdVariantSetsGetTypeID::onceToken, &__block_literal_global_19);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v3 = Instance;
  if (Instance)
  {
    *(_DWORD *)(Instance + 16) = v7;
    uint64_t v4 = v8;
    *(void *)(Instance + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v8;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(Instance + 32), &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v3 + 36), &v10);
    uint64_t v5 = v11;
    *(void *)(v3 + 40) = v11;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(v3 + 40) &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return v3;
}

void sub_23F6F0D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrUsdPrimCopyVariantSet(uint64_t a1, char *a2)
{
  if (!a1
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
  {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet();
  if (v6 < 0) {
    operator delete(__p);
  }
  uint64_t v3 = RIOPxrUsdVariantSetCreate<pxrInternal__aapl__pxrReserved__::UsdVariantSet &>((const pxrInternal__aapl__pxrReserved__::UsdVariantSet *)v7);
  if (v12 < 0) {
    operator delete(v11);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return v3;
}

void sub_23F6F0E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
}

uint64_t RIOPxrUsdPrimHasVariantSets(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }

  return MEMORY[0x270FA4EB0](v1);
}

uint64_t RIOPxrUsdPrimCreateAttribute(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    uint64_t v3 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
    int v9 = 12;
    uint64_t v3 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v5, &v9);
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    if (v6) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
    }
  }
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_23F6F0FD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetTypeName(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) == 0
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::SetTypeName(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return 0;
}

void sub_23F6F1080(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyTypeName(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v7, v1);
    uint64_t v3 = *((void *)v1 + 1);
    if (!v3 || (*(unsigned char *)(v3 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v3, v2);
    }
    uint64_t v4 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(*(uint64_t **)(v3 + 24));
    uint64_t v5 = v8;
    if (v8 && atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v4 = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v7);
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return v4;
}

void sub_23F6F1170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdPrimHasAuthoredType(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }

  return MEMORY[0x270FA52F8](v1, v2 + 448);
}

BOOL RIOPxrUsdPrimHasAuthoredTypeOnLayer(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *(atomic_uint **)(a2 + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v18);
  if (a1
    && (uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24),
        (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v4) & 1) != 0))
  {
    MEMORY[0x2455D1C90](&v16, v4);
    uint64_t v5 = v16;
    uint64_t v6 = v17;
    if (v16 == v17)
    {
LABEL_12:
      BOOL v2 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v5);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t *)&v14, v7);
        BOOL v8 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator==<pxrInternal__aapl__pxrReserved__::SdfLayer>((uint64_t *)&v14, &v18);
        BOOL v9 = v8;
        if (v8)
        {
          uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v5);
          pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(&v13, v10);
          BOOL v2 = v13 != 0;
          if ((v13 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        uint64_t v11 = v15;
        if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
        if (v9) {
          break;
        }
        uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfSpec *)((char *)v5 + 8);
        if (v5 == v6) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v14 = &v16;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  }
  else
  {
    BOOL v2 = 0;
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v18);
  return v2;
}

void sub_23F6F1394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimGetSpecifier(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1);
  uint64_t result = 0;
  if (IsValid)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__ *)*((void *)v1 + 1);
    if (!v5 || (*((unsigned char *)v5 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v5, v2);
    }
    uint64_t v6 = MEMORY[0x2455D0C60](v5) - 1;
    if (v6 > 2) {
      return 0;
    }
    else {
      return v6 + 1;
    }
  }
  return result;
}

uint64_t RIOPxrUsdPrimGetRootLayerSpecifier(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = 0;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    MEMORY[0x2455D1C90](v6, v1);
    uint64_t v3 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->(v6[0]);
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v3) - 1;
    if (v4 < 3) {
      uint64_t v2 = v4 + 1;
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t v7 = v6;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  }
  return v2;
}

void sub_23F6F14FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetSpecifier(uint64_t a1, uint64_t a2)
{
  if (a2 == 2) {
    int v2 = 2;
  }
  else {
    int v2 = a2 == 1;
  }
  if (a1) {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__ **)(a1 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>((realityio::UsdLayerMutexTracker *)v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)v3) & 1) == 0
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v3))
  {
    int v9 = v2;
    if (atomic_load(MEMORY[0x263F90528]))
    {
      uint64_t v10 = 0;
      uint64_t v7 = v3[1];
      if (!v7 || (*((unsigned char *)v7 + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v3[1], v5);
      }
      char v12 = &v9;
      uint64_t v11 = &unk_26F347490;
      pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
    }
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  std::recursive_mutex::unlock(v4);
  return 0;
}

void sub_23F6F1648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimIsPseudoRoot(uint64_t a1)
{
  if (a1) {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24));
  }
  else {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(0);
  }
}

uint64_t RIOPxrUsdPrimIsActive(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::IsActive(v1, v2);
}

uint64_t RIOPxrUsdPrimSetActive(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  int v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) == 0
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)atomic_load(MEMORY[0x263F90528]);
    if (v3) {
      pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<BOOL>((uint64_t)v1, v3);
    }
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  std::recursive_mutex::unlock(v2);
  return 0;
}

void sub_23F6F17BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimClearActive(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  int v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90528]);
    if (!v3) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, v3);
  }
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_23F6F1884(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimHasAuthoredActive(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }

  return MEMORY[0x270FA52F8](v1, v2);
}

uint64_t RIOPxrUsdPrimIsAType(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24))) {
    return 0;
  }
  int IsValid = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3);
  if (!IsValid) {
    return 0;
  }
  if ((*(void *)(a2 + 16) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(IsValid);
  }
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::TfType::FindByName();

  return MEMORY[0x270FA4F58](v3, v6);
}

uint64_t RIOPxrUsdPrimHasProperty(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
}

__CFArray *RIOPxrUsdPrimGetPropertyOrder(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder(v7, v1);
  uint64_t v3 = (uint64_t *)v7[0];
  uint64_t v4 = v7[1];
  while (v3 != (uint64_t *)v4)
  {
    uint64_t v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
    ++v3;
  }
  BOOL v8 = (void **)v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v8);
  return Mutable;
}

void sub_23F6F1AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetPropertyOrder(uint64_t result, const __CFArray *a2)
{
  unint64_t v2 = (realityio::UsdLayerMutexTracker *)(result + 24);
  if (result) {
    uint64_t v3 = result + 24;
  }
  else {
    uint64_t v3 = 0;
  }
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24));
    if (result)
    {
      uint64_t v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
      std::recursive_mutex::lock(v5);
      CFIndex Count = CFArrayGetCount(a2);
      uint64_t v11 = 0;
      char v12 = 0;
      uint64_t v13 = 0;
      uint64_t v14 = &v11;
      char v15 = 0;
      if (Count)
      {
        std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__vallocate[abi:ne180100](&v11, Count);
        uint64_t v7 = (char *)v12;
        bzero(v12, 8 * Count);
        char v12 = &v7[8 * Count];
        if (Count >= 1)
        {
          uint64_t v8 = 0;
          for (CFIndex i = 0; i != Count; ++i)
          {
            ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
            pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(v11 + v8), ValueAtIndex + 2);
            v8 += 8;
          }
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::SetPropertyOrder(v3);
    }
  }
  return result;
}

void sub_23F6F1BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::recursive_mutex::unlock(v5);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPrim::SetPropertyOrder(uint64_t a1)
{
  unint64_t v2 = atomic_load(MEMORY[0x263F90528]);
  if (v2) {
    pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 272));
  }
  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
}

void RIOPxrUsdPrimClearPropertyOrder(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      unint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
      std::recursive_mutex::lock(v2);
      unint64_t v3 = atomic_load(MEMORY[0x263F90528]);
      if (!v3) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 272));
      std::recursive_mutex::unlock(v2);
    }
  }
}

void sub_23F6F1D44(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyChildrenReorder(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildrenReorder(v7, v1);
  unint64_t v3 = (uint64_t *)v7[0];
  uint64_t v4 = v7[1];
  while (v3 != (uint64_t *)v4)
  {
    uint64_t v5 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v3);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
    ++v3;
  }
  uint64_t v8 = (void **)v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v8);
  return Mutable;
}

void sub_23F6F1E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetChildrenReorder(uint64_t result, const __CFArray *a2)
{
  unint64_t v2 = (realityio::UsdLayerMutexTracker *)(result + 24);
  if (result) {
    uint64_t v3 = result + 24;
  }
  else {
    uint64_t v3 = 0;
  }
  if (result)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24));
    if (result)
    {
      uint64_t v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
      std::recursive_mutex::lock(v5);
      CFIndex Count = CFArrayGetCount(a2);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      if (Count >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          uint64_t v8 = (uint64_t *)((char *)CFArrayGetValueAtIndex(a2, v7) + 16);
          uint64_t v9 = *v8;
          if (*v8)
          {
            uint64_t v10 = v14;
            if ((unint64_t)v14 >= v15)
            {
              uint64_t v11 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v13, v8);
            }
            else
            {
              *uint64_t v14 = v9;
              if ((v9 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *v10 &= 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v11 = (char *)(v10 + 1);
            }
            uint64_t v14 = v11;
          }
          ++v7;
        }
        while (Count != v7);
      }
      unint64_t v12 = atomic_load(MEMORY[0x263F90528]);
      if (v12)
      {
        uint64_t v16 = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(v3, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v12 + 216));
      }
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
    }
  }
  return result;
}

void sub_23F6F1F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::recursive_mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void RIOPxrUsdPrimClearChildrenReorder(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
    {
      unint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
      std::recursive_mutex::lock(v2);
      unint64_t v3 = atomic_load(MEMORY[0x263F90528]);
      if (!v3) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 216));
      std::recursive_mutex::unlock(v2);
    }
  }
}

void sub_23F6F2064(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyAttribute(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24))) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v6, v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  int v10 = 12;
  uint64_t v4 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v6, &v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return v4;
}

void sub_23F6F2124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyPropertyNames(uint64_t a1)
{
  v7[4] = *(void ***)MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v7[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames();
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v7);
  for (CFIndex i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; ++i)
  {
    uint64_t v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v7[0] = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v7);
  return Mutable;
}

void sub_23F6F2234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyAuthoredPropertyNames(uint64_t a1)
{
  v7[4] = *(void ***)MEMORY[0x263EF8340];
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v7[3] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredPropertyNames();
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v7);
  for (CFIndex i = (uint64_t *)v6[0]; i != (uint64_t *)v6[1]; ++i)
  {
    uint64_t v4 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(i);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
  }
  v7[0] = (void **)v6;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v7);
  return Mutable;
}

void sub_23F6F235C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyAttributes(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes(&v7, v1);
  uint64_t v3 = v7;
  for (uint64_t i = v8; v3 != i; v3 += 32)
  {
    int v10 = 12;
    uint64_t v5 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>(v3, &v10);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
  }
  uint64_t v9 = (void **)&v7;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v9);
  return Mutable;
}

void sub_23F6F2460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyAuthoredAttributes(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredAttributes(&v7, v1);
  uint64_t v3 = v7;
  for (uint64_t i = v8; v3 != i; v3 += 32)
  {
    int v10 = 12;
    uint64_t v5 = (const void *)RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>(v3, &v10);
    CFArrayAppendValue(Mutable, v5);
    CFRelease(v5);
  }
  uint64_t v9 = (void **)&v7;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&v9);
  return Mutable;
}

void sub_23F6F2554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimHasAttribute(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
}

uint64_t RIOPxrUsdPrimHasRelationship(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::HasRelationship(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
}

uint64_t RIOPxrUsdPrimCreateCreateRelationship(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return 0;
  }
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  int v11 = 22;
  uint64_t v5 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)v7, &v11);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_23F6F2720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyRelationship(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship(&v6, v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  int v10 = 22;
  uint64_t v4 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v6, &v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
  }
  return v4;
}

void sub_23F6F27FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimRemoveProperty(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_23F6F2890(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimClearSpecializes(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  unint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v2);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    uint64_t v3 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes(&v5, v1);
    uint64_t v3 = MEMORY[0x2455CECE0](&v5);
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    if (v6) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
    }
  }
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_23F6F296C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::UsdSpecializes::~UsdSpecializes((pxrInternal__aapl__pxrReserved__::UsdSpecializes *)&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdSpecializes::~UsdSpecializes(pxrInternal__aapl__pxrReserved__::UsdSpecializes *this)
{
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

uint64_t RIOPxrUsdPrimSetSpecializes(uint64_t a1, const __CFArray *a2)
{
  if (a1) {
    uint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
        uint64_t v8 = ValueAtIndex + 4;
        uint64_t v9 = v18;
        if ((unint64_t)v18 >= v19)
        {
          int v10 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v17, v8);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v18, v8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v9 + 1, ValueAtIndex + 5);
          int v10 = v9 + 2;
        }
        uint64_t v18 = v10;
      }
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes((uint64_t *)&v13, v3);
    uint64_t v11 = MEMORY[0x2455CECD0](&v13, &v17);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    if (v14) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
    }
    uint64_t v13 = (void **)&v17;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v13);
  }
  std::recursive_mutex::unlock(v4);
  return v11;
}

void sub_23F6F2B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  pxrInternal__aapl__pxrReserved__::UsdSpecializes::~UsdSpecializes((pxrInternal__aapl__pxrReserved__::UsdSpecializes *)&a10);
  a10 = (void **)&a14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::recursive_mutex::unlock(v14);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimAddReference(uint64_t a1, char *a2)
{
  if (a1) {
    uint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    uint64_t v6 = 0;
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, a2);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&__p, v3);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&__p);
  pxrInternal__aapl__pxrReserved__::UsdStage::ResolveIdentifierToEditTarget();
  if (SHIBYTE(v15) < 0)
  {
    BOOL v5 = v14 == 0;
    operator delete(v13);
  }
  else
  {
    BOOL v5 = SHIBYTE(v15) == 0;
  }
  uint64_t v8 = v11;
  if (v11 && atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (!v5)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)&v13, v3);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&__p, 0.0, 1.0);
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference();
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    goto LABEL_27;
  }
  if (v18 < 0)
  {
    if (v17[1]) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
  if (!v18)
  {
LABEL_22:
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)&v13, v3);
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v9, 0.0, 1.0);
    uint64_t v6 = pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference();
    if (v12 < 0) {
      operator delete(__p);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_27:
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    if (v14) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
    }
    goto LABEL_29;
  }
LABEL_17:
  uint64_t v6 = 0;
LABEL_29:
  if (v18 < 0) {
    operator delete(v17[0]);
  }
LABEL_9:
  std::recursive_mutex::unlock(v4);
  return v6;
}

void sub_23F6F2DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  pxrInternal__aapl__pxrReserved__::UsdReferences::~UsdReferences((pxrInternal__aapl__pxrReserved__::UsdReferences *)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::recursive_mutex::unlock(v26);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimRemoveReference(uint64_t a1, char *a2, uint64_t a3)
{
  if (a1) {
    BOOL v5 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    BOOL v5 = 0;
  }
  uint64_t v6 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v5);
  std::recursive_mutex::lock(v6);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v5) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v5))
  {
    uint64_t v7 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(&v17, v5);
    std::string::basic_string[abi:ne180100]<0>(v11, a2);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)v10, 0.0, 1.0);
    uint64_t v9 = 0;
    MEMORY[0x2455CE860](__p, v11, a3 + 16, v10, &v9);
    uint64_t v7 = MEMORY[0x2455CEAE0](&v17, __p);
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v16, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&v9, 0);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
    if (v18) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
    }
  }
  std::recursive_mutex::unlock(v6);
  return v7;
}

void sub_23F6F2FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  pxrInternal__aapl__pxrReserved__::SdfReference::~SdfReference((pxrInternal__aapl__pxrReserved__::SdfReference *)&a19);
  std::unique_ptr<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue>>::reset[abi:ne180100](&a10, 0);
  if (a18 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdReferences::~UsdReferences((pxrInternal__aapl__pxrReserved__::UsdReferences *)(v20 - 64));
  std::recursive_mutex::unlock(v19);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimSetReferences(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if (a1) {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  if (!a1
    || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2))
  {
    return 0;
  }
  uint64_t v16 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
  std::recursive_mutex::lock(v16);
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v19[0] = 0;
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      uint64_t v7 = (long long *)((char *)CFArrayGetValueAtIndex(a2, i) + 16);
      uint64_t v8 = v18;
      if ((unint64_t)v18 >= v19[0])
      {
        uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v18 - v17) >> 3);
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) > 0x492492492492492) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        if (0xDB6DB6DB6DB6DB6ELL * ((v19[0] - v17) >> 3) > v11) {
          unint64_t v11 = 0xDB6DB6DB6DB6DB6ELL * ((v19[0] - v17) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v19[0] - v17) >> 3)) >= 0x249249249249249) {
          unint64_t v12 = 0x492492492492492;
        }
        else {
          unint64_t v12 = v11;
        }
        int v24 = v19;
        if (v12) {
          uint64_t v13 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::SdfReference>>((uint64_t)v19, v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v20 = v13;
        uint64_t v21 = (std::string *)&v13[7 * v10];
        uint64_t v22 = v21;
        unint64_t v23 = (unint64_t)&v13[7 * v12];
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v21, v7);
        uint64_t v22 = (std::string *)((char *)v22 + 56);
        std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__swap_out_circular_buffer(&v17, &v20);
        uint64_t v9 = v18;
        std::__split_buffer<pxrInternal__aapl__pxrReserved__::SdfReference>::~__split_buffer((void **)&v20);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(v18, v7);
        uint64_t v9 = (std::string *)((char *)v8 + 56);
      }
      uint64_t v18 = v9;
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)&v20, v3);
  uint64_t v14 = MEMORY[0x2455CEAD0](&v20, &v17);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  if (v21) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v21);
  }
  uint64_t v20 = &v17;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  std::recursive_mutex::unlock(v16);
  return v14;
}

void sub_23F6F3278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::recursive_mutex *a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14)
{
  a13 = &a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::recursive_mutex::unlock(a9);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyRootLayerReferences(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) == 0)
    {
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v16, v3);
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v16);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v20, v4);
        BOOL v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v20);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v3, &v14);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v19, v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
        uint64_t v6 = v21;
        if (v21 && atomic_fetch_add_explicit((atomic_uint *volatile)v21 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(const char *))(*(void *)v6 + 8))(v6);
        }
        uint64_t v7 = v17;
        if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)v19) & 1) == 0)
        {
          uint64_t v8 = pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)v19);
          pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(&v14, v8);
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          if (v14)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v14 + 8)))
            {
              uint64_t v20 = (long long **)"sdf/listEditorProxy.h";
              uint64_t v21 = "_Validate";
              uint64_t v22 = 423;
              unint64_t v23 = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfRefer"
                    "enceTypePolicy>::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
              char v24 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
            }
            else
            {
              unint64_t v23 = 0;
              (*(void (**)(uint64_t, long long **, long long ***))(*(void *)v14 + 72))(v14, &v16, &v20);
              std::__function::__value_func<std::optional<pxrInternal__aapl__pxrReserved__::SdfReference> ()(pxrInternal__aapl__pxrReserved__::SdfListOpType,pxrInternal__aapl__pxrReserved__::SdfReference const&)>::~__value_func[abi:ne180100](&v20);
            }
          }
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          uint64_t v9 = v16;
          for (i = (long long *)v17; v9 != i; uint64_t v9 = (long long *)((char *)v9 + 56))
          {
            if (RIOPxrSdfReferenceGetTypeID::onceToken != -1) {
              dispatch_once(&RIOPxrSdfReferenceGetTypeID::onceToken, &__block_literal_global_0);
            }
            uint64_t Instance = _CFRuntimeCreateInstance();
            unint64_t v12 = (const void *)Instance;
            if (Instance) {
              pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference((std::string *)(Instance + 16), v9);
            }
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v12);
          }
          uint64_t v20 = &v16;
          std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
        }
        MEMORY[0x2455CF7B0](v19);
      }
    }
  }
  return Mutable;
}

void sub_23F6F35CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  va_copy(va3, va2);
  unint64_t v11 = va_arg(va3, void **);
  std::__function::__value_func<std::optional<pxrInternal__aapl__pxrReserved__::SdfReference> ()(pxrInternal__aapl__pxrReserved__::SdfListOpType,pxrInternal__aapl__pxrReserved__::SdfReference const&)>::~__value_func[abi:ne180100]((uint64_t *)va3);
  va_copy((va_list)v11, va);
  std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  MEMORY[0x2455CF7B0]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimCopyStage(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1) & 1) == 0)
  {
    RIOPxrUsdStageCreateInMemory();
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v6, v1);
  uint64_t v2 = v7;
  if (v7)
  {
    if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->((uint64_t *)&v7)
                  + 14))
      uint64_t v2 = v6;
    else {
      uint64_t v2 = 0;
    }
  }
  uint64_t v8 = v2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v8);
  uint64_t v3 = (uint64_t)v7;
  if (v7 && atomic_fetch_add_explicit(v7 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(&v8);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v8);
  return v4;
}

void sub_23F6F37E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyPrimStack(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1 + 24;
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))) {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  MEMORY[0x2455D1C90](&v8, v1);
  uint64_t v3 = v8;
  for (CFIndex i = v9; v3 != i; ++v3)
  {
    uint64_t v5 = *v3;
    uint64_t v10 = v5;
    if (v5) {
      atomic_fetch_add((atomic_uint *volatile)v5, 1u);
    }
    uint64_t v6 = (const void *)RIOPxrSdfPrimSpecCreate<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec> &>((atomic_uint **)&v10);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
    MEMORY[0x2455CF7B0](&v10);
  }
  uint64_t v10 = (void **)&v8;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100](&v10);
  return Mutable;
}

uint64_t RIOPxrUsdPrimIsInstance(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(result + 24);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(result + 24)))
    {
      return 0;
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2);
      if (result)
      {
        uint64_t v4 = *(pxrInternal__aapl__pxrReserved__ **)(v1 + 32);
        if (!v4 || (unint64_t v5 = *((void *)v4 + 7), (v5 & 0x800) != 0))
        {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v4, v3);
          unint64_t v5 = *((void *)v4 + 7);
        }
        return (v5 >> 8) & 1;
      }
    }
  }
  return result;
}

uint64_t RIOPxrUsdPrimIsInstanceProxy(uint64_t result)
{
  if (result)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(result + 24))) {
      return 0;
    }
    else {
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
    }
  }
  return result;
}

uint64_t RIOPxrUsdPrimIsInstanceable(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v1))
  {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::IsInstanceable(v1);
}

uint64_t RIOPxrUsdPrimSetInstanceable(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24)) & 1) == 0)
    {
      uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
      std::recursive_mutex::lock(v2);
      pxrInternal__aapl__pxrReserved__::UsdPrim::SetInstanceable(v1);
    }
  }
  return 0;
}

void sub_23F6F3ABC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimClearInstanceable(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24))) {
    return 0;
  }
  uint64_t v3 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v1);
  std::recursive_mutex::lock(v3);
  unint64_t v4 = atomic_load(MEMORY[0x263F90528]);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 200));
  std::recursive_mutex::unlock(v3);
  return v2;
}

void sub_23F6F3B54(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimHasAuthoredInstanceable(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1 + 24;
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24))) {
    return 0;
  }
  unint64_t v3 = atomic_load(MEMORY[0x263F90528]);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType>>::_TryToCreateData();
  }

  return MEMORY[0x270FA52F8](v1, v3 + 200);
}

uint64_t RIOPxrUsdPrimAddAppliedSchema(uint64_t a1, uint64_t a2)
{
  if (a1) {
    unint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_23F6F3C60(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimRemoveAppliedSchema(uint64_t a1, uint64_t a2)
{
  if (a1) {
    unint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v3);
  std::recursive_mutex::lock(v4);
  if ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v3) & 1) != 0
    || !pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v3))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
  }
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_23F6F3CF4(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrUsdPrimCopyAppliedSchemas(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24))
    || (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot(v1) & 1) != 0)
  {
    return 0;
  }
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(v7, v1);
  unint64_t v4 = (uint64_t *)v7[0];
  uint64_t v5 = v7[1];
  while (v4 != (uint64_t *)v5)
  {
    uint64_t v6 = (const void *)RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken const&>(v4);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
    ++v4;
  }
  uint64_t v8 = (void **)v7;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v8);
  return Mutable;
}

void sub_23F6F3DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void RIOPxrUsdPrimSetAppliedSchemas(uint64_t a1, const __CFArray *a2)
{
  uint64_t v2 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  if (a1) {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  }
  else {
    unint64_t v3 = 0;
  }
  if (a1
    && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)(a1 + 24)))
  {
    uint64_t v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdPrim>(v2);
    std::recursive_mutex::lock(v5);
    CFIndex Count = CFArrayGetCount(a2);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    if (Count >= 1)
    {
      CFIndex v7 = 0;
      do
      {
        uint64_t v8 = (uint64_t *)((char *)CFArrayGetValueAtIndex(a2, v7) + 16);
        uint64_t v9 = *v8;
        if (*v8)
        {
          uint64_t v10 = v18;
          if ((unint64_t)v18 >= v19)
          {
            unint64_t v11 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>((char **)&v17, v8);
          }
          else
          {
            *uint64_t v18 = v9;
            if ((v9 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v10 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v11 = (char *)(v10 + 1);
          }
          uint64_t v18 = v11;
        }
        ++v7;
      }
      while (Count != v7);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas((uint64_t *)v16, v3);
    unint64_t v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v16[0];
    uint64_t v13 = v16[1];
    while (v12 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v13)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveAppliedSchema(v3, v12);
      unint64_t v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v12 + 8);
    }
    uint64_t v20 = v16;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    uint64_t v14 = v17;
    uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v18;
    while (v14 != v15)
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(v3, v14);
      uint64_t v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v14 + 8);
    }
    v16[0] = (void **)&v17;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](v16);
    std::recursive_mutex::unlock(v5);
  }
}

void sub_23F6F3F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::recursive_mutex::unlock(v16);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdPrimIsPrototype(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24))) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::UsdPrim::IsPrototype(v1, v2);
}

uint64_t RIOPxrUsdPrimCopyPrototype(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)(a1 + 24))) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetPrototype(&v4, v1);
  int v8 = 1;
  uint64_t v2 = RIOPxrUsdObjectCreate<pxrInternal__aapl__pxrReserved__::UsdPrim const&,realityio::RIOPxrUsdObjectHierarchyType>((uint64_t)&v4, &v8);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  return v2;
}

void sub_23F6F4094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::SdfSpecifier>::GetValue(uint64_t a1, uint64_t a2)
{
  int v3 = **(_DWORD **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  }
  *(void *)(a2 + 8) = (char *)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(void)::ti
                      + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<pxrInternal__aapl__pxrReserved__::SdfSpecifier>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(a2);
  if (result)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    if ((v5 & 4) != 0) {
      uint64_t v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdObject::_SetMetadataImpl<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (*(unsigned char *)(v2 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  }
  pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

void pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::GetValue(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue::operator=<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstTypedValue<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::IsEqual(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a2);
  if (result)
  {
    uint64_t v5 = *((void *)a2 + 1);
    if ((v5 & 4) != 0) {
      uint64_t v6 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(a2);
    else {
      uint64_t v6 = *(uint64_t **)a2;
    }
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    uint64_t v9 = **(uint64_t ***)(a1 + 8);
    if (v7 - *v6 == *(void *)(*(void *)(a1 + 8) + 8) - (void)v9)
    {
      if (v8 == v7)
      {
        return 1;
      }
      else
      {
        uint64_t v10 = v8 + 8;
        do
        {
          uint64_t v11 = *v9++;
          uint64_t result = (*(void *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) == (v11 & 0xFFFFFFFFFFFFFFF8);
          BOOL v12 = (*(void *)(v10 - 8) & 0xFFFFFFFFFFFFFFF8) != (v11 & 0xFFFFFFFFFFFFFFF8) || v10 == v7;
          v10 += 8;
        }
        while (!v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtValue::operator=<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::_HoldAside::_HoldAside((uint64_t)v2, a1);
  *(void *)(a1 + 8) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(void)::ti;
  pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>::_PlaceCopy();
}

void sub_23F6F43FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7TfTokenENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

void *std::__function::__value_func<std::optional<pxrInternal__aapl__pxrReserved__::SdfReference> ()(pxrInternal__aapl__pxrReserved__::SdfListOpType,pxrInternal__aapl__pxrReserved__::SdfReference const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t RIOPxrSdfPathGetTypeID()
{
  if (RIOPxrSdfPathGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfPathGetTypeID::onceToken, &__block_literal_global_30);
  }
  return RIOPxrSdfPathGetTypeID::typeID;
}

void __RIOPxrSdfPathGetTypeID_block_invoke()
{
  if (!RIOPxrSdfPathGetTypeID::typeID) {
    RIOPxrSdfPathGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfPathCreateFromCString(char *__s)
{
  if (__s && *__s)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    MEMORY[0x2455CF7A0](&v5, __p);
    uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
    return v1;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F465C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateEmptyPath()
{
  uint64_t v2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  uint64_t v0 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v2);
  return v0;
}

void sub_23F6F46F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateAbsoluteRootPath(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  uint64_t v1 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);

  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v1);
}

uint64_t RIOPxrSdfPathCreateReflexiveRelativePath(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  uint64_t v1 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(a1);

  return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v1);
}

unint64_t RIOPxrSdfPathGetHash(uint64_t a1)
{
  return bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a1 + 20)+ ((*(unsigned int *)(a1 + 20)+ (unint64_t)*(unsigned int *)(a1 + 16)+ (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))* (*(unsigned int *)(a1 + 20) + (unint64_t)*(unsigned int *)(a1 + 16))) >> 1)));
}

unint64_t _RIOPxrSdfPathCFHash(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[5]+ ((a1[5] + (unint64_t)a1[4] + (a1[5] + (unint64_t)a1[4]) * (a1[5] + (unint64_t)a1[4])) >> 1)));
}

CFStringRef RIOPxrSdfPathCopyString(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  uint64_t Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));

  return CFStringCreateWithCString(0, Text, 0x8000100u);
}

uint64_t RIOPxrSdfPathCopy(uint64_t a1)
{
  if (a1) {
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
  }
  else {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

uint64_t RIOPxrSdfPathGetPathElementCount(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4D58](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsAbsolutePath(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfPathIsPrimPath(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfPathIsAbsoluteRootOrPrimPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4D70](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsRootPrimPath(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfPathIsPropertyPath(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfPathIsPrimPropertyPath(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfPathIsNamespacedPropertyPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4D78](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsPrimVariantSelectionPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4DA0](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsPrimOrPrimVariantSelectionPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4DB8](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathContainsPrimVariantSelection(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4DA8](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathContainsPropertyElements(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  return result;
}

uint64_t RIOPxrSdfPathContainsTargetPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4D30](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsRelationalAttributePath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4D90](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsTargetPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4C98](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsMapperPath(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 16));
  }
  return result;
}

uint64_t RIOPxrSdfPathIsMapperArgPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4CF0](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsExpressionPath(uint64_t result)
{
  if (result) {
    return MEMORY[0x270FA4D08](result + 16);
  }
  return result;
}

uint64_t RIOPxrSdfPathIsEmpty(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() ^ 1;
  }
  return result;
}

__CFArray *RIOPxrSdfPathCopyPrefixes(uint64_t a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrefixes((uint64_t *)&v7, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    uint64_t v3 = v7;
    for (CFIndex i = v8; v3 != i; v3 += 2)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v9, v3);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v9 + 1, v3 + 1);
      int v5 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v9);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    }
    uint64_t v9 = (void **)&v7;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  return Mutable;
}

void sub_23F6F4A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrSdfPathCopyName(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  if (*(char *)(Name + 23) >= 0) {
    uint64_t v2 = (const char *)Name;
  }
  else {
    uint64_t v2 = *(const char **)Name;
  }

  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

__CFString *RIOPxrSdfPathCopyElementString(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetElementString((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
  if (v5 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return (__CFString *)v2;
}

void sub_23F6F4B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPathCreateCopyReplacingName(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceName(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    char v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F4C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyTargetPath(uint64_t a1)
{
  if (a1)
  {
    TargetPath = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(TargetPath);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

CFMutableArrayRef RIOPxrSdfPathCopyAllTargetPathsRecursively(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    memset(v4, 0, sizeof(v4));
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAllTargetPathsRecursively();
    uint64_t v5 = (void **)v4;
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  return Mutable;
}

void sub_23F6F4D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathCopyVariantSelection(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = Mutable;
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection((uint64_t *)v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if (v10 >= 0) {
      char v4 = v9;
    }
    else {
      char v4 = (void **)v9[0];
    }
    CFStringRef v5 = CFStringCreateWithCString(0, (const char *)v4, 0x8000100u);
    CFArrayAppendValue(v3, v5);
    CFRelease(v5);
    if (v12 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
    CFStringRef v7 = CFStringCreateWithCString(0, p_p, 0x8000100u);
    CFArrayAppendValue(v3, v7);
    CFRelease(v7);
    if (v12 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
  else
  {
    CFArrayAppendValue(Mutable, &stru_26F34B2D0);
    CFArrayAppendValue(v3, &stru_26F34B2D0);
  }
  return v3;
}

void sub_23F6F4E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t RIOPxrSdfPathHasPrefix(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  }
  else {
    return 0;
  }
}

uint64_t RIOPxrSdfPathIsLessThan(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)(a1 + 16), (void *)(a2 + 16));
  }
  else {
    return 0;
  }
}

uint64_t RIOPxrSdfPathCopyParentPath(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
    return v1;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F4F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyPrimPath(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
    return v1;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F4FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyPrimOrPrimVariantSelectionPath(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimOrPrimVariantSelectionPath(&v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
    return v1;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F506C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyAbsoluteRootOrPrimPath(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(&v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
    return v1;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F50FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyStrippingAllVariantSelections(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections(&v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
    return v1;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F518C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingPath(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendPath(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    char v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingChild(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    char v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingProperty(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    char v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F53C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingVariantSelection(uint64_t a1, char *a2, char *a3)
{
  if (a2 && a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v9, a2);
    std::string::basic_string[abi:ne180100]<0>(&__p, a3);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection();
    uint64_t v4 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    if (v8 < 0) {
      operator delete(__p);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    return v4;
  }
  else if (a1)
  {
    uint64_t v6 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v6);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F54C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 24));
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingTarget(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F55AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingRelationalAttribute(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyReplacingTargetPath(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplaceTargetPath(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapper(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F57E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingMapperArg(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F589C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingExpression(uint64_t a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(&v3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    uint64_t v1 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v3);
    return v1;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F592C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingElementString(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementString();
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
    if (v6 < 0) {
      operator delete(__p);
    }
    return v2;
  }
  else if (a1)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyAppendingElementToken(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken(&v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    return v2;
  }
  else if (a1)
  {
    uint64_t v4 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v4);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyReplacingPrefix(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 16));
    uint64_t v3 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    return v3;
  }
  else if (a1)
  {
    uint64_t v5 = (_DWORD *)(a1 + 16);
    return RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v5);
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCopyCommonPrefix(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetCommonPrefix(&v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5C30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyMakingAbsolutePath(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(&v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfPathCreateCopyMakingRelativePath(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath(&v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v2 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath>(&v4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v4);
    return v2;
  }
  else
  {
    return RIOPxrSdfPathCreateEmptyPath();
  }
}

void sub_23F6F5D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathCreateCopyRemovingCommonSuffix(uint64_t a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::RemoveCommonSuffix((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
    uint64_t v5 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14);
    int v6 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v15);
    int v7 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14);
    CFArrayAppendValue(Mutable, v7);
    char v8 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v15);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v5);
    CFRelease(v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  }
  else
  {
    if (a1) {
      uint64_t EmptyPath = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a1 + 16));
    }
    else {
      uint64_t EmptyPath = RIOPxrSdfPathCreateEmptyPath();
    }
    char v10 = (const void *)EmptyPath;
    if (a2) {
      uint64_t v11 = RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>((_DWORD *)(a2 + 16));
    }
    else {
      uint64_t v11 = RIOPxrSdfPathCreateEmptyPath();
    }
    char v12 = (const void *)v11;
    CFArrayAppendValue(Mutable, v10);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v10);
    CFRelease(v12);
  }
  return Mutable;
}

void sub_23F6F5EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrSdfPathIsValidPathString(char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  uint64_t IsValidPathString = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString();
  if (v4 < 0) {
    operator delete(__p);
  }
  return IsValidPathString;
}

void sub_23F6F5F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPathIsValidIdentifier(char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  uint64_t IsValidIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier();
  if (v4 < 0) {
    operator delete(__p);
  }
  return IsValidIdentifier;
}

void sub_23F6F5F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrSdfPathIsValidNamespacedIdentifier(char *__s)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  uint64_t IsValidNamespacedIdentifier = pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier();
  if (v4 < 0) {
    operator delete(__p);
  }
  return IsValidNamespacedIdentifier;
}

void sub_23F6F6000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFArray *RIOPxrSdfPathArrayDoTask(const __CFArray *a1, uint64_t a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count)
    {
      CFIndex v6 = Count;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != v6; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
          uint64_t v9 = ValueAtIndex + 4;
          char v10 = v18;
          if ((unint64_t)v18 >= v19)
          {
            uint64_t v11 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v17, v9);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v18, v9);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v10 + 1, ValueAtIndex + 5);
            uint64_t v11 = v10 + 2;
          }
          uint64_t v18 = v11;
        }
      }
      uint64_t v20 = &v17;
      uint64_t v12 = *(void *)(a2 + 24);
      uint64_t v21 = (void **)&v20;
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void ***))(*(void *)v12 + 48))(v12, &v21);
      uint64_t v13 = (_DWORD *)*v20;
      int v14 = (_DWORD *)v20[1];
      while (v13 != v14)
      {
        int v15 = (const void *)RIOPxrSdfPathCreate<pxrInternal__aapl__pxrReserved__::SdfPath const&>(v13);
        CFArrayAppendValue(Mutable, v15);
        CFRelease(v15);
        v13 += 2;
      }
      uint64_t v21 = (void **)&v17;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v21);
    }
  }
  return Mutable;
}

void sub_23F6F6188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathArrayCreateCopyConciseRelativePaths(const __CFArray *a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26F347580;
  v3[3] = v3;
  uint64_t v1 = RIOPxrSdfPathArrayDoTask(a1, (uint64_t)v3);
  std::__function::__value_func<void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_23F6F6238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths(const __CFArray *a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26F347610;
  v3[3] = v3;
  uint64_t v1 = RIOPxrSdfPathArrayDoTask(a1, (uint64_t)v3);
  std::__function::__value_func<void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_23F6F62D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__CFArray *RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths(const __CFArray *a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26F347690;
  v3[3] = v3;
  uint64_t v1 = RIOPxrSdfPathArrayDoTask(a1, (uint64_t)v3);
  std::__function::__value_func<void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__value_func[abi:ne180100](v3);
  return v1;
}

void sub_23F6F6378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t _RIOPxrSdfPathCFFinalize(const void *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)a1 + 16);
}

BOOL _RIOPxrSdfPathCFEqual(void *a1, void *a2)
{
  return a1[2] == a2[2];
}

CFStringRef _RIOPxrSdfPathCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfPath %p>", a1);
}

CFStringRef _RIOPxrSdfPathCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfPath %p>", a1);
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__func()
{
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F347580;
  return result;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F347580;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetConciseRelativePaths();
  if ((char **)*v2 != &v3) {
    std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__assign_with_size[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfPath*,pxrInternal__aapl__pxrReserved__::SdfPath*>(*v2, v3, v4, (v4 - v3) >> 3);
  }
  uint64_t v5 = &v3;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
}

void sub_23F6F6520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyConciseRelativePaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__func()
{
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F347610;
  return result;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F347610;
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::operator()(uint64_t a1, void **a2)
{
  return MEMORY[0x270FA3B38](**a2);
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingDescendentPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target_type()
{
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::~__func()
{
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F347690;
  return result;
}

void std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F347690;
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::operator()(uint64_t a1, void **a2)
{
  return MEMORY[0x270FA3B28](**a2);
}

uint64_t std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0,std::allocator<RIOPxrSdfPathArrayCreateCopyRemovingAncestorPaths::$_0>,void ()(std::vector<pxrInternal__aapl__pxrReserved__::SdfPath> **)>::target_type()
{
}

BOOL realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(uint64_t a1, unint64_t *a2)
{
  char v4 = (std::recursive_mutex *)(a1 + 96);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 96));
  BOOL v5 = std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::find<std::shared_ptr<realityio::Builder>>((void *)(a1 + 16), *a2) != 0;
  std::recursive_mutex::unlock(v4);
  return v5;
}

BOOL realityio::BuilderIsSatisfiedTracker::areAllBuildersFinishedRunning(realityio::BuilderIsSatisfiedTracker *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 96);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 96));
  if (*((void *)this + 5)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *((void *)this + 10) == 0;
  }
  std::recursive_mutex::unlock(v2);
  return v3;
}

void realityio::BuilderExecutor::runBuildersInDependencyOrder()
{
}

void sub_23F6F7034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(uint64_t *a1, uint64_t a2)
{
  if (realityio::BuilderIsSatisfiedTracker::areAllBuildersFinishedRunning((realityio::BuilderIsSatisfiedTracker *)a1[21])) {
    dispatch_semaphore_signal((dispatch_semaphore_t)a1[3]);
  }
  v122 = 0;
  v123 = 0;
  v124[0] = 0;
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v129 = v124;
    block = (char **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)v124, v4);
    uint64_t v126 = (uint64_t)block;
    v127 = (void (*)(realityio::BuilderExecutor *))block;
    long long v128 = &block[2 * v5];
    std::vector<std::shared_ptr<realityio::Builder>>::__swap_out_circular_buffer((uint64_t *)&v122, &block);
    std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)&block);
  }
  for (CFIndex i = (long long *)(a2 + 16);
        ;
        std::vector<std::shared_ptr<realityio::Builder>>::push_back[abi:ne180100]((uint64_t *)&v122, i + 1))
  {
    CFIndex i = *(long long **)i;
    if (!i) {
      break;
    }
  }
  unint64_t v7 = 126 - 2 * __clz((v123 - v122) >> 4);
  if (v123 == v122) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  std::__introsort<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*,false>(v122, v123, v8, 1);
  char v10 = v122;
  uint64_t v9 = v123;
  if (v122 != v123)
  {
    uint64_t v11 = (std::mutex *)(a1 + 10);
    uint64_t v121 = v123;
    while ((*(unsigned int (**)(void))(**(void **)v10 + 56))())
    {
      uint64_t v12 = (std::__shared_weak_count *)a1[1];
      if (!v12 || (uint64_t v13 = *a1, (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      int v15 = v14;
      uint64_t v16 = a1[19];
      block = (char **)MEMORY[0x263EF8330];
      uint64_t v126 = 3321888768;
      v127 = ___ZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEE_block_invoke;
      long long v128 = (char **)&__block_descriptor_64_ea8_32c97_ZTSKZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEE3__0_e5_v8__0l;
      uint64_t v17 = *(void **)v10;
      uint64_t v18 = (std::__shared_weak_count *)*((void *)v10 + 1);
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v129 = v17;
        std::string v130 = v18;
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v129 = v17;
        std::string v130 = 0;
      }
      uint64_t v131 = v13;
      v132 = v15;
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      dispatch_async(v16, &block);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v132) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v132);
      }
      if (v130) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v130);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_97:
      v10 += 16;
      if (v10 == v9) {
        goto LABEL_124;
      }
    }
    std::mutex::lock(v11);
    unint64_t v19 = (char *)a1[6];
    uint64_t v20 = (char *)a1[5];
    uint64_t v21 = v19 - v20;
    if (v19 == v20) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = 32 * (v19 - v20) - 1;
    }
    unint64_t v24 = a1[8];
    uint64_t v23 = a1[9];
    unint64_t v25 = v23 + v24;
    if (v22 != v23 + v24)
    {
LABEL_94:
      long long v88 = *(_OWORD *)v10;
      *(_OWORD *)(*(void *)&v20[(v25 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v25) = *(_OWORD *)v10;
      if (*((void *)&v88 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v88 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v23 = a1[9];
      }
      a1[9] = v23 + 1;
      dispatch_semaphore_signal((dispatch_semaphore_t)a1[3]);
      std::mutex::unlock(v11);
      goto LABEL_97;
    }
    if (v24 < 0x100)
    {
      uint64_t v38 = v21 >> 3;
      unint64_t v39 = (char *)a1[7];
      unint64_t v40 = (char *)a1[4];
      if (v21 >> 3 >= (unint64_t)((v39 - v40) >> 3))
      {
        if (v39 == v40) {
          unint64_t v43 = 1;
        }
        else {
          unint64_t v43 = (v39 - v40) >> 2;
        }
        uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v43);
        uint64_t v46 = v45;
        uint64_t v47 = operator new(0x1000uLL);
        uint64_t v48 = &v44[8 * v38];
        uint64_t v49 = &v44[8 * v46];
        if (v38 == v46)
        {
          uint64_t v50 = 8 * v38;
          uint64_t v9 = v121;
          if (v21 < 1)
          {
            v66 = v47;
            uint64_t v67 = v50 >> 2;
            if (v19 == v20) {
              unint64_t v68 = 1;
            }
            else {
              unint64_t v68 = v67;
            }
            size_t v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v68);
            uint64_t v48 = &v69[8 * (v68 >> 2)];
            uint64_t v49 = &v69[8 * v70];
            if (v44) {
              operator delete(v44);
            }
            uint64_t v44 = v69;
            uint64_t v47 = v66;
          }
          else
          {
            uint64_t v51 = v50 >> 3;
            if (v51 >= -1) {
              unint64_t v52 = v51 + 1;
            }
            else {
              unint64_t v52 = v51 + 2;
            }
            v48 -= 8 * (v52 >> 1);
          }
        }
        else
        {
          uint64_t v9 = v121;
        }
        *(void *)uint64_t v48 = v47;
        int v71 = v48 + 8;
        for (uint64_t j = a1[6]; j != a1[5]; j -= 8)
        {
          if (v48 == v44)
          {
            if (v71 >= v49)
            {
              if (v49 == v44) {
                unint64_t v77 = 1;
              }
              else {
                unint64_t v77 = (v49 - v44) >> 2;
              }
              size_t v78 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v77);
              int v80 = v78;
              uint64_t v48 = &v78[(2 * v77 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v81 = v71 - v44;
              BOOL v53 = v71 == v44;
              int v71 = v48;
              if (!v53)
              {
                int v71 = &v48[v81 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v82 = 8 * (v81 >> 3);
                v83 = v48;
                v84 = (uint64_t *)v44;
                do
                {
                  uint64_t v85 = *v84++;
                  *(void *)v83 = v85;
                  v83 += 8;
                  v82 -= 8;
                }
                while (v82);
              }
              uint64_t v49 = &v78[8 * v79];
              if (v44) {
                operator delete(v44);
              }
              uint64_t v44 = v80;
            }
            else
            {
              uint64_t v73 = (v49 - v71) >> 3;
              if (v73 >= -1) {
                uint64_t v74 = v73 + 1;
              }
              else {
                uint64_t v74 = v73 + 2;
              }
              uint64_t v75 = v74 >> 1;
              uint64_t v48 = &v44[8 * (v74 >> 1)];
              uint64_t v76 = v44;
              if (v71 != v44)
              {
                memmove(v48, v44, v71 - v44);
                uint64_t v76 = v71;
              }
              int v71 = &v76[8 * v75];
            }
          }
          uint64_t v86 = *(void *)(j - 8);
          *((void *)v48 - 1) = v86;
          v48 -= 8;
        }
        v87 = (void *)a1[4];
        a1[4] = (uint64_t)v44;
        a1[5] = (uint64_t)v48;
        a1[6] = (uint64_t)v71;
        a1[7] = (uint64_t)v49;
        uint64_t v11 = (std::mutex *)(a1 + 10);
        if (v87) {
          operator delete(v87);
        }
        goto LABEL_93;
      }
      uint64_t v41 = operator new(0x1000uLL);
      uint64_t v42 = v41;
      if (v39 != v19)
      {
        *(void *)unint64_t v19 = v41;
        a1[6] += 8;
        uint64_t v9 = v121;
LABEL_93:
        uint64_t v20 = (char *)a1[5];
        uint64_t v23 = a1[9];
        unint64_t v25 = v23 + a1[8];
        goto LABEL_94;
      }
      if (v20 == v40)
      {
        if (v19 == v20) {
          unint64_t v89 = 1;
        }
        else {
          unint64_t v89 = (v39 - v20) >> 2;
        }
        uint64_t v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v89);
        uint64_t v20 = &v90[(2 * v89 + 6) & 0xFFFFFFFFFFFFFFF8];
        long long v92 = (uint64_t *)a1[5];
        uint64_t v93 = v20;
        uint64_t v94 = a1[6] - (void)v92;
        uint64_t v9 = v121;
        if (v94)
        {
          uint64_t v93 = &v20[v94 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v95 = 8 * (v94 >> 3);
          long long v96 = v20;
          do
          {
            uint64_t v97 = *v92++;
            *(void *)long long v96 = v97;
            v96 += 8;
            v95 -= 8;
          }
          while (v95);
        }
        uint64_t v98 = (void *)a1[4];
        a1[4] = (uint64_t)v90;
        a1[5] = (uint64_t)v20;
        a1[6] = (uint64_t)v93;
        a1[7] = (uint64_t)&v90[8 * v91];
        if (v98)
        {
          operator delete(v98);
          uint64_t v20 = (char *)a1[5];
        }
      }
      else
      {
        uint64_t v9 = v121;
      }
      *((void *)v20 - 1) = v42;
      v99 = (char *)a1[5];
      v100 = (char *)a1[6];
      a1[5] = (uint64_t)(v99 - 8);
      uint64_t v101 = *((void *)v99 - 1);
      a1[5] = (uint64_t)v99;
      if (v100 == (char *)a1[7])
      {
        unint64_t v102 = a1[4];
        uint64_t v103 = (uint64_t)&v99[-v102];
        if ((unint64_t)v99 <= v102)
        {
          uint64_t v109 = (uint64_t)&v100[-v102];
          BOOL v53 = v109 == 0;
          uint64_t v110 = v109 >> 2;
          if (v53) {
            unint64_t v111 = 1;
          }
          else {
            unint64_t v111 = v110;
          }
          long long v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v111);
          uint64_t v114 = &v112[8 * (v111 >> 2)];
          uint64_t v115 = (uint64_t *)a1[5];
          v100 = v114;
          uint64_t v116 = a1[6] - (void)v115;
          uint64_t v9 = v121;
          if (v116)
          {
            v100 = &v114[v116 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v117 = 8 * (v116 >> 3);
            long long v118 = &v112[8 * (v111 >> 2)];
            do
            {
              uint64_t v119 = *v115++;
              *(void *)long long v118 = v119;
              v118 += 8;
              v117 -= 8;
            }
            while (v117);
          }
          long long v120 = (void *)a1[4];
          a1[4] = (uint64_t)v112;
          a1[5] = (uint64_t)v114;
          a1[6] = (uint64_t)v100;
          a1[7] = (uint64_t)&v112[8 * v113];
          if (v120)
          {
            operator delete(v120);
            v100 = (char *)a1[6];
          }
        }
        else
        {
          uint64_t v104 = v103 >> 3;
          BOOL v32 = v103 >> 3 < -1;
          uint64_t v105 = (v103 >> 3) + 2;
          if (v32) {
            uint64_t v106 = v105;
          }
          else {
            uint64_t v106 = v104 + 1;
          }
          v107 = &v99[-8 * (v106 >> 1)];
          int64_t v108 = v100 - v99;
          if (v100 != v99)
          {
            memmove(&v99[-8 * (v106 >> 1)], v99, v100 - v99);
            v99 = (char *)a1[5];
          }
          v100 = &v107[v108];
          a1[5] = (uint64_t)&v99[-8 * (v106 >> 1)];
          a1[6] = (uint64_t)&v107[v108];
        }
      }
      *(void *)v100 = v101;
    }
    else
    {
      a1[8] = v24 - 256;
      uint64_t v28 = *(void *)v20;
      uint64_t v26 = v20 + 8;
      uint64_t v27 = v28;
      a1[5] = (uint64_t)v26;
      if (v19 == (char *)a1[7])
      {
        unint64_t v29 = a1[4];
        uint64_t v30 = (uint64_t)&v26[-v29];
        if ((unint64_t)v26 <= v29)
        {
          uint64_t v54 = (uint64_t)&v19[-v29];
          BOOL v53 = v54 == 0;
          uint64_t v55 = v54 >> 2;
          if (v53) {
            unint64_t v56 = 1;
          }
          else {
            unint64_t v56 = v55;
          }
          uint64_t v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v56);
          v59 = &v57[8 * (v56 >> 2)];
          v60 = (uint64_t *)a1[5];
          unint64_t v19 = v59;
          uint64_t v61 = a1[6] - (void)v60;
          uint64_t v9 = v121;
          if (v61)
          {
            unint64_t v19 = &v59[v61 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v62 = 8 * (v61 >> 3);
            uint64_t v63 = &v57[8 * (v56 >> 2)];
            do
            {
              uint64_t v64 = *v60++;
              *(void *)uint64_t v63 = v64;
              v63 += 8;
              v62 -= 8;
            }
            while (v62);
          }
          v65 = (void *)a1[4];
          a1[4] = (uint64_t)v57;
          a1[5] = (uint64_t)v59;
          a1[6] = (uint64_t)v19;
          a1[7] = (uint64_t)&v57[8 * v58];
          if (v65)
          {
            operator delete(v65);
            unint64_t v19 = (char *)a1[6];
          }
        }
        else
        {
          uint64_t v31 = v30 >> 3;
          BOOL v32 = v30 >> 3 < -1;
          uint64_t v33 = (v30 >> 3) + 2;
          if (v32) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = v31 + 1;
          }
          uint64_t v35 = &v26[-8 * (v34 >> 1)];
          int64_t v36 = v19 - v26;
          if (v19 != v26)
          {
            memmove(&v26[-8 * (v34 >> 1)], v26, v19 - v26);
            unint64_t v19 = (char *)a1[5];
          }
          int64_t v37 = &v19[-8 * (v34 >> 1)];
          unint64_t v19 = &v35[v36];
          a1[5] = (uint64_t)v37;
          a1[6] = (uint64_t)&v35[v36];
          uint64_t v9 = v121;
        }
      }
      *(void *)unint64_t v19 = v27;
    }
    a1[6] += 8;
    goto LABEL_93;
  }
LABEL_124:
  block = &v122;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&block);
}

void sub_23F6F799C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17)
{
  operator delete(v18);
  if (v17) {
    operator delete(v17);
  }
  std::mutex::unlock(a10);
  a16 = &a13;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

id realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(realityio::BuilderExecutor *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40BD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40BD0))
  {
    qword_268C40BC8 = (uint64_t)dispatch_semaphore_create(128);
    __cxa_guard_release(&qword_268C40BD0);
  }
  uint64_t v1 = (void *)qword_268C40BC8;

  return v1;
}

void realityio::BuilderExecutor::runBuilder(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = a1;
  uint64_t v43 = *MEMORY[0x263EF8340];
  id v31 = *(id *)(realityio::logObjects((realityio *)a1) + 56);
  uint64_t v4 = *(void *)(*(void *)(a1 + 176) + 272);
  if (*(unsigned char *)(a1 + 16))
  {
    memset(v39, 0, sizeof(v39));
    int v40 = 1065353216;
    realityio::BuilderDependencyDAG::getDirectlyDependentBuilders(*(void **)(v3 + 160), a2, (uint64_t)v39);
    uint64_t v5 = *(void **)&v39[16];
    if (*(void *)&v39[16])
    {
      do
      {
        unint64_t v6 = ((*(void *)(*a2 + 160) >> 2) + 2654435769 + (*(void *)(*a2 + 160) << 6) + *(void *)(v5[2] + 160)) ^ *(void *)(*a2 + 160);
        os_signpost_id_t v7 = (v4 + 2654435769 + (v6 >> 2) + (v6 << 6)) ^ v6;
        uint64_t v8 = v31;
        uint64_t v9 = v8;
        if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
        {
          uint64_t v10 = *(void *)(*a2 + 160);
          uint64_t v11 = *(void *)(v5[2] + 160);
          *(_DWORD *)long long buf = 134218496;
          *(void *)&buf[4] = v4;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v10;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = v11;
          _os_signpost_emit_with_name_impl(&dword_23F4EA000, v9, OS_SIGNPOST_EVENT, v7, "graph-edge", "builder dependency satisfied: update = %llu - providing builder = %llu - dependent builder = %llu", buf, 0x20u);
        }

        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)v39);
    uint64_t v3 = a1;
  }
  unint64_t v12 = *a2;
  os_signpost_id_t v13 = (v4 + 2654435769 + (*(void *)(*a2 + 160) >> 2) + (*(void *)(*a2 + 160) << 6)) ^ *(void *)(*a2 + 160);
  if (*(unsigned char *)(v3 + 17))
  {
    int v14 = v31;
    int v15 = v14;
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      uint64_t v16 = *(void *)(*a2 + 160);
      *(_DWORD *)unint64_t v39 = 134218240;
      *(void *)&void v39[4] = v16;
      *(_WORD *)&v39[12] = 2048;
      *(void *)&v39[14] = v4;
      _os_signpost_emit_with_name_impl(&dword_23F4EA000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v13, "builder-run", "builder %llu update %llu", v39, 0x16u);
    }

    unint64_t v12 = *a2;
  }
  unint64_t v17 = a2[1];
  *(void *)long long buf = v12;
  *(void *)&buf[8] = v17;
  if (v17)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
    unint64_t v12 = *a2;
  }
  realityio::Inputs::Inputs((uint64_t)v39, buf, (_DWORD *)(v12 + 8), *(void *)(a1 + 184), a1 + 192, *(void *)(a1 + 176), *(void *)(a1 + 232));
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  realityio::Builder::clearAddedComponentAndAssetArrays((realityio::Builder *)*a2);
  (*(void (**)(unint64_t, uint8_t *))(*(void *)*a2 + 64))(*a2, v39);
  if (*(unsigned char *)(a1 + 17))
  {
    uint64_t v18 = v31;
    unint64_t v19 = v18;
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_23F4EA000, v19, OS_SIGNPOST_INTERVAL_END, v13, "builder-run", (const char *)&unk_23F8240AA, buf, 2u);
    }
  }
  memset(v32, 0, sizeof(v32));
  int v33 = 1065353216;
  uint64_t v20 = *(void *)(a1 + 168);
  std::recursive_mutex::lock((std::recursive_mutex *)(v20 + 96));
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__erase_unique<std::shared_ptr<realityio::Builder>>((void *)(v20 + 56), a2);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::clear((uint64_t)v32);
  long long v34 = 0u;
  long long v35 = 0u;
  int v36 = 1065353216;
  realityio::BuilderDependencyDAG::getDirectlyDependentBuilders(*(void **)(v20 + 160), a2, (uint64_t)&v34);
  if (*(void *)v20 && realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(v20, (unint64_t *)v20)) {
    std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t)&v34, (void *)v20, (void *)v20);
  }
  for (CFIndex i = (long long *)v35; i; CFIndex i = *(long long **)i)
  {
    uint64_t v22 = (uint64_t *)(i + 1);
    if (realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(v20, (unint64_t *)i + 2))
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(v20 + 96));
      (*(void (**)(uint8_t *__return_ptr))(*(void *)*v22 + 24))(buf);
      int v23 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v23)
      {
        if (!*(void *)(v20 + 80))
        {
          memset(buf, 0, 24);
          memset(v37, 0, 24);
          realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t *)v37, i + 1);
          realityio::BuilderDependencyDAG::findDownstreamDependencies(*(void **)(v20 + 160), (long long **)v37, (uint64_t *)buf);
          unint64_t v24 = *(void **)(v20 + 32);
          if (v24)
          {
            while (1)
            {
              uint64_t v25 = v24[2];
              if (v25 != *v22)
              {
                uint64_t v26 = *(void **)buf;
                if (*(void *)buf != *(void *)&buf[8])
                {
                  while (*v26 != v25)
                  {
                    v26 += 2;
                    if (v26 == *(void **)&buf[8])
                    {
                      uint64_t v26 = *(void **)&buf[8];
                      break;
                    }
                  }
                }
                if (v26 == *(void **)&buf[8]) {
                  break;
                }
              }
              unint64_t v24 = (void *)*v24;
              if (!v24) {
                goto LABEL_39;
              }
            }
            char v27 = 0;
          }
          else
          {
LABEL_39:
            char v27 = 1;
          }
          uint64_t v38 = v37;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
          v37[0] = (void **)buf;
          std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v37);
          std::recursive_mutex::unlock((std::recursive_mutex *)(v20 + 96));
          if ((v27 & 1) == 0) {
            continue;
          }
          goto LABEL_50;
        }
      }
      else
      {
        memset(buf, 0, sizeof(buf));
        int v42 = 1065353216;
        realityio::BuilderDependencyDAG::getDirectlyProvidingBuilders(*(void **)(v20 + 160), (unint64_t *)i + 2, (uint64_t)buf);
        uint64_t v28 = *(void **)&buf[16];
        if (!*(void *)&buf[16])
        {
LABEL_44:
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)buf);
          std::recursive_mutex::unlock((std::recursive_mutex *)(v20 + 96));
LABEL_50:
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>((uint64_t)v32, (void *)i + 2, (void *)i + 2);
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__erase_unique<std::shared_ptr<realityio::Builder>>((void *)(v20 + 16), (void *)i + 2);
          std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(v20 + 56, (void *)i + 2, (void *)i + 2);
          continue;
        }
        while (1)
        {
          std::recursive_mutex::lock((std::recursive_mutex *)(v20 + 96));
          if (realityio::BuilderIsSatisfiedTracker::isBuilderWaiting(v20, v28 + 2)) {
            break;
          }
          std::recursive_mutex::lock((std::recursive_mutex *)(v20 + 96));
          unint64_t v29 = std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::find<std::shared_ptr<realityio::Builder>>((void *)(v20 + 56), v28[2]);
          std::recursive_mutex::unlock((std::recursive_mutex *)(v20 + 96));
          std::recursive_mutex::unlock((std::recursive_mutex *)(v20 + 96));
          if (v29) {
            goto LABEL_46;
          }
          uint64_t v28 = (void *)*v28;
          if (!v28) {
            goto LABEL_44;
          }
        }
        std::recursive_mutex::unlock((std::recursive_mutex *)(v20 + 96));
LABEL_46:
        std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)buf);
      }
      std::recursive_mutex::unlock((std::recursive_mutex *)(v20 + 96));
    }
  }
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&v34);
  std::recursive_mutex::unlock((std::recursive_mutex *)(v20 + 96));
  realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(a1, v32);
  if (realityio::BuilderIsSatisfiedTracker::areAllBuildersFinishedRunning(*(realityio::BuilderIsSatisfiedTracker **)(a1 + 168))) {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 24));
  }
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)v32);
  realityio::Inputs::~Inputs((realityio::Inputs *)v39);
}

void sub_23F6F8090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Unwind_Resume(a1);
}

void realityio::Builder::clearAddedComponentAndAssetArrays(realityio::Builder *this)
{
  uint64_t v2 = (void *)((char *)this + 48);
  std::__tree<unsigned int>::destroy((uint64_t)this + 40, *((void **)this + 6));
  *(v2 - 1) = v2;
  void *v2 = 0;
  v2[1] = 0;
  uint64_t v5 = v2 + 2;
  uint64_t v4 = (void *)v2[2];
  for (CFIndex i = (void *)v5[1]; i != v4; CFIndex i = realityio::WrappedRERef<REAsset *>::~WrappedRERef(i - 1))
    ;
  *((void *)this + 9) = v4;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100]((uint64_t *)this + 11);
  *((void *)this + 15) = *((void *)this + 14);
}

void ___ZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEE_block_invoke(realityio::BuilderExecutor *a1)
{
  uint64_t v2 = realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(a1);
  dispatch_semaphore_wait(v2, 0xFFFFFFFFFFFFFFFFLL);

  uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 5);
  uint64_t v3 = *((void *)a1 + 6);
  uint64_t v5 = *(NSObject **)(v3 + 144);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3321888768;
  void v8[2] = ___ZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEv_block_invoke;
  v8[3] = &__block_descriptor_64_ea8_32c110_ZTSKZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEvEUlvE__e5_v8__0l;
  uint64_t v6 = *((void *)a1 + 4);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = *((void *)a1 + 6);
  }
  os_signpost_id_t v7 = (std::__shared_weak_count *)*((void *)a1 + 7);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[4] = v6;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v3;
  uint64_t v11 = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    dispatch_async(v5, v8);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  dispatch_async(v5, v8);
  if (v4) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
LABEL_10:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void *__copy_helper_block_ea8_32c97_ZTSKZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEE3__0(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c97_ZTSKZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEE3__0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::find<std::shared_ptr<realityio::Builder>>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::deque<std::shared_ptr<realityio::Builder>>::~deque[abi:ne180100](uint64_t a1)
{
  int8x8_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint8x8_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        unint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      int8x8_t v2 = *(void ***)(a1 + 8);
      unint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = *(void ***)(a1 + 16);
      int8x8_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      int v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ___ZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEv_block_invoke(uint64_t a1)
{
  realityio::BuilderExecutor::runBuilder(*(void *)(a1 + 48), (unint64_t *)(a1 + 32));
  int8x8_t v2 = realityio::BuilderExecutor::globalPendingConcurrentWorkSemaphore(v1);
  dispatch_semaphore_signal(v2);
}

void *__copy_helper_block_ea8_32c110_ZTSKZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEvEUlvE_(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_32c110_ZTSKZZN9realityio15BuilderExecutor19onBuilderReadyToRunERKNSt3__110shared_ptrINS_7BuilderEEEENK3__0clEvEUlvE_(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::default_delete<realityio::BuilderIsSatisfiedTracker>::operator()[abi:ne180100](uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 96));
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table(a1 + 56);
  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table(a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x2455D2BD0);
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__node_insert_multi(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = HIDWORD(v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    BOOL v11 = 1;
    if (v8 >= 3) {
      BOOL v11 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v8);
    unint64_t v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13) {
      int8x8_t prime = (int8x8_t)v13;
    }
    else {
      int8x8_t prime = (int8x8_t)v12;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_92;
    }
    if (*(void *)&prime >= v8) {
      goto LABEL_43;
    }
    unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      unint64_t v21 = std::__next_prime(v21);
    }
    else
    {
      uint64_t v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2) {
        unint64_t v21 = v23;
      }
    }
    if (*(void *)&prime <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(void *)&prime >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      int v15 = operator new(8 * *(void *)&prime);
      uint64_t v16 = *(void **)a1;
      *(void *)a1 = v15;
      if (v16) {
        operator delete(v16);
      }
      uint64_t v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v17++) = 0;
      while (*(void *)&prime != v17);
      uint64_t v18 = *(void **)(a1 + 16);
      if (v18)
      {
        unint64_t v19 = v18[1];
        uint8x8_t v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(void *)&prime) {
            v19 %= *(void *)&prime;
          }
        }
        else
        {
          v19 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v19) = a1 + 16;
        for (CFIndex i = (void *)*v18; *v18; CFIndex i = (void *)*v18)
        {
          unint64_t v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(void *)&prime) {
              v25 %= *(void *)&prime;
            }
          }
          else
          {
            v25 &= *(void *)&prime - 1;
          }
          if (v25 == v19)
          {
            uint64_t v18 = i;
          }
          else
          {
            uint64_t v26 = i;
            if (*(void *)(*(void *)a1 + 8 * v25))
            {
              do
              {
                char v27 = v26;
                uint64_t v26 = (void *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *uint64_t v18 = v26;
              *char v27 = **(void **)(*(void *)a1 + 8 * v25);
              **(void **)(*(void *)a1 + 8 * v25) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v25) = v18;
              uint64_t v18 = i;
              unint64_t v19 = v25;
            }
          }
        }
      }
      unint64_t v8 = (unint64_t)prime;
    }
    else
    {
      unint64_t v39 = *(void **)a1;
      *(void *)a1 = 0;
      if (v39) {
        operator delete(v39);
      }
      unint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v29 = v7;
    if (v8 <= v7) {
      unint64_t v29 = v7 % v8;
    }
  }
  else
  {
    unint64_t v29 = (v8 - 1) & v7;
  }
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v29);
  if (v30)
  {
    int v31 = 0;
    do
    {
      BOOL v32 = v30;
      uint64_t v30 = (void *)*v30;
      if (!v30) {
        break;
      }
      unint64_t v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v34 = v30[1];
        if (v33 >= v8) {
          unint64_t v34 = v33 % v8;
        }
      }
      else
      {
        unint64_t v34 = v33 & (v8 - 1);
      }
      if (v34 != v29) {
        break;
      }
      BOOL v35 = v33 == v7 && v30[2] == a2[2];
      int v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    BOOL v32 = 0;
  }
  unint64_t v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8) {
      v37 %= v8;
    }
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v37) = a1 + 16;
    if (!*a2) {
      goto LABEL_79;
    }
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(void *)(*(void *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  *BOOL v32 = a2;
  if (*a2)
  {
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37) {
      goto LABEL_78;
    }
  }
LABEL_79:
  ++*(void *)(a1 + 24);
}

void std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__erase_unique<std::shared_ptr<realityio::Builder>>(void *a1, void *a2)
{
  uint64_t v3 = std::__hash_table<REEntity *,std::hash<REEntity *>,std::equal_to<REEntity *>,std::allocator<REEntity *>>::find<REEntity *>(a1, a2);
  if (v3)
  {
    int8x8_t v4 = (int8x8_t)a1[1];
    uint64_t v5 = *v3;
    unint64_t v6 = v3[1];
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v4) {
        v6 %= *(void *)&v4;
      }
    }
    else
    {
      v6 &= *(void *)&v4 - 1;
    }
    unint64_t v8 = *(uint64_t **)(*a1 + 8 * v6);
    do
    {
      float v9 = v8;
      unint64_t v8 = (uint64_t *)*v8;
    }
    while (v8 != v3);
    if (v9 == a1 + 2) {
      goto LABEL_19;
    }
    unint64_t v10 = v9[1];
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v4) {
        v10 %= *(void *)&v4;
      }
    }
    else
    {
      v10 &= *(void *)&v4 - 1;
    }
    if (v10 != v6)
    {
LABEL_19:
      if (v5)
      {
        unint64_t v11 = *(void *)(v5 + 8);
        if (v7.u32[0] > 1uLL)
        {
          unint64_t v12 = *(void *)(v5 + 8);
          if (v11 >= *(void *)&v4) {
            unint64_t v12 = v11 % *(void *)&v4;
          }
        }
        else
        {
          unint64_t v12 = v11 & (*(void *)&v4 - 1);
        }
        if (v12 == v6) {
          goto LABEL_23;
        }
      }
      *(void *)(*a1 + 8 * v6) = 0;
      uint64_t v5 = *v3;
    }
    if (!v5)
    {
LABEL_29:
      uint64_t *v9 = v5;
      *uint64_t v3 = 0;
      --a1[3];
      char v14 = 1;
      unint64_t v13 = a1 + 2;
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<realityio::Builder>,void *>>>::operator()[abi:ne180100]((uint64_t)&v13, v3);
      return;
    }
    unint64_t v11 = *(void *)(v5 + 8);
LABEL_23:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v4) {
        v11 %= *(void *)&v4;
      }
    }
    else
    {
      v11 &= *(void *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(void *)(*a1 + 8 * v11) = v9;
      uint64_t v5 = *v3;
    }
    goto LABEL_29;
  }
}

void std::__shared_ptr_pointer<realityio::BuilderExecutor *,std::shared_ptr<realityio::BuilderExecutor>::__shared_ptr_default_delete<realityio::BuilderExecutor,realityio::BuilderExecutor>,std::allocator<realityio::BuilderExecutor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::BuilderExecutor *,std::shared_ptr<realityio::BuilderExecutor>::__shared_ptr_default_delete<realityio::BuilderExecutor,realityio::BuilderExecutor>,std::allocator<realityio::BuilderExecutor>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<realityio::BuilderExecutor>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<realityio::BuilderExecutor *,std::shared_ptr<realityio::BuilderExecutor>::__shared_ptr_default_delete<realityio::BuilderExecutor,realityio::BuilderExecutor>,std::allocator<realityio::BuilderExecutor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<realityio::BuilderExecutor>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table(result + 192);
    uint64_t v2 = *(void *)(v1 + 168);
    *(void *)(v1 + 168) = 0;
    if (v2) {
      std::default_delete<realityio::BuilderIsSatisfiedTracker>::operator()[abi:ne180100](v2);
    }

    std::mutex::~mutex((std::mutex *)(v1 + 80));
    std::deque<std::shared_ptr<realityio::Builder>>::~deque[abi:ne180100](v1 + 32);

    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*,false>(void *a1, char *a2, uint64_t a3, char a4)
{
void *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(void *result, void *a2, void *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  unsigned int v5 = *(_DWORD *)(*a2 + 176);
  uint64_t v6 = *a3;
  unsigned int v7 = *(_DWORD *)(*a3 + 176);
  if (*(_DWORD *)(*result + 176) > v5)
  {
    if (v5 <= v7)
    {
      void *result = v4;
      *a2 = v3;
      uint64_t v12 = result[1];
      result[1] = a2[1];
      a2[1] = v12;
      uint64_t v13 = *a2;
      if (*(_DWORD *)(*a2 + 176) <= *(_DWORD *)(*a3 + 176)) {
        return result;
      }
      *a2 = *a3;
      *a3 = v13;
      unint64_t v8 = a3 + 1;
      uint64_t result = a2 + 1;
    }
    else
    {
      *result++ = v6;
      *a3 = v3;
      unint64_t v8 = a3 + 1;
    }
    float v9 = v8;
    goto LABEL_10;
  }
  if (v5 > v7)
  {
    *a2 = v6;
    *a3 = v4;
    float v9 = a2 + 1;
    uint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    uint64_t v11 = *result;
    if (*(_DWORD *)(*result + 176) > *(_DWORD *)(*a2 + 176))
    {
      *result++ = *a2;
      *a2 = v11;
LABEL_10:
      uint64_t v14 = *result;
      void *result = *v9;
      void *v9 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(char *a1, char *a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *((void *)a2 - 2);
      if (*(_DWORD *)(*(void *)a1 + 176) > *(_DWORD *)(v7 + 176))
      {
        *(void *)a1 = v7;
        *((void *)a2 - 2) = v6;
        uint64_t v8 = *((void *)a1 + 1);
        *((void *)a1 + 1) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (void *)a1 + 2, (void *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a2 - 2);
      return 1;
    case 5:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (void *)a1 + 2, (void *)a1 + 4, (void *)a1 + 6);
      uint64_t v23 = *((void *)a1 + 6);
      uint64_t v24 = *((void *)a2 - 2);
      if (*(_DWORD *)(v23 + 176) > *(_DWORD *)(v24 + 176))
      {
        *((void *)a1 + 6) = v24;
        *((void *)a2 - 2) = v23;
        uint64_t v25 = *((void *)a1 + 7);
        *((void *)a1 + 7) = *((void *)a2 - 1);
        *((void *)a2 - 1) = v25;
        uint64_t v26 = *((void *)a1 + 4);
        uint64_t v27 = *((void *)a1 + 6);
        unsigned int v28 = *(_DWORD *)(v27 + 176);
        if (*(_DWORD *)(v26 + 176) > v28)
        {
          uint64_t v29 = *((void *)a1 + 5);
          uint64_t v30 = *((void *)a1 + 7);
          *((void *)a1 + 4) = v27;
          *((void *)a1 + 5) = v30;
          *((void *)a1 + 6) = v26;
          *((void *)a1 + 7) = v29;
          uint64_t v31 = *((void *)a1 + 2);
          if (*(_DWORD *)(v31 + 176) > v28)
          {
            uint64_t v32 = *((void *)a1 + 3);
            *((void *)a1 + 2) = v27;
            *((void *)a1 + 3) = v30;
            *((void *)a1 + 4) = v31;
            *((void *)a1 + 5) = v32;
            uint64_t v33 = *(void *)a1;
            if (*(_DWORD *)(*(void *)a1 + 176) > v28)
            {
              uint64_t v34 = *((void *)a1 + 1);
              *(void *)a1 = v27;
              *((void *)a1 + 1) = v30;
              *((void *)a1 + 2) = v33;
              *((void *)a1 + 3) = v34;
            }
          }
        }
      }
      return 1;
    default:
      float v9 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, (void *)a1 + 2, (void *)a1 + 4);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    uint64_t v13 = *(void *)v9;
    unsigned int v14 = *(_DWORD *)(*(void *)v9 + 176);
    uint64_t v15 = *(void *)v10;
    if (v14 > *(_DWORD *)(*(void *)v10 + 176))
    {
      uint64_t v16 = *((void *)v10 + 1);
      uint64_t v17 = v11;
      *(void *)uint64_t v10 = 0;
      *((void *)v10 + 1) = 0;
      while (1)
      {
        uint64_t v18 = &a1[v17];
        uint64_t v19 = *(void *)&a1[v17 + 40];
        *((void *)v18 + 4) = 0;
        *((void *)v18 + 5) = 0;
        uint64_t v20 = *(std::__shared_weak_count **)&a1[v17 + 56];
        *((void *)v18 + 6) = v13;
        *((void *)v18 + 7) = v19;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (v17 == -32) {
          break;
        }
        uint64_t v13 = *(void *)&a1[v17 + 16];
        v17 -= 16;
        if (*(_DWORD *)(v13 + 176) <= *(_DWORD *)(v15 + 176))
        {
          unint64_t v21 = &a1[v17 + 48];
          goto LABEL_15;
        }
      }
      unint64_t v21 = a1;
LABEL_15:
      uint8x8_t v22 = (std::__shared_weak_count *)*((void *)v21 + 1);
      *(void *)unint64_t v21 = v15;
      *((void *)v21 + 1) = v16;
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    float v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

void *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(void *a1, void *a2, void *a3, void *a4)
{
  BOOL result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,realityio::BuilderExecutor::onBuildersReadyToRunInDeterministicOrder(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0 &,std::shared_ptr<realityio::Builder>*>(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a3 + 176) > *(_DWORD *)(*a4 + 176))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = *a2;
    if (*(_DWORD *)(*a2 + 176) > *(_DWORD *)(*a3 + 176))
    {
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t v13 = *a1;
      if (*(_DWORD *)(*a1 + 176) > *(_DWORD *)(*a2 + 176))
      {
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t realityio::mtlx::MtlxActionPayload::MtlxActionPayload(uint64_t a1, void *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
     + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 200) = objc_opt_new();
  *(void *)(a1 + 208) = objc_opt_new();
  uint64_t v5 = objc_opt_new();
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1 + 232;
  *(void *)(a1 + 216) = v5;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_WORD *)(a1 + 288) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 16))(&v39);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)&v39);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  unint64_t v6 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(a1 + 8), (void *)(v6 + 8));
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  MEMORY[0x2455CF810](&v37, "info:id");
  uint64_t v39 = v7;
  unsigned int v40 = v8;
  std::string::size_type v41 = v37.__r_.__value_.__r.__words[0];
  if ((v37.__r_.__value_.__s.__data_[0] & 7) != 0)
  {
    std::string::size_type v9 = v37.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v37.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)std::string::size_type v41 = v9; {
  }
    }
  if ((v37.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!(*(unsigned int (**)(uint64_t, void, std::string::size_type *))(*(void *)v39 + 184))(v39, v40, &v41)|| ((*(uint64_t (**)(uint64_t, void, std::string::size_type *))(*(void *)v39 + 32))(v39, v40, &v41) & 1) == 0)
  {
    realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, @"No identification attribute found.", 1u, 0);
    goto LABEL_20;
  }
  uint64_t v38 = 0;
  if (!(*(unsigned int (**)(uint64_t, void, std::string::size_type *, uint64_t *))(*(void *)v39 + 112))(v39, v40, &v41, &v38))goto LABEL_24; {
  unint64_t v10 = v38 & 0xFFFFFFFFFFFFFFF8;
  }
  if ((v38 & 0xFFFFFFFFFFFFFFF8) == 0) {
    goto LABEL_24;
  }
  if (*(char *)(v10 + 39) < 0)
  {
    if (*(void *)(v10 + 24)) {
      goto LABEL_13;
    }
LABEL_24:
    realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, @"Identitfication attribute is not valid.", 1u, 0);
    goto LABEL_25;
  }
  if (!*(unsigned char *)(v10 + 39)) {
    goto LABEL_24;
  }
LABEL_13:
  unint64_t v11 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((v38 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v11 + 104) & 0xFFFFFFFFFFFFFFF8))
  {
    __int16 v17 = *(_WORD *)(a1 + 288) | 1;
  }
  else
  {
    unint64_t v12 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v12) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    __int16 v13 = *(_WORD *)(a1 + 288);
    if ((v38 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v12 + 112) & 0xFFFFFFFFFFFFFFF8))
    {
      *(_WORD *)(a1 + 288) = v13 | 8;
      uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (*(char *)(Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)Name, *(void *)(Name + 8));
      }
      else
      {
        long long v15 = *(_OWORD *)Name;
        v37.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
      }
      unint64_t v18 = v38 & 0xFFFFFFFFFFFFFFF8;
      if ((v38 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          uint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        uint64_t v19 = "";
      }
      uint64_t v20 = (void *)MEMORY[0x263F6BC58];
      unint64_t v21 = [NSString stringWithUTF8String:v19];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint8x8_t v22 = &v37;
      }
      else {
        uint8x8_t v22 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      [NSString stringWithUTF8String:v22];
      uint64_t v23 = v36 = 0;
      uint64_t v24 = [v20 nodeWithNodeDefName:v21 name:v23 error:&v36];
      id v33 = v36;
      uint64_t v25 = *(void **)(a1 + 24);
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v24;

      if (*(void *)(a1 + 24))
      {
        long long v34 = *(_OWORD *)a2;
        realityio::mtlx::MtlxActionPayload::getUSDInputs(&v34);
        uint64_t v26 = [*(id *)(a1 + 24) inputs];
        realityio::mtlx::MtlxActionPayload::addSiblingInputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v35, v26);

        uint64_t v42 = (void **)v35;
        std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v42);
        long long v34 = *(_OWORD *)a2;
        realityio::mtlx::MtlxActionPayload::getUSDOutputs(&v34);
        uint64_t v27 = [*(id *)(a1 + 24) outputs];
        realityio::mtlx::MtlxActionPayload::addSiblingOutputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v35, v27);

        uint64_t v42 = (void **)v35;
        std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100](&v42);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)a2;
        realityio::mtlx::MtlxActionPayload::initializeTextureCoords(a1, (uint64_t)v35, &v38);
        unsigned int v28 = v33;
      }
      else
      {
        unint64_t v29 = *(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8;
        if (v29)
        {
          uint64_t v30 = (const char *)(v29 + 16);
          if (*(char *)(v29 + 39) < 0) {
            uint64_t v30 = *(const char **)v30;
          }
        }
        else
        {
          uint64_t v30 = "";
        }
        uint64_t v31 = [NSString stringWithUTF8String:v30];
        uint64_t v32 = [NSString stringWithFormat:@"Failed to import from %@", v31];
        unsigned int v28 = v33;
        realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v32, 2u, v33);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }

      goto LABEL_25;
    }
    __int16 v17 = v13 | 2;
  }
  *(_WORD *)(a1 + 288) = v17;
LABEL_25:
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_20:
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_23F6FA0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v32);
  std::__tree<std::string>::destroy(v31, *(char **)(v28 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(v30);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(v29);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a12);

  uint64_t v34 = *(void *)(v28 + 8);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v28);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::setError(pxrInternal__aapl__pxrReserved__::SdfPath *a1, void *a2, unsigned int a3, void *a4)
{
  v14[1] = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a4;
  std::string::size_type v9 = [NSString stringWithUTF8String:pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1)];
  unint64_t v10 = [NSString stringWithFormat:@"Error in prim %@: %@", v9, v7];
  unint64_t v11 = [MEMORY[0x263EFF9A0] dictionary];
  [v11 setObject:v9 forKeyedSubscript:@"primPath"];
  [v11 setObject:v7 forKeyedSubscript:@"message"];
  [v11 setObject:v10 forKeyedSubscript:*MEMORY[0x263F08320]];
  if (v8)
  {
    v14[0] = v8;
    unint64_t v12 = [MEMORY[0x263EFF8C0] arrayWithObjects:v14 count:1];
    [v11 setObject:v12 forKeyedSubscript:@"NSMultipleUnderlyingErrorsKey"];
  }
  __int16 v13 = [MEMORY[0x263F087E8] errorWithDomain:@"MaterialX" code:a3 userInfo:v11];
  realityio::mtlx::MtlxActionPayload::setError(a1, v13);
}

void sub_23F6FA3E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void realityio::mtlx::MtlxActionPayload::addSiblingInputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  id v5 = a3;
  if (!*((void *)a1 + 4))
  {
    id v25 = v5;
    id v26 = 0;
    unint64_t v6 = (realityio *)v5;
    id v7 = v6;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 == v9)
    {
LABEL_23:
    }
    else
    {
      while (1)
      {
        unint64_t v10 = *(id *)(realityio::logObjects(v6) + 48);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void ***__return_ptr))(**(void **)v8 + 24))(&v27);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
          *(_DWORD *)long long buf = 136315138;
          *(void *)&buf[4] = Text;
          _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_INFO, "    Adding sibling input %s", buf, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v27);
        }

        unint64_t v12 = NSString;
        (*(void (**)(uint8_t *__return_ptr))(**(void **)v8 + 40))(buf);
        unint64_t v13 = *(void *)buf & 0xFFFFFFFFFFFFFFF8;
        if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v14 = (const char *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0) {
            uint64_t v14 = *(const char **)v14;
          }
        }
        else
        {
          uint64_t v14 = "";
        }
        long long v15 = [v12 stringWithUTF8String:v14];
        id v16 = v26;
        id v26 = v15;

        if ((buf[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v31[0] = MEMORY[0x263EF8330];
        v31[1] = 3221225472;
        v31[2] = ___ZN9realityio4mtlx12_GLOBAL__N_19addInputsERKNSt3__16vectorINS0_13NeoShadeInputENS2_9allocatorIS4_EEEEPK7NSArrayIP7SGInputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload11InputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke;
        int v31[3] = &__block_descriptor_40_e24_B32__0__SGInput_8Q16_B24l;
        v31[4] = &v26;
        __int16 v17 = (void *)MEMORY[0x2455D3180](v31);
        uint64_t v18 = [(realityio *)v7 indexOfObjectPassingTest:v17];
        realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeInput>((uint64_t)buf, (void *)v8);
        id v36 = 0;
        if (v18 == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        uint64_t v19 = [(realityio *)v7 objectAtIndex:v18];
        id v20 = v36;
        id v36 = v19;

        if (!v36) {
          break;
        }
        unint64_t v21 = *(void ***)v8;
        int v28 = *(_DWORD *)(v8 + 8);
        uint64_t v27 = v21;
        uint8x8_t v22 = *(atomic_uint **)(v8 + 16);
        uint64_t v29 = v22;
        if ((v22 & 7) != 0)
        {
          uint64_t v23 = (atomic_uint *)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v23, 2u, memory_order_relaxed) & 1) == 0) {
            uint64_t v29 = v23;
          }
        }
        (*((void (**)(uint64_t *__return_ptr))*v27 + 3))(&v30);
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>((uint64_t)a1 + 120, (unsigned int *)&v30, &v30, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
        if ((v29 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }

        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v27 = (void **)&buf[8];
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

        v8 += 24;
        if (v8 == v9) {
          goto LABEL_23;
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v35);
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v27 = (void **)&buf[8];
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

      uint64_t v24 = [NSString stringWithFormat:@"Unknown input name '%@' in '%s'", v26, pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1)];
      realityio::mtlx::MtlxActionPayload::setError(a1, v24, 6u, 0);
    }
    id v5 = v25;
  }
}

void sub_23F6FA884(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t realityio::mtlx::MtlxActionPayload::getUSDInputs(void *a1)
{
  return (*(uint64_t (**)(void, void *))(*(void *)*a1 + 200))(*a1, a1);
}

void realityio::mtlx::MtlxActionPayload::addSiblingOutputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v5 = a3;
  if (!*((void *)a1 + 4))
  {
    id v26 = v5;
    uint64_t v27 = 0;
    unint64_t v6 = (realityio *)v5;
    id v7 = v6;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    if (*a2 == v9)
    {
LABEL_26:
    }
    else
    {
      while (1)
      {
        unint64_t v10 = *(id *)(realityio::logObjects(v6) + 48);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void ***__return_ptr))(**(void **)v8 + 24))(&v28);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
          *(_DWORD *)long long buf = 136315138;
          *(void *)&buf[4] = Text;
          _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_INFO, "    Adding sibling output %s", buf, 0xCu);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
        }

        unint64_t v12 = NSString;
        (*(void (**)(uint8_t *__return_ptr))(**(void **)v8 + 40))(buf);
        unint64_t v13 = *(void *)buf & 0xFFFFFFFFFFFFFFF8;
        if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v14 = (const char *)(v13 + 16);
          if (*(char *)(v13 + 39) < 0) {
            uint64_t v14 = *(const char **)v14;
          }
        }
        else
        {
          uint64_t v14 = "";
        }
        long long v15 = [v12 stringWithUTF8String:v14];
        id v16 = v27;
        uint64_t v27 = v15;

        if ((buf[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (([(__CFString *)v27 isEqualToString:@"surface"] & 1) != 0
          || [(__CFString *)v27 isEqualToString:@"vertex"])
        {
          __int16 v17 = v27;
          uint64_t v27 = @"out";
        }
        v32[0] = MEMORY[0x263EF8330];
        v32[1] = 3221225472;
        _OWORD v32[2] = ___ZN9realityio4mtlx12_GLOBAL__N_110addOutputsERKNSt3__16vectorINS0_14NeoShadeOutputENS2_9allocatorIS4_EEEEPK7NSArrayIP8SGOutputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload12OutputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke;
        int v32[3] = &__block_descriptor_40_e25_B32__0__SGOutput_8Q16_B24l;
        v32[4] = &v27;
        uint64_t v18 = (void *)MEMORY[0x2455D3180](v32);
        uint64_t v19 = [(realityio *)v7 indexOfObjectPassingTest:v18];
        realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeOutput>((uint64_t)buf, (void *)v8);
        id v37 = 0;
        if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        id v20 = [(realityio *)v7 objectAtIndex:v19];
        id v21 = v37;
        id v37 = v20;

        if (!v37) {
          break;
        }
        uint8x8_t v22 = *(void ***)v8;
        int v29 = *(_DWORD *)(v8 + 8);
        int v28 = v22;
        uint64_t v23 = *(atomic_uint **)(v8 + 16);
        uint64_t v30 = v23;
        if ((v23 & 7) != 0)
        {
          uint64_t v24 = (atomic_uint *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v24, 2u, memory_order_relaxed) & 1) == 0) {
            uint64_t v30 = v24;
          }
        }
        (*((void (**)(uint64_t *__return_ptr))*v28 + 3))(&v31);
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>((uint64_t)a1 + 160, (unsigned int *)&v31, &v31, (uint64_t)buf);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
        if ((v30 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }

        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
        if ((v35 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v34 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        int v28 = (void **)&buf[8];
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v28);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

        v8 += 24;
        if (v8 == v9) {
          goto LABEL_26;
        }
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v36);
      if ((v35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      int v28 = (void **)&buf[8];
      std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v28);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);

      id v25 = [NSString stringWithFormat:@"Unknown output name '%@' in '%s'", v27, pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a1)];
      realityio::mtlx::MtlxActionPayload::setError(a1, v25, 7u, 0);
    }
    id v5 = v26;
  }
}

void sub_23F6FADD4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t realityio::mtlx::MtlxActionPayload::getUSDOutputs(void *a1)
{
  return (*(uint64_t (**)(void, void *))(*(void *)*a1 + 208))(*a1, a1);
}

void realityio::mtlx::MtlxActionPayload::initializeTextureCoords(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v104 = *MEMORY[0x263EF8340];
  unint64_t v5 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v5 + 144) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_36;
  }
  unint64_t v6 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v6 + 160) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_36:
    unint64_t v24 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v24) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    id v25 = *(atomic_uint **)(v24 + 256);
    uint64_t v94 = v25;
    if ((v25 & 7) != 0)
    {
      id v26 = (atomic_uint *)((unint64_t)v25 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v26, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v94 = v26;
      }
    }
    realityio::TexcoordID::TexcoordID((uint64_t)&buf, &v94, 0, 0);
    unint64_t v27 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v27) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    int v28 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(a1 + 248, *(void *)(v27 + 256), (uint64_t *)(v27 + 256));
    realityio::TexcoordID::operator=((uint64_t)(v28 + 3), (uint64_t)&buf);
    if (v101 < 0) {
      operator delete((void *)buf.__r_.__value_.__r.__words[2]);
    }
    if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    int v29 = v94;
    goto LABEL_89;
  }
  unint64_t v7 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v7 + 152) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_46;
  }
  unint64_t v8 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v8 + 168) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_46:
    unint64_t v30 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v30) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v31 = *(atomic_uint **)(v30 + 264);
    uint64_t v93 = v31;
    if ((v31 & 7) != 0)
    {
      uint64_t v32 = (atomic_uint *)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v32, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v93 = v32;
      }
    }
    realityio::TexcoordID::TexcoordID((uint64_t)&buf, &v93, 1, 0);
    unint64_t v33 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v33) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v34 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(a1 + 248, *(void *)(v33 + 264), (uint64_t *)(v33 + 264));
    realityio::TexcoordID::operator=((uint64_t)(v34 + 3), (uint64_t)&buf);
    if (v101 < 0) {
      operator delete((void *)buf.__r_.__value_.__r.__words[2]);
    }
    if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    int v29 = v93;
    goto LABEL_89;
  }
  unint64_t v9 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v9 + 120) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_56;
  }
  unint64_t v10 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v10 + 128) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_56;
  }
  unint64_t v11 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v11 + 136) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_56:
    unint64_t v35 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v35) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    int v36 = *(_DWORD *)(a2 + 8);
    v95.__r_.__value_.__r.__words[0] = *(void *)a2;
    LODWORD(v95.__r_.__value_.__r.__words[1]) = v36;
    std::string::size_type v37 = *(void *)(v35 + 64);
    v95.__r_.__value_.__r.__words[2] = v37;
    if ((v37 & 7) != 0)
    {
      uint64_t v38 = (atomic_uint *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v38, 2u, memory_order_relaxed) & 1) == 0) {
        v95.__r_.__value_.__r.__words[2] = (std::string::size_type)v38;
      }
    }
    v98.__r_.__value_.__l.__size_ = 0;
    (*(void (**)(std::string::size_type, void, std::string::size_type *, std::string *))(*(void *)v95.__r_.__value_.__l.__data_ + 104))(v95.__r_.__value_.__r.__words[0], LODWORD(v95.__r_.__value_.__r.__words[1]), &v95.__r_.__value_.__r.__words[2], &v98);
    if ((*(unsigned int (**)(std::string::size_type, void, std::string::size_type *))(*(void *)v95.__r_.__value_.__l.__data_
                                                                                                  + 32))(v95.__r_.__value_.__r.__words[0], LODWORD(v95.__r_.__value_.__r.__words[1]), &v95.__r_.__value_.__r.__words[2])&& (Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v98), pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C258], v40)))
    {
      int v41 = *(_DWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)&v98);
    }
    else
    {
      int v41 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "UV");
    std::to_string(&v102, v41);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v42 = &v102;
    }
    else {
      uint64_t v42 = (std::string *)v102.__r_.__value_.__r.__words[0];
    }
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v102.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = std::string::append(&v103, (const std::string::value_type *)v42, size);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x2455CF830](&v97, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v103.__r_.__value_.__l.__data_);
    }
    unint64_t v46 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v46) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    unint64_t v47 = *a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = *(void *)(v46 + 120) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v92 = v97;
    if ((v97 & 7) != 0)
    {
      unint64_t v49 = v97 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v92 = v49;
      }
    }
    realityio::TexcoordID::TexcoordID((uint64_t)&buf, &v92, v41, v47 != v48);
    uint64_t v50 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(a1 + 248, v97, &v97);
    realityio::TexcoordID::operator=((uint64_t)(v50 + 3), (uint64_t)&buf);
    if (v101 < 0) {
      operator delete((void *)buf.__r_.__value_.__r.__words[2]);
    }
    if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v92 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v97 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v98);
    int v29 = (atomic_uint *)v95.__r_.__value_.__r.__words[2];
LABEL_89:
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    return;
  }
  unint64_t v12 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v12 + 216) & 0xFFFFFFFFFFFFFFF8))
  {
    char v23 = 0;
    uint64_t v51 = 0;
    uint64_t v22 = 1;
  }
  else
  {
    unint64_t v13 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v13) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v13 + 224) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_92;
    }
    unint64_t v14 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v14) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v14 + 232) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_92;
    }
    unint64_t v15 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v15) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v15 + 240) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_92;
    }
    unint64_t v16 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v16) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v16 + 248) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_92:
      char v23 = 0;
      uint64_t v22 = 1;
LABEL_93:
      uint64_t v51 = 1;
      goto LABEL_95;
    }
    unint64_t v17 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v17) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v17 + 176) & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v18 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v18) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v18 + 184) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v19 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v19) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v19 + 192) & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v20 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
          if (!v20) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v20 + 200) & 0xFFFFFFFFFFFFFFF8))
          {
            unint64_t v21 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
            if (!v21) {
              pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
            }
            if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v21 + 208) & 0xFFFFFFFFFFFFFFF8)) {
              return;
            }
          }
        }
      }
      uint64_t v22 = 0;
      char v23 = 1;
      goto LABEL_93;
    }
    uint64_t v22 = 0;
    uint64_t v51 = 0;
    char v23 = 1;
  }
LABEL_95:
  uint64_t v52 = *(void **)(a1 + 136);
  if (v52)
  {
    uint64_t v53 = a1 + 248;
    uint64_t v54 = (uint64_t **)(a1 + 224);
    char v91 = v23 ^ 1;
    uint64_t v90 = (uint64_t **)(a1 + 224);
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v52 + 2));
      pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace();
      unint64_t v55 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v55) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((v97 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v55 + 72) & 0xFFFFFFFFFFFFFFF8)) {
        char v56 = v22;
      }
      else {
        char v56 = 0;
      }
      if ((v56 & 1) == 0)
      {
        unint64_t v57 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v57) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        char v58 = v91;
        if ((v97 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v57 + 80) & 0xFFFFFFFFFFFFFFF8)) {
          char v58 = 1;
        }
        if (v58) {
          goto LABEL_164;
        }
      }
      std::string::size_type v96 = 0;
      memset(&v95, 0, sizeof(v95));
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v52 + 10));
      int v59 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
      if (v59)
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v52 + 10));
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>((pxrInternal__aapl__pxrReserved__::VtValue *)&buf))
        {
          pxrInternal__aapl__pxrReserved__::VtValue::UncheckedRemove<pxrInternal__aapl__pxrReserved__::TfToken>(&buf, &v103);
        }
        else
        {
          v103.__r_.__value_.__r.__words[0] = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
          if ((v103.__r_.__value_.__s.__data_[0] & 7) != 0)
          {
            std::string::size_type v87 = v103.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
            if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v103.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)v103.__r_.__value_.__r.__words[0] = v87; {
          }
            }
        }
        if ((v96 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        std::string::size_type v60 = v103.__r_.__value_.__r.__words[0];
        std::string::size_type v96 = v103.__r_.__value_.__r.__words[0];
        v103.__r_.__value_.__r.__words[0] = 0;
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
        if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (const std::string *)((v60 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          unint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v61);
        }
        std::string::operator=(&v95, EmptyString);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v52 + 10));
        int v63 = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&buf);
        if (v63)
        {
          uint64_t v64 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v52 + 10));
          if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(v64))
          {
            memset(&buf, 0, sizeof(buf));
            if ((v102.__r_.__value_.__s.__data_[8] & 4) != 0)
            {
              (*(void (**)(std::string *__return_ptr, std::string *))((v102.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
                                                                               + 176))(&v103, &v102);
              pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v102, &v103);
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v103);
            }
            MutableObuint64_t j = pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_GetMutableObj((uint64_t)&v102);
            long long v66 = *(_OWORD *)MutableObj;
            buf.__r_.__value_.__r.__words[2] = *(void *)(MutableObj + 16);
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v66;
            *(void *)(MutableObj + 8) = 0;
            *(void *)(MutableObj + 16) = 0;
            *(void *)MutableObuint64_t j = 0;
            if (v102.__r_.__value_.__l.__size_ && (v102.__r_.__value_.__s.__data_[8] & 3) != 3) {
              (*(void (**)(std::string *))((v102.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8) + 32))(&v102);
            }
            v102.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            uint64_t v88 = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
            if (*(char *)(v88 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v88, *(void *)(v88 + 8));
            }
            else
            {
              long long v89 = *(_OWORD *)v88;
              buf.__r_.__value_.__r.__words[2] = *(void *)(v88 + 16);
              *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v89;
            }
          }
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v95.__r_.__value_.__l.__data_);
          }
          std::string v95 = buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v102);
          MEMORY[0x2455CF830](&buf, &v95);
          if ((v96 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          std::string::size_type v96 = buf.__r_.__value_.__r.__words[0];
        }
      }
      unint64_t v67 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v67) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((v96 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v67 + 312) & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v68 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v68) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        uint64_t v69 = v96;
        if ((v96 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v68 + 320) & 0xFFFFFFFFFFFFFFF8))
        {
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v95.__r_.__value_.__l.__size_)
            {
LABEL_144:
              memset(&v103, 0, sizeof(v103));
              memset(&v102, 0, sizeof(v102));
              if (v22)
              {
                MEMORY[0x2455D2770](&v103, "GeomProp");
                uint64_t v71 = "geomprop";
              }
              else
              {
                MEMORY[0x2455D2770](&v103, "PrimvarReader");
                uint64_t v71 = "varname";
              }
              uint64_t v72 = (realityio *)MEMORY[0x2455D2770](&v102, v71);
              uint64_t v73 = *(id *)(realityio::logObjects(v72) + 48);
              if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v74 = v22;
                uint64_t v75 = v53;
                uint64_t v76 = v51;
                int v77 = SHIBYTE(v103.__r_.__value_.__r.__words[2]);
                std::string::size_type v78 = v103.__r_.__value_.__r.__words[0];
                int v79 = SHIBYTE(v102.__r_.__value_.__r.__words[2]);
                std::string::size_type v80 = v102.__r_.__value_.__r.__words[0];
                uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(v52 + 2));
                int64_t v82 = &v102;
                if (v79 < 0) {
                  int64_t v82 = (std::string *)v80;
                }
                int v83 = *(char *)(Name + 23);
                uint64_t v84 = *(void *)Name;
                unsigned int v85 = &v103;
                if (v77 < 0) {
                  unsigned int v85 = (std::string *)v78;
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                if (v83 >= 0) {
                  uint64_t v86 = Name;
                }
                else {
                  uint64_t v86 = v84;
                }
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v85;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v82;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v100 = v86;
                _os_log_impl(&dword_23F4EA000, v73, OS_LOG_TYPE_DEFAULT, "%s has an empty %s attribute at path %s.", (uint8_t *)&buf, 0x20u);
                uint64_t v51 = v76;
                uint64_t v53 = v75;
                uint64_t v22 = v74;
                uint64_t v54 = v90;
              }

              if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v102.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v103.__r_.__value_.__l.__data_);
              }
              goto LABEL_160;
            }
            std::string::__init_copy_ctor_external(&v98, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
          }
          else
          {
            if (!*((unsigned char *)&v95.__r_.__value_.__s + 23)) {
              goto LABEL_144;
            }
            std::string v98 = v95;
          }
          realityio::TexcoordID::TexcoordID((uint64_t)&buf, (uint64_t)&v98, -1, v51);
          uint64_t v70 = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(v53, v69, (uint64_t *)&v96);
          realityio::TexcoordID::operator=((uint64_t)(v70 + 3), (uint64_t)&buf);
          if (v101 < 0) {
            operator delete((void *)buf.__r_.__value_.__r.__words[2]);
          }
          if ((buf.__r_.__value_.__s.__data_[8] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(buf.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v98.__r_.__value_.__l.__data_);
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v54, (const void **)&v95.__r_.__value_.__l.__data_, (uint64_t)&v95);
        }
      }
LABEL_160:
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if ((v96 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_164:
      if ((v97 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v52 = (void *)*v52;
    }
    while (v52);
  }
}

void sub_23F6FBBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2)
  {
    if ((a25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

realityio::mtlx::MtlxActionPayload *realityio::mtlx::MtlxActionPayload::MtlxActionPayload(realityio::mtlx::MtlxActionPayload *this, realityio::mtlx::NeoShadeNodeGraph *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
     + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *((void *)this + 25) = objc_opt_new();
  *((void *)this + 26) = objc_opt_new();
  uint64_t v5 = objc_opt_new();
  *((void *)this + 29) = 0;
  *((void *)this + 28) = (char *)this + 232;
  *((void *)this + 27) = v5;
  *((void *)this + 30) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_WORD *)this + 144) = 0;
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 16))(v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)this, (int *)v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
  unint64_t v6 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)this + 1, (void *)(v6 + 16));
  unint64_t v7 = NSString;
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*(char *)(Name + 23) >= 0) {
    uint64_t v9 = Name;
  }
  else {
    uint64_t v9 = *(void *)Name;
  }
  unint64_t v10 = objc_msgSend(v7, "stringWithUTF8String:", v9, (char *)this + 160, (char *)this + 120, (char *)this + 80, (char *)this + 40);
  *((_WORD *)this + 144) |= 0x10u;
  long long v22 = *(_OWORD *)a2;
  realityio::mtlx::MtlxActionPayload::getUSDInputs(&v22);
  long long v21 = *(_OWORD *)a2;
  realityio::mtlx::MtlxActionPayload::getUSDOutputs(&v21);
  unint64_t v11 = realityio::mtlx::MtlxActionPayload::createSGInputs(this, v23[0], v23[1]);
  unint64_t v12 = realityio::mtlx::MtlxActionPayload::createSGOutputs(this, (uint64_t **)&v22);
  unint64_t v13 = [MEMORY[0x263F6BC40] graphWithName:v10 inputs:v11 outputs:v12];
  realityio::mtlx::MtlxActionPayload::setSGGraph((uint64_t)this, v13);

  id v14 = *((id *)this + 2);
  unint64_t v15 = [v14 argumentsNode];
  unint64_t v16 = [v15 outputs];
  realityio::mtlx::MtlxActionPayload::addArgumentOutputs((uint64_t)this, a2, v16);

  id v17 = *((id *)this + 2);
  unint64_t v18 = [v17 resultsNode];
  unint64_t v19 = [v18 inputs];
  realityio::mtlx::MtlxActionPayload::addResultInputs((uint64_t)this, a2, v19);

  *(void *)&long long v21 = &v22;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  *(void *)&long long v22 = v23;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);

  return this;
}

void sub_23F6FC030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v14);
  std::__tree<std::string>::destroy(v13, *(char **)(v12 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a12);

  uint64_t v16 = *(void *)(v12 + 8);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
  _Unwind_Resume(a1);
}

id realityio::mtlx::MtlxActionPayload::createSGInputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, void *a2, void *a3)
{
  id v17 = a1;
  if (a2 == a3)
  {
    uint64_t v4 = (void *)MEMORY[0x263EFFA68];
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x263EFFA68];
    do
    {
      uint64_t v5 = NSString;
      unint64_t v6 = a2 + 2;
      (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *__return_ptr))(*(void *)*a2 + 40))(&v18.__type_name);
      std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t v7 = v18.__type_name & 0xFFFFFFFFFFFFFFF8;
      if ((v18.__type_name & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          unint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        unint64_t v8 = "";
      }
      uint64_t v9 = objc_msgSend(v5, "stringWithUTF8String:", v8, v17);
      if ((v18.__type_name & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18.__type_name & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v18.__type_name = (*(uint64_t (**)(void, void, void *, uint64_t))(*(void *)*(v6 - 2) + 48))(*(v6 - 2), *((unsigned int *)v6 - 2), v6, 1);
      uint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v18.__type_name);
      v18.__type_name = *(v6 - 2);
      int v19 = *((_DWORD *)v6 - 2);
      unint64_t v11 = (atomic_uint *)*v6;
      unint64_t v20 = v11;
      if ((v11 & 7) != 0)
      {
        uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
          unint64_t v20 = v12;
        }
      }
      (*(void (**)(std::type_info_vtbl **__return_ptr))(*(void *)v18.__type_name + 120))(&v21);
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v18.__vftable = v21;
      if ((v21 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v18.__vftable = (std::type_info_vtbl *)((unint64_t)v18.__vftable & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v13 = realityio::conversions::usdToSGDataType(v10, &v18);
      if (((uint64_t)v18.__vftable & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v18.__vftable & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v14 = [MEMORY[0x263F6BC48] inputWithName:v9 type:v13];
      if (v14)
      {
        uint64_t v15 = [v4 arrayByAddingObject:v14];

        uint64_t v4 = (void *)v15;
      }
      else
      {
        realityio::mtlx::MtlxActionPayload::setError(v17, @"Could not create a node input", 3u, 0);
      }

      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }

      a2 = v6 + 1;
    }
    while (v6 + 1 != a3);
  }

  return v4;
}

id realityio::mtlx::MtlxActionPayload::createSGOutputs(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t **a2)
{
  id v27 = (id)objc_opt_new();
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      unint64_t v6 = NSString;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)*v5 + 40))(&v30);
      unint64_t v7 = v30 & 0xFFFFFFFFFFFFFFF8;
      if ((v30 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        unint64_t v8 = (const char *)(v7 + 16);
        if (*(char *)(v7 + 39) < 0) {
          unint64_t v8 = *(const char **)v8;
        }
      }
      else
      {
        unint64_t v8 = "";
      }
      uint64_t v9 = objc_msgSend(v6, "stringWithUTF8String:", v8, v27);
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v30 = (*(uint64_t (**)(uint64_t, void, uint64_t *, void))(*(void *)*v5 + 48))(*v5, *((unsigned int *)v5 + 2), v5 + 2, 0);
      uint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v30);
      uint64_t v11 = *v5;
      int v31 = *((_DWORD *)v5 + 2);
      uint64_t v30 = v11;
      uint64_t v12 = (atomic_uint *)v5[2];
      uint64_t v32 = v12;
      if ((v12 & 7) != 0)
      {
        uint64_t v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v32 = v13;
        }
      }
      (*(void (**)(std::type_info_vtbl **__return_ptr))(*(void *)v30 + 120))(&v33);
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v14 = (void *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v14) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*((void *)a1 + 1) & 0xFFFFFFFFFFFFFFF8) == (*v14 & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v17 = *v5;
        uint64_t v18 = *((unsigned int *)v5 + 2);
        unint64_t v19 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v19) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t))(*(void *)v17 + 96))(&v30, v17, v18, v19 + 24);
        (*(void (**)(std::type_info_vtbl **__return_ptr))(*(void *)v30 + 40))(&v29);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v20 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
        if (!v20) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, unint64_t))(*(void *)v17 + 152))(&v30, v17, v18, v20 + 96);
        (*(void (**)(std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t *__return_ptr))(*(void *)v30 + 40))(&v28.__type_name);
        if ((v32 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*v5 + 40))(&v30);
        long long v21 = v29;
        long long v22 = (atomic_uint *)(v30 & 0xFFFFFFFFFFFFFFF8);
        if ((v30 & 7) != 0) {
          atomic_fetch_add_explicit(v22, 0xFFFFFFFE, memory_order_release);
        }
        if (v22 == (atomic_uint *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v15 = 53;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)*v5 + 40))(&v30);
          char v23 = (atomic_uint *)(v30 & 0xFFFFFFFFFFFFFFF8);
          std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = v28.__type_name;
          if ((v30 & 7) != 0) {
            atomic_fetch_add_explicit(v23, 0xFFFFFFFE, memory_order_release);
          }
          if (v23 == (atomic_uint *)(type_name & 0xFFFFFFFFFFFFFFF8)) {
            uint64_t v15 = 54;
          }
          else {
            uint64_t v15 = 0;
          }
        }
        if ((v28.__type_name & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v28.__type_name & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v16 = v29;
      }
      else
      {
        v28.__vftable = v33;
        if ((v33 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v28.__vftable = (std::type_info_vtbl *)((unint64_t)v28.__vftable & 0xFFFFFFFFFFFFFFF8);
        }
        uint64_t v15 = realityio::conversions::usdToSGDataType(v10, &v28);
        uint64_t v16 = v28.__vftable;
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      id v25 = [MEMORY[0x263F6BC60] outputWithName:v9 type:v15];
      if (v25) {
        [v27 addObject:v25];
      }
      else {
        realityio::mtlx::MtlxActionPayload::setError(a1, @"Could not create a node output", 3u, 0);
      }

      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }

      v5 += 3;
    }
    while (v5 != v4);
  }

  return v27;
}

void realityio::mtlx::MtlxActionPayload::setSGGraph(uint64_t a1, void *a2)
{
  id v5 = a2;
  objc_storeStrong((id *)(a1 + 16), a2);
  if (v5)
  {
    uint64_t v4 = *(void **)(a1 + 24);
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
}

void realityio::mtlx::MtlxActionPayload::addArgumentOutputs(uint64_t a1, realityio::mtlx::NeoShadeNodeGraph *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v5 = a3;
  realityio::mtlx::NeoShadeNodeGraph::GetInputs(a2, (uint64_t)v37);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  obuint64_t j = v5;
  uint64_t v6 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
  if (v6)
  {
    uint64_t v27 = *(void *)v34;
    uint64_t v25 = a1 + 80;
    do
    {
      uint64_t v28 = v6;
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v34 != v27) {
          objc_enumerationMutation(obj);
        }
        unint64_t v8 = (realityio *)*(id *)(*((void *)&v33 + 1) + 8 * i);
        uint64_t v9 = v8;
        uint64_t v10 = v37[0];
        uint64_t v11 = v37[1];
        while (v10 != v11)
        {
          uint64_t v12 = *(id *)(realityio::logObjects(v8) + 48);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = [(realityio *)v9 name];
            (*(void (**)(void ***__return_ptr))(**(void **)v10 + 24))(&v29);
            uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
            *(_DWORD *)std::string buf = 138412546;
            *(void *)&buf[4] = v13;
            __int16 v39 = 2080;
            uint64_t v40 = Text;
            _os_log_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_INFO, "    Publishing argument node output '%@' in %s", buf, 0x16u);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
          }
          uint64_t v15 = [(realityio *)v9 name];
          uint64_t v16 = NSString;
          (*(void (**)(unsigned char *__return_ptr))(**(void **)v10 + 40))(buf);
          unint64_t v17 = *(void *)buf & 0xFFFFFFFFFFFFFFF8;
          if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v18 = (const char *)(v17 + 16);
            if (*(char *)(v17 + 39) < 0) {
              uint64_t v18 = *(const char **)v18;
            }
          }
          else
          {
            uint64_t v18 = "";
          }
          unint64_t v19 = [v16 stringWithUTF8String:v18];
          int v20 = [v15 isEqualToString:v19];

          if ((buf[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }

          if (v20)
          {
            long long v21 = v9;
            realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeInput>((uint64_t)buf, (void *)v10);
            uint64_t v44 = v21;
            long long v22 = *(void ***)v10;
            int v30 = *(_DWORD *)(v10 + 8);
            int v29 = v22;
            char v23 = *(atomic_uint **)(v10 + 16);
            int v31 = v23;
            if ((v23 & 7) != 0)
            {
              unint64_t v24 = (atomic_uint *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
              if ((atomic_fetch_add_explicit(v24, 2u, memory_order_relaxed) & 1) == 0) {
                int v31 = v24;
              }
            }
            (*((void (**)(uint64_t *__return_ptr))*v29 + 3))(&v32);
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>(v25, (unsigned int *)&v32, &v32, (uint64_t)buf);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
            if ((v31 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }

            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v43);
            if ((v42 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v41 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v29 = (void **)&buf[8];
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v29);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
            break;
          }
          v10 += 24;
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
    }
    while (v6);
  }

  *(void *)std::string buf = v37;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_23F6FCD54(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void realityio::mtlx::MtlxActionPayload::addResultInputs(uint64_t a1, realityio::mtlx::NeoShadeNodeGraph *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v5 = a3;
  realityio::mtlx::NeoShadeNodeGraph::GetOutputs(a2, (uint64_t)v37);
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  obuint64_t j = v5;
  uint64_t v6 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
  if (v6)
  {
    uint64_t v27 = *(void *)v34;
    uint64_t v25 = a1 + 40;
    do
    {
      uint64_t v28 = v6;
      for (uint64_t i = 0; i != v28; ++i)
      {
        if (*(void *)v34 != v27) {
          objc_enumerationMutation(obj);
        }
        unint64_t v8 = (realityio *)*(id *)(*((void *)&v33 + 1) + 8 * i);
        uint64_t v9 = v8;
        uint64_t v10 = v37[0];
        uint64_t v11 = v37[1];
        while (v10 != v11)
        {
          uint64_t v12 = *(id *)(realityio::logObjects(v8) + 48);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            uint64_t v13 = [(realityio *)v9 name];
            (*(void (**)(void ***__return_ptr))(**(void **)v10 + 24))(&v29);
            uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29);
            *(_DWORD *)std::string buf = 138412546;
            *(void *)&buf[4] = v13;
            __int16 v39 = 2080;
            uint64_t v40 = Text;
            _os_log_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_INFO, "    Publishing result node input '%@' in %s", buf, 0x16u);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
          }
          uint64_t v15 = [(realityio *)v9 name];
          uint64_t v16 = NSString;
          (*(void (**)(unsigned char *__return_ptr))(**(void **)v10 + 40))(buf);
          unint64_t v17 = *(void *)buf & 0xFFFFFFFFFFFFFFF8;
          if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v18 = (const char *)(v17 + 16);
            if (*(char *)(v17 + 39) < 0) {
              uint64_t v18 = *(const char **)v18;
            }
          }
          else
          {
            uint64_t v18 = "";
          }
          unint64_t v19 = [v16 stringWithUTF8String:v18];
          int v20 = [v15 isEqualToString:v19];

          if ((buf[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }

          if (v20)
          {
            long long v21 = v9;
            realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeOutput>((uint64_t)buf, (void *)v10);
            uint64_t v44 = v21;
            long long v22 = *(void ***)v10;
            int v30 = *(_DWORD *)(v10 + 8);
            int v29 = v22;
            char v23 = *(atomic_uint **)(v10 + 16);
            int v31 = v23;
            if ((v23 & 7) != 0)
            {
              unint64_t v24 = (atomic_uint *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
              if ((atomic_fetch_add_explicit(v24, 2u, memory_order_relaxed) & 1) == 0) {
                int v31 = v24;
              }
            }
            (*((void (**)(uint64_t *__return_ptr))*v29 + 3))(&v32);
            std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>(v25, (unsigned int *)&v32, &v32, (uint64_t)buf);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32);
            if ((v31 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }

            pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v43);
            if ((v42 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v41 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v29 = (void **)&buf[8];
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v29);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
            break;
          }
          v10 += 24;
        }
      }
      uint64_t v6 = [obj countByEnumeratingWithState:&v33 objects:v45 count:16];
    }
    while (v6);
  }

  *(void *)std::string buf = v37;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_23F6FD1C8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t realityio::mtlx::MtlxActionPayload::MtlxActionPayload(uint64_t a1, realityio::mtlx::NeoShadeNodeGraph *a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
     + 4;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 200) = objc_opt_new();
  *(void *)(a1 + 208) = objc_opt_new();
  uint64_t v5 = objc_opt_new();
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1 + 232;
  *(void *)(a1 + 216) = v5;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = 1065353216;
  *(_WORD *)(a1 + 288) = 0;
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 16))(v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1, (int *)v23);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v23);
  uint64_t v6 = (void *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(a1 + 8), v6);
  unint64_t v7 = NSString;
  uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if (*(char *)(Name + 23) >= 0) {
    uint64_t v9 = Name;
  }
  else {
    uint64_t v9 = *(void *)Name;
  }
  uint64_t v10 = objc_msgSend(v7, "stringWithUTF8String:", v9, a1 + 160, a1 + 120, a1 + 80, a1 + 40);
  long long v22 = *(_OWORD *)a2;
  realityio::mtlx::MtlxActionPayload::getUSDInputs(&v22);
  long long v21 = *(_OWORD *)a2;
  realityio::mtlx::MtlxActionPayload::getUSDOutputs(&v21);
  uint64_t v11 = realityio::mtlx::MtlxActionPayload::createSGInputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v23[0], v23[1]);
  uint64_t v12 = realityio::mtlx::MtlxActionPayload::createSGOutputs((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, (uint64_t **)&v22);
  uint64_t v13 = [MEMORY[0x263F6BC40] graphWithName:v10 inputs:v11 outputs:v12];
  realityio::mtlx::MtlxActionPayload::setSGGraph(a1, v13);

  id v14 = *(id *)(a1 + 16);
  uint64_t v15 = [v14 argumentsNode];
  uint64_t v16 = [v15 outputs];
  realityio::mtlx::MtlxActionPayload::addArgumentOutputs(a1, a2, v16);

  id v17 = *(id *)(a1 + 16);
  uint64_t v18 = [v17 resultsNode];
  unint64_t v19 = [v18 inputs];
  realityio::mtlx::MtlxActionPayload::addResultInputs(a1, a2, v19);

  *(void *)&long long v21 = &v22;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  *(void *)&long long v22 = v23;
  std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);

  return a1;
}

void sub_23F6FD518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::~__hash_table(v14);
  std::__tree<std::string>::destroy(v13, *(char **)(v12 + 232));

  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a9);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::~__hash_table(a12);

  uint64_t v16 = *(void *)(v12 + 8);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::setError(realityio::mtlx::MtlxActionPayload *this, NSError *a2)
{
  uint64_t v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)*((void *)this + 2);
    *((void *)this + 2) = 0;

    uint64_t v5 = (void *)*((void *)this + 3);
    *((void *)this + 3) = 0;

    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)this + 40);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear((uint64_t)this + 80);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)this + 120);
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear((uint64_t)this + 160);
    uint64_t v6 = (void *)*((void *)this + 25);
    *((void *)this + 25) = 0;

    unint64_t v7 = (void *)*((void *)this + 26);
    *((void *)this + 26) = 0;

    std::__tree<std::string>::destroy((uint64_t)this + 224, *((char **)this + 29));
    *((void *)this + 28) = (char *)this + 232;
    *((void *)this + 29) = 0;
    *((void *)this + 30) = 0;
    if (*((void *)this + 34))
    {
      std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__deallocate_node((uint64_t)this + 248, *((void **)this + 33));
      *((void *)this + 33) = 0;
      uint64_t v8 = *((void *)this + 32);
      if (v8)
      {
        for (uint64_t i = 0; i != v8; ++i)
          *(void *)(*((void *)this + 31) + 8 * i) = 0;
      }
      *((void *)this + 34) = 0;
    }
  }
  uint64_t v10 = (void *)*((void *)this + 4);
  *((void *)this + 4) = v3;
}

void realityio::mtlx::MtlxActionPayload::addChildError(id *this, NSError *a2)
{
  uint64_t v12 = a2;
  uint64_t v3 = (void *)MEMORY[0x263EFF9A0];
  id v4 = this[4];
  uint64_t v5 = [v4 userInfo];
  uint64_t v6 = [v3 dictionaryWithDictionary:v5];

  unint64_t v7 = objc_opt_new();
  uint64_t v8 = [v6 objectForKeyedSubscript:@"NSMultipleUnderlyingErrorsKey"];
  if (v8) {
    [v7 addObjectsFromArray:v8];
  }
  [v7 addObject:v12];
  [v6 setObject:v7 forKeyedSubscript:@"NSMultipleUnderlyingErrorsKey"];
  uint64_t v9 = (void *)MEMORY[0x263F087E8];
  id v10 = this[4];
  objc_msgSend(v9, "errorWithDomain:code:userInfo:", @"MaterialX", objc_msgSend(v10, "code"), v6);
  uint64_t v11 = (NSError *)objc_claimAutoreleasedReturnValue();
  realityio::mtlx::MtlxActionPayload::setError((realityio::mtlx::MtlxActionPayload *)this, v11);
}

uint64_t realityio::TexcoordID::operator=(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  if (a2 != a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }
  uint64_t v5 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 39) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t *realityio::mtlx::MtlxActionPayload::collectTextureInfo(uint64_t a1, uint64_t a2)
{
  BOOL result = std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a1 + 224), *(const void ***)(a2 + 224), (const void ***)(a2 + 232));
  uint64_t v5 = *(void **)(a2 + 264);
  if (v5)
  {
    uint64_t v6 = a1 + 248;
    do
    {
      BOOL result = std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,realityio::TexcoordID> const&>(v6, v5 + 2, v5 + 2);
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return result;
}

uint64_t realityio::mtlx::MtlxActionPayload::collectNodes(realityio::mtlx::MtlxActionPayload *this, id *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  BOOL isSiblingOf = realityio::mtlx::MtlxActionPayload::isSiblingOf(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if (isSiblingOf)
  {
    uint64_t v5 = *(id *)(realityio::logObjects((realityio *)isSiblingOf) + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
      __int16 v42 = 2080;
      uint64_t v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      _os_log_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_INFO, "Collecting sibling nodes into %s from %s", buf, 0x16u);
    }

    uint64_t v6 = (void *)*((void *)this + 26);
    id v7 = a2[3];
    [v6 addObject:v7];

    uint64_t v8 = (void *)*((void *)this + 26);
    uint64_t v9 = [a2[26] allObjects];
    [v8 addObjectsFromArray:v9];
    goto LABEL_5;
  }
  BOOL isParentOf = realityio::mtlx::MtlxActionPayload::isParentOf(this, (const realityio::mtlx::MtlxActionPayload *)a2);
  if (isParentOf)
  {
    __int16 v25 = *((_WORD *)this + 144);
    if ((v25 & 3) != 0) {
      __int16 v26 = *((_WORD *)a2 + 144) | v25 | 4;
    }
    else {
      __int16 v26 = *((_WORD *)a2 + 144) | v25;
    }
    *((_WORD *)this + 144) = v26;
    if ((v26 & 3) != 0) {
      return 1;
    }
    int v31 = *(id *)(realityio::logObjects((realityio *)isParentOf) + 48);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315394;
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
      __int16 v42 = 2080;
      uint64_t v43 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_INFO, "Collecting child nodes into %s from %s", buf, 0x16u);
    }

    uint64_t v32 = (void *)*((void *)this + 25);
    id v33 = a2[3];
    [v32 addObject:v33];

    long long v34 = (void *)*((void *)this + 25);
    uint64_t v9 = [a2[26] allObjects];
    [v34 addObjectsFromArray:v9];
LABEL_5:

    uint64_t v11 = *(id *)(realityio::logObjects(v10) + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = a2[3];
      id v13 = [v12 name];
      uint64_t v14 = [v13 UTF8String];
      *(_DWORD *)std::string buf = 136315138;
      uint64_t Text = v14;
      _os_log_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_INFO, "  Adding '%s'", buf, 0xCu);
    }
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    id v15 = a2[26];
    uint64_t v16 = (realityio *)[v15 countByEnumeratingWithState:&v35 objects:v39 count:16];
    id v17 = v16;
    if (v16)
    {
      uint64_t v18 = *(void *)v36;
      do
      {
        unint64_t v19 = 0;
        do
        {
          if (*(void *)v36 != v18) {
            objc_enumerationMutation(v15);
          }
          int v20 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v19);
          long long v21 = *(id *)(realityio::logObjects(v16) + 48);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            id v22 = [v20 name];
            uint64_t v23 = [v22 UTF8String];
            *(_DWORD *)std::string buf = 136315138;
            uint64_t Text = v23;
            _os_log_impl(&dword_23F4EA000, v21, OS_LOG_TYPE_INFO, "  Adding '%s'", buf, 0xCu);
          }
          unint64_t v19 = (realityio *)((char *)v19 + 1);
        }
        while (v17 != v19);
        uint64_t v16 = (realityio *)[v15 countByEnumeratingWithState:&v35 objects:v39 count:16];
        id v17 = v16;
      }
      while (v16);
    }

    return 1;
  }
  uint64_t v28 = NSString;
  uint64_t v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
  int v30 = objc_msgSend(v28, "stringWithFormat:", @"Unexpected dependency between %s and %s.", v29, pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2));
  realityio::mtlx::MtlxActionPayload::setError(this, v30, 5u, 0);

  return 0;
}

void sub_23F6FDD64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

BOOL realityio::mtlx::MtlxActionPayload::isParentOf(realityio::mtlx::MtlxActionPayload *this, const realityio::mtlx::MtlxActionPayload *a2)
{
  unint64_t v3 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)this + 1) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v3 + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v8, a2);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  BOOL v6 = v4 == v5;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return v6;
}

uint64_t realityio::mtlx::MtlxActionPayload::collectInputsAndOutputs(realityio::mtlx::MtlxActionPayload *this, unsigned int **a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(id *)(realityio::logObjects(this) + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    unint64_t v5 = *((void *)this + 1) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
    {
      BOOL v6 = (const char *)(v5 + 16);
      if (*(char *)(v5 + 39) < 0) {
        BOOL v6 = *(const char **)v6;
      }
    }
    else
    {
      BOOL v6 = "";
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v41 = (uint64_t)v6;
    __int16 v42 = 2080;
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    _os_log_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_INFO, "Collecting inputs and outputs on %s %s", buf, 0x16u);
  }

  BOOL isSiblingOf = realityio::mtlx::MtlxActionPayload::isSiblingOf(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if (isSiblingOf)
  {
    uint64_t v8 = *(id *)(realityio::logObjects((realityio *)isSiblingOf) + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      unint64_t v9 = (unint64_t)a2[1] & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        id v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0) {
          id v10 = *(const char **)v10;
        }
      }
      else
      {
        id v10 = "";
      }
      uint64_t v19 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v41 = (uint64_t)v10;
      __int16 v42 = 2080;
      uint64_t Text = v19;
      _os_log_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_INFO, "  Sibling on %s %s", buf, 0x16u);
    }

    for (uint64_t i = a2[22]; i; uint64_t i = *(unsigned int **)i)
      int v20 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>((uint64_t)this + 160, i + 4, (uint64_t)(i + 4));
    for (uint64_t j = a2[17]; j; uint64_t j = *(unsigned int **)j)
      int v20 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>((uint64_t)this + 120, j + 4, (uint64_t)(j + 4));
    for (k = (void *)*((void *)this + 22); k; k = (void *)*k)
    {
      unint64_t v24 = *(id *)(realityio::logObjects(v20) + 48);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(k + 3));
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v41 = v25;
        _os_log_impl(&dword_23F4EA000, v24, OS_LOG_TYPE_INFO, "    %s", buf, 0xCu);
      }
    }
    for (m = (void *)*((void *)this + 17); m; m = (void *)*m)
    {
      uint64_t v27 = *(id *)(realityio::logObjects(v20) + 48);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(m + 3));
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v41 = v28;
        _os_log_impl(&dword_23F4EA000, v27, OS_LOG_TYPE_INFO, "    %s", buf, 0xCu);
      }
    }
  }
  else
  {
    BOOL isParentOf = realityio::mtlx::MtlxActionPayload::isParentOf(this, (const realityio::mtlx::MtlxActionPayload *)a2);
    if (!isParentOf)
    {
      id v15 = NSString;
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
      id v17 = objc_msgSend(v15, "stringWithFormat:", @"Unexpected dependency between %s and %s.", v16, pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a2));
      realityio::mtlx::MtlxActionPayload::setError(this, v17, 5u, 0);

      return 0;
    }
    id v12 = *(id *)(realityio::logObjects((realityio *)isParentOf) + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      unint64_t v13 = (unint64_t)a2[1] & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        uint64_t v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0) {
          uint64_t v14 = *(const char **)v14;
        }
      }
      else
      {
        uint64_t v14 = "";
      }
      uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (*(char *)(Name + 23) >= 0) {
        uint64_t v30 = Name;
      }
      else {
        uint64_t v30 = *(void *)Name;
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v41 = (uint64_t)v14;
      __int16 v42 = 2080;
      uint64_t Text = v30;
      _os_log_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_INFO, "  Child on %s %s", buf, 0x16u);
    }

    for (n = a2[22]; n; n = *(unsigned int **)n)
      int v31 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::OutputRecord> const&>((uint64_t)this + 80, n + 4, (uint64_t)(n + 4));
    for (iuint64_t i = a2[17]; ii; iuint64_t i = *(unsigned int **)ii)
      int v31 = (realityio *)std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::mtlx::MtlxActionPayload::InputRecord> const&>((uint64_t)this + 40, ii + 4, (uint64_t)(ii + 4));
    for (juint64_t j = (void *)*((void *)this + 12); jj; juint64_t j = (void *)*jj)
    {
      long long v35 = *(id *)(realityio::logObjects(v31) + 48);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        uint64_t v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(jj + 3));
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v41 = v36;
        _os_log_impl(&dword_23F4EA000, v35, OS_LOG_TYPE_INFO, "    Output %s", buf, 0xCu);
      }
    }
    for (kk = (void *)*((void *)this + 7); kk; kk = (void *)*kk)
    {
      long long v38 = *(id *)(realityio::logObjects(v31) + 48);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        uint64_t v39 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(kk + 3));
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v41 = v39;
        _os_log_impl(&dword_23F4EA000, v38, OS_LOG_TYPE_INFO, "    Input %s", buf, 0xCu);
      }
    }
  }
  return 1;
}

void sub_23F6FE35C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::populateSubgraph(id *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (!this[4])
  {
    uint64_t v2 = *(id *)(realityio::logObjects((realityio *)this) + 48);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      unint64_t v3 = (unint64_t)this[1] & 0xFFFFFFFFFFFFFFF8;
      if (v3)
      {
        uint64_t v4 = (const char *)(v3 + 16);
        if (*(char *)(v3 + 39) < 0) {
          uint64_t v4 = *(const char **)v4;
        }
      }
      else
      {
        uint64_t v4 = "";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v16 = v4;
      __int16 v17 = 2080;
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
      _os_log_impl(&dword_23F4EA000, v2, OS_LOG_TYPE_INFO, "Populating %s %s", buf, 0x16u);
    }

    unint64_t v5 = [this[25] allObjects];
    id v6 = this[2];
    id v14 = 0;
    char v7 = [v6 insertNodes:v5 error:&v14];
    id v8 = v14;
    if ((v7 & 1) == 0)
    {
      unint64_t v9 = NSString;
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
      uint64_t v11 = objc_msgSend(v9, "stringWithFormat:", @"Unexpected dependency between %s and %s.", v10, pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)this));
      id v12 = (void *)atomic_load(&realityio::tokens::MaterialBuilderTokens);
      if (!v12) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if (((unint64_t)this[1] & 0xFFFFFFFFFFFFFFF8) == (*v12 & 0xFFFFFFFFFFFFFFF8)) {
        unsigned int v13 = 4;
      }
      else {
        unsigned int v13 = 3;
      }
      realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)this, v11, v13, v8);
    }
  }
}

void sub_23F6FE570(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void realityio::mtlx::MtlxActionPayload::connectFromOutput(pxrInternal__aapl__pxrReserved__::SdfPath *a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, void *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  id v9 = a2;
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  if (*a3 != v11)
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((uint64_t *)buf, a5);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(&v29, v10);
      uint64_t v13 = v29;
      uint64_t v12 = *(void *)buf;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      id v14 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
      if (v12 == v13) {
        break;
      }
      int v20 = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(a4, (unsigned int *)v10);
      if (v20)
      {
        long long v21 = v20;
        if (*((unsigned char *)v20 + 72))
        {
          realityio::mtlx::MtlxActionPayload::setError(a1, @"Multiple connections to input.", 8u, 0);
          goto LABEL_16;
        }
        id v22 = (void *)*((void *)a1 + 2);
        uint64_t v23 = v21[12];
        id v28 = 0;
        [v22 connect:v9 to:v23 error:&v28];
        id v24 = v28;
        if (v24)
        {
          uint64_t v27 = v24;
          realityio::mtlx::MtlxActionPayload::setError(a1, @"Failed to create material.", 0, v24);

          goto LABEL_16;
        }
        *((unsigned char *)v21 + 72) = 1;
        id v15 = *(id *)(realityio::logObjects(0) + 48);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a5);
          uint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v10);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = Text;
          __int16 v31 = 2080;
          uint64_t v32 = v26;
          uint64_t v18 = v15;
          uint64_t v19 = "  Connected %s from output %s";
LABEL_10:
          _os_log_impl(&dword_23F4EA000, v18, OS_LOG_TYPE_INFO, v19, buf, 0x16u);
        }
LABEL_11:
      }
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      if (v10 == v11) {
        goto LABEL_16;
      }
    }
    id v15 = *(id *)(realityio::logObjects(v14) + 48);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a5);
      uint64_t v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v10);
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v31 = 2080;
      uint64_t v32 = v17;
      uint64_t v18 = v15;
      uint64_t v19 = "    Filtering connection from %s to %s";
      goto LABEL_10;
    }
    goto LABEL_11;
  }
LABEL_16:
}

void sub_23F6FE7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void realityio::mtlx::MtlxActionPayload::connectSubgraph(int8x8_t *a1, uint64_t *a2)
{
  uint64_t v258 = *MEMORY[0x263EF8340];
  if (!*(void *)&a1[4])
  {
    realityio::mtlx::MtlxActionPayload::getUSDInputs(a2);
    v222 = a2;
    USDOutputs = (realityio *)realityio::mtlx::MtlxActionPayload::getUSDOutputs(a2);
    uint64_t v4 = *(id *)(realityio::logObjects(USDOutputs) + 48);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      unint64_t v5 = *(void *)&a1[1] & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        id v6 = (const char *)(v5 + 16);
        if (*(char *)(v5 + 39) < 0) {
          id v6 = *(const char **)v6;
        }
      }
      else
      {
        id v6 = "";
      }
      int8x8_t v7 = a1[2];
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      id v9 = "child";
      *(_DWORD *)std::string buf = 136315650;
      if (!*(void *)&v7) {
        id v9 = "sibling";
      }
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v6;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v247 = Text;
      _os_log_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_INFO, "Connecting %s inputs of %s %s", buf, 0x20u);
    }

    uint64_t v10 = a1;
    uint64_t v219 = (uint64_t)&a1[10];
    if (a1[2]) {
      uint64_t v11 = a1 + 10;
    }
    else {
      uint64_t v11 = a1 + 20;
    }
    uint64_t v12 = v11 + 2;
    v225 = a1 + 5;
    while (1)
    {
      uint64_t v12 = (int8x8_t *)*v12;
      if (!v12) {
        break;
      }
      realityio::mtlx::MtlxActionPayload::connectFromOutput((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, *(void **)&v12[12], (pxrInternal__aapl__pxrReserved__::SdfPath **)&v12[4], v225, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v12[2]);
      if (a1[4]) {
        goto LABEL_347;
      }
    }
    uint64_t v13 = (void *)a1[2];
    if (v13)
    {
      long long v236 = 0u;
      long long v237 = 0u;
      long long v234 = 0u;
      long long v235 = 0u;
      id v14 = [v13 argumentsNode];
      obuint64_t j = [v14 outputs];

      uint64_t v15 = [obj countByEnumeratingWithState:&v234 objects:v245 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v235;
        do
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if (*(void *)v235 != v16) {
              objc_enumerationMutation(obj);
            }
            uint64_t v18 = *(void **)(*((void *)&v234 + 1) + 8 * i);
            memset(buf, 0, sizeof(buf));
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            id v19 = [v18 name];
            std::string::basic_string[abi:ne180100]<0>(&v248, (char *)[v19 UTF8String]);

            int v20 = (void *)v239[0];
            long long v21 = (void *)v239[1];
            while (1)
            {
              if (v20 == v21) {
                goto LABEL_59;
              }
              id v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *(**)(unsigned char *__return_ptr))(*(void *)*v20 + 40))(v254);
              if ((*(void *)v254 & 0xFFFFFFFFFFFFFFF8) != 0) {
                unint64_t EmptyString = (unsigned __int8 *)((*(void *)v254 & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              else {
                unint64_t EmptyString = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
              }
              uint64_t v24 = EmptyString[23];
              if ((v24 & 0x80u) == 0) {
                uint64_t v25 = EmptyString[23];
              }
              else {
                uint64_t v25 = *((void *)EmptyString + 1);
              }
              uint64_t v26 = BYTE7(v249);
              if (SBYTE7(v249) < 0) {
                uint64_t v26 = *((void *)&v248 + 1);
              }
              if (v25 == v26)
              {
                if ((SBYTE7(v249) & 0x80u) == 0) {
                  uint64_t v27 = (unsigned __int8 *)&v248;
                }
                else {
                  uint64_t v27 = (unsigned __int8 *)v248;
                }
                if ((v24 & 0x80) != 0)
                {
                  BOOL v36 = memcmp(*(const void **)EmptyString, v27, *((void *)EmptyString + 1)) == 0;
                }
                else if (EmptyString[23])
                {
                  uint64_t v28 = v24 - 1;
                  do
                  {
                    int v30 = *EmptyString++;
                    int v29 = v30;
                    int v32 = *v27++;
                    int v31 = v32;
                    BOOL v34 = v28-- != 0;
                    BOOL v35 = v29 == v31;
                    BOOL v36 = v29 == v31;
                  }
                  while (v35 && v34);
                }
                else
                {
                  BOOL v36 = 1;
                }
              }
              else
              {
                BOOL v36 = 0;
              }
              if ((v254[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v254 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (v36) {
                break;
              }
              v20 += 3;
            }
            (*(void (**)(void, void, void *, uint64_t, unsigned char *))(*(void *)*v20 + 80))(*v20, *((unsigned int *)v20 + 2), v20 + 2, 1, buf);
            uint64_t v37 = *v20;
            *(_DWORD *)&v254[8] = *((_DWORD *)v20 + 2);
            *(void *)v254 = v37;
            uint64_t v38 = v20[2];
            *(void *)&v256[2] = v38;
            if ((v38 & 7) != 0)
            {
              uint64_t v39 = (atomic_uint *)(v38 & 0xFFFFFFFFFFFFFFF8);
              if ((atomic_fetch_add_explicit(v39, 2u, memory_order_relaxed) & 1) == 0) {
                *(void *)&v256[2] = v39;
              }
            }
            (*(void (**)(id *__return_ptr))(**(void **)v254 + 24))(v253);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v242, (int *)v253);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v242.__r_.__value_.__r.__words + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v253);
            if ((v256[2] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v256[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
LABEL_59:
            if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
              || *(void *)buf == *(void *)&buf[8])
            {
              int v40 = 5;
            }
            else
            {
              realityio::mtlx::MtlxActionPayload::connectFromOutput((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v18, (pxrInternal__aapl__pxrReserved__::SdfPath **)buf, v225, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v242);
              int v40 = *(void *)&a1[4] != 0;
            }
            if (SBYTE7(v249) < 0) {
              operator delete((void *)v248);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v242);
            *(void *)&long long v248 = buf;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v248);
            if (v40 != 5 && v40)
            {

              goto LABEL_347;
            }
          }
          uint64_t v15 = [obj countByEnumeratingWithState:&v234 objects:v245 count:16];
        }
        while (v15);
      }

      uint64_t v10 = a1;
    }
    if (v10[4]) {
      goto LABEL_347;
    }
    uint64_t v41 = *(id *)(realityio::logObjects((realityio *)v13) + 48);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      unint64_t v42 = *(void *)&a1[1] & 0xFFFFFFFFFFFFFFF8;
      if (v42)
      {
        uint64_t v43 = (const char *)(v42 + 16);
        if (*(char *)(v42 + 39) < 0) {
          uint64_t v43 = *(const char **)v43;
        }
      }
      else
      {
        uint64_t v43 = "";
      }
      int8x8_t v44 = a1[2];
      uint64_t v45 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      uint64_t v46 = "child";
      *(_DWORD *)std::string buf = 136315650;
      if (!*(void *)&v44) {
        uint64_t v46 = "sibling";
      }
      *(void *)&uint8_t buf[4] = v46;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v43;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v247 = v45;
      _os_log_impl(&dword_23F4EA000, v41, OS_LOG_TYPE_INFO, "Connecting %s inputs of %s %s", buf, 0x20u);
    }

    unint64_t v48 = a1 + 5;
    if (!*(void *)&a1[2]) {
      unint64_t v48 = a1 + 15;
    }
    unint64_t v49 = v48 + 2;
LABEL_83:
    uint64_t v50 = (int8x8_t *)*v49;
    if (!v50)
    {
      uint64_t v110 = *(id *)(realityio::logObjects(v47) + 48);
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        uint64_t v111 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v111;
        _os_log_impl(&dword_23F4EA000, v110, OS_LOG_TYPE_INFO, "  Adding child constants to %s", buf, 0xCu);
      }

      int8x8_t v112 = a1[7];
      if (!*(void *)&v112)
      {
LABEL_346:
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)v225);
        std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear(v219);
        goto LABEL_347;
      }
      while (2)
      {
        if (*(unsigned char *)(*(void *)&v112 + 72)) {
          goto LABEL_286;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)&v112 + 24));
        uint64_t v113 = *(void *)buf;
        int8x8_t v114 = *a1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
        if (v113 == *(void *)&v114) {
          goto LABEL_285;
        }
        uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)&v112 + 24));
        if (*(char *)(String + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)String, *(void *)(String + 8));
        }
        else
        {
          long long v116 = *(_OWORD *)String;
          v242.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
          *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v116;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)&v112 + 24));
        uint64_t v117 = *(void *)buf;
        int8x8_t v118 = *a1;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
        if (v117 == *(void *)&v118)
        {
          uint64_t Name = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)&v112 + 24));
          std::string::operator=(&v242, Name);
        }
        if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v120 = &v242;
        }
        else {
          long long v120 = (std::string *)v242.__r_.__value_.__r.__words[0];
        }
        uint64_t v121 = [NSString stringWithUTF8String:v120];
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)&v112 + 80));
        uint64_t v122 = *(void *)&buf[8];
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        if (!v122)
        {
          uint64_t v131 = 0;
          goto LABEL_273;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)&v112 + 80));
        uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        id location = 0;
        v257 = 0;
        uint64_t v124 = operator new(0x20uLL);
        *uint64_t v124 = &unk_26F3477E8;
        v124[1] = &location;
        void v124[2] = *(void *)&v112 + 24;
        v124[3] = a1;
        v257 = v124;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v248, (uint64_t)v254);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v254);
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)&v112 + 80));
        v253[0] = (id)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        int IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA();
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        if (IsA)
        {
          v127 = (void *)MEMORY[0x263F6BC58];
          uint64_t v128 = *(void *)(*(void *)&v112 + 56);
          *(void *)std::string buf = v128;
          if ((v128 & 7) != 0)
          {
            uint64_t v129 = (atomic_uint *)(v128 & 0xFFFFFFFFFFFFFFF8);
            if ((atomic_fetch_add_explicit(v129, 2u, memory_order_relaxed) & 1) == 0) {
              *(void *)std::string buf = v129;
            }
          }
          uint64_t v130 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
          v253[0] = location;
          uint64_t v131 = [v127 nodeWithConstantString:v121 type:v130 name:v121 error:v253];
          objc_storeStrong(&location, v253[0]);
          if ((buf[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
LABEL_271:
          if (!*((void *)&v249 + 1)) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void))(**((void **)&v249 + 1) + 48))(*((void *)&v249 + 1));
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v248);

LABEL_273:
          if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v242.__r_.__value_.__l.__data_);
          }
          if (v131 && !*(void *)&a1[4])
          {
            v174 = (void *)a1[2];
            *(void *)std::string buf = v131;
            v175 = [MEMORY[0x263EFF8C0] arrayWithObjects:buf count:1];
            *(void *)&long long v248 = 0;
            [v174 insertNodes:v175 error:&v248];
            id v173 = (id)v248;

            if (v173) {
              v176 = {;
            }
              realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v176, 0xAu, v173);
            }
            else
            {
              v176 = [v131 outputs];
              v177 = [v176 firstObject];
              v178 = (void *)a1[2];
              uint64_t v179 = *(void *)(*(void *)&v112 + 96);
              *(void *)v254 = 0;
              [v178 connect:v177 to:v179 error:v254];
              id v173 = *(id *)v254;
              if (v173) {
                v180 = {;
              }
                realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v180, 9u, v173);
              }
            }
          }
          else
          {
            id v173 = 0;
          }

LABEL_285:
          if (a1[4]) {
            goto LABEL_347;
          }
LABEL_286:
          int8x8_t v112 = **(int8x8_t **)&v112;
          if (!*(void *)&v112) {
            goto LABEL_346;
          }
          continue;
        }
        break;
      }
      v132 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v253, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)&v112 + 80));
      uint64_t v133 = realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::VtValue>(v132);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v253);
      id objb = (id)v133;
      if (v133)
      {
        v134 = (void *)MEMORY[0x263F6BC58];
        uint64_t v135 = *(void *)(*(void *)&v112 + 56);
        *(void *)std::string buf = v135;
        if ((v135 & 7) != 0)
        {
          v136 = (atomic_uint *)(v135 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v136, 2u, memory_order_relaxed) & 1) == 0) {
            *(void *)std::string buf = v136;
          }
        }
        uint64_t v137 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
        v252[0] = location;
        uint64_t v131 = [v134 nodeWithConstantScalar:v133 type:v137 name:v121 error:v252];
        objc_storeStrong(&location, v252[0]);
        if ((buf[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_270;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v252, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)&v112 + 80));
      uint64_t v138 = *(void *)(*(void *)&v112 + 56);
      if ((v138 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v138 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v139 = *(void *)(*(void *)&v112 + 64);
      if ((v139 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v139 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v140 = atomic_load(&realityio::tokens::ShaderGraphUtilityTokens);
      if (!v140) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ShaderGraphUtilityTokens_StaticTokenType>>::_TryToCreateData();
      }
      v141 = (atomic_uint *)(v138 & 0xFFFFFFFFFFFFFFF8);
      if ((v138 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v140 + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        id v243 = (id)pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v145 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          if ((v139 & 7) != 0)
          {
            if (atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed))unint64_t v146 = v139; {
            else
            }
              unint64_t v146 = v139 & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            unint64_t v146 = v139;
          }
          uint64_t v153 = 0;
          long long v154 = xmmword_23F7B8AF0;
          do
          {
            float v155 = *(double *)(v145 + 8 * v153);
            long long v230 = v154;
            *(float *)((unint64_t)&v230 & 0xFFFFFFFFFFFFFFF3 | (4 * (v153 & 3))) = v155;
            long long v154 = v230;
            ++v153;
          }
          while (v153 != 3);
          *(_OWORD *)std::string buf = v230;
          unint64_t v244 = v146;
          if ((v146 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            unint64_t v244 = v146 & 0xFFFFFFFFFFFFFFF8;
          }
          realityio::createCGColor((float32x4_t *)buf, &v244, (CGColorRef *)&v240);
          if ((v244 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v244 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v146 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          int v142 = 3;
          v141 = (atomic_uint *)(v138 & 0xFFFFFFFFFFFFFFF8);
        }
        else
        {
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
          {
            uint64_t v148 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
            if ((v139 & 7) != 0)
            {
              if (atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed))unint64_t v149 = v139; {
              else
              }
                unint64_t v149 = v139 & 0xFFFFFFFFFFFFFFF8;
            }
            else
            {
              unint64_t v149 = v139;
            }
            uint64_t v157 = 0;
            long long v158 = xmmword_23F7B8AF0;
            do
            {
              int v159 = *(_DWORD *)(v148 + 4 * v157);
              long long v231 = v158;
              *(_DWORD *)((unint64_t)&v231 & 0xFFFFFFFFFFFFFFF3 | (4 * (v157 & 3))) = v159;
              long long v158 = v231;
              ++v157;
            }
            while (v157 != 3);
            *(_OWORD *)std::string buf = v231;
            unint64_t v244 = v149;
            if ((v149 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              unint64_t v244 = v149 & 0xFFFFFFFFFFFFFFF8;
            }
            realityio::createCGColor((float32x4_t *)buf, &v244, (CGColorRef *)&v240);
            if ((v244 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v244 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v149 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v142 = 3;
          }
          else
          {
            if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
            {
              uint64_t v151 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
              if ((v139 & 7) != 0)
              {
                if (atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed))unint64_t v152 = v139; {
                else
                }
                  unint64_t v152 = v139 & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                unint64_t v152 = v139;
              }
              uint64_t v160 = 0;
              long long v161 = xmmword_23F7B8AF0;
              do
              {
                float v162 = *(double *)(v151 + 8 * v160);
                long long v232 = v161;
                *(float *)((unint64_t)&v232 & 0xFFFFFFFFFFFFFFF3 | (4 * (v160 & 3))) = v162;
                long long v161 = v232;
                ++v160;
              }
              while (v160 != 4);
              *(_OWORD *)std::string buf = v232;
              unint64_t v244 = v152;
              unint64_t v224 = v152 & 7;
              if ((v152 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                unint64_t v244 = v152 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            else
            {
              if (!pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
                goto LABEL_196;
              }
              uint64_t v156 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
              if ((v139 & 7) != 0)
              {
                if (atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed))unint64_t v152 = v139; {
                else
                }
                  unint64_t v152 = v139 & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                unint64_t v152 = v139;
              }
              uint64_t v163 = 0;
              long long v164 = xmmword_23F7B8AF0;
              do
              {
                int v165 = *(_DWORD *)(v156 + 4 * v163);
                long long v233 = v164;
                *(_DWORD *)((unint64_t)&v233 & 0xFFFFFFFFFFFFFFF3 | (4 * (v163 & 3))) = v165;
                long long v164 = v233;
                ++v163;
              }
              while (v163 != 4);
              *(_OWORD *)std::string buf = v233;
              unint64_t v244 = v152;
              unint64_t v224 = v152 & 7;
              if ((v152 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                unint64_t v244 = v152 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            realityio::createCGColor((float32x4_t *)buf, &v244, (CGColorRef *)&v240);
            if ((v244 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v244 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v224) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            int v142 = 4;
          }
        }
      }
      else
      {
LABEL_196:
        int v142 = 0;
        v240 = 0;
      }
      if ((v139 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v138 & 7) != 0) {
        atomic_fetch_add_explicit(v141, 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
      if (v240)
      {
        *(void *)std::string buf = location;
        if (v142 == 3) {
          objc_msgSend(MEMORY[0x263F6BC58], "nodeWithConstantColor3:name:error:");
        }
        else {
        uint64_t v131 = objc_msgSend(MEMORY[0x263F6BC58], "nodeWithConstantColor4:name:error:");
        }
        id v171 = *(id *)buf;
        id v172 = location;
        id location = v171;
LABEL_269:

        realityio::WrappedCFRef<CGColor *>::~WrappedCFRef(&v240);
LABEL_270:

        goto LABEL_271;
      }
      v167 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue(v166, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)&v112 + 80));
      unint64_t v244 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(v167);
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
        goto LABEL_266;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        uint64_t v182 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
        goto LABEL_290;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        uint64_t v184 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
        goto LABEL_293;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
        pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f();
LABEL_266:
        uint64_t v170 = realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix2f>();
        goto LABEL_294;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        uint64_t v196 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
        MEMORY[0x2455CE490](buf, v196);
        uint64_t v182 = (uint64_t)buf;
LABEL_290:
        uint64_t v170 = realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(v182);
        goto LABEL_294;
      }
      if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
      {
        uint64_t v198 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
        MEMORY[0x2455CE5D0](buf, v198);
        uint64_t v184 = (uint64_t)buf;
LABEL_293:
        uint64_t v170 = realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(v184);
LABEL_294:
        id v172 = (id)v170;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA()) {
          goto LABEL_316;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatf>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
LABEL_316:
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatd>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatd>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2d>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2f>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v205 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2i>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2i>(v205);
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3d>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3f>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v209 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3i>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3i>(v209);
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4d>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4f>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4f>();
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v213 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4i>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4i>(v213);
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v215 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec2h>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2h>(v215);
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v217 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec3h>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3h>(v217);
          goto LABEL_294;
        }
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA())
        {
          uint64_t v218 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfVec4h>((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
          uint64_t v170 = realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4h>(v218);
          goto LABEL_294;
        }
        id v172 = 0;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v252);
      if (v172)
      {
        v185 = (void *)MEMORY[0x263F6BC58];
        uint64_t v186 = *(void *)(*(void *)&v112 + 56);
        *(void *)std::string buf = v186;
        if ((v186 & 7) != 0)
        {
          v187 = (atomic_uint *)(v186 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v187, 2u, memory_order_relaxed) & 1) == 0) {
            *(void *)std::string buf = v187;
          }
        }
        uint64_t v188 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
        v252[0] = location;
        uint64_t v131 = [v185 nodeWithConstantVector:v172 type:v188 name:v121 error:v252];
        objc_storeStrong(&location, v252[0]);
        if ((buf[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*(void *)&v112 + 80));
        v189 = realityio::conversions::asString<pxrInternal__aapl__pxrReserved__::VtValue>((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)buf);
        if (v189)
        {
          v190 = (void *)MEMORY[0x263F6BC58];
          uint64_t v191 = *(void *)(*(void *)&v112 + 56);
          *(void *)std::string buf = v191;
          if ((v191 & 7) != 0)
          {
            v192 = (atomic_uint *)(v191 & 0xFFFFFFFFFFFFFFF8);
            if ((atomic_fetch_add_explicit(v192, 2u, memory_order_relaxed) & 1) == 0) {
              *(void *)std::string buf = v192;
            }
          }
          uint64_t v193 = realityio::conversions::usdToSGDataType(Type, (const std::type_info *)buf);
          v252[0] = location;
          uint64_t v131 = [v190 nodeWithConstantString:v189 type:v193 name:v121 error:v252];
          objc_storeStrong(&location, v252[0]);
          if ((buf[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          uint64_t v131 = 0;
        }

        id v172 = 0;
      }
      goto LABEL_269;
    }
    id v223 = *(id *)&v50[12];
    uint64_t v51 = (unsigned int *)v50[4];
    obja = (unsigned int *)v50[5];
    v220 = v50;
    char v52 = 0;
    if (v51 == obja) {
      goto LABEL_158;
    }
    v221 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50[2];
    while (1)
    {
      uint64_t v53 = std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(&a1[15], v51);
      if (v53)
      {
        uint64_t v54 = v53;
        if (*((unsigned char *)v53 + 72))
        {
          unint64_t v55 = objc_msgSend(NSString, "stringWithFormat:", @"Multiple connections to input '%s'.", pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v53 + 2)), v219);
          realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, v55, 8u, 0);
        }
        char v56 = NSString;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(v54 + 3));
        pxrInternal__aapl__pxrReserved__::SdfPath::StripNamespace();
        if (v256[9] >= 0) {
          unint64_t v57 = v254;
        }
        else {
          unint64_t v57 = *(unsigned char **)v254;
        }
        char v58 = [v56 stringWithUTF8String:v57];
        if ((v256[9] & 0x80000000) != 0) {
          operator delete(*(void **)v254);
        }
        long long v248 = 0u;
        long long v249 = 0u;
        long long v250 = 0u;
        long long v251 = 0u;
        int v59 = [*(id *)&a1[2] argumentsNode];
        std::string::size_type v60 = [v59 outputs];

        uint64_t v61 = [v60 countByEnumeratingWithState:&v248 objects:buf count:16];
        if (v61)
        {
          uint64_t v62 = *(void *)v249;
LABEL_96:
          uint64_t v63 = 0;
          while (1)
          {
            if (*(void *)v249 != v62) {
              objc_enumerationMutation(v60);
            }
            uint64_t v64 = *(void **)(*((void *)&v248 + 1) + 8 * v63);
            v65 = [v64 name];
            int v66 = [v58 isEqualToString:v65];

            if (v66) {
              break;
            }
            if (v61 == ++v63)
            {
              uint64_t v61 = [v60 countByEnumeratingWithState:&v248 objects:buf count:16];
              if (v61) {
                goto LABEL_96;
              }
              goto LABEL_148;
            }
          }
          id v67 = v64;
          id v68 = v223;
          uint64_t v69 = *v222;
          uint64_t v70 = *((unsigned int *)v222 + 2);
          id v71 = v67;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v69 + 176))(v69, v70)
            && ([v71 type] == 11 || objc_msgSend(v71, "type") == 12))
          {
            id v72 = [v71 name];
            MEMORY[0x2455CF810](&v242, [v72 UTF8String]);
            (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, std::string *))(*(void *)v69 + 144))(v254, v69, v70, &v242);
            if ((v242.__r_.__value_.__s.__data_[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v242.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }

            memset(&v242, 0, sizeof(v242));
            if ([v71 type] == 11)
            {
              (*(void (**)(void, void, unsigned char *, std::string *))(**(void **)v254 + 72))(*(void *)v254, *(unsigned int *)&v254[8], &v256[2], &v242);
            }
            else
            {
              v253[0] = 0;
              int64_t v82 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(void, void, unsigned char *, id *))(**(void **)v254 + 64))(*(void *)v254, *(unsigned int *)&v254[8], &v256[2], v253);
              if (((unint64_t)v253[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
                int v83 = (const std::string *)(((unint64_t)v253[0] & 0xFFFFFFFFFFFFFFF8) + 16);
              }
              else {
                int v83 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v82);
              }
              std::string::operator=(&v242, v83);
              if (((uint64_t)v253[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v253[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            uint64_t v84 = (void *)a1[27];
            unsigned int v85 = [v71 name];
            uint64_t v86 = [v84 objectForKeyedSubscript:v85];

            if (v86)
            {
              id v77 = 0;
            }
            else
            {
              std::string::size_type v87 = (void *)MEMORY[0x263F6BC58];
              if ((v242.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v88 = &v242;
              }
              else {
                uint64_t v88 = (std::string *)v242.__r_.__value_.__r.__words[0];
              }
              long long v89 = [NSString stringWithUTF8String:v88];
              uint64_t v90 = [v71 type];
              char v91 = [v71 name];
              v253[0] = 0;
              uint64_t v86 = [v87 nodeWithConstantString:v89 type:v90 name:v91 error:v253];
              id v77 = v253[0];

              if (!v77)
              {
                uint64_t v92 = (void *)a1[2];
                v252[0] = v86;
                uint64_t v93 = [MEMORY[0x263EFF8C0] arrayWithObjects:v252 count:1];
                unint64_t v244 = 0;
                [v92 insertNodes:v93 error:&v244];
                id v77 = (id)v244;

                uint64_t v94 = (void *)a1[27];
                std::string v95 = [v71 name];
                [v94 setObject:v86 forKeyedSubscript:v95];
              }
            }
            std::string::size_type v96 = [v86 outputs];
            std::string::size_type v78 = [v96 objectAtIndexedSubscript:0];

            if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v242.__r_.__value_.__l.__data_);
            }
            if ((v256[2] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v256[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else
          {
            id v77 = 0;
            std::string::size_type v78 = v71;
          }
          uint64_t v97 = (void *)a1[2];
          *(void *)v254 = v77;
          [v97 connect:v78 to:v68 error:v254];
          id v98 = *(id *)v254;

          id v99 = v98;
          id v100 = v99;
          char v101 = v100;
          if (v99)
          {
            realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, @"Failed to create material.", 0, v100);

            goto LABEL_156;
          }
          std::string v102 = *(id *)(realityio::logObjects((realityio *)v100) + 48);
          if (os_log_type_enabled(v102, OS_LOG_TYPE_INFO))
          {
            uint64_t v103 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v221);
            uint64_t v104 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v51);
            *(_DWORD *)v254 = 136315394;
            *(void *)&v254[4] = v103;
            __int16 v255 = 2080;
            *(void *)v256 = v104;
            _os_log_impl(&dword_23F4EA000, v102, OS_LOG_TYPE_INFO, "  Connected %s from input %s", v254, 0x16u);
          }

          char v52 = 1;
        }
LABEL_148:

LABEL_149:
      }
      else
      {
        int8x8_t v73 = a1[11];
        if (v73)
        {
          unint64_t v74 = bswap64(0x9E3779B97F4A7C55* (v51[1]+ ((v51[1]+ (unint64_t)*v51+ (v51[1] + (unint64_t)*v51) * (v51[1] + (unint64_t)*v51)) >> 1)));
          uint8x8_t v75 = (uint8x8_t)vcnt_s8(v73);
          v75.i16[0] = vaddlv_u8(v75);
          if (v75.u32[0] > 1uLL)
          {
            unint64_t v76 = v74;
            if (v74 >= *(void *)&v73) {
              unint64_t v76 = v74 % *(void *)&v73;
            }
          }
          else
          {
            unint64_t v76 = v74 & (*(void *)&v73 - 1);
          }
          int v79 = *(void **)(*(void *)&a1[10] + 8 * v76);
          if (v79)
          {
            for (uint64_t j = (void *)*v79; j; uint64_t j = (void *)*j)
            {
              unint64_t v81 = j[1];
              if (v81 == v74)
              {
                if (j[2] == *(void *)v51)
                {
                  uint64_t v105 = (void *)a1[2];
                  uint64_t v106 = j[12];
                  id v243 = 0;
                  [v105 connect:v106 to:v223 error:&v243];
                  id v107 = v243;
                  char v101 = v107;
                  if (!v107)
                  {
                    char v58 = *(id *)(realityio::logObjects(0) + 48);
                    char v52 = 1;
                    if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v108 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v221);
                      uint64_t v109 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v51);
                      *(_DWORD *)v254 = 136315394;
                      *(void *)&v254[4] = v108;
                      __int16 v255 = 2080;
                      *(void *)v256 = v109;
                      _os_log_impl(&dword_23F4EA000, v58, OS_LOG_TYPE_INFO, "  Internally connected %s to %s", v254, 0x16u);
                    }
                    goto LABEL_149;
                  }
                  realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, @"Failed to create material.", 0, v107);
LABEL_156:
                  char v52 = 0;
LABEL_157:

LABEL_158:
                  unint64_t v49 = v220;
                  v220[9].i8[0] = v52 & 1;
                  if (a1[4])
                  {
LABEL_347:
                    *(void *)std::string buf = &v238;
                    std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    *(void *)std::string buf = v239;
                    std::vector<realityio::mtlx::NeoShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
                    return;
                  }
                  goto LABEL_83;
                }
              }
              else
              {
                if (v75.u32[0] > 1uLL)
                {
                  if (v81 >= *(void *)&v73) {
                    v81 %= *(void *)&v73;
                  }
                }
                else
                {
                  v81 &= *(void *)&v73 - 1;
                }
                if (v81 != v76) {
                  break;
                }
              }
            }
          }
        }
      }
      v51 += 2;
      if (v51 == obja)
      {
        char v101 = 0;
        goto LABEL_157;
      }
    }
  }
}

void sub_23F7005AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::MtlxActionPayload::nodeFromGraph(id *this)
{
  if (!this[4])
  {
    uint64_t v2 = NSString;
    uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
    if (*(char *)(Name + 23) >= 0) {
      uint64_t v4 = Name;
    }
    else {
      uint64_t v4 = *(void *)Name;
    }
    unint64_t v5 = [v2 stringWithUTF8String:v4];
    id v6 = (void *)MEMORY[0x263F6BC58];
    id v7 = this[2];
    id v13 = 0;
    id v8 = [v6 nodeWithGraph:v7 name:v5 error:&v13];
    id v9 = v13;
    id v10 = v8;
    objc_storeStrong(this + 3, v8);
    if (v10)
    {
      id v11 = this[2];
      this[2] = 0;
    }
    if (v9) {
      realityio::mtlx::MtlxActionPayload::setError((pxrInternal__aapl__pxrReserved__::SdfPath *)this, @"Failed to import NodeGraph.", 3u, v9);
    }
    id v12 = this[25];
    this[25] = 0;

    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear((uint64_t)(this + 5));
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear((uint64_t)(this + 10));
  }
}

BOOL realityio::mtlx::MtlxActionPayload::isSiblingOf(realityio::mtlx::MtlxActionPayload *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v4 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*((void *)this + 1) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v4 + 8) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  if (*(void *)this == *(void *)a2) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v8, this);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(&v7, a2);
  BOOL v5 = v8 == v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  return v5;
}

uint64_t ___ZN9realityio4mtlx12_GLOBAL__N_19addInputsERKNSt3__16vectorINS0_13NeoShadeInputENS2_9allocatorIS4_EEEEPK7NSArrayIP7SGInputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload11InputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3 = [a2 name];
  uint64_t v4 = [v3 isEqualToString:**(void **)(a1 + 32)];

  return v4;
}

void sub_23F700A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeInput>(uint64_t a1, void *a2)
{
  uint64_t v15 = *a2;
  unsigned int v19 = *((_DWORD *)a2 + 2);
  BOOL v5 = a2 + 2;
  uint64_t v4 = (atomic_uint *)a2[2];
  uint64_t v23 = v4;
  if ((v4 & 7) != 0)
  {
    id v6 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v6;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **))(*(void *)v15 + 24))(v15, v19, &v23);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  uint64_t v16 = *a2;
  unsigned int v20 = *((_DWORD *)a2 + 2);
  uint64_t v7 = (atomic_uint *)a2[2];
  uint64_t v23 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v8;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **))(*(void *)v16 + 120))(v16, v20, &v23);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *a2;
  unsigned int v21 = *((_DWORD *)a2 + 2);
  id v9 = (atomic_uint *)a2[2];
  uint64_t v23 = v9;
  if ((v9 & 7) != 0)
  {
    id v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v10;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **))(*(void *)v17 + 128))(v17, v21, &v23);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v18 = *a2;
  unsigned int v22 = *((_DWORD *)a2 + 2);
  id v11 = (atomic_uint *)a2[2];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    id v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v12;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **, uint64_t))(*(void *)v18 + 104))(v18, v22, &v23, a1 + 56);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::conversions::castToSupportedType((realityio::conversions *)(a1 + 56), v13);
  (*(void (**)(void, void, void *, uint64_t, uint64_t))(*(void *)*a2 + 80))(*a2, *((unsigned int *)a2 + 2), v5, 1, a1 + 8);
  return a1;
}

void sub_23F700D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v15);
  if ((*v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v12);
  _Unwind_Resume(a1);
}

void sub_23F700DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  JUMPOUT(0x23F700DC8);
}

uint64_t ___ZN9realityio4mtlx12_GLOBAL__N_110addOutputsERKNSt3__16vectorINS0_14NeoShadeOutputENS2_9allocatorIS4_EEEEPK7NSArrayIP8SGOutputERNS2_13unordered_mapIN32pxrInternal__aapl__pxrReserved__7SdfPathENS0_17MtlxActionPayload12OutputRecordENSI_4HashENS2_8equal_toISI_EENS5_INS2_4pairIKSI_SK_EEEEEERU8__strongP8NSString_block_invoke(uint64_t a1, void *a2)
{
  unint64_t v3 = [a2 name];
  uint64_t v4 = [v3 isEqualToString:**(void **)(a1 + 32)];

  return v4;
}

void sub_23F700E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::MtlxActionPayload::Connectable::Connectable<realityio::mtlx::NeoShadeOutput>(uint64_t a1, void *a2)
{
  uint64_t v15 = *a2;
  unsigned int v19 = *((_DWORD *)a2 + 2);
  BOOL v5 = a2 + 2;
  uint64_t v4 = (atomic_uint *)a2[2];
  uint64_t v23 = v4;
  if ((v4 & 7) != 0)
  {
    id v6 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v6;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **))(*(void *)v15 + 24))(v15, v19, &v23);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  uint64_t v16 = *a2;
  unsigned int v20 = *((_DWORD *)a2 + 2);
  uint64_t v7 = (atomic_uint *)a2[2];
  uint64_t v23 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v8;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **))(*(void *)v16 + 120))(v16, v20, &v23);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *a2;
  unsigned int v21 = *((_DWORD *)a2 + 2);
  id v9 = (atomic_uint *)a2[2];
  uint64_t v23 = v9;
  if ((v9 & 7) != 0)
  {
    id v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v10;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **))(*(void *)v17 + 128))(v17, v21, &v23);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  uint64_t v18 = *a2;
  unsigned int v22 = *((_DWORD *)a2 + 2);
  id v11 = (atomic_uint *)a2[2];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    id v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v12;
    }
  }
  (*(void (**)(uint64_t, void, atomic_uint **, uint64_t))(*(void *)v18 + 104))(v18, v22, &v23, a1 + 56);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::conversions::castToSupportedType((realityio::conversions *)(a1 + 56), v13);
  (*(void (**)(void, void, void *, void, uint64_t))(*(void *)*a2 + 80))(*a2, *((unsigned int *)a2 + 2), v5, 0, a1 + 8);
  return a1;
}

void sub_23F701104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v15);
  if ((*v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath(v12);
  _Unwind_Resume(a1);
}

void sub_23F701194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  JUMPOUT(0x23F70118CLL);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * (a2 & 0xFFFFFFFFFFFFFFF8));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    id v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      id v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == (a2 & 0xFFFFFFFFFFFFFFF8)) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          id v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  id v13 = (char *)operator new(0x48uLL);
  v24[0] = v13;
  v24[1] = a1 + 16;
  *(void *)id v13 = 0;
  *((void *)v13 + 1) = v6;
  uint64_t v14 = *a3;
  *((void *)v13 + 2) = *a3;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v13 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    BOOL v17 = 1;
    if (v7 >= 3) {
      BOOL v17 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v7);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v20);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    void *v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v22 >= v7) {
          v22 %= v7;
        }
      }
      else
      {
        v22 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  id v10 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v10;
}

void sub_23F7014E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::TexcoordID>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F3477E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3477E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  if (**(void **)(a1 + 8))
  {
    uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24);
    objc_msgSend(NSString, "stringWithFormat:", @"Failed to create asset constant at %s.", pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16)));
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    realityio::mtlx::MtlxActionPayload::setError(v2, v3, 0xAu, **(void ***)(a1 + 8));
  }
}

uint64_t std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0,std::allocator<realityio::mtlx::MtlxActionPayload::createInputConstant(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::mtlx::MtlxActionPayload::Connectable const&)::$_0>,void ()(void)>::target_type()
{
}

id realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix2f>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    char v3 = v2;
    uint64_t v4 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
    uint64_t v5 = 0;
    char v6 = 1;
    do
    {
      char v7 = v6;
      uint8x8_t v8 = realityio::conversions::asScalar<float>();
      [v4 setObject:v8 atIndexedSubscript:v5];

      char v6 = 0;
      uint64_t v5 = 1;
    }
    while ((v7 & 1) != 0);
    [v0 setObject:v4 atIndexedSubscript:v1];

    char v2 = 0;
    uint64_t v1 = 1;
  }
  while ((v3 & 1) != 0);

  return v0;
}

id realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix3f>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:3];
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v4 = [MEMORY[0x263EFF980] arrayWithCapacity:3];
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      char v7 = realityio::conversions::asScalar<float>();
      [v4 setObject:v7 atIndexedSubscript:v5];

      ++v5;
      v6 += 12;
    }
    while (v5 != 3);
    [v2 setObject:v4 atIndexedSubscript:i];

    a1 += 4;
  }

  return v2;
}

id realityio::conversions::asScalarMatrix<pxrInternal__aapl__pxrReserved__::GfMatrix4f>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v4 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
    uint64_t v5 = 0;
    uint64_t v6 = a1;
    do
    {
      char v7 = realityio::conversions::asScalar<float>();
      [v4 setObject:v7 atIndexedSubscript:v5];

      ++v5;
      v6 += 16;
    }
    while (v5 != 4);
    [v2 setObject:v4 atIndexedSubscript:i];

    a1 += 4;
  }

  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatd>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
  uint64_t v1 = realityio::conversions::asScalar<double>();
  [v0 setObject:v1 atIndexedSubscript:0];

  uint64_t v2 = 0;
  do
  {
    char v3 = realityio::conversions::asScalar<double>();
    [v0 setObject:v3 atIndexedSubscript:++v2];
  }
  while (v2 != 3);

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfQuatf>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
  uint64_t v1 = realityio::conversions::asScalar<float>();
  [v0 setObject:v1 atIndexedSubscript:0];

  uint64_t v2 = 0;
  do
  {
    char v3 = realityio::conversions::asScalar<float>();
    [v0 setObject:v3 atIndexedSubscript:++v2];
  }
  while (v2 != 3);

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2d>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    char v3 = v2;
    uint64_t v4 = realityio::conversions::asScalar<double>();
    [v0 setObject:v4 atIndexedSubscript:v1];

    char v2 = 0;
    uint64_t v1 = 1;
  }
  while ((v3 & 1) != 0);

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2f>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    char v3 = v2;
    uint64_t v4 = realityio::conversions::asScalar<float>();
    [v0 setObject:v4 atIndexedSubscript:v1];

    char v2 = 0;
    uint64_t v1 = 1;
  }
  while ((v3 & 1) != 0);

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
  uint64_t v3 = 0;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v6 = realityio::conversions::asScalar<int>(*(unsigned int *)(a1 + 4 * v3));
    [v2 setObject:v6 atIndexedSubscript:v3];

    char v4 = 0;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) != 0);

  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:3];
  for (uint64_t i = 0; i != 3; ++i)
  {
    char v2 = realityio::conversions::asScalar<double>();
    [v0 setObject:v2 atIndexedSubscript:i];
  }

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3f>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:3];
  for (uint64_t i = 0; i != 3; ++i)
  {
    char v2 = realityio::conversions::asScalar<float>();
    [v0 setObject:v2 atIndexedSubscript:i];
  }

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:3];
  for (uint64_t i = 0; i != 3; ++i)
  {
    char v4 = realityio::conversions::asScalar<int>(*(unsigned int *)(a1 + 4 * i));
    [v2 setObject:v4 atIndexedSubscript:i];
  }

  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4d>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v2 = realityio::conversions::asScalar<double>();
    [v0 setObject:v2 atIndexedSubscript:i];
  }

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4f>()
{
  uint64_t v0 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v2 = realityio::conversions::asScalar<float>();
    [v0 setObject:v2 atIndexedSubscript:i];
  }

  return v0;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v4 = realityio::conversions::asScalar<int>(*(unsigned int *)(a1 + 4 * i));
    [v2 setObject:v4 atIndexedSubscript:i];
  }

  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
  uint64_t v3 = 0;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v6 = realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_WORD *)(a1 + 2 * v3));
    [v2 setObject:v6 atIndexedSubscript:v3];

    char v4 = 0;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) != 0);

  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:3];
  for (uint64_t i = 0; i != 3; ++i)
  {
    char v4 = realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_WORD *)(a1 + 2 * i));
    [v2 setObject:v4 atIndexedSubscript:i];
  }

  return v2;
}

id realityio::conversions::asScalarVector<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1)
{
  char v2 = [MEMORY[0x263EFF980] arrayWithCapacity:4];
  for (uint64_t i = 0; i != 4; ++i)
  {
    char v4 = realityio::conversions::asScalar<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_WORD *)(a1 + 2 * i));
    [v2 setObject:v4 atIndexedSubscript:i];
  }

  return v2;
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *(void *)a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = a1 + 16;
  float v15 = (char *)operator new(0x68uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *(void *)float v15 = 0;
  *((void *)v15 + 1) = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 4, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 5, a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 6, (_DWORD *)a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 7, (_DWORD *)(a4 + 4));
  *((_OWORD *)v15 + 2) = *(_OWORD *)(a4 + 8);
  *((void *)v15 + 6) = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a4 + 32);
  *(void *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  *(void *)(a4 + 32) = 0;
  v15[72] = *(unsigned char *)(a4 + 48);
  *(void *)(a4 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)v15 + 10, (void *)(a4 + 56));
  uint64_t v16 = *(void *)(a4 + 72);
  *(void *)(a4 + 72) = 0;
  *((void *)v15 + 12) = v16;
  char v26 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v25[0] = *v23;
    *uint64_t v23 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v24 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v25[0];
    }
  }
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
}

void sub_23F702498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::InputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::SdfPath,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t a4)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *(void *)a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = a1 + 16;
  float v15 = (char *)operator new(0x68uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *(void *)float v15 = 0;
  *((void *)v15 + 1) = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 4, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 5, a3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 6, (_DWORD *)a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 7, (_DWORD *)(a4 + 4));
  *((_OWORD *)v15 + 2) = *(_OWORD *)(a4 + 8);
  *((void *)v15 + 6) = *(void *)(a4 + 24);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a4 + 32);
  *(void *)(a4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  *(void *)(a4 + 32) = 0;
  v15[72] = *(unsigned char *)(a4 + 48);
  *(void *)(a4 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue((void *)v15 + 10, (void *)(a4 + 56));
  uint64_t v16 = *(void *)(a4 + 72);
  *(void *)(a4 + 72) = 0;
  *((void *)v15 + 12) = v16;
  char v26 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v25[0] = *v23;
    *uint64_t v23 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v14;
    if (*(void *)v25[0])
    {
      unint64_t v24 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v25[0];
    }
  }
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
}

void sub_23F70277C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::mtlx::MtlxActionPayload::OutputRecord>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrTfWeakPtrGetTypeID()
{
  if (RIOPxrTfWeakPtrGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrTfWeakPtrGetTypeID::onceToken, &__block_literal_global_31);
  }
  return RIOPxrTfWeakPtrGetTypeID::typeID;
}

void __RIOPxrTfWeakPtrGetTypeID_block_invoke()
{
  if (!RIOPxrTfWeakPtrGetTypeID::typeID) {
    RIOPxrTfWeakPtrGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrTfWeakPtrRefGetBase(uint64_t result)
{
  if (result) {
    return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(result + 16));
  }
  return result;
}

uint64_t _RIOPxrTfWeakPtrCFFinalize(uint64_t (***a1)(void))
{
  return (*a1[2])();
}

uint64_t _RIOPxrTfWeakPtrCFEqual(const void *a1, const void *a2)
{
  return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator==();
}

unint64_t _RIOPxrTfWeakPtrCFHash(char *a1)
{
  return (unint64_t)pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetUniqueIdentifier((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 16)) >> 3;
}

CFStringRef _RIOPxrTfWeakPtrCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrTfWeakPtr %p>", a1);
}

CFStringRef _RIOPxrTfWeakPtrCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrTfWeakPtr %p>", a1);
}

uint64_t RIOPxrUsdAttributeSetValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = 0;
  }
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v7, (uint64_t *)(v3 + 8), (_DWORD *)(v3 + 16));
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
    }
    if (IsValid)
    {
      char v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)v3);
      std::recursive_mutex::lock(v5);
      uint64_t v2 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      std::recursive_mutex::unlock(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_23F7029D0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(realityio::UsdLayerMutexTracker *a1)
{
  uint64_t v2 = realityio::UsdLayerMutexTracker::instance(a1);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v14, a1);
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v14);
    uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v3);
    uint64_t v5 = EditTarget[1];
    uint64_t v12 = *EditTarget;
    uint64_t v13 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
    uint64_t v6 = v15;
    if (v15 && atomic_fetch_add_explicit((atomic_uint *volatile)(v15 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  double v7 = realityio::UsdLayerMutexTracker::writeMutexForLayer((uint64_t)v2, &v12);
  uint64_t v9 = v8;
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t, double))(*(void *)v10 + 8))(v10, v7);
  }
  return v9;
}

void sub_23F702B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, uint64_t a12)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdAttributeCopyValue(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v4, (uint64_t *)(a1 + 32), (_DWORD *)(a1 + 40));
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v4);
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    if (v5) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
    }
    if (IsValid)
    {
      uint64_t v5 = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()) {
        uint64_t v1 = RIOPxrVtValueCreate<pxrInternal__aapl__pxrReserved__::VtValue &>((const pxrInternal__aapl__pxrReserved__::VtValue *)v4);
      }
      else {
        uint64_t v1 = 0;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

void sub_23F702C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)va);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeCopyTypeName(uint64_t a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&TypeName, (uint64_t *)(a1 + 32), (_DWORD *)(a1 + 40));
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&TypeName);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  if (IsValid) {
    Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24));
  }
  else {
LABEL_8:
  }
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  return RIOPxrSdfValueTypeNameCreate<pxrInternal__aapl__pxrReserved__::SdfValueTypeName const&>(&TypeName);
}

void sub_23F702D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrUsdAttributeGetVariability(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v4, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v4);
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
    if (v5) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
    }
    if (IsValid)
    {
      int Variability = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
      if (Variability == 2) {
        return 2;
      }
      else {
        return Variability == 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_23F702E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrUsdAttributeCopyColorSpace(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v3, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v3);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    if (v4) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
    }
    if (IsValid)
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace(&v3, (pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
      __n128 result = RIOPxrTfTokenCreate<pxrInternal__aapl__pxrReserved__::TfToken>(&v3);
      if ((v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_23F702EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void RIOPxrUsdAttributeSetColorSpace(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a1 + 24;
  }
  else {
    uint64_t v2 = 0;
  }
  if (a1 && a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v6, (uint64_t *)(v2 + 8), (_DWORD *)(v2 + 16));
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6);
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
    if (v7) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
    }
    if (IsValid)
    {
      uint64_t v5 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)v2);
      std::recursive_mutex::lock(v5);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 16));
      std::recursive_mutex::unlock(v5);
    }
  }
}

void sub_23F702FE0(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeHasColorSpace(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v3, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v3);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    if (v4) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
    }
    if (IsValid) {
      return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_23F7030A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrUsdAttributeClearColorSpace(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v7, (uint64_t *)(a1 + 32), (_DWORD *)(a1 + 40));
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  if ((IsValid & 1) == 0) {
    return 0;
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24);
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)(a1 + 24));
  std::recursive_mutex::lock(v4);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearColorSpace(v3);
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_23F70317C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeHasValue(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v3, (uint64_t *)(result + 32), (_DWORD *)(result + 40));
    char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v3);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v5);
    if (v4) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
    }
    if (IsValid) {
      return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v1 + 24));
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_23F703244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t RIOPxrUsdAttributeHasAuthoredValue(uint64_t a1)
{
  if (a1) {
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24));
  }
  else {
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(0);
  }
}

void RIOPxrUsdAttributeBlock(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(v1);

  std::recursive_mutex::unlock(v2);
}

void sub_23F7032BC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeClear(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(v1);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_23F703320(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void RIOPxrUsdAttributeClearAll(uint64_t a1)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a1) {
    uint64_t v1 = a1 + 24;
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>((realityio::UsdLayerMutexTracker *)v1);
  std::recursive_mutex::lock(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v1);
  pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata((uint64_t *)&v25, (pxrInternal__aapl__pxrReserved__::UsdObject *)v1);
  uint64_t v3 = v25;
  if (v25 != v26)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 4));
      uint64_t v4 = v3[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = (void **)v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void **)v3[2];
          BOOL v6 = *v5 == v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != v26);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v21, (uint64_t *)(v1 + 8), (_DWORD *)(v1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v19, (pxrInternal__aapl__pxrReserved__::UsdObject *)v21);
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v19);
  uint64_t EditTarget = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v7);
  uint64_t v9 = EditTarget;
  uint64_t v10 = EditTarget[1];
  uint64_t v27 = *EditTarget;
  uint64_t v28 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::_Data(v29, (uint64_t)(EditTarget + 2));
  long long v30 = *(_OWORD *)(v9 + 7);
  uint64_t v11 = v20;
  if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 1u, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v1, &v17);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPropertySpecForScenePath(&v18, (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)&v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v19);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(&v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v18);
  MEMORY[0x2455CF9C0](&v17, v12, &v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
  pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v19);
  uint64_t v15 = v17;
  if (v17) {
    atomic_fetch_add(v17, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields();
  MEMORY[0x2455CF7B0](&v15);
  MEMORY[0x2455CF7B0](&v17);
  MEMORY[0x2455CF7B0](&v18);
  uint64_t v13 = v20;
  if (v20 && atomic_fetch_add_explicit((atomic_uint *volatile)(v20 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)v29);
  uint64_t v14 = v28;
  if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::VtValue>>>::destroy((uint64_t)&v25, v26[0]);
  std::recursive_mutex::unlock(v2);
}

void sub_23F703648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFMutableArrayRef RIOPxrUsdAttributeCopyTimeSamples(uint64_t a1)
{
  if (a1) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples();
  }
  return CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
}

void sub_23F70389C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RIOPxrUsdAttributeAddConnection(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection();
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_23F703924(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeRemoveConnection(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v3);
  std::recursive_mutex::lock(v4);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 16));
  std::recursive_mutex::unlock(v4);
  return v5;
}

void sub_23F703998(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeSetConnections(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  unint64_t v16 = 0;
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v5 = 0;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      uint64_t v7 = ValueAtIndex + 4;
      uint64_t v8 = v15;
      if ((unint64_t)v15 >= v16)
      {
        uint64_t v9 = (_DWORD *)std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::SdfPath const&>(&v14, v7);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v15, v7);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v8 + 1, ValueAtIndex + 5);
        uint64_t v9 = v8 + 2;
      }
      uint64_t v15 = v9;
      ++v5;
    }
    while (Count != v5);
  }
  if (a1) {
    uint64_t v10 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v10);
  std::recursive_mutex::lock(v11);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections();
  std::recursive_mutex::unlock(v11);
  float v17 = (void **)&v14;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v17);
  return v12;
}

void sub_23F703AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  std::recursive_mutex::unlock(v12);
  a12 = &a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeClearConnections(uint64_t a1)
{
  if (a1) {
    uint64_t v1 = (realityio::UsdLayerMutexTracker *)(a1 + 24);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = (std::recursive_mutex *)realityio::writeMutexForUsdObject<pxrInternal__aapl__pxrReserved__::UsdAttribute>(v1);
  std::recursive_mutex::lock(v2);
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(v1);
  std::recursive_mutex::unlock(v2);
  return v3;
}

void sub_23F703B28(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeCopyConnections()
{
  memset(v1, 0, sizeof(v1));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections();
  uint64_t v2 = (void **)v1;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&v2);
  return 0;
}

void sub_23F703C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrUsdAttributeHasAuthoredConnections(uint64_t a1)
{
  if (a1) {
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(a1 + 24));
  }
  else {
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(0);
  }
}

uint64_t realityio::TextEntityBuilder::kOutputName(realityio::TextEntityBuilder *this)
{
  {
    operator new();
  }
  return realityio::TextEntityBuilder::kOutputName(void)::kOutputName;
}

void sub_23F703CF8(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::TextEntityBuilder *realityio::TextEntityBuilder::TextEntityBuilder(realityio::TextEntityBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "TextEntityBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTextEntityBuilderIdentifier);
  realityio::generateTextPrimDirtyStageSubscription(&v5);
  v12[0] = &unk_26F347960;
  uint64_t v12[3] = v12;
  v11[0] = &unk_26F3479E0;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F3478E8;
  *((void *)this + 35) = 0;
  return this;
}

void sub_23F703E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void *realityio::TextEntityBuilder::run(void *this, realityio::Inputs *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!this[35])
  {
    uint64_t v3 = this;
    uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)this);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v4, (uint64_t)v16);
    if (v16[0])
    {
      uint64_t v15 = v17;
      if (v17)
      {
        RERetain();
        uint64_t v5 = *((void *)a2 + 6);
        *(void *)&long long buf = &unk_26F347A60;
        *((void *)&buf + 1) = v3;
        uint64_t v19 = &v15;
        p_long long buf = (unint64_t)&buf;
        (*(void (**)(uint64_t, long long *))(*(void *)v5 + 16))(v5, &buf);
        BOOL v6 = (realityio::TextEntityBuilder *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&buf);
        uint64_t v8 = v3[2];
        uint64_t v7 = (std::__shared_weak_count *)v3[3];
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v9 = (long long *)realityio::TextEntityBuilder::kOutputName(v6);
        realityio::Outputs::storeValue<realityio::WrappedRERef<REEntity *> &>(v8, v9, v3 + 35);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
LABEL_16:
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v15);
        return (void *)realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v16);
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    char v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&buf, v10, (realityio::Inputs *)((char *)a2 + 32));
    PrimPath = pxrInternal__aapl__pxrReserved__::UsdObject::GetPrimPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&buf);
    if ((p_buf & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(p_buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
    uint64_t v12 = (realityio *)*((void *)&buf + 1);
    if (*((void *)&buf + 1)) {
      uint64_t v12 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
    }
    uint64_t v13 = *(id *)(realityio::logObjects(v12) + 24);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)PrimPath);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = Text;
      _os_log_error_impl(&dword_23F4EA000, v13, OS_LOG_TYPE_ERROR, "Unable to create text entity at path (%s) because the parent entity does not exist.\n", (uint8_t *)&buf, 0xCu);
    }

    goto LABEL_16;
  }
  return this;
}

void sub_23F7040D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  uint64_t v7 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((uint64_t *)va);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *realityio::TextEntityBuilder::clear(realityio::TextEntityBuilder *this, realityio::Inputs *a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = (const void **)realityio::TextEntityBuilder::kOutputName(this);
  std::mutex::lock((std::mutex *)(v5 + 64));
  if (v5 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v5 + 40, v6))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v5 + 40), v6); {
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v5, (unsigned __int8 *)v6);
  }
  std::mutex::unlock((std::mutex *)(v5 + 64));
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v7 = *((void *)a2 + 6);
  v10[0] = &unk_26F347AE0;
  v10[1] = this;
  void v10[3] = v10;
  (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v10);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v10);
  v10[0] = 0;
  uint64_t v8 = *((void *)this + 35);
  if (v8)
  {
    *((void *)this + 35) = 0;
    v10[0] = v8;
  }
  return realityio::WrappedRERef<REEntity *>::~WrappedRERef(v10);
}

void sub_23F7042AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::TextEntityBuilder::~TextEntityBuilder(realityio::TextEntityBuilder *this)
{
  realityio::TextEntityBuilder::~TextEntityBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F3478E8;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)this + 35);
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26F347960;
  return result;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F347960;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), &v7, &v8);
  BOOL v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F704554(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26F3479E0;
  return result;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3479E0;
}

void std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1065353216;
  uint64_t v4 = realityio::TextEntityBuilder::kOutputName((realityio::TextEntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 280), &v7, &v8);
  BOOL v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F704750(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TextEntityBuilder::TextEntityBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F347A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F347A60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = REEntityCreate();
  RENetworkComponentGetComponentType();
  v6[0] = &unk_26F33C750;
  void v6[3] = v6;
  uint64_t v3 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v6, v3);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v6);
  v6[0] = v2;
  if (v2) {
    RERetain();
  }
  uint64_t v4 = *(void *)(v1 + 280);
  if (v4 != v2)
  {
    *(void *)(v1 + 280) = v2;
    v6[0] = v4;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v6);
  RERelease();
  REEntitySetParent();
  return REEntitySetName();
}

void sub_23F70497C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347AE0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347AE0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 280);
  if (result) {
    return REEntitySetParent();
  }
  return result;
}

uint64_t std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TextEntityBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::LiveSceneManager::LiveSceneManager(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F347B60;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a2;
  *(void *)(a1 + 32) = *a4;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(a1 + 32));
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 48) = 0;
  MEMORY[0x2455D2A10]();
  MEMORY[0x2455D2A10](a1 + 152);
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  *(void *)(a1 + 232) = a6;
  *(void *)(a1 + 240) = a7;
  *(void *)(a1 + 248) = a5;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 288) = a8;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = a1 + 312;
  *(void *)(a1 + 328) = 850045863;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  dispatch_queue_t v13 = dispatch_queue_create("com.apple.realityio.live-scene-update-queue", 0);
  uint64_t v14 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = v13;

  if (*(_DWORD *)(a1 + 288) == 1)
  {
    unint64_t v16 = *(NSObject **)realityio::logObjects(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_23F4EA000, v16, OS_LOG_TYPE_DEFAULT, "ImportSession using TargetGeneration for additional builder dirty propagation \"RealityIO/TargetDirtying\" FeatureFlag", buf, 2u);
    }
  }
  return a1;
}

void sub_23F704C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::mutex *a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, std::recursive_mutex *a16, uint64_t a17)
{
  std::vector<realityio::LiveSceneManager::AssetRecord>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  char v26 = *(std::__shared_weak_count **)(v17 + 496);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v17 + 480);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v28 = *v19;
  uint64_t *v19 = 0;
  if (v28) {
    std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](v28);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v17 + 424));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v20);
  std::mutex::~mutex(v24);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy(v23, *(void **)(v17 + 312));
  a17 = v22;
  std::vector<realityio::LiveSceneManager::CompatibilityFault>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);

  std::recursive_mutex::~recursive_mutex(v21);
  std::recursive_mutex::~recursive_mutex(a16);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v25 + 2);
  uint64_t v29 = *(void *)(v17 + 48);
  *(void *)(v17 + 48) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *v25;
  *char v25 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v18);
  uint64_t v31 = *(std::__shared_weak_count **)(v17 + 16);
  if (v31) {
    std::__shared_weak_count::__release_weak(v31);
  }
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::~LiveSceneManager(realityio::LiveSceneManager *this)
{
  *(void *)this = &unk_26F347B60;
  uint64_t v2 = *((void *)this + 37);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v9 = (void **)((char *)this + 504);
  std::vector<realityio::LiveSceneManager::AssetRecord>::__destroy_vector::operator()[abi:ne180100](&v9);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 62);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 60);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v5) {
    std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](v5);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 53);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 49);
  std::mutex::~mutex((std::mutex *)((char *)this + 328));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<realityio::Builder>>>>::destroy((uint64_t)this + 304, *((void **)this + 39));
  uint64_t v9 = (void **)((char *)this + 256);
  std::vector<realityio::LiveSceneManager::CompatibilityFault>::__destroy_vector::operator()[abi:ne180100](&v9);

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 152));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 88));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 7);
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)this + 4);
  std::string::size_type v8 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

{
  uint64_t vars8;

  realityio::LiveSceneManager::~LiveSceneManager(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::LiveSceneManager::performBlockLaterOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2)
  {
    return std::vector<std::function<void ()(void)>>::push_back[abi:ne180100]((uint64_t *)(v2 + 24), a2);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
    return v5();
  }
}

uint64_t std::vector<std::function<void ()(void)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    unint64_t v16 = &v14[32 * v10];
    uint64_t v18 = &v14[32 * v13];
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    uint64_t v17 = v16 + 32;
    std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::function<void ()(void)>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_23F7050A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t realityio::LiveSceneManager::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 472);
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 16);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    unint64_t v6 = *(uint64_t (**)(void))(*(void *)v5 + 48);
    return v6();
  }
}

uint64_t realityio::LiveSceneManager::enableEntityOnCompletion(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 464);
  uint64_t v3 = (uint64_t *)v2[14];
  if ((unint64_t)v3 >= v2[15])
  {
    uint64_t result = std::vector<realityio::WrappedRERef<REEntity *>>::__push_back_slow_path<realityio::WrappedRERef<REEntity *> const&>(v2 + 13, a2);
  }
  else
  {
    uint64_t v4 = *a2;
    *uint64_t v3 = *a2;
    if (v4) {
      RERetain();
    }
    uint64_t result = (uint64_t)(v3 + 1);
    v2[14] = (uint64_t)(v3 + 1);
  }
  v2[14] = result;
  return result;
}

void sub_23F7051AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348090;
  v4[1].__shared_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E4A8;
  v4[2].__vftable = 0;
  v4[2].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  uint64_t v7 = *a2;
  realityio::WrappedRERef<REAsset *>::operator=(&v4[1].__shared_owners_, &v7);
  uint64_t v5 = *(void *)(*(void *)(a1 + 464) + 128);
  *(void *)&long long v6 = v4 + 1;
  *((void *)&v6 + 1) = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::AssetLoadTracker::add(v5, &v6);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_23F705284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::performLiveSceneUpdateMaybeAsync(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 16)
    && REEngineGetServiceLocator()
    && MEMORY[0x2455CDC30]())
  {
    uint64_t v4 = REAssetManagerGetEngineQueue();
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (*(unsigned char *)(a2 + 64)) {
    dispatch_assert_queue_V2(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5 || (long long v6 = std::__shared_weak_count::lock(v5)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v14 = (const void *)(*(void *)(a1 + 24) - 16);
  CFRetain(v14);
  std::string::size_type v8 = *(const void **)(*(void *)(a1 + 24) + 8);
  unint64_t v13 = v8;
  if (v8) {
    CFRetain(v8);
  }
  std::mutex::lock((std::mutex *)(a1 + 328));
  if (!*(void *)(a1 + 464))
  {
    std::function<void ()(void)>::operator=((void *)(a1 + 392), a2);
    std::function<void ()(void)>::operator=((void *)(a1 + 424), a2 + 32);
    *(_WORD *)(a1 + 456) = *(_WORD *)(a2 + 64);
    uint64_t v11 = operator new(0x88uLL);
    v11[1] = 0;
    v11[2] = 0;
    *uint64_t v11 = &unk_26F3480E0;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    v11[3] = &unk_26F348130;
    MEMORY[0x2455D2A10](v11 + 4);
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    v11[3] = &unk_26F347BE8;
    v11[16] = a1;
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 496);
    *(void *)(a1 + 488) = v11 + 3;
    *(void *)(a1 + 496) = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    operator new();
  }
  uint64_t v10 = *(NSObject **)realityio::logObjects(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_DEFAULT, "Attempting to start a live update while update already in progress -- queuing another.", buf, 2u);
  }
  *(unsigned char *)(a1 + 457) = 1;
  std::mutex::unlock((std::mutex *)(a1 + 328));
  realityio::WrappedCFRef<void const*>::~WrappedCFRef(&v13);
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(&v14);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F705774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v12 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, const void *);
  std::unique_ptr<realityio::AsyncUpdateEngineQueueManager>::reset[abi:ne180100]((uint64_t *)va2);
  realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)va1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);

  _Unwind_Resume(a1);
}

const void **realityio::WrappedCFRef<RIOImportSession *>::operator=(const void **a1, const void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      CFRelease(v3);
      uint64_t v4 = *a2;
    }
    *a1 = v4;
    if (v4) {
      CFRetain(v4);
    }
  }
  return a1;
}

void ___ZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  v4[0] = *(void *)(a1 + 40);
  v4[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::LiveSceneManager::updateLiveSceneImpl(v2, v4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(unsigned char *)(a1 + 56)) {
    realityio::SyncUpdateEngineQueueManager::stopYieldEngineQueueExecution(*(realityio::SyncUpdateEngineQueueManager **)(a1 + 40));
  }
}

void sub_23F7058F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, long long a10, long long a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, long long a16, uint64_t a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    a9 = MEMORY[0x263F906F8] + 16;
    uint64_t v21 = *((void *)exception_ptr + 5);
    long long v22 = *(_OWORD *)(exception_ptr + 24);
    a10 = *(_OWORD *)(exception_ptr + 8);
    a11 = v22;
    a12 = v21;
    std::__shared_weak_count __p = 0;
    a14 = 0;
    a15 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *((const void **)exception_ptr + 6), *((void *)exception_ptr + 7), (uint64_t)(*((void *)exception_ptr + 7) - *((void *)exception_ptr + 6)) >> 3);
    if (exception_ptr[95] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a16, *((const std::string::value_type **)exception_ptr + 9), *((void *)exception_ptr + 10));
    }
    else
    {
      long long v23 = *(_OWORD *)(exception_ptr + 72);
      a17 = *((void *)exception_ptr + 11);
      a16 = v23;
    }
    __cxa_begin_catch(exception_object);
    pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames();
    MEMORY[0x2455CED20](&a9);
    __cxa_end_catch();
    JUMPOUT(0x23F7058D0);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F7059FC()
{
}

uint64_t __copy_helper_block_ea8_32c99_ZTSKZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoEE3__0(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

void __destroy_helper_block_ea8_32c99_ZTSKZN9realityio16LiveSceneManager32performLiveSceneUpdateMaybeAsyncENS0_17UpdateFramingInfoEE3__0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *realityio::LiveSceneManager::updateLiveScene(realityio::LiveSceneManager *this, unsigned __int8 a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v7[0] = &unk_26F3482B8;
  v7[1] = this;
  uint64_t v7[3] = v7;
  v8[0] = &unk_26F348338;
  v8[3] = v8;
  __int16 v9 = a2;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)v7);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v5, (uint64_t)v8);
  __int16 v6 = v9;
  realityio::LiveSceneManager::performLiveSceneUpdateMaybeAsync((uint64_t)this, (uint64_t)v4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v8);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
}

void sub_23F705B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::updateAsset(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, unsigned __int8 a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  __int16 v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&buf, v6, a2);
  char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&buf);
  if ((p_buf & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(p_buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
  uint64_t v8 = (realityio *)*((void *)&buf + 1);
  if (*((void *)&buf + 1)) {
    uint64_t v8 = (realityio *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&buf + 1));
  }
  if (IsValid)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v12, (_DWORD *)a2 + 1);
    uint64_t v13 = a1;
    p_long long buf = 0;
    *(void *)&long long buf = &unk_26F3483B8;
    DWORD2(buf) = v11;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    HIDWORD(buf) = v12;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    uint64_t v18 = v13;
    p_long long buf = (unint64_t)&buf;
    v20[3] = 0;
    __int16 v21 = a3;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v11);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)&buf);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v20);
    __int16 v16 = v21;
    realityio::LiveSceneManager::performLiveSceneUpdateMaybeAsync(a1, (uint64_t)v14);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v15);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v14);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v20);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&buf);
  }
  else
  {
    uint64_t v9 = *(id *)(realityio::logObjects(v8) + 16);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = Text;
      _os_log_impl(&dword_23F4EA000, v9, OS_LOG_TYPE_DEFAULT, "Invalid Prim for updateAsset \"%s\"", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_23F705DA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *realityio::LiveSceneManager::addAsset(uint64_t *a1, uint64_t *a2, uint64_t a3, _DWORD *a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(unsigned char *)(a3 + 23)) {
LABEL_5:
  }
    REAssetSetMetadataString();
LABEL_6:
  uint64_t v11 = *a2;
  if (v11) {
    RERetain();
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v13, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v14, a4 + 1);
  unint64_t v8 = a1[64];
  if (v8 >= a1[65])
  {
    uint64_t v9 = std::vector<realityio::LiveSceneManager::AssetRecord>::__push_back_slow_path<realityio::LiveSceneManager::AssetRecord>(a1 + 63, (uint64_t)&v11);
  }
  else
  {
    std::vector<realityio::LiveSceneManager::AssetRecord>::__construct_one_at_end[abi:ne180100]<realityio::LiveSceneManager::AssetRecord>((uint64_t)(a1 + 63), (uint64_t)&v11);
    uint64_t v9 = v8 + 40;
  }
  a1[64] = v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v11);
}

void sub_23F705F54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::AssetRecord::~AssetRecord(void **this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 4));
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this);
}

void realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *a2;
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken const&>(*(void *)a1, v5, v5);
  if ((v6 & 1) == 0) {
    return;
  }
  if (!**(unsigned char **)(a1 + 8)
    || (pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) == 0
    && !pxrInternal__aapl__pxrReserved__::TfToken::operator==())
  {
    int v12 = (realityio::DirtyStageSubscription *)(*a2)[1];
    uint64_t v11 = (std::__shared_weak_count *)(*a2)[2];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (**(unsigned char **)(a1 + 8) != ((int)realityio::DirtyStageSubscription::numberOfStageMetadataOnlyPredicates(v12) == (uint64_t)(*((void *)v12 + 2) - *((void *)v12 + 1)) >> 4)) {
      goto LABEL_60;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40)))
    {
      int v14 = *(uint64_t **)(v4 + 40);
      uint64_t v13 = *(void *)(v4 + 48);
      uint64_t v15 = *(void *)(a1 + 48);
      __int16 v16 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24);
      if (v13) {
        uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v13 + 8));
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v14 + 1);
      *(void *)long long buf = &unk_26F347C70;
      *(void *)&buf[8] = v14;
      unint64_t v48 = buf;
      v45[0] = (realityio *)&unk_26F347D00;
      v45[1] = (realityio *)v14;
      uint64_t v46 = v45;
      unint64_t v42 = &unk_26F347D80;
      uint64_t v43 = v14;
      int8x8_t v44 = &v42;
      uint64_t v39 = &unk_26F347E00;
      int v40 = v14;
      uint64_t v41 = &v39;
      int v18 = realityio::DirtyStageSubscription::validate((uint64_t)v12, v16, v17, v19, (uint64_t)(v14 + 2), v15, (uint64_t)buf, (uint64_t)v45, (uint64_t)&v42, (uint64_t)&v39);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](&v39);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](&v42);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v45);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](buf);
    }
    else
    {
      int v18 = 1;
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 40)))
    {
      __int16 v21 = *(uint64_t **)(v4 + 40);
      uint64_t v20 = *(void *)(v4 + 48);
      uint64_t v38 = *(void *)(a1 + 48);
      uint64_t v22 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24);
      if (v20) {
        uint64_t v23 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(v20 + 8));
      }
      else {
        uint64_t v23 = 0;
      }
      char v25 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v21 + 1);
      *(void *)long long buf = &unk_26F347E90;
      *(void *)&buf[8] = v21;
      unint64_t v48 = buf;
      v45[0] = (realityio *)&unk_26F347F10;
      v45[1] = (realityio *)v21;
      uint64_t v46 = v45;
      unint64_t v42 = &unk_26F347F90;
      uint64_t v43 = v21;
      int8x8_t v44 = &v42;
      uint64_t v39 = &unk_26F348010;
      int v40 = v21;
      uint64_t v41 = &v39;
      int v24 = realityio::DirtyStageSubscription::validate((uint64_t)v12, v22, v23, v25, (uint64_t)(v21 + 2), v38, (uint64_t)buf, (uint64_t)v45, (uint64_t)&v42, (uint64_t)&v39);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](&v39);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](&v42);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](v45);
      std::__function::__value_func<BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__value_func[abi:ne180100](buf);
    }
    else
    {
      int v24 = 0;
    }
    realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(*(realityio::BuilderDependencyDAG **)(v4 + 248), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)v5, v45);
    if ((v18 | v24 ^ (v45[0] != 0)) == 1)
    {
      if (v45[0]) {
        int v26 = 0;
      }
      else {
        int v26 = v24;
      }
      if (v26 == 1)
      {
        uint64_t v27 = (*a2)[6];
        if (!v27) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v27 + 48))(buf);
        long long v28 = *(_OWORD *)buf;
        *(void *)long long buf = 0;
        *(void *)&buf[8] = 0;
        uint64_t v29 = (std::__shared_weak_count *)v45[1];
        *(_OWORD *)uint64_t v45 = v28;
        if (v29)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          uint64_t v29 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          uint64_t v30 = v45[0];
        }
        else
        {
          uint64_t v30 = (realityio *)v28;
        }
        ++totalBuilders;
        if (!v30)
        {
          BOOL v34 = *(id *)(realityio::logObjects((realityio *)v29) + 16);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(*(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24));
            unint64_t v36 = *v5 & 0xFFFFFFFFFFFFFFF8;
            if (v36)
            {
              uint64_t v37 = (const char *)(v36 + 16);
              if (*(char *)(v36 + 39) < 0) {
                uint64_t v37 = *(const char **)v37;
              }
            }
            else
            {
              uint64_t v37 = "";
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = Text;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v37;
            _os_log_impl(&dword_23F4EA000, v34, OS_LOG_TYPE_DEFAULT, "Builder at prim path (%s) with identifier (%s) could not be generated.", buf, 0x16u);
          }

          goto LABEL_58;
        }
        *((void *)v30 + 21) = *(void *)(v4 + 24);
        uint64_t v33 = (uint64_t **)(a1 + 32);
      }
      else
      {
        if (v45[0]) {
          char v31 = v24;
        }
        else {
          char v31 = 1;
        }
        if (v31)
        {
          char v32 = v24 ^ 1;
          if (!v45[0]) {
            char v32 = 1;
          }
          if (v32) {
            goto LABEL_58;
          }
          uint64_t v33 = (uint64_t **)(a1 + 64);
        }
        else
        {
          uint64_t v33 = (uint64_t **)(a1 + 56);
        }
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(*v33, (long long *)v45);
    }
LABEL_58:
    if (v45[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v45[1]);
    }
LABEL_60:
    if (!v11) {
      return;
    }
    uint64_t v10 = v11;
    goto LABEL_62;
  }
  realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(*(realityio::BuilderDependencyDAG **)(v4 + 248), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 24), (const pxrInternal__aapl__pxrReserved__::TfToken *)v5, buf);
  if (!*(void *)buf)
  {
    uint64_t v7 = (*a2)[6];
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(realityio **__return_ptr))(*(void *)v7 + 48))(v45);
    long long v8 = *(_OWORD *)v45;
    v45[0] = 0;
    v45[1] = 0;
    uint64_t v9 = *(std::__shared_weak_count **)&buf[8];
    *(_OWORD *)long long buf = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (v45[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v45[1]);
      }
    }
    *(void *)(*(void *)buf + 168) = *(void *)(v4 + 24);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(*(uint64_t **)(a1 + 32), (long long *)buf);
  }
  uint64_t v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8]) {
LABEL_62:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_23F706570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

intptr_t realityio::LiveSceneManager::AssetDeferredLoadGroup::onComplete(realityio::LiveSceneManager::AssetDeferredLoadGroup *this)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*((void *)this + 13) + 464) + 16));
}

const void **realityio::LiveSceneManager::addMetadataToAssets(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0::operator()(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
  REAssetSetMetadataString();
  char v6 = (__CFString *)REAssetCopyMetadataString();
  CFTypeRef cf = v6;
  if (v6)
  {
    realityio::CFStringCopyUTF8String(v6, (uint64_t)&v8);
    if ((_BYTE)v8)
    {
      REAssetSetDebugName();
      if ((_BYTE)v8)
      {
        if (v11 < 0) {
          operator delete(__p);
        }
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    REAssetSetDebugName();
  }
  std::string __p = 0;
  uint64_t v10 = 0;
  long long v8 = 0;
  if (realityio::ImportSessionImpl::getAssetURLFromBundle(*(void *)(*(void *)(a1 + 24) + 16), a2, this, (uint64_t)&v8))REAssetSetMetadataString(); {
  if (SHIBYTE(v10) < 0)
  }
    operator delete(v8);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
}

void sub_23F706754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, const void *a20)
{
  if ((_BYTE)a10)
  {
    if (a19 < 0) {
      operator delete(__p);
    }
  }
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a20);
  _Unwind_Resume(a1);
}

void realityio::LiveSceneManager::updateLiveSceneImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v161 = *MEMORY[0x263EF8340];
  std::chrono::steady_clock::now();
  char v148 = 1;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 216));
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 480);
  *(void *)(a1 + 472) = v4;
  *(void *)(a1 + 480) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (realityio::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  if (realityio::internal::enableSignposts(0, 0)) {
    kdebug_trace();
  }
  std::chrono::steady_clock::now();
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 152));
  uint64_t v7 = *(id *)(realityio::logObjects(v6) + 16);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_INFO, "Starting live scene update phase 1\n", buf, 2u);
  }

  realityio::ImportSession::purgeMeshAssetCache(*(realityio::ImportSession **)(a1 + 24));
  uint64_t v8 = *(void *)(a1 + 416);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v9 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  if (*(_DWORD *)(a1 + 288) == 1)
  {
    if (!*(void *)(a1 + 296))
    {
      uint64_t v10 = *(const void **)(*(void *)(*(void *)(a1 + 24) + 16) + 8);
      *(void *)long long buf = v10;
      if (v10) {
        CFRetain(v10);
      }
      operator new();
    }
    char v11 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v11 || (uint64_t v12 = *(void *)(a1 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    int v14 = v13;
    uint64_t v15 = *(void *)(a1 + 296);
    uint64_t v9 = *(std::__shared_weak_count **)(v15 + 48);
    *(void *)(v15 + 40) = v12;
    *(void *)(v15 + 48) = v14;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  __int16 v16 = *(id *)(realityio::logObjects((realityio *)v9) + 56);
  uint64_t v17 = v16;
  os_signpost_id_t v18 = *(void *)(*(void *)(a1 + 40) + 272);
  if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    uint64_t v19 = *(void *)(a1 + 24);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v19;
    _os_signpost_emit_with_name_impl(&dword_23F4EA000, v17, OS_SIGNPOST_EVENT, v18, "live-scene-update-state-prepare-update", "importSession %p", buf, 0xCu);
  }

  uint64_t v145 = 0;
  uint64_t v146 = 0;
  uint64_t v147 = 0;
  realityio::BuilderDependencyDAG::topologicalSort(*(realityio::BuilderDependencyDAG **)(a1 + 248), &v145);
  realityio::BuilderDependencyDAG::generateBuilderProviderInfo(*(realityio::BuilderDependencyDAG **)(a1 + 248), (uint64_t)v144);
  v141 = 0;
  int v142 = 0;
  uint64_t v143 = 0;
  uint64_t v138 = 0;
  unint64_t v139 = 0;
  uint64_t v140 = 0;
  uint64_t v135 = 0;
  v136 = 0;
  uint64_t v137 = 0;
  totalBuilders = 0;
  std::chrono::steady_clock::now();
  uint64_t v20 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 48);
  uint64_t v160 = 0;
  uint64_t v22 = operator new(0x28uLL);
  *uint64_t v22 = &unk_26F348438;
  v22[1] = a1;
  v22[2] = &v141;
  uint64_t v22[3] = &v138;
  v22[4] = &v135;
  uint64_t v160 = v22;
  realityio::LiveSceneUpdate::visitDirtyPrimPathsInStage(v20, v21, (uint64_t)v159);
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v159);
  if (v148 && *(_DWORD *)(a1 + 288) == 1)
  {
    uint64_t v23 = *(void *)(a1 + 296);
    *(unsigned char *)(v23 + 1360) = 0;
    uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 24) + 16) + 16))(*(void *)(*(void *)(a1 + 24) + 16));
    realityio::ImportSessionV2::setRootEntity(v23, v24);
  }
  std::chrono::steady_clock::now();
  int v26 = v141;
  for (uint64_t i = v142; v26 != i; v26 += 2)
  {
    uint64_t v27 = v17;
    long long v28 = v17;
    uint64_t v29 = v28;
    unint64_t v30 = *v26;
    os_signpost_id_t v31 = *(void *)(*v26 + 160);
    if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v28))
    {
      (*(void (**)(long long *__return_ptr, unint64_t))(*(void *)v30 + 24))(&v132, v30);
      unint64_t v32 = v132 & 0xFFFFFFFFFFFFFFF8;
      if ((v132 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v33 = (const char *)(v32 + 16);
        if (*(char *)(v32 + 39) < 0) {
          uint64_t v33 = *(const char **)v33;
        }
      }
      else
      {
        uint64_t v33 = "";
      }
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v26 + 8));
      int v35 = (*(uint64_t (**)(void))(*(void *)*v26 + 56))();
      uint64_t v36 = *(void *)(a1 + 24);
      uint64_t v37 = "FALSE";
      if (v35) {
        uint64_t v37 = "TRUE";
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = v33;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = Text;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&unsigned char buf[24] = v37;
      *(_WORD *)unint64_t v152 = 2048;
      *(void *)&v152[2] = v36;
      _os_signpost_emit_with_name_impl(&dword_23F4EA000, v29, OS_SIGNPOST_EVENT, v31, "builder-created", "builder created: identifier = %s and prim path = %s and is-async = %s and import session = %p", buf, 0x2Au);
      if ((v132 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }

    uint64_t v17 = v27;
  }
  uint64_t v38 = v135;
  for (uint64_t j = v136; v38 != j; v38 += 2)
  {
    int v40 = v17;
    uint64_t v41 = v40;
    os_signpost_id_t v42 = *(void *)(*v38 + 160);
    if (v42 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v40))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl(&dword_23F4EA000, v41, OS_SIGNPOST_EVENT, v42, "builder-removed", (const char *)&unk_23F8240AA, buf, 2u);
    }
  }
  std::chrono::steady_clock::now();
  if (v148)
  {
    *(void *)&buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    *(void *)long long buf = &buf[8];
    uint64_t v43 = *(void *)(a1 + 40);
    uint64_t v44 = *(void *)(a1 + 248);
    long long v158 = 0;
    uint64_t v45 = operator new(0x30uLL);
    *uint64_t v45 = &unk_26F348548;
    v45[1] = &v135;
    v45[2] = buf;
    v45[3] = a1;
    v45[4] = v43 + 184;
    v45[5] = &v138;
    long long v158 = v45;
    realityio::BuilderDependencyDAG::forAllBuilders(*(void **)(v44 + 16), (uint64_t)v157);
    std::__function::__value_func<void ()(std::shared_ptr<realityio::Builder>)>::~__value_func[abi:ne180100](v157);
    std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::destroy((uint64_t)buf, *(void **)&buf[8]);
  }
  std::chrono::steady_clock::now();
  if (v148)
  {
    memset(buf, 0, 24);
    std::vector<std::shared_ptr<realityio::Builder>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::Builder>*,std::shared_ptr<realityio::Builder>*>(buf, v138, v139, (v139 - v138) >> 4);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t *)buf, v135, v136);
    realityio::BuilderDependencyDAG::findDownstreamDependencies(*(void **)(a1 + 248), (long long **)buf, (uint64_t *)buf);
    unint64_t v47 = v135;
    uint64_t v46 = v136;
    while (v47 != v46)
    {
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase((uint64_t **)buf, v47);
      v47 += 2;
    }
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t *)&v138, *(void **)buf, *(void **)&buf[8]);
    *(void *)&long long v132 = buf;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
    if (v148)
    {
      std::chrono::steady_clock::now();
      uint64_t v49 = v135;
      unint64_t v48 = v136;
      while (v49 != v48)
      {
        realityio::BuilderDependencyDAG::removeBuilder(*(void **)(a1 + 248), v49);
        v49 += 2;
      }
    }
  }
  std::chrono::steady_clock::now();
  if (v148)
  {
    memset(buf, 0, 24);
    realityio::BuilderDependencyDAG::addBuildersAndResyncIODescriptors(*(void **)(a1 + 248), &v141, *(void *)(a1 + 40), (uint64_t *)buf);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t *)&v138, *(void **)buf, *(void **)&buf[8]);
    *(void *)&long long v132 = buf;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  }
  std::chrono::steady_clock::now();
  if (v148)
  {
    memset(buf, 0, 24);
    std::vector<std::shared_ptr<realityio::Builder>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::Builder>*,std::shared_ptr<realityio::Builder>*>(buf, v138, v139, (v139 - v138) >> 4);
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t *)buf, v141, v142);
    realityio::BuilderDependencyDAG::findDownstreamDependencies(*(void **)(a1 + 248), (long long **)buf, (uint64_t *)buf);
    uint64_t v51 = v141;
    uint64_t v50 = v142;
    while (v51 != v50)
    {
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::erase((uint64_t **)buf, v51);
      v51 += 2;
    }
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge((uint64_t *)&v138, *(void **)buf, *(void **)&buf[8]);
    *(void *)&long long v132 = buf;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  }
  std::chrono::steady_clock::now();
  long long v132 = 0u;
  long long v133 = 0u;
  int v134 = 1065353216;
  realityio::BuilderDependencyDAG::findUnsatisfiableBuilders(*(void **)(a1 + 248), (uint64_t)&v132);
  for (k = (void *)v133; k; k = (void *)*k)
    ;
  if (v148)
  {
    uint64_t v53 = v146;
    while (v53 != v145)
    {
      uint64_t v55 = *(void *)(v53 - 16);
      uint64_t v54 = *(std::__shared_weak_count **)(v53 - 8);
      v53 -= 16;
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v56 = v135;
      if (v135 != v136)
      {
        while (*v56 != v55)
        {
          v56 += 2;
          if (v56 == v136)
          {
            char v56 = v136;
            break;
          }
        }
      }
      if (v56 != v136)
      {
        v129[0] = (std::__shared_weak_count *)v55;
        v129[1] = v54;
        if (v54) {
          atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        realityio::Inputs::Inputs((uint64_t)buf, v129, (_DWORD *)(v55 + 8), *(void *)(a1 + 24), (uint64_t)v144, *(void *)(a1 + 48), *a2);
        if (v129[1]) {
          std::__shared_weak_count::__release_weak(v129[1]);
        }
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v55 + 72))(v55, buf);
        realityio::Builder::clearAddedComponentAndAssetArrays((realityio::Builder *)v55);
        realityio::Inputs::~Inputs((realityio::Inputs *)buf);
      }
      if (v54) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      }
    }
  }
  *(void *)&unsigned char buf[24] = 0;
  std::vector<std::shared_ptr<realityio::Builder>>::__vdeallocate((uint64_t *)&v135);
  uint64_t v135 = 0;
  v136 = 0;
  uint64_t v137 = 0;
  memset(buf, 0, 24);
  v129[0] = (std::__shared_weak_count *)buf;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v129);
  *(_OWORD *)uint64_t v129 = 0u;
  long long v130 = 0u;
  int v131 = 1065353216;
  if (v148)
  {
    realityio::BuilderDependencyDAG::generateBuilderProviderInfo(*(realityio::BuilderDependencyDAG **)(a1 + 248), (uint64_t)buf);
    if (*((void *)&v130 + 1))
    {
      std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__deallocate_node((uint64_t)v129, (void *)v130);
      *(void *)&long long v130 = 0;
      unint64_t v57 = v129[1];
      if (v129[1])
      {
        char v58 = 0;
        do
        {
          *((void *)&v129[0]->__vftable + (void)v58) = 0;
          char v58 = (std::__shared_weak_count *)((char *)v58 + 1);
        }
        while (v57 != v58);
      }
      *((void *)&v130 + 1) = 0;
    }
    int v59 = *(std::__shared_weak_count **)buf;
    *(void *)long long buf = 0;
    std::string::size_type v60 = v129[0];
    v129[0] = v59;
    if (v60) {
      operator delete(v60);
    }
    uint64_t v61 = *(std::__shared_weak_count **)&buf[8];
    *(void *)&buf[8] = 0;
    long long v130 = *(_OWORD *)&buf[16];
    int v131 = *(_DWORD *)v152;
    v129[1] = v61;
    if (*(void *)&buf[24])
    {
      unint64_t v62 = *(void *)(*(void *)&buf[16] + 8);
      if (((unint64_t)v61 & ((unint64_t)&v61[-1].__shared_weak_owners_ + 7)) != 0)
      {
        if (v62 >= (unint64_t)v61) {
          v62 %= (unint64_t)v61;
        }
      }
      else
      {
        v62 &= (unint64_t)&v61[-1].__shared_weak_owners_ + 7;
      }
      *((void *)&v129[0]->__vftable + v62) = &v130;
      *(_OWORD *)&uint8_t buf[16] = 0uLL;
    }
    std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)buf);
  }
  uint64_t v63 = *(void *)(a1 + 40);
  uint64_t v64 = v17;
  v65 = v64;
  os_signpost_id_t v66 = *(void *)(*(void *)(a1 + 40) + 272);
  if (v66 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v64))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_23F4EA000, v65, OS_SIGNPOST_EVENT, v66, "live-scene-update-state-run-builders", (const char *)&unk_23F8240AA, buf, 2u);
  }

  long long v126 = 0u;
  long long v127 = 0u;
  int v128 = 1065353216;
  if (v148)
  {
    std::chrono::steady_clock::now();
    uint64_t v67 = *(void *)(a1 + 248);
    uint64_t v156 = 0;
    id v68 = operator new(0x38uLL);
    *id v68 = &unk_26F3485D8;
    v68[1] = a1;
    v68[2] = &v138;
    v68[3] = &v141;
    v68[4] = &v132;
    v68[5] = v63 + 184;
    v68[6] = &v126;
    uint64_t v156 = v68;
    realityio::BuilderDependencyDAG::forAllBuilders(*(void **)(v67 + 16), (uint64_t)v155);
    std::__function::__value_func<void ()(std::shared_ptr<realityio::Builder>)>::~__value_func[abi:ne180100](v155);
    if (v148)
    {
      std::chrono::steady_clock::now();
      realityio::BuilderExecutor::runBuildersInDependencyOrder();
    }
  }
  uint64_t v69 = v65;
  uint64_t v70 = v69;
  os_signpost_id_t v71 = *(void *)(*(void *)(a1 + 40) + 272);
  if (v71 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v69))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_23F4EA000, v70, OS_SIGNPOST_EVENT, v71, "live-scene-update-state-wait-for-assets", (const char *)&unk_23F8240AA, buf, 2u);
  }

  if (v148)
  {
    std::chrono::steady_clock::now();
    uint64_t v72 = *a2;
    *(void *)long long buf = &unk_26F348658;
    *(void *)&buf[8] = a1;
    *(void *)&uint8_t buf[16] = &v148;
    *(void *)&unsigned char buf[24] = buf;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v72 + 16))(v72, buf);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 464) + 16), 0xFFFFFFFFFFFFFFFFLL);
    std::chrono::steady_clock::now();
    std::chrono::steady_clock::now();
  }
  int8x8_t v73 = v70;
  unint64_t v74 = v73;
  os_signpost_id_t v75 = *(void *)(*(void *)(a1 + 40) + 272);
  if (v75 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v73))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_23F4EA000, v74, OS_SIGNPOST_EVENT, v75, "live-scene-update-state-post-asset-load", (const char *)&unk_23F8240AA, buf, 2u);
  }

  v76.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  id v77 = *(id *)(realityio::logObjects((realityio *)v76.__d_.__rep_) + 16);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_23F4EA000, v77, OS_LOG_TYPE_INFO, "Starting live scene update phase 2\n", buf, 2u);
  }

  uint64_t v78 = *a2;
  *(void *)long long buf = &unk_26F3486D8;
  *(void *)&buf[8] = a1;
  *(void *)&uint8_t buf[16] = &v148;
  *(void *)&unsigned char buf[24] = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v78 + 16))(v78, buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  int v79 = (uint64_t **)v127;
  memset(buf, 0, sizeof(buf));
  *(_DWORD *)unint64_t v152 = 1065353216;
  if ((void)v127)
  {
    do
    {
      std::string::size_type v80 = realityio::Builder::addedAssets((realityio::Builder *)v79[2]);
      unint64_t v81 = (unint64_t *)*v80;
      int64_t v82 = (unint64_t *)v80[1];
      while (v81 != v82)
      {
        unint64_t v83 = *v81;
        if (!std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::find<REAsset *>(*(uint64_t *)buf, *(unint64_t *)&buf[8], *v81))
        {
          std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::__emplace_unique_key_args<REAsset *,REAsset * const&>((float *)buf, v83, v83);
          uint64_t v84 = v79[2];
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&cf, (_DWORD *)v84 + 2);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&cf + 1, (_DWORD *)v84 + 3);
          realityio::LiveSceneManager::addMetadataToAssets(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0::operator()(a1, v83, (pxrInternal__aapl__pxrReserved__::SdfPath *)&cf);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&cf);
        }
        ++v81;
      }
      int v79 = (uint64_t **)*v79;
    }
    while (v79);
  }
  uint64_t v85 = *(void *)(a1 + 504);
  for (uint64_t m = *(void *)(a1 + 512); v85 != m; v85 += 40)
  {
    unint64_t v87 = *(void *)v85;
    if (!std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::find<REAsset *>(*(uint64_t *)buf, *(unint64_t *)&buf[8], *(void *)v85))
    {
      std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::__emplace_unique_key_args<REAsset *,REAsset * const&>((float *)buf, v87, v87);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v149, (_DWORD *)(v85 + 32));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v149 + 1, (_DWORD *)(v85 + 36));
      realityio::LiveSceneManager::addMetadataToAssets(std::unordered_set<std::shared_ptr<realityio::Builder>> const&)::$_0::operator()(a1, v87, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v149);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v149);
    }
  }
  std::__hash_table<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::__unordered_map_hasher<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::hash<REEntity *>,std::equal_to<REEntity *>,true>,std::__unordered_map_equal<REEntity *,std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>,std::equal_to<REEntity *>,std::hash<REEntity *>,true>,std::allocator<std::__hash_value_type<REEntity *,realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT const*>>>::~__hash_table((uint64_t)buf);
  uint64_t v88 = *a2;
  *(void *)long long buf = &unk_26F348758;
  *(void *)&buf[8] = a1;
  *(void *)&unsigned char buf[24] = buf;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v88 + 16))(v88, buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  long long v89 = v74;
  uint64_t v90 = v89;
  os_signpost_id_t v91 = *(void *)(*(void *)(a1 + 40) + 272);
  if (v91 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v89))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_23F4EA000, v90, OS_SIGNPOST_EVENT, v91, "live-scene-update-state-finished", (const char *)&unk_23F8240AA, buf, 2u);
  }

  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  *(void *)(a1 + 280) = 0;
  uint64_t v92 = *(void *)(a1 + 464);
  uint64_t v94 = *(void **)(v92 + 48);
  for (n = *(void **)(v92 + 56);
        n != v94;
  *(void *)(v92 + 56) = v94;
  realityio::AssetLoadTracker::clear(*(realityio::AssetLoadTracker **)(*(void *)(a1 + 464) + 128));
  std::string v95 = (void *)(*(void *)(a1 + 464) + 72);
  *(void *)long long buf = &unk_26F3487D8;
  *(void *)&unsigned char buf[24] = buf;
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](buf, v95);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  uint64_t v96 = *(void *)(a1 + 296);
  if (v96)
  {
    uint64_t v97 = *(std::__shared_weak_count **)(v96 + 48);
    *(void *)(v96 + 40) = 0;
    *(void *)(v96 + 48) = 0;
    if (v97) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v97);
    }
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 24) + 16) + 16)
    && REEngineGetServiceLocator()
    && MEMORY[0x2455CDC30]())
  {
    id v98 = REAssetManagerGetEngineQueue();
  }
  else
  {
    id v98 = 0;
  }
  CFTypeRef v149 = 0;
  CFTypeRef cf = 0;
  id v99 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v99 || (v100 = *(void *)(a1 + 8), (char v101 = std::__shared_weak_count::lock(v99)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  std::string v102 = v101;
  std::mutex::lock((std::mutex *)(a1 + 328));
  char v103 = *(unsigned char *)(a1 + 456);
  if (*(unsigned char *)(a1 + 457))
  {
    realityio::WrappedCFRef<RIOImportSession *>::operator=(&cf, *(const void ***)(a1 + 464));
    realityio::WrappedCFRef<RIOImportSession *>::operator=(&v149, (const void **)(*(void *)(a1 + 464) + 8));
  }
  uint64_t v104 = *(CFTypeRef **)(a1 + 464);
  if (*v104) {
    CFRelease(*v104);
  }
  *uint64_t v104 = 0;
  uint64_t v105 = *(void *)(a1 + 464);
  uint64_t v106 = *(const void **)(v105 + 8);
  if (v106) {
    CFRelease(v106);
  }
  *(void *)(v105 + 8) = 0;
  uint64_t v107 = *(void *)(a1 + 464);
  *(void *)(a1 + 464) = 0;
  if (v107) {
    std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](v107);
  }
  uint64_t v109 = *(void *)(a1 + 40);
  uint64_t v108 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v109;
  if (v108)
  {
    (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
    uint64_t v110 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v110) {
      (*(void (**)(uint64_t))(*(void *)v110 + 8))(v110);
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v111 = *(void *)(a1 + 448);
  if (v111) {
    (*(void (**)(uint64_t))(*(void *)v111 + 48))(v111);
  }
  *(void *)&unsigned char buf[24] = 0;
  uint64_t v153 = 0;
  __int16 v154 = 0;
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((void *)(a1 + 392), (uint64_t)buf);
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((void *)(a1 + 424), (uint64_t)v152);
  *(_WORD *)(a1 + 456) = v154;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v152);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  std::mutex::unlock((std::mutex *)(a1 + 328));
  if (*(void *)(a1 + 80))
  {
    uint64_t v113 = *(id *)(realityio::logObjects(v112) + 16);
    if (!os_log_type_enabled(v113, OS_LOG_TYPE_INFO)) {
      goto LABEL_158;
    }
    *(_WORD *)long long buf = 0;
    int8x8_t v114 = "Ending live scene update\n";
    uint64_t v115 = v113;
    os_log_type_t v116 = OS_LOG_TYPE_INFO;
  }
  else
  {
    uint64_t v113 = *(id *)(realityio::logObjects(v112) + 16);
    if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_158;
    }
    *(_WORD *)long long buf = 0;
    int8x8_t v114 = "Ending live scene update, but there is no scene update pass completion block!\n";
    uint64_t v115 = v113;
    os_log_type_t v116 = OS_LOG_TYPE_DEFAULT;
  }
  _os_log_impl(&dword_23F4EA000, v115, v116, v114, buf, 2u);
LABEL_158:

  CFTypeRef v117 = cf;
  if (*(void *)(a1 + 80) | (unint64_t)cf)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3321888768;
    block[2] = ___ZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEb_block_invoke;
    block[3] = &__block_descriptor_80_ea8_32c110_ZTSKZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEbE4__10_e5_v8__0l;
    *(void *)long long buf = a1;
    *(void *)&buf[8] = v100;
    *(void *)&uint8_t buf[16] = v102;
    atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&unsigned char buf[24] = v117;
    if (v117) {
      CFRetain(v117);
    }
    *(void *)unint64_t v152 = v149;
    if (v149) {
      CFRetain(v149);
    }
    v152[8] = v103;
    long long v121 = *(_OWORD *)buf;
    uint64_t v122 = *(std::__shared_weak_count **)&buf[16];
    if (*(void *)&buf[16]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[16] + 8), 1uLL, memory_order_relaxed);
    }
    v123 = *(const void **)&buf[24];
    if (*(void *)&buf[24]) {
      CFRetain(*(CFTypeRef *)&buf[24]);
    }
    uint64_t v124 = *(const void **)v152;
    if (*(void *)v152) {
      CFRetain(*(CFTypeRef *)v152);
    }
    char v125 = v152[8];
    dispatch_async(v98, block);
    realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)v152);
    realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)&buf[24]);
    if (*(void *)&buf[16]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[16]);
    }
    realityio::WrappedCFRef<void const*>::~WrappedCFRef(&v124);
    realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(&v123);
    if (v122) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v122);
    }
  }
  else if (realityio::internal::enableSignposts(0, 0))
  {
    kdebug_trace();
  }
  int8x8_t v118 = *(std::__shared_weak_count **)(a1 + 480);
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  if (v118) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v118);
  }
  std::chrono::steady_clock::now();
  std::chrono::steady_clock::now();
  std::__shared_weak_count::__release_shared[abi:ne180100](v102);
  realityio::WrappedCFRef<void const*>::~WrappedCFRef(&v149);
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(&cf);

  std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::~__hash_table((uint64_t)&v126);
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)v129);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::~__hash_table((uint64_t)&v132);
  *(void *)long long buf = &v135;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v138;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)long long buf = &v141;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::~__hash_table((uint64_t)v144);
  *(void *)long long buf = &v145;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);

  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 152));
}

void sub_23F707C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::recursive_mutex *a10)
{
}

realityio::ImportSession::CancelledException *realityio::ImportSession::CancelledException::CancelledException(realityio::ImportSession::CancelledException *this, const realityio::ImportSession::CancelledException *a2)
{
  *(void *)this = &unk_26F33EDB8;
  uint64_t v3 = (std::string *)((char *)this + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *((void *)a2 + 3);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return this;
}

void sub_23F70827C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::forAllBuilders(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = a1;
    do
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      long long v4 = (std::__shared_weak_count *)v3[3];
      if (v4)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v4);
        if (v7) {
          uint64_t v6 = v3[2];
        }
      }
      uint64_t v5 = *(void *)(a2 + 24);
      if (!v5) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v6);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
}

void sub_23F70832C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::merge(uint64_t *a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    do
    {
      uint64_t v6 = v4[1];
      *(void *)&long long v7 = *v4;
      *((void *)&v7 + 1) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a1, &v7);
      if (*((void *)&v7 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

{
  void *v4;
  uint64_t v6;
  long long v7;

  if (a2 != a3)
  {
    long long v4 = a2;
    do
    {
      uint64_t v6 = v4[1];
      *(void *)&long long v7 = *v4;
      *((void *)&v7 + 1) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(a1, &v7);
      if (*((void *)&v7 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
}

void sub_23F7083C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F708458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 88));
  uint64_t v3 = *(void *)(v2 + 80);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 88));
  uint64_t result = realityio::internal::enableSignposts(0, 0);
  if (result) {
    uint64_t result = kdebug_trace();
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 24) + 16) + 24);
    return v5();
  }
  return result;
}

void sub_23F70855C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_32c110_ZTSKZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEbE4__10(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(const void **)(a2 + 56);
  *(void *)(a1 + 56) = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 64);
  *(void *)(a1 + 64) = result;
  if (result) {
    CFTypeRef result = CFRetain(result);
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return result;
}

void sub_23F7085E8(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_ea8_32c110_ZTSKZN9realityio16LiveSceneManager19updateLiveSceneImplENSt3__110shared_ptrINS_18EngineQueueManagerEEEbE4__10(uint64_t a1)
{
  realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)(a1 + 64));
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_10::~$_10(uint64_t a1)
{
  realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)(a1 + 32));
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void realityio::LiveSceneManager::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a1 + 88);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 88));
  std::function<void ()(void)>::operator=((void *)(a1 + 56), a2);

  std::recursive_mutex::unlock(v4);
}

void sub_23F7086FC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

const void **realityio::LiveSceneManager::description@<X0>(realityio::LiveSceneManager *this@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = *(void *)(*(void *)(*((void *)this + 3) + 16) + 16);
  (*(void (**)(const void **__return_ptr))(**((void **)this + 29) + 16))(&v6);
  *a2 = CFStringCreateWithFormat(0, 0, @"<LiveSceneManager: %p { user stage: %p, engine: %p, state tracker: %@, }>", this, (char *)this + 32, v4, v6);
  return realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&v6);
}

void sub_23F7087B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)va);
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v6);
  _Unwind_Resume(a1);
}

int64x2_t *realityio::LiveSceneManager::getDeploymentErrors(uint64_t *a1, uint64_t a2)
{
  uint64_t v53 = (int64x2_t *)(a1 + 32);
  if (a1[35] != a2)
  {
    uint64_t v3 = a1[32];
    for (uint64_t i = a1[33]; i != v3; std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](i))
      i -= 40;
    a1[33] = v3;
    if (a2)
    {
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      unint64_t v65 = 0;
      unint64_t v57 = 0;
      v58[0] = 0;
      v58[1] = 0;
      realityio::BuilderDependencyDAG::getAllBuilders(a1[31], (uint64_t *)&v57);
      uint64_t v5 = v57;
      for (uint64_t j = (realityio::Builder **)v58[0]; v5 != j; v5 += 2)
      {
        long long v7 = (std::__shared_weak_count *)v5[1];
        if (v7)
        {
          uint64_t v8 = std::__shared_weak_count::lock(v7);
          if (v8) {
            uint64_t v9 = *v5;
          }
          else {
            uint64_t v9 = 0;
          }
        }
        else
        {
          uint64_t v9 = 0;
          uint64_t v8 = 0;
        }
        uint64_t v10 = v64;
        if ((unint64_t)v64 >= v65)
        {
          uint64_t v12 = ((char *)v64 - (char *)v63) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v65 - (void)v63;
          if ((uint64_t)(v65 - (void)v63) >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          uint64_t v70 = &v65;
          __int16 v16 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v65, v15);
          uint64_t v17 = &v16[2 * v12];
          os_signpost_id_t v66 = v16;
          std::string __p = v17;
          uint64_t v69 = &v16[2 * v18];
          uint64_t *v17 = (uint64_t)v9;
          v17[1] = (uint64_t)v8;
          id v68 = v17 + 2;
          std::vector<std::shared_ptr<realityio::Builder>>::__swap_out_circular_buffer((uint64_t *)&v63, &v66);
          char v11 = v64;
          std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)&v66);
        }
        else
        {
          *uint64_t v64 = v9;
          v10[1] = (realityio::Builder *)v8;
          char v11 = v10 + 2;
        }
        uint64_t v64 = v11;
      }
      os_signpost_id_t v66 = (uint64_t *)&v57;
      std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      std::string::size_type v60 = &v61;
      char v52 = v64;
      if (v63 != v64)
      {
        uint64_t v19 = (uint64_t)v63;
        while (1)
        {
          uint64_t v20 = *(void ***)(*(void *)v19 + 40);
          uint64_t v21 = *(void *)v19 + 48;
          uint64_t v54 = v21;
          if (v20 != (void **)v21) {
            break;
          }
LABEL_65:
          v19 += 16;
          if ((realityio::Builder **)v19 == v52)
          {
            os_signpost_id_t v42 = v63;
            for (k = v64; v42 != k; v42 += 2)
            {
              uint64_t v43 = realityio::Builder::addedAssets(*v42);
              uint64_t v45 = *v43;
              uint64_t v44 = v43[1];
              while (v45 != v44)
              {
                if ((REAssetIsAvailableForMajorVersion() & 1) == 0)
                {
                  uint64_t Type = (__CFString *)REAssetGetType();
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                  std::string __p = 0;
                  id v68 = 0;
                  uint64_t v69 = 0;
                  unint64_t v47 = *v42;
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v66, (_DWORD *)*v42 + 2);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v66 + 4, (_DWORD *)v47 + 3);
                  LOBYTE(v70) = 1;
                  realityio::CFStringCopyUTF8String(Type, (uint64_t)&v57);
                  if ((_BYTE)v57)
                  {
                    if (v59 >= 0) {
                      unint64_t v48 = v58;
                    }
                    else {
                      unint64_t v48 = (void **)v58[0];
                    }
                    MEMORY[0x2455D2770](&__p, v48);
                  }
                  unint64_t v49 = a1[33];
                  if (v49 >= a1[34])
                  {
                    uint64_t v50 = std::vector<realityio::LiveSceneManager::CompatibilityFault>::__push_back_slow_path<realityio::LiveSceneManager::CompatibilityFault const&>(v53, (uint64_t)&v66);
                  }
                  else
                  {
                    std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(a1[33], (uint64_t)&v66);
                    uint64_t v50 = v49 + 40;
                    a1[33] = v49 + 40;
                  }
                  a1[33] = v50;
                  if ((_BYTE)v57 && v59 < 0) {
                    operator delete(v58[0]);
                  }
                  if (SHIBYTE(v69) < 0) {
                    operator delete(__p);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
                }
                v45 += 8;
              }
            }
            goto LABEL_86;
          }
        }
        while ((REComponentIsAvailableForMajorVersion() & 1) != 0)
        {
LABEL_59:
          uint64_t v39 = (void **)v20[1];
          if (v39)
          {
            do
            {
              int v40 = v39;
              uint64_t v39 = (void **)*v39;
            }
            while (v39);
          }
          else
          {
            do
            {
              int v40 = (void **)v20[2];
              BOOL v41 = *v40 == v20;
              uint64_t v20 = v40;
            }
            while (!v41);
          }
          uint64_t v20 = v40;
          if (v40 == (void **)v21) {
            goto LABEL_65;
          }
        }
        uint64_t v22 = v19;
        uint64_t v23 = *(void *)v19;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v57, (_DWORD *)(v23 + 8));
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v57 + 1, (_DWORD *)(v23 + 12));
        v58[0] = v20[4];
        uint64_t v24 = v61;
        char v25 = &v61;
        int v26 = &v61;
        if (!v61) {
          goto LABEL_49;
        }
        uint64_t v27 = &v61;
        do
        {
          long long v28 = v27;
          uint64_t v29 = v24 + 4;
          BOOL v30 = std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100](v24 + 4, &v57);
          if (v30) {
            os_signpost_id_t v31 = v24 + 1;
          }
          else {
            os_signpost_id_t v31 = v24;
          }
          if (v30) {
            uint64_t v27 = v28;
          }
          else {
            uint64_t v27 = (uint64_t **)v24;
          }
          uint64_t v24 = (uint64_t *)*v31;
        }
        while (*v31);
        if (v27 != &v61)
        {
          unint64_t v32 = v30 ? v28 + 4 : (uint64_t **)v29;
          if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100](&v57, v32))
          {
LABEL_58:
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v57);
            uint64_t v19 = v22;
            uint64_t v21 = v54;
            goto LABEL_59;
          }
        }
        uint64_t v33 = v61;
        char v25 = &v61;
        int v26 = &v61;
        if (!v61) {
          goto LABEL_49;
        }
        char v25 = &v61;
        while (1)
        {
          while (1)
          {
            int v26 = (uint64_t **)v33;
            BOOL v34 = v33 + 4;
            if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100](&v57, v33 + 4))break; {
            uint64_t v33 = *v26;
            }
            char v25 = v26;
            if (!*v26) {
              goto LABEL_49;
            }
          }
          if (!std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100](v34, &v57))break; {
          char v25 = v26 + 1;
          }
          uint64_t v33 = v26[1];
          if (!v33) {
            goto LABEL_49;
          }
        }
        if (!*v25)
        {
LABEL_49:
          int v35 = (void **)operator new(0x30uLL);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v35 + 8, &v57);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v35 + 9, (_DWORD *)&v57 + 1);
          v35[5] = v58[0];
          NSObject *v35 = 0;
          v35[1] = 0;
          v35[2] = v26;
          *char v25 = (uint64_t *)v35;
          if (*v60)
          {
            std::string::size_type v60 = (uint64_t **)*v60;
            int v35 = (void **)*v25;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v61, (uint64_t *)v35);
          ++v62;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        std::string __p = 0;
        id v68 = 0;
        uint64_t v69 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v66, &v57);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v66 + 4, (_DWORD *)&v57 + 1);
        LOBYTE(v70) = 0;
        uint64_t Name = REComponentClassGetName();
        MEMORY[0x2455D2770](&__p, Name);
        unint64_t v37 = a1[33];
        if (v37 >= a1[34])
        {
          uint64_t v38 = std::vector<realityio::LiveSceneManager::CompatibilityFault>::__push_back_slow_path<realityio::LiveSceneManager::CompatibilityFault const&>(v53, (uint64_t)&v66);
        }
        else
        {
          std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(a1[33], (uint64_t)&v66);
          uint64_t v38 = v37 + 40;
          a1[33] = v37 + 40;
        }
        a1[33] = v38;
        if (SHIBYTE(v69) < 0) {
          operator delete(__p);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v66);
        goto LABEL_58;
      }
LABEL_86:
      a1[35] = a2;
      std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(v61);
      os_signpost_id_t v66 = (uint64_t *)&v63;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
    }
  }
  return v53;
}

void sub_23F708D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  a22 = (uint64_t *)&a15;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a15 = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void realityio::BuilderDependencyDAG::getAllBuilders(uint64_t a1, uint64_t *a2)
{
  std::vector<std::weak_ptr<realityio::Builder>>::__clear[abi:ne180100](a2);
  for (uint64_t i = *(long long **)(a1 + 16); i; uint64_t i = *(long long **)i)
    std::vector<std::weak_ptr<realityio::Builder>>::push_back[abi:ne180100](a2, i + 1);
}

void realityio::LiveSceneManager::CompatibilityFault::~CompatibilityFault(void **this)
{
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    CFTypeRef result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFTypeRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_23F708FC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347C70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347C70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return realityio::LiveSceneUpdate::isStageMetadataDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347D00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347D00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return realityio::LiveSceneUpdate::isPrimMetadataDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347D80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347D80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return realityio::LiveSceneUpdate::isPropertyDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347E00;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347E00;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  return realityio::LiveSceneUpdate::isPropertyMetadataDirty(*(realityio::LiveSceneUpdate **)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderMatches(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347E90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347E90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)(a1 + 8) + 8));

  return pxrInternal__aapl__pxrReserved__::UsdStage::HasMetadata(v3, a2);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,BOOL ()(pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347F10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347F10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v8, v5, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8)) {
    uint64_t HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8, a3);
  }
  else {
    uint64_t HasMetadata = 0;
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  return HasMetadata;
}

void sub_23F7095AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a11);
  if (a10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F347F90;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F347F90;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v8, v5, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8)) {
    uint64_t HasProperty = pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, a3);
  }
  else {
    uint64_t HasProperty = 0;
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v10);
  if (v9) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v9);
  }
  return HasProperty;
}

void sub_23F709774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a11);
  if (a10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_2>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::~__func()
{
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t a1)
{
  CFTypeRef result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F348010;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F348010;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)(a1 + 8) + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v10, v7, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10)
    && pxrInternal__aapl__pxrReserved__::UsdPrim::HasProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, a3))
  {
    uint64_t HasMetadata = pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10, a4);
  }
  else
  {
    uint64_t HasMetadata = 0;
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  return HasMetadata;
}

void sub_23F709958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a11);
  if (a10) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3,std::allocator<checkBuilderShouldBeInstancedForPrim(std::shared_ptr<realityio::DirtyStageSubscription const> &,realityio::LiveSceneUpdate const*,realityio::LiveSceneUpdate const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_3>,BOOL ()(pxrInternal__aapl__pxrReserved__::SdfPath const&,pxrInternal__aapl__pxrReserved__::TfToken const&,pxrInternal__aapl__pxrReserved__::TfToken const&)>::target_type()
{
}

void *std::vector<std::shared_ptr<realityio::Builder>>::__init_with_size[abi:ne180100]<std::shared_ptr<realityio::Builder>*,std::shared_ptr<realityio::Builder>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    CFTypeRef result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)(result + 2), a4);
    *uint64_t v4 = result;
    v4[1] = result;
    uint64_t v4[2] = &result[2 * v7];
    if (a2 != a3)
    {
      uint64_t v8 = result;
      do
      {
        *uint64_t v8 = *a2;
        uint64_t v9 = a2[1];
        v8[1] = v9;
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        result += 2;
        a2 += 2;
        v8 += 2;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_23F709AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v5;
      *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

const void **realityio::WrappedCFRef<void const*>::~WrappedCFRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    CFRelease(v2);
    *a1 = 0;
  }
  return a1;
}

void std::vector<realityio::LiveSceneManager::CompatibilityFault>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::default_delete<realityio::LiveSceneManager::LiveSceneUpdateContext>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 136);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(void **)(a1 + 104);
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 112);
    uint64_t v5 = *(void **)(a1 + 104);
    if (v4 != v3)
    {
      do
        uint64_t v4 = realityio::WrappedRERef<REEntity *>::~WrappedRERef(v4 - 1);
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 104);
    }
    *(void *)(a1 + 112) = v3;
    operator delete(v5);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 72));
  uint64_t v6 = (void **)(a1 + 48);
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v6 = (void **)(a1 + 24);
  std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](&v6);

  realityio::WrappedCFRef<void const*>::~WrappedCFRef((const void **)(a1 + 8));
  realityio::WrappedCFRef<RIOImportSession *>::~WrappedCFRef((const void **)a1);

  JUMPOUT(0x2455D2BD0);
}

void std::vector<std::function<void ()(void)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<realityio::LiveSceneManager::AssetRecord>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a2 + 32);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }

  return realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)a2);
}

uint64_t std::vector<std::function<void ()(void)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__split_buffer<std::function<void ()(void)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<realityio::WrappedRERef<REEntity *>>::__push_back_slow_path<realityio::WrappedRERef<REEntity *> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  __int16 v16 = v11;
  uint64_t v17 = &v10[8 * v9];
  uint64_t v12 = *a2;
  *(void *)uint64_t v11 = *a2;
  if (v12)
  {
    RERetain();
    uint64_t v11 = v16;
  }
  __int16 v16 = v11 + 8;
  std::vector<realityio::WrappedRERef<REEntity *>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<realityio::WrappedRERef<REEntity *>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_23F70A128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::WrappedRERef<REEntity *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::WrappedRERef<REEntity *>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REEntity *>>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::WrappedRERef<REEntity *>>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>,std::reverse_iterator<realityio::WrappedRERef<REEntity *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(a3 + v11 - 8);
      *(void *)(a7 - 8 + v11) = v12;
      if (v12) {
        RERetain();
      }
      v11 -= 8;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_23F70A230(_Unwind_Exception *exception_object)
{
  for (; v2; v2 += 8)
    realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<realityio::WrappedRERef<REEntity *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_ptr_emplace<realityio::AssetLoadTracker::Asset>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::AssetLoadTracker::Asset>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348090;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void *std::__shared_ptr_emplace<realityio::AssetLoadTracker::Asset>::__on_zero_shared(void *a1)
{
  a1[3] = &unk_26F33E4A8;
  realityio::WrappedRERef<REAssetLoadRequest *>::~WrappedRERef(a1 + 7);

  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(a1 + 4);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager::AssetDeferredLoadGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3480E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager::AssetDeferredLoadGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3480E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager::AssetDeferredLoadGroup>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = &unk_26F348130;
  uint64_t v2 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 32));
}

void _ZNSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE7__cloneEv()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F348148;
  return result;
}

void _ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE7__cloneEPNS0_6__baseIS8_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26F348148;
}

uint64_t _ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_E))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_ENS_9allocatorIS5_EEFvvEE11target_typeEv()
{
  return &_ZTIN9realityio16LiveSceneManager22LiveSceneUpdateContext21sceneChangeSetupBlockMUlvE_E;
}

void std::__shared_ptr_pointer<realityio::SyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::SyncUpdateEngineQueueManager>,std::allocator<realityio::SyncUpdateEngineQueueManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::SyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::SyncUpdateEngineQueueManager>,std::allocator<realityio::SyncUpdateEngineQueueManager>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<realityio::SyncUpdateEngineQueueManager>::operator()[abi:ne180100](*(void *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<realityio::SyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::SyncUpdateEngineQueueManager>,std::allocator<realityio::SyncUpdateEngineQueueManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<realityio::SyncUpdateEngineQueueManager>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::deque<std::shared_ptr<realityio::SyncUpdateEngineQueueManager::EngineQueueTask>>::~deque[abi:ne180100]((void *)(result + 88));
    std::mutex::~mutex((std::mutex *)(v1 + 24));

    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::__shared_ptr_pointer<realityio::AsyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::AsyncUpdateEngineQueueManager>,std::allocator<realityio::AsyncUpdateEngineQueueManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<realityio::AsyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::AsyncUpdateEngineQueueManager>,std::allocator<realityio::AsyncUpdateEngineQueueManager>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {

    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<realityio::AsyncUpdateEngineQueueManager *,std::shared_ptr<realityio::EngineQueueManager>::__shared_ptr_default_delete<realityio::EngineQueueManager,realityio::AsyncUpdateEngineQueueManager>,std::allocator<realityio::AsyncUpdateEngineQueueManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::unique_ptr<realityio::AsyncUpdateEngineQueueManager>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {

    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3482B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3482B8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  realityio::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)v3, 2040, v1);
  realityio::LiveSceneUpdate::makeFromTrackedStageState(*(void ***)(v1 + 232), *(realityio::UsdStageStateTracker **)(v1 + 24), (uint64_t)&v2);
  operator new();
}

void sub_23F70A894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x2455D2BD0](v9, 0x10F1C40428E376ELL);
  realityio::LiveSceneUpdate::~LiveSceneUpdate((realityio::LiveSceneUpdate *)&a9);
  realityio::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((realityio::internal::AriadneSignpostScopeGuard *)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_0>,void ()(void)>::target_type()
{
}

realityio::LiveSceneUpdate *realityio::LiveSceneUpdate::LiveSceneUpdate(realityio::LiveSceneUpdate *this, const realityio::LiveSceneUpdate *a2)
{
  *(void *)this = &unk_26F3447A8;
  *((void *)this + 1) = *((void *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)this + 1);
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)this + 2, *((const void **)a2 + 2), *((void *)a2 + 3), (uint64_t)(*((void *)a2 + 3) - *((void *)a2 + 2)) >> 3);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  uint64_t v4 = (const realityio::internal::PrimToEntityMap::EntityData *)*((void *)a2 + 5);
  uint64_t v5 = (const realityio::internal::PrimToEntityMap::EntityData *)*((void *)a2 + 6);
  uint64_t v88 = this;
  long long v89 = a2;
  char v103 = (uint64_t *)((char *)this + 40);
  LOBYTE(v104) = 0;
  if (v5 != v4)
  {
    unint64_t v6 = 0x4EC4EC4EC4EC4EC5 * ((v5 - v4) >> 3);
    if (v6 >= 0x276276276276277) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::internal::PrimToEntityMap::EntityData>>((uint64_t)this + 56, v6);
    *((void *)this + 5) = v7;
    *((void *)this + 6) = v7;
    *((void *)this + 7) = (char *)v7 + 104 * v8;
    char v101 = v7;
    v106[0] = (uint64_t)v7;
    uint64_t v96 = (uint64_t *)((char *)this + 56);
    uint64_t v97 = v106;
    id v98 = (uint64_t *)&v101;
    char v99 = 0;
    do
    {
      realityio::internal::PrimToEntityMap::EntityData::EntityData(v7, v4);
      uint64_t v4 = (const realityio::internal::PrimToEntityMap::EntityData *)((char *)v4 + 104);
      uint64_t v7 = (std::string *)((char *)v101 + 104);
      char v101 = (std::string *)((char *)v101 + 104);
    }
    while (v4 != v5);
    *((void *)this + 6) = v7;
  }
  *((void *)this + 9) = 0;
  uint64_t v9 = (uint64_t *)((char *)this + 72);
  *((void *)this + 8) = (char *)this + 72;
  uint64_t v10 = (char *)this + 64;
  *((void *)v10 + 2) = 0;
  uint64_t v11 = (char *)*((void *)a2 + 8);
  uint64_t v12 = (char *)a2 + 72;
  if (v11 != (char *)a2 + 72)
  {
    while (1)
    {
      uint64_t v13 = *v9;
      if (*(uint64_t **)v10 == v9) {
        break;
      }
      uint64_t v14 = v9;
      if (v13)
      {
        do
        {
          unint64_t v15 = (uint64_t *)v13;
          uint64_t v13 = *(void *)(v13 + 8);
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v15 = (uint64_t *)v14[2];
          BOOL v16 = *v15 == (void)v14;
          uint64_t v14 = v15;
        }
        while (v16);
      }
      if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v15 + 4, (void *)v11 + 4))
      {
        if (!*v9) {
          goto LABEL_14;
        }
LABEL_16:
        char v103 = v15;
        uint64_t v17 = (uint64_t **)(v15 + 1);
        goto LABEL_18;
      }
      uint64_t v17 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v10, &v103, (void *)v11 + 4);
LABEL_18:
      if (!*v17) {
        goto LABEL_19;
      }
LABEL_20:
      uint64_t v19 = (char *)*((void *)v11 + 1);
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (char *)*((void *)v11 + 2);
          BOOL v16 = *(void *)v20 == (void)v11;
          uint64_t v11 = v20;
        }
        while (!v16);
      }
      uint64_t v11 = v20;
      if (v20 == v12) {
        goto LABEL_26;
      }
    }
    unint64_t v15 = v9;
    if (!v13)
    {
LABEL_14:
      char v103 = v9;
      uint64_t v17 = (uint64_t **)v9;
LABEL_19:
      uint64_t v18 = (uint64_t *)operator new(0x30uLL);
      uint64_t v96 = v18;
      uint64_t v97 = v9;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 8, (_DWORD *)v11 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v18 + 9, (_DWORD *)v11 + 9);
      v18[5] = *((void *)v11 + 5);
      LOBYTE(v98) = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v10, (uint64_t)v103, v17, v18);
      uint64_t v96 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned long>,void *>>>>::reset[abi:ne180100]((uint64_t)&v96, 0);
      goto LABEL_20;
    }
    goto LABEL_16;
  }
LABEL_26:
  *((void *)v88 + 12) = 0;
  uint64_t v21 = (uint64_t *)((char *)v88 + 96);
  *((void *)v88 + 11) = (char *)v88 + 96;
  uint64_t v22 = (uint64_t **)((char *)v88 + 88);
  *((void *)v88 + 13) = 0;
  uint64_t v23 = (const void **)*((void *)v89 + 11);
  if (v23 != (const void **)((char *)v89 + 96))
  {
    while (1)
    {
      uint64_t v24 = (char *)*v21;
      if (*v22 == v21) {
        break;
      }
      char v25 = (char *)v88 + 96;
      if (v24)
      {
        do
        {
          int v26 = v24;
          uint64_t v24 = (char *)*((void *)v24 + 1);
        }
        while (v24);
      }
      else
      {
        do
        {
          int v26 = (char *)*((void *)v25 + 2);
          BOOL v16 = *(void *)v26 == (void)v25;
          char v25 = v26;
        }
        while (v16);
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)v88 + 104, (const void **)v26 + 4, v23 + 4))
      {
        if (!*v21) {
          goto LABEL_34;
        }
LABEL_36:
        uint64_t v96 = (uint64_t *)v26;
        uint64_t v27 = (uint64_t **)(v26 + 8);
        goto LABEL_38;
      }
      uint64_t v27 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)v22, &v96, v23 + 4);
LABEL_38:
      if (!*v27) {
        goto LABEL_39;
      }
LABEL_43:
      os_signpost_id_t v31 = (const void **)v23[1];
      if (v31)
      {
        do
        {
          unint64_t v32 = (const void ***)v31;
          os_signpost_id_t v31 = (const void **)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          unint64_t v32 = (const void ***)v23[2];
          BOOL v16 = *v32 == v23;
          uint64_t v23 = (const void **)v32;
        }
        while (!v16);
      }
      uint64_t v23 = (const void **)v32;
      if (v32 == (const void ***)((char *)v89 + 96)) {
        goto LABEL_49;
      }
    }
    int v26 = (char *)v88 + 96;
    if (!v24)
    {
LABEL_34:
      uint64_t v96 = (uint64_t *)((char *)v88 + 96);
      uint64_t v27 = (uint64_t **)((char *)v88 + 96);
LABEL_39:
      long long v28 = (uint64_t *)operator new(0x40uLL);
      uint64_t v29 = (std::string *)(v28 + 4);
      if (*((char *)v23 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v29, (const std::string::value_type *)v23[4], (std::string::size_type)v23[5]);
      }
      else
      {
        long long v30 = *((_OWORD *)v23 + 2);
        v28[6] = (uint64_t)v23[6];
        *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
      }
      v28[7] = (uint64_t)v23[7];
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v22, (uint64_t)v96, v27, v28);
      goto LABEL_43;
    }
    goto LABEL_36;
  }
LABEL_49:
  *((void *)v88 + 15) = 0;
  *((void *)v88 + 14) = (char *)v88 + 120;
  os_signpost_id_t v91 = (uint64_t **)((char *)v88 + 112);
  uint64_t v92 = (uint64_t *)((char *)v88 + 120);
  *((void *)v88 + 16) = 0;
  uint64_t v33 = (void *)*((void *)v89 + 14);
  if (v33 != (void *)((char *)v89 + 120))
  {
    do
    {
      BOOL v34 = (void *)((char *)v88 + 120);
      int v35 = (void *)*v92;
      if (*v91 != v92)
      {
        uint64_t v36 = (char *)v88 + 120;
        if (v35)
        {
          do
          {
            BOOL v34 = v35;
            int v35 = (void *)v35[1];
          }
          while (v35);
        }
        else
        {
          do
          {
            BOOL v34 = (void *)*((void *)v36 + 2);
            BOOL v16 = *v34 == (void)v36;
            uint64_t v36 = (char *)v34;
          }
          while (v16);
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v34 + 4, v33 + 4))
        {
          unint64_t v37 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)v91, &v100, v33 + 4);
LABEL_60:
          if (*v37) {
            goto LABEL_97;
          }
          goto LABEL_63;
        }
        int v35 = (void *)*v92;
      }
      if (v35)
      {
        uint64_t v100 = v34;
        unint64_t v37 = (uint64_t **)(v34 + 1);
        goto LABEL_60;
      }
      unint64_t v37 = (uint64_t **)((char *)v88 + 120);
      uint64_t v100 = (void *)((char *)v88 + 120);
LABEL_63:
      uint64_t v38 = (uint64_t *)operator new(0x40uLL);
      uint64_t v90 = v37;
      char v103 = v38;
      uint64_t v104 = (char *)v88 + 120;
      char v105 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v38 + 8, (_DWORD *)v33 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v38 + 9, (_DWORD *)v33 + 9);
      v38[6] = 0;
      uint64_t v39 = v38 + 6;
      v38[5] = (uint64_t)(v38 + 6);
      uint64_t v40 = (uint64_t)(v38 + 5);
      *(void *)(v40 + 16) = 0;
      BOOL v41 = (void *)v33[5];
      if (v41 != v33 + 6)
      {
        os_signpost_id_t v42 = 0;
        uint64_t v43 = v39;
        uint64_t v93 = v40;
        uint64_t v94 = v39;
        while (1)
        {
          if (v43 == v39)
          {
            uint64_t v45 = v39;
            if (v42)
            {
LABEL_74:
              v106[0] = (uint64_t)v45;
              uint64_t v46 = (uint64_t **)(v45 + 1);
              goto LABEL_76;
            }
          }
          else
          {
            uint64_t v44 = v39;
            if (v42)
            {
              do
              {
                uint64_t v45 = v42;
                os_signpost_id_t v42 = (uint64_t *)v42[1];
              }
              while (v42);
            }
            else
            {
              do
              {
                uint64_t v45 = (uint64_t *)v44[2];
                BOOL v16 = *v45 == (void)v44;
                uint64_t v44 = v45;
              }
              while (v16);
            }
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v45 + 4, v41 + 4))
            {
              uint64_t v46 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfPath>(v40, v106, v41 + 4);
LABEL_76:
              if (*v46) {
                goto LABEL_89;
              }
              goto LABEL_77;
            }
            if (*v39) {
              goto LABEL_74;
            }
          }
          v106[0] = (uint64_t)v39;
          uint64_t v46 = (uint64_t **)v39;
LABEL_77:
          unint64_t v47 = (uint64_t *)operator new(0x40uLL);
          uint64_t v96 = v47;
          uint64_t v97 = v39;
          LOBYTE(v98) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v47 + 8, (_DWORD *)v41 + 8);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v47 + 9, (_DWORD *)v41 + 9);
          v47[5] = 0;
          v47[6] = 0;
          v47[7] = 0;
          uint64_t v49 = v41[5];
          uint64_t v48 = v41[6];
          char v101 = (std::string *)(v47 + 5);
          char v102 = 0;
          if (v48 != v49)
          {
            unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 4);
            if (v50 >= 0x555555555555556) {
              std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)(v47 + 7), v50);
            uint64_t v52 = 0;
            v47[5] = (uint64_t)v51;
            v47[6] = (uint64_t)v51;
            v47[7] = (uint64_t)&v51[48 * v53];
            do
            {
              uint64_t v54 = (std::string *)&v51[v52];
              uint64_t v55 = (long long *)(v49 + v52);
              if (*(char *)(v49 + v52 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v54, *(const std::string::value_type **)v55, *((void *)v55 + 1));
              }
              else
              {
                long long v56 = *v55;
                v54->__r_.__value_.__r.__words[2] = *((void *)v55 + 2);
                *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v56;
              }
              unint64_t v57 = (std::string *)&v51[v52 + 24];
              char v58 = (const std::string::value_type **)(v49 + v52 + 24);
              if (*(char *)(v49 + v52 + 47) < 0)
              {
                std::string::__init_copy_ctor_external(v57, *v58, *(void *)(v49 + v52 + 32));
              }
              else
              {
                long long v59 = *(_OWORD *)v58;
                *(void *)&v51[v52 + 40] = *(void *)(v49 + v52 + 40);
                *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v59;
              }
              v52 += 48;
            }
            while (v49 + v52 != v48);
            v47[6] = (uint64_t)&v51[v52];
            unint64_t v47 = v96;
            uint64_t v40 = v93;
            uint64_t v39 = v94;
          }
          LOBYTE(v98) = 1;
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v40, v106[0], v46, v47);
          uint64_t v96 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v96, 0);
LABEL_89:
          std::string::size_type v60 = (void *)v41[1];
          if (v60)
          {
            do
            {
              uint64_t v61 = v60;
              std::string::size_type v60 = (void *)*v60;
            }
            while (v60);
          }
          else
          {
            do
            {
              uint64_t v61 = (void *)v41[2];
              BOOL v16 = *v61 == (void)v41;
              BOOL v41 = v61;
            }
            while (!v16);
          }
          if (v61 == v33 + 6) {
            break;
          }
          os_signpost_id_t v42 = (uint64_t *)*v39;
          uint64_t v43 = *(uint64_t **)v40;
          BOOL v41 = v61;
        }
      }
      char v105 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v91, (uint64_t)v100, v90, v103);
      char v103 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v103, 0);
LABEL_97:
      uint64_t v62 = (void *)v33[1];
      if (v62)
      {
        do
        {
          uint64_t v63 = v62;
          uint64_t v62 = (void *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          uint64_t v63 = (void *)v33[2];
          BOOL v16 = *v63 == (void)v33;
          uint64_t v33 = v63;
        }
        while (!v16);
      }
      uint64_t v33 = v63;
    }
    while (v63 != (void *)((char *)v89 + 120));
  }
  *((void *)v88 + 18) = 0;
  uint64_t v64 = (uint64_t *)((char *)v88 + 144);
  *((void *)v88 + 17) = (char *)v88 + 144;
  std::string v95 = (uint64_t **)((char *)v88 + 136);
  *((void *)v88 + 19) = 0;
  unint64_t v65 = (void *)*((void *)v89 + 17);
  if (v65 != (void *)((char *)v89 + 144))
  {
    do
    {
      os_signpost_id_t v66 = (void *)*v64;
      if (*v95 == v64)
      {
        id v68 = (void *)((char *)v88 + 144);
        if (v66)
        {
LABEL_113:
          v106[0] = (uint64_t)v68;
          uint64_t v69 = (uint64_t **)(v68 + 1);
          goto LABEL_115;
        }
      }
      else
      {
        uint64_t v67 = (char *)v88 + 144;
        if (v66)
        {
          do
          {
            id v68 = v66;
            os_signpost_id_t v66 = (void *)v66[1];
          }
          while (v66);
        }
        else
        {
          do
          {
            id v68 = (void *)*((void *)v67 + 2);
            BOOL v16 = *v68 == (void)v67;
            uint64_t v67 = (char *)v68;
          }
          while (v16);
        }
        if (!pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<())
        {
          uint64_t v69 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::__find_equal<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((uint64_t)v95, v106);
LABEL_115:
          if (*v69) {
            goto LABEL_145;
          }
          goto LABEL_116;
        }
        if (*v64) {
          goto LABEL_113;
        }
      }
      v106[0] = (uint64_t)v88 + 144;
      uint64_t v69 = (uint64_t **)((char *)v88 + 144);
LABEL_116:
      uint64_t v70 = (char *)operator new(0x68uLL);
      char v103 = (uint64_t *)v70;
      uint64_t v104 = (char *)v88 + 144;
      char v105 = 0;
      os_signpost_id_t v71 = (std::string *)(v70 + 32);
      if (*((char *)v65 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v71, (const std::string::value_type *)v65[4], v65[5]);
      }
      else
      {
        long long v72 = *((_OWORD *)v65 + 2);
        *((void *)v70 + 6) = v65[6];
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
      }
      int8x8_t v73 = (std::string *)(v70 + 56);
      if (*((char *)v65 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(v73, (const std::string::value_type *)v65[7], v65[8]);
      }
      else
      {
        long long v74 = *(_OWORD *)(v65 + 7);
        *((void *)v70 + 9) = v65[9];
        *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
      }
      *((void *)v70 + 11) = 0;
      os_signpost_id_t v75 = (std::string **)(v70 + 88);
      *((void *)v70 + 10) = v70 + 88;
      *((void *)v70 + 12) = 0;
      std::chrono::steady_clock::time_point v76 = (void *)v65[10];
      if (v76 != v65 + 11)
      {
        std::string::size_type size = 0;
        uint64_t v78 = (std::string **)(v70 + 88);
        while (1)
        {
          if (v78 == v75)
          {
            std::string::size_type v80 = (std::string *)(v70 + 88);
            if (size)
            {
LABEL_133:
              char v101 = v80;
              p_std::string::size_type size = (uint64_t **)&v80->__r_.__value_.__l.__size_;
              goto LABEL_135;
            }
          }
          else
          {
            int v79 = (std::string *)(v70 + 88);
            if (size)
            {
              do
              {
                std::string::size_type v80 = size;
                std::string::size_type size = (std::string *)size->__r_.__value_.__l.__size_;
              }
              while (size);
            }
            else
            {
              do
              {
                std::string::size_type v80 = (std::string *)v79->__r_.__value_.__r.__words[2];
                BOOL v16 = v80->__r_.__value_.__r.__words[0] == (void)v79;
                int v79 = v80;
              }
              while (v16);
            }
            if (!realityio::TextureImportOperationSettings::operator<((uint64_t)&v80[1].__r_.__value_.__l.__size_, (uint64_t)(v76 + 4)))
            {
              p_std::string::size_type size = (uint64_t **)std::__tree<realityio::TextureImportOperationSettings>::__find_equal<realityio::TextureImportOperationSettings>((uint64_t)(v70 + 80), &v101, (uint64_t)(v76 + 4));
LABEL_135:
              if (*p_size) {
                goto LABEL_137;
              }
              goto LABEL_136;
            }
            if (*v75) {
              goto LABEL_133;
            }
          }
          char v101 = (std::string *)(v70 + 88);
          p_std::string::size_type size = (uint64_t **)(v70 + 88);
LABEL_136:
          std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>((uint64_t)(v70 + 80), (const realityio::TextureImportOperationSettings *)(v76 + 4), (uint64_t)&v96);
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v70 + 10, (uint64_t)v101, p_size, v96);
          uint64_t v96 = 0;
          std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100]((uint64_t)&v96, 0);
LABEL_137:
          int64_t v82 = (void *)v76[1];
          if (v82)
          {
            do
            {
              unint64_t v83 = v82;
              int64_t v82 = (void *)*v82;
            }
            while (v82);
          }
          else
          {
            do
            {
              unint64_t v83 = (void *)v76[2];
              BOOL v16 = *v83 == (void)v76;
              std::chrono::steady_clock::time_point v76 = v83;
            }
            while (!v16);
          }
          if (v83 == v65 + 11) {
            break;
          }
          std::string::size_type size = *v75;
          uint64_t v78 = (std::string **)*((void *)v70 + 10);
          std::chrono::steady_clock::time_point v76 = v83;
        }
      }
      char v105 = 1;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(v95, v106[0], v69, v103);
      char v103 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v103, 0);
LABEL_145:
      uint64_t v84 = (void *)v65[1];
      if (v84)
      {
        do
        {
          uint64_t v85 = v84;
          uint64_t v84 = (void *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          uint64_t v85 = (void *)v65[2];
          BOOL v16 = *v85 == (void)v65;
          unint64_t v65 = v85;
        }
        while (!v16);
      }
      unint64_t v65 = v85;
    }
    while (v85 != (void *)((char *)v89 + 144));
  }
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>::map[abi:ne180100]((uint64_t *)v88 + 20, (uint64_t)v89 + 160);
  *((void *)v88 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *((void *)v89 + 24);
  *((void *)v88 + 23) = &unk_26F335EC8;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v88 + 24);
  std::map<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>::map[abi:ne180100]((uint64_t *)v88 + 25, (uint64_t)v89 + 200);
  *((void *)v88 + 28) = &unk_26F341FE8;
  std::unordered_set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::unordered_set((uint64_t)v88 + 232, (uint64_t)v89 + 232);
  uint64_t v86 = *((void *)v89 + 34);
  *((unsigned char *)v88 + 280) = *((unsigned char *)v89 + 280);
  *((void *)v88 + 34) = v86;
  return v88;
}

void sub_23F70B440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, atomic_uint **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v25, *(void **)(v27 + 208));
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(v24);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::pair<BOOL,BOOL>>>>::destroy(v23, *(void **)(a11 + 168));
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>,std::less<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfAssetPath,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a22, *v26);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::map<pxrInternal__aapl__pxrReserved__::SdfPath,std::vector<realityio::internal::TexturePrimToMaterialPrimMap::MaterialData>>>>>::destroy(a17, *a18);
  realityio::internal::PrimToEntityMap::~PrimToEntityMap(a9);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(a10);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::internal::PrimToEntityMap::EntityData>,realityio::internal::PrimToEntityMap::EntityData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 104;
        std::allocator<realityio::internal::PrimToEntityMap::EntityData>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F348338;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F348338;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveScene(BOOL)::$_1>,void ()(void)>::target_type()
{
}

void *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F3483B8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26F3483B8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 1));

  JUMPOUT(0x2455D2BD0);
}

_DWORD *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (_DWORD *)(a1 + 8);
  uint64_t v3 = operator new(0x18uLL);
  *(void *)uint64_t v3 = &unk_26F3483B8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 2, v2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v3 + 3, (_DWORD *)(a1 + 12));
  *((void *)v3 + 2) = *(void *)(a1 + 16);
  return v3;
}

_DWORD *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3483B8;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 8), (_DWORD *)(a1 + 8));
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a2 + 12), (_DWORD *)(a1 + 12));
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v17 = v18;
  realityio::UsdPrimDelta::UsdPrimDelta((uint64_t)v26, (_DWORD *)(a1 + 8), 1, (uint64_t)&v17);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::destroy((uint64_t)&v17, v18[0]);
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v24 = v25;
  uint64_t v17 = v1;
  uint64_t v3 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>(&v24, v1, (uint64_t)&std::piecewise_construct, &v17);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v3 + 6), &v27);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v3 + 52, &v28);
  *((unsigned char *)v3 + 56) = v29;
  if (v3 + 5 != (uint64_t *)v26)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,std::__tree_node<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,realityio::UsdPropertyDelta>,void *> *,long>>((uint64_t **)v3 + 8, v30, v31);
    *((_DWORD *)v3 + 32) = v32;
    std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<pxrInternal__aapl__pxrReserved__::TfToken,void *> *>>(v3 + 12, (void *)v31[5], 0);
  }
  uint64_t v22 = *(atomic_uint **)(v2 + 32);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v22);
  realityio::UsdStageDelta::UsdStageDelta(v23, &v22, (uint64_t)&v24);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v22);
  realityio::UsdStageStateTracker::updateWithStageDelta(*(realityio::UsdStageStateTracker **)(v2 + 232), (const realityio::UsdStageDelta *)v23);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  unint64_t v4 = *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v1) & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    if (*(char *)(v4 + 39) < 0)
    {
      if (!*(void *)(v4 + 24)) {
        goto LABEL_32;
      }
    }
    else if (!*(unsigned char *)(v4 + 39))
    {
      goto LABEL_32;
    }
    NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v1);
    std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>::pair[abi:ne180100]<true,0>((uint64_t)&v17, v1, NameToken);
    uint64_t v6 = v20;
    if ((unint64_t)v20 >= v21)
    {
      uint64_t v7 = (v20 - v19) >> 4;
      if ((unint64_t)(v7 + 1) >> 60) {
        std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v8 = (uint64_t)(v21 - (void)v19) >> 3;
      if (v8 <= v7 + 1) {
        unint64_t v8 = v7 + 1;
      }
      if (v21 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v8;
      }
      if (v9)
      {
        if (v9 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v10 = (char *)operator new(16 * v9);
      }
      else
      {
        uint64_t v10 = 0;
      }
      uint64_t v11 = &v10[16 * v7];
      uint64_t v12 = &v10[16 * v9];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v11, &v17);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 1, (_DWORD *)&v17 + 1);
      *((void **)v11 + 1) = v18[0];
      v18[0] = 0;
      uint64_t v14 = v19;
      uint64_t v13 = v20;
      if (v20 == v19)
      {
        uint64_t v19 = v11;
        uint64_t v20 = v11 + 16;
        unint64_t v21 = (unint64_t)v12;
      }
      else
      {
        uint64_t v15 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11[v15 - 16], &v13[v15 - 16]);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v11[v15 - 12], &v13[v15 - 12]);
          *(void *)&v11[v15 - 8] = *(void *)&v13[v15 - 8];
          *(void *)&v13[v15 - 8] = 0;
          v15 -= 16;
        }
        while (&v13[v15] != v14);
        uint64_t v13 = v19;
        BOOL v16 = v20;
        uint64_t v19 = &v11[v15];
        uint64_t v20 = v11 + 16;
        unint64_t v21 = (unint64_t)v12;
        while (v16 != v13)
        {
          v16 -= 16;
          std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100]((uint64_t)v16);
        }
      }
      if (v13) {
        operator delete(v13);
      }
      uint64_t v20 = v11 + 16;
      if (((uint64_t)v18[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v18[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v20, &v17);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v6 + 1, (_DWORD *)&v17 + 1);
      *((void **)v6 + 1) = v18[0];
      v18[0] = 0;
      uint64_t v20 = v6 + 16;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
  }
LABEL_32:
  realityio::LiveSceneUpdate::makeFromTrackedStageState(*(void ***)(v2 + 232), *(realityio::UsdStageStateTracker **)(v2 + 24), (uint64_t)&v17);
  operator new();
}

void sub_23F70BD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  a9 = (void **)&a45;
  std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](&a9);
  realityio::UsdStageDelta::~UsdStageDelta((realityio::UsdStageDelta *)&a49);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::UsdPrimDelta>>>::destroy(v49 - 200, *(void **)(v49 - 192));
  realityio::UsdPrimDelta::~UsdPrimDelta((realityio::UsdPrimDelta *)(v49 - 176));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__alloc_func<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateAsset(pxrInternal__aapl__pxrReserved__::SdfPath,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::TfToken>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *std::vector<realityio::LiveSceneManager::AssetRecord>::__construct_one_at_end[abi:ne180100]<realityio::LiveSceneManager::AssetRecord>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)uint64_t v4 = *(void *)a2;
  *(void *)a2 = 0;
  long long v5 = *(_OWORD *)(a2 + 8);
  *(void *)(v4 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(v4 + 8) = v5;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  *(void *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 32), (_DWORD *)(a2 + 32));
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v4 + 36), (_DWORD *)(a2 + 36));
  *(void *)(a1 + 8) = v4 + 40;
  return result;
}

uint64_t std::vector<realityio::LiveSceneManager::AssetRecord>::__push_back_slow_path<realityio::LiveSceneManager::AssetRecord>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  void v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[40 * v9];
  *(void *)uint64_t v11 = *(void *)a2;
  *(void *)a2 = 0;
  long long v12 = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(_OWORD *)(v11 + 8) = v12;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  *(void *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 8, (_DWORD *)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v11 + 9, (_DWORD *)(a2 + 36));
  void v15[2] = v11 + 40;
  std::vector<realityio::LiveSceneManager::AssetRecord>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::~__split_buffer(v15);
  return v13;
}

void sub_23F70C100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<realityio::LiveSceneManager::AssetRecord>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  if (a3 != a5)
  {
    uint64_t v9 = a3;
    uint64_t v10 = a3;
    do
    {
      uint64_t v11 = *(void *)(v10 - 40);
      v10 -= 40;
      *(void *)(v7 - 40) = v11;
      if (v11) {
        RERetain();
      }
      long long v12 = (std::string *)(v7 - 32);
      if (*(char *)(v9 - 9) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(v9 - 32), *(void *)(v9 - 24));
      }
      else
      {
        long long v13 = *(_OWORD *)(v9 - 32);
        *(void *)(v7 - 16) = *(void *)(v9 - 16);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      uint64_t v7 = v16 - 40;
      v16 -= 40;
      uint64_t v9 = v10;
    }
    while (v10 != a5);
    return v15;
  }
  return a6;
}

void sub_23F70C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v9 - 40));
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<realityio::LiveSceneManager::AssetRecord>,std::reverse_iterator<realityio::LiveSceneManager::AssetRecord*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    if (v2 != v3)
    {
      uint64_t v4 = *(void *)a1;
      do
      {
        std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100](v4, v2);
        v2 += 40;
      }
      while (v2 != v3);
    }
  }
  return a1;
}

void **std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<realityio::LiveSceneManager::AssetRecord>::clear[abi:ne180100](void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = v3[4];
      v3[2] = v1 - 40;
      uint64_t result = std::allocator<realityio::LiveSceneManager::AssetRecord>::destroy[abi:ne180100](v4, v1 - 40);
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void *std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1)
{
  if (!*((void *)&xmmword_268C40BE8 + 1)) {
    return 0;
  }
  unint64_t v1 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v2 = bswap64(0x9E3779B97F4A7C55 * (a1 & 0xFFFFFFFFFFFFFFF8));
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_268C40BE8 + 8));
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = v2;
    if (v2 >= *((void *)&xmmword_268C40BE8 + 1)) {
      unint64_t v4 = v2 % *((void *)&xmmword_268C40BE8 + 1);
    }
  }
  else
  {
    unint64_t v4 = (*((void *)&xmmword_268C40BE8 + 1) - 1) & v2;
  }
  uint64_t v5 = *(void **)(xmmword_268C40BE8 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v2 == v7)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v1) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *((void *)&xmmword_268C40BE8 + 1)) {
            v7 %= *((void *)&xmmword_268C40BE8 + 1);
          }
        }
        else
        {
          v7 &= *((void *)&xmmword_268C40BE8 + 1) - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::find<REAsset *>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a3) + 8) ^ HIDWORD(a3));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a3) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= a2) {
      unint64_t v7 = v5 % a2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (a2 - 1);
  }
  uint64_t v8 = *(void **)(a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a3) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= a2) {
            v10 %= a2;
          }
        }
        else
        {
          v10 &= a2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<REAsset *,std::hash<REAsset *>,std::equal_to<REAsset *>,std::allocator<REAsset *>>::__emplace_unique_key_args<REAsset *,REAsset * const&>(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    uint64_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v8;
  void v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v21 = operator new(8 * *(void *)&prime);
          uint64_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            long long v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  void *v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  long long v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                long long v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        int v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v32 = *(void **)a1;
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *uint64_t v14 = *v33;
LABEL_72:
    *uint64_t v33 = v14;
    goto LABEL_73;
  }
  *uint64_t v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    uint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_23F70C970(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26F348438;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F348438;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

pxrInternal__aapl__pxrReserved__ *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v94[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int8x16_t v74 = *(int8x16_t *)(a1 + 24);
  unsigned int v5 = atomic_load((unsigned int *)(*(void *)(v4 + 24) + 28));
  if (v5 == 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v76, "standardVisitDirtyPrimCancel");
    realityio::ImportSession::CancelledException::CancelledException(exception, &v76);
  }
  unint64_t v7 = *(uint64_t ****)(v4 + 240);
  unint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)(v4 + 40) + 8));
  PrimAtPath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v87, v8, a2);
  BOOL v86 = 0;
  BOOL v86 = *(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(PrimAtPath);
  if (v86
    || (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v87) & 1) == 0)
  {
    MEMORY[0x2455CF810](&v85, "");
  }
  else
  {
    uint64_t v11 = v88;
    if (!v88 || (*((unsigned char *)v88 + 57) & 8) != 0) {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v88, v10);
    }
    uint64_t v12 = **((void **)v11 + 3);
    uint64_t v85 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v85 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  memset(v83, 0, sizeof(v83));
  int v84 = 1065353216;
  *(void *)&long long v76 = v83;
  *((void *)&v76 + 1) = &v86;
  uint64_t v77 = v4;
  uint64_t v78 = a2;
  uint64_t v79 = v3;
  std::string::size_type v80 = &v87;
  int8x16_t v13 = vextq_s8(v74, v74, 8uLL);
  uint64_t v14 = *(void *)(v4 + 240);
  unint64_t v81 = &v85;
  int v15 = *(_DWORD *)(v4 + 288);
  if (v15 == 1) {
    uint64_t v16 = v14 + 112;
  }
  else {
    uint64_t v16 = v14 + 64;
  }
  if (v15 == 1) {
    uint64_t v17 = 136;
  }
  else {
    uint64_t v17 = 88;
  }
  if (v15 == 1) {
    uint64_t v18 = v14 + 136;
  }
  else {
    uint64_t v18 = v14 + 88;
  }
  int8x16_t v82 = v13;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_51, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_51))
  {
    uint64_t v71 = v16;
    MEMORY[0x2455CF810](v91, "com.apple.mesh-component-builder");
    MEMORY[0x2455CF810](&v92, "com.apple.mesh-asset-builder");
    MEMORY[0x2455CF810](&v93, "com.apple.mesh-model-descriptor-builder");
    MEMORY[0x2455CF810](v94, "com.apple.material-asset-builder");
    uint64_t v72 = 0;
    int8x8_t v73 = 0;
    unint64_t v39 = 0;
    xmmword_268C40BE8 = 0u;
    *(_OWORD *)&qword_268C40BF8 = 0u;
    dword_268C40C08 = 1065353216;
    while (1)
    {
      uint64_t v40 = *(void *)&v91[8 * v72];
      BOOL v41 = (atomic_uint *)(v40 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v75 = bswap64(0x9E3779B97F4A7C55 * (v40 & 0xFFFFFFFFFFFFFFF8));
      if (v39)
      {
        uint8x8_t v42 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
        v42.i16[0] = vaddlv_u8(v42);
        if (v42.u32[0] > 1uLL)
        {
          unint64_t v2 = v75;
          if (v75 >= v39) {
            unint64_t v2 = v75 % v39;
          }
        }
        else
        {
          unint64_t v2 = v75 & (v39 - 1);
        }
        uint64_t v43 = *(void **)(xmmword_268C40BE8 + 8 * v2);
        if (v43)
        {
          for (uint64_t i = (void *)*v43; i; uint64_t i = (void *)*i)
          {
            unint64_t v45 = i[1];
            if (v45 == v75)
            {
              if ((atomic_uint *)(i[2] & 0xFFFFFFFFFFFFFFF8) == v41) {
                goto LABEL_148;
              }
            }
            else
            {
              if (v42.u32[0] > 1uLL)
              {
                if (v45 >= v39) {
                  v45 %= v39;
                }
              }
              else
              {
                v45 &= v39 - 1;
              }
              if (v45 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v46 = operator new(0x18uLL);
      *uint64_t v46 = 0;
      v46[1] = v75;
      unint64_t v47 = v39;
      v46[2] = v40;
      if ((v40 & 7) != 0)
      {
        char add_explicit = atomic_fetch_add_explicit(v41, 2u, memory_order_relaxed);
        int8x8_t v73 = *(int8x8_t *)((char *)&xmmword_268C40BE8 + 8);
        if ((add_explicit & 1) == 0) {
          v46[2] &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v47 = (unint64_t)v73;
      }
      float v49 = (float)(unint64_t)(qword_268C40C00 + 1);
      if (!v39 || (float)(*(float *)&dword_268C40C08 * (float)v39) < v49) {
        break;
      }
LABEL_138:
      uint64_t v65 = xmmword_268C40BE8;
      os_signpost_id_t v66 = *(void **)(xmmword_268C40BE8 + 8 * v2);
      if (v66)
      {
        *uint64_t v46 = *v66;
      }
      else
      {
        *uint64_t v46 = qword_268C40BF8;
        qword_268C40BF8 = (uint64_t)v46;
        *(void *)(v65 + 8 * v2) = &qword_268C40BF8;
        if (!*v46) {
          goto LABEL_147;
        }
        unint64_t v67 = *(void *)(*v46 + 8);
        if ((v39 & (v39 - 1)) != 0)
        {
          if (v67 >= v39) {
            v67 %= v39;
          }
        }
        else
        {
          v67 &= v39 - 1;
        }
        os_signpost_id_t v66 = (void *)(xmmword_268C40BE8 + 8 * v67);
      }
      void *v66 = v46;
LABEL_147:
      ++qword_268C40C00;
      unint64_t v39 = v47;
LABEL_148:
      if (++v72 == 4)
      {
        for (uint64_t j = 24; j != -8; j -= 8)
        {
          uint64_t v70 = *(void *)&v91[j];
          if ((v70 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        __cxa_guard_release(&_MergedGlobals_51);
        uint64_t v16 = v71;
        goto LABEL_21;
      }
    }
    BOOL v50 = (v39 & (v39 - 1)) != 0;
    if (v39 < 3) {
      BOOL v50 = 1;
    }
    unint64_t v51 = v50 | (2 * v39);
    unint64_t v52 = vcvtps_u32_f32(v49 / *(float *)&dword_268C40C08);
    if (v51 <= v52) {
      int8x8_t prime = (int8x8_t)v52;
    }
    else {
      int8x8_t prime = (int8x8_t)v51;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      int8x8_t v73 = *(int8x8_t *)((char *)&xmmword_268C40BE8 + 8);
    }
    if (*(void *)&prime > *(void *)&v73) {
      goto LABEL_103;
    }
    if (*(void *)&prime < *(void *)&v73)
    {
      unint64_t v60 = vcvtps_u32_f32((float)(unint64_t)qword_268C40C00 / *(float *)&dword_268C40C08);
      if (*(void *)&v73 < 3uLL || (uint8x8_t v61 = (uint8x8_t)vcnt_s8(v73), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
      {
        unint64_t v60 = std::__next_prime(v60);
      }
      else
      {
        uint64_t v62 = 1 << -(char)__clz(v60 - 1);
        if (v60 >= 2) {
          unint64_t v60 = v62;
        }
      }
      if (*(void *)&prime <= v60) {
        int8x8_t prime = (int8x8_t)v60;
      }
      if (*(void *)&prime >= *(void *)&v73)
      {
        int8x8_t v73 = *(int8x8_t *)((char *)&xmmword_268C40BE8 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_103:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v54 = operator new(8 * *(void *)&prime);
          uint64_t v55 = (void *)xmmword_268C40BE8;
          *(void *)&xmmword_268C40BE8 = v54;
          if (v55) {
            operator delete(v55);
          }
          uint64_t v56 = 0;
          *((int8x8_t *)&xmmword_268C40BE8 + 1) = prime;
          do
            *(void *)(xmmword_268C40BE8 + 8 * v56++) = 0;
          while (*(void *)&prime != v56);
          unint64_t v57 = (void **)qword_268C40BF8;
          if (qword_268C40BF8)
          {
            unint64_t v58 = *(void *)(qword_268C40BF8 + 8);
            uint8x8_t v59 = (uint8x8_t)vcnt_s8(prime);
            v59.i16[0] = vaddlv_u8(v59);
            if (v59.u32[0] > 1uLL)
            {
              if (v58 >= *(void *)&prime) {
                v58 %= *(void *)&prime;
              }
            }
            else
            {
              v58 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_268C40BE8 + 8 * v58) = &qword_268C40BF8;
            for (k = *v57; k; unint64_t v58 = v64)
            {
              unint64_t v64 = k[1];
              if (v59.u32[0] > 1uLL)
              {
                if (v64 >= *(void *)&prime) {
                  v64 %= *(void *)&prime;
                }
              }
              else
              {
                v64 &= *(void *)&prime - 1;
              }
              if (v64 != v58)
              {
                if (!*(void *)(xmmword_268C40BE8 + 8 * v64))
                {
                  *(void *)(xmmword_268C40BE8 + 8 * v64) = v57;
                  goto LABEL_128;
                }
                std::string *v57 = (void *)*k;
                void *k = **(void **)(xmmword_268C40BE8 + 8 * v64);
                **(void **)(xmmword_268C40BE8 + 8 * v64) = k;
                k = v57;
              }
              unint64_t v64 = v58;
LABEL_128:
              unint64_t v57 = (void **)k;
              k = (void *)*k;
            }
          }
          int8x8_t v73 = prime;
          goto LABEL_132;
        }
        id v68 = (void *)xmmword_268C40BE8;
        *(void *)&xmmword_268C40BE8 = 0;
        if (v68) {
          operator delete(v68);
        }
        int8x8_t v73 = 0;
        *((void *)&xmmword_268C40BE8 + 1) = 0;
      }
    }
LABEL_132:
    if ((*(void *)&v73 & (*(void *)&v73 - 1)) != 0)
    {
      if (v75 >= *(void *)&v73)
      {
        unint64_t v39 = (unint64_t)v73;
        unint64_t v2 = v75 % *(void *)&v73;
      }
      else
      {
        unint64_t v39 = (unint64_t)v73;
        unint64_t v2 = v75;
      }
    }
    else
    {
      unint64_t v39 = (unint64_t)v73;
      unint64_t v2 = (*(void *)&v73 - 1) & v75;
    }
    unint64_t v47 = v39;
    goto LABEL_138;
  }
LABEL_21:
  int v19 = *(_DWORD *)(v4 + 288);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v87))
  {
    uint64_t v23 = *v7;
    uint64_t v24 = v7[1];
    while (v23 != v24)
    {
      if (v19 != 1
        || !std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(**v23))
      {
        realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()((uint64_t)&v76, v23);
      }
      v23 += 2;
    }
    goto LABEL_61;
  }
  uint64_t v20 = (uint64_t **)(v16 + 8);
  unint64_t v21 = *(uint64_t **)(v16 + 8);
  if (!v21) {
    goto LABEL_55;
  }
  uint64_t v22 = v16 + 16;
  while ((std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v22, &v85, v21 + 4) & 1) != 0)
  {
    uint64_t v20 = (uint64_t **)v21;
LABEL_28:
    unint64_t v21 = (uint64_t *)*v21;
    if (!v21) {
      goto LABEL_55;
    }
  }
  if (std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v22, v21 + 4, &v85))
  {
    ++v21;
    goto LABEL_28;
  }
  unint64_t v25 = (uint64_t *)*v21;
  uint8x8_t v26 = (uint64_t **)v21;
  if (*v21)
  {
    uint8x8_t v26 = (uint64_t **)v21;
    do
    {
      int v27 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v22, v25 + 4, &v85);
      uint8x8_t v28 = (uint64_t **)(v25 + 1);
      if (!v27)
      {
        uint8x8_t v28 = (uint64_t **)v25;
        uint8x8_t v26 = (uint64_t **)v25;
      }
      unint64_t v25 = *v28;
    }
    while (*v28);
  }
  uint64_t v29 = (void *)v21[1];
  if (v29)
  {
    do
    {
      int v30 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v22, &v85, v29 + 4);
      unint64_t v31 = v29 + 1;
      if (v30)
      {
        unint64_t v31 = v29;
        uint64_t v20 = (uint64_t **)v29;
      }
      uint64_t v29 = (void *)*v31;
    }
    while (*v31);
  }
  if (v26 != v20)
  {
    do
    {
      if (v19 != 1
        || !std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(*v26[5]))
      {
        realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()((uint64_t)&v76, v26 + 5);
      }
      int v32 = v26[1];
      if (v32)
      {
        do
        {
          uint64_t v33 = (uint64_t **)v32;
          int v32 = (uint64_t *)*v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          uint64_t v33 = (uint64_t **)v26[2];
          BOOL v34 = *v33 == (uint64_t *)v26;
          uint8x8_t v26 = v33;
        }
        while (!v34);
      }
      uint8x8_t v26 = v33;
    }
    while (v33 != v20);
  }
LABEL_55:
  int v35 = *(uint64_t ***)(v14 + v17);
  uint64_t v36 = *(uint64_t ***)(v18 + 8);
  while (v35 != v36)
  {
    if (v19 != 1
      || !std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,std::hash<pxrInternal__aapl__pxrReserved__::TfToken>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::find<pxrInternal__aapl__pxrReserved__::TfToken>(**v35))
    {
      realityio::LiveSceneManager::visitDirtyPrim(pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &,realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>> &)::$_0::operator()((uint64_t)&v76, v35);
    }
    v35 += 2;
  }
LABEL_61:
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)v83);
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v90 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
  __n128 result = v88;
  if (v88) {
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v88);
  }
  return result;
}

void sub_23F70D390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  __cxa_guard_abort(&_MergedGlobals_51);
  std::__hash_table<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::~__hash_table((uint64_t)&a28);
  if ((a34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(v34 - 136);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v34 - 144);
  uint64_t v37 = *(void *)(v34 - 152);
  if (v37) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v37);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_0>,void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void *std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3484C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3484C8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::operator()(void *result)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v1 = result[1];
  uint64_t v2 = *(void *)(v1 + 464);
  uint64_t v3 = *(void **)(v2 + 24);
  uint64_t v4 = *(void **)(v2 + 32);
  if (v3 != v4)
  {
    do
    {
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, (uint64_t)v3);
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
      __n128 result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v6);
      v3 += 4;
    }
    while (v3 != v4);
    uint64_t v2 = *(void *)(v1 + 464);
    unsigned int v5 = *(void **)(v2 + 24);
    uint64_t v3 = *(void **)(v2 + 32);
    if (v3 != v5)
    {
      do
      {
        v3 -= 4;
        __n128 result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
      }
      while (v3 != v5);
      uint64_t v3 = v5;
    }
  }
  *(void *)(v2 + 32) = v3;
  return result;
}

void sub_23F70D79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_1>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::~__func()
{
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F348548;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F348548;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)&long long v12 = v4;
  *((void *)&v12 + 1) = v3;
  uint64_t v7 = *(void **)v5;
  uint64_t v8 = *(void **)(v5 + 8);
  if (v7 != v8)
  {
    while (*v7 != v4)
    {
      v7 += 2;
      if (v7 == v8)
      {
        uint64_t v7 = v8;
        break;
      }
    }
  }
  if (v7 == v8)
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if ((void *)(*(void *)(a1 + 16) + 8) == std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>(*(void *)(a1 + 16), (void *)(v4 + 8)))
    {
      uint8x8_t v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)(v9 + 40) + 8));
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v13, v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 8));
      int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v13);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v15);
      if (v14) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v14);
      }
      if (!IsValid)
      {
LABEL_15:
        realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert(*v6, &v12);
        goto LABEL_16;
      }
      uint64_t v4 = v12;
      std::__tree<pxrInternal__aapl__pxrReserved__::SdfPath>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath const&>(*(uint64_t ***)(a1 + 16), (void *)(v12 + 8), (_DWORD *)(v12 + 8));
    }
    if (!realityio::MutableDirtyPropertyTable::anyMatch((realityio::MutableDirtyPropertyTable *)(v4 + 136), *(const realityio::UsdStageDelta **)(a1 + 32)))goto LABEL_16; {
    unint64_t v6 = (uint64_t **)(a1 + 40);
    }
    goto LABEL_15;
  }
LABEL_16:
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_23F70DA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a13);
  if (a12) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_2>,void ()(std::shared_ptr<realityio::Builder>)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::shared_ptr<realityio::Builder>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,std::vector<realityio::BuilderDependencyDAG::UnsatisfiedInputDescriptorInfo>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::~__func()
{
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F3485D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3485D8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::operator()(void *a1, unint64_t *a2)
{
  unsigned int v2 = atomic_load((unsigned int *)(*(void *)(a1[1] + 24) + 28));
  if (v2 == 1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v25, "accumBuildersCancel");
    realityio::ImportSession::CancelledException::CancelledException(exception, &v25);
  }
  uint64_t v5 = a1[2];
  unint64_t v6 = *(void **)v5;
  uint64_t v7 = *(void **)(v5 + 8);
  unint64_t v8 = *a2;
  if (*(void **)v5 != v7)
  {
    while (*v6 != v8)
    {
      v6 += 2;
      if (v6 == v7)
      {
        unint64_t v6 = *(void **)(v5 + 8);
        break;
      }
    }
  }
  uint64_t v9 = a1[3];
  uint8x8_t v10 = *(void **)v9;
  uint64_t v11 = *(void **)(v9 + 8);
  if (*(void **)v9 != v11)
  {
    while (*v10 != v8)
    {
      v10 += 2;
      if (v10 == v11)
      {
        uint8x8_t v10 = *(void **)(v9 + 8);
        break;
      }
    }
  }
  long long v12 = (void *)a1[4];
  int8x8_t v13 = (int8x8_t)v12[1];
  if (!*(void *)&v13) {
    goto LABEL_26;
  }
  unint64_t v14 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
  unint64_t v15 = 0x9DDFEA08EB382D69 * (HIDWORD(v8) ^ (v14 >> 47) ^ v14);
  unint64_t v16 = 0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47));
  uint8x8_t v17 = (uint8x8_t)vcnt_s8(v13);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    unint64_t v18 = v16;
    if (v16 >= *(void *)&v13) {
      unint64_t v18 = v16 % *(void *)&v13;
    }
  }
  else
  {
    unint64_t v18 = v16 & (*(void *)&v13 - 1);
  }
  int v19 = *(void **)(*v12 + 8 * v18);
  if (!v19 || (uint64_t v20 = (void *)*v19) == 0)
  {
LABEL_26:
    uint64_t result = realityio::Builder::isResync(v8, a1[5]);
    if (v6 != v7 || v10 != v11 || (result & 1) != 0) {
      goto LABEL_31;
    }
    return result;
  }
  while (1)
  {
    unint64_t v21 = v20[1];
    if (v21 == v16) {
      break;
    }
    if (v17.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&v13) {
        v21 %= *(void *)&v13;
      }
    }
    else
    {
      v21 &= *(void *)&v13 - 1;
    }
    if (v21 != v18) {
      goto LABEL_26;
    }
LABEL_25:
    uint64_t v20 = (void *)*v20;
    if (!v20) {
      goto LABEL_26;
    }
  }
  if (v20[2] != v8) {
    goto LABEL_25;
  }
  uint64_t result = realityio::Builder::isResync(v8, a1[5]);
  if (result)
  {
LABEL_31:
    uint64_t v23 = a1[6];
    return (uint64_t)std::__hash_table<std::shared_ptr<realityio::Builder>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::allocator<std::shared_ptr<realityio::Builder>>>::__emplace_unique_key_args<std::shared_ptr<realityio::Builder>,std::shared_ptr<realityio::Builder> const&>(v23, a2, a2);
  }
  return result;
}

void sub_23F70DE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_5>,void ()(std::shared_ptr<realityio::Builder>)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::__clone(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26F348658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F348658;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 464);
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v3 != v4)
  {
    while (1)
    {
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v13, v3);
      unsigned int v6 = atomic_load((unsigned int *)(*(void *)(v1 + 24) + 28));
      if (v6 == 1) {
        break;
      }
      if (!v15) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v15 + 48))(v15);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v13);
      v3 += 32;
      if (v3 == v4) {
        goto LABEL_7;
      }
    }
    **(unsigned char **)(a1 + 16) = 0;
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v13);
  }
LABEL_7:
  uint64_t v7 = *(void *)(v1 + 464);
  uint64_t v9 = *(void **)(v7 + 24);
  for (uint64_t i = *(void **)(v7 + 32);
        i != v9;
  *(void *)(v7 + 32) = v9;
  uint64_t v10 = realityio::internal::enableSignposts(0, 0);
  if (v10) {
    uint64_t v10 = kdebug_trace();
  }
  uint64_t v11 = *(NSObject **)(realityio::logObjects((realityio *)v10) + 16);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(v1 + 456)) {
      long long v12 = "YES";
    }
    else {
      long long v12 = "NO";
    }
    int v13 = 136315138;
    unint64_t v14 = v12;
    _os_log_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_INFO, "Phase 1 complete -> loadAssets() -- updating synchronous: %s\n", (uint8_t *)&v13, 0xCu);
  }
  std::chrono::steady_clock::now();
  realityio::AssetLoadTracker::loadAssets(*(void *)(*(void *)(v1 + 464) + 128), *(void *)(*(void *)(*(void *)(v1 + 24) + 16) + 16), *(unsigned __int8 *)(v1 + 456));
}

void sub_23F70E138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_6>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F3486D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3486D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::operator()(void *result)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = result[1];
  uint64_t v2 = *(void *)(v1 + 464);
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 56);
  if (v3 != v4)
  {
    uint64_t v5 = result;
    while (1)
    {
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v7, v3);
      unsigned int v6 = atomic_load((unsigned int *)(*(void *)(v1 + 24) + 28));
      if (v6 == 1) {
        break;
      }
      if (!v8) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
      __n128 result = std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
      v3 += 32;
      if (v3 == v4) {
        return result;
      }
    }
    *(unsigned char *)v5[2] = 0;
    return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v7);
  }
  return result;
}

void sub_23F70E324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_7>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F348758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F348758;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 464);
  uint64_t v3 = *(void **)(v2 + 104);
  uint64_t v4 = *(void **)(v2 + 112);
  while (v3 != v4)
  {
    if ((REEntityGetSelfEnabled() & 1) == 0) {
      MEMORY[0x2455CD140](*v3, 1);
    }
    ++v3;
  }
  unsigned int v5 = atomic_load((unsigned int *)(*(void *)(v1 + 24) + 28));
  if (v5 == 1)
  {
    (*(void (**)(void))(**(void **)(*(void *)(v1 + 24) + 16) + 16))(*(void *)(*(void *)(v1 + 24) + 16));
    ChildCFIndex Count = REEntityGetChildCount();
    if (ChildCount)
    {
      uint64_t v7 = ChildCount;
      for (uint64_t i = 0; i != v7; ++i)
      {
        (*(void (**)(void))(**(void **)(*(void *)(v1 + 24) + 16) + 16))(*(void *)(*(void *)(v1 + 24) + 16));
        REEntityGetChild();
        REEntitySetParent();
      }
    }
  }
  uint64_t v9 = *(void *)(*(void *)(v1 + 464) + 96);
  if (!v9) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 48);

  return v10();
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_8>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  void *result = &unk_26F3487D8;
  return result;
}

void std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3487D8;
}

uint64_t std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9,std::allocator<realityio::LiveSceneManager::updateLiveSceneImpl(std::shared_ptr<realityio::EngineQueueManager>,BOOL)::$_9>,void ()(void)>::target_type()
{
}

void std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(*a1);
    std::__tree<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::destroy(a1[1]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

BOOL std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,REComponentClass *>>::operator()[abi:ne180100](void *a1, void *a2)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a1, a2)) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, a1)) {
    return 0;
  }
  return a1[1] < a2[1];
}

uint64_t std::vector<realityio::LiveSceneManager::CompatibilityFault>::__push_back_slow_path<realityio::LiveSceneManager::CompatibilityFault const&>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x666666666666666) {
    std::vector<std::function<void ()(void)>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x333333333333333) {
    unint64_t v6 = 0x666666666666666;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v22 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(40 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v19 = v7;
  v20.i64[0] = (uint64_t)&v7[40 * v2];
  unint64_t v21 = &v7[40 * v6];
  std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(v20.i64[0], a2);
  uint64_t v8 = v20.i64[0];
  uint64_t v9 = v20.i64[0] + 40;
  v20.i64[1] = v20.i64[0] + 40;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v16 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v8 + v12;
      uint64_t v14 = v10 + v12;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + v12 - 40), (_DWORD *)(v10 + v12 - 40));
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(v8 + v12 - 36), (_DWORD *)(v10 + v12 - 36));
      long long v15 = *(_OWORD *)(v10 + v12 - 32);
      *(void *)(v13 - 16) = *(void *)(v10 + v12 - 16);
      *(_OWORD *)(v13 - 32) = v15;
      *(void *)(v14 - 32) = 0;
      *(void *)(v14 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
      *(void *)(v14 - 16) = 0;
      *(unsigned char *)(v13 - 8) = *(unsigned char *)(v10 + v12 - 8);
      v12 -= 40;
    }
    while (v10 + v12 != v11);
    int64x2_t v16 = *a1;
    uint64_t v9 = v20.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v20 = v16;
  uint8x8_t v17 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v21;
  unint64_t v21 = v17;
  int v19 = (char *)v16.i64[0];
  std::__split_buffer<realityio::LiveSceneManager::CompatibilityFault>::~__split_buffer((uint64_t)&v19);
  return v9;
}

void sub_23F70E8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::LiveSceneManager::CompatibilityFault>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<realityio::LiveSceneManager::CompatibilityFault>::construct[abi:ne180100]<realityio::LiveSceneManager::CompatibilityFault,realityio::LiveSceneManager::CompatibilityFault const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)a1, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v4 + 1, (_DWORD *)(a2 + 4));
  unsigned int v5 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
}

void sub_23F70E940(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<realityio::LiveSceneManager::CompatibilityFault>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::allocator<realityio::LiveSceneManager::CompatibilityFault>::destroy[abi:ne180100](i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

realityio::USDDiagnostics *realityio::USDDiagnostics::USDDiagnostics(realityio::USDDiagnostics *this, const char *a2)
{
  *(void *)this = &unk_26F348858;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v4 = (void **)((char *)this + 8);
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 850045863;
  *(_OWORD *)((char *)this + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  unsigned int v5 = (char *)this + 64;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 850045863;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 30) = 0;
  uint64_t v6 = [MEMORY[0x263EFF980] array];
  uint64_t v7 = *v4;
  *uint64_t v4 = (void *)v6;

  MEMORY[0x2455D2770](v5, a2);
  return this;
}

void sub_23F70EA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::~mutex(v14);
  std::mutex::~mutex(v12);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v13);
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*v11);
  }
  a10 = v10 + 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a10 = v10 + 16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);

  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::~USDDiagnostics(realityio::USDDiagnostics *this)
{
  *(void *)this = &unk_26F348858;
  if (!atomic_load((unint64_t *)off_265071678)) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate();
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  std::mutex::~mutex((std::mutex *)((char *)this + 120));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 11);
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  uint64_t vars8;

  realityio::USDDiagnostics::~USDDiagnostics(this);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::USDDiagnostics::Add(realityio::USDDiagnostics *this)
{
  if (!atomic_load((unint64_t *)off_265071678)) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }

  return MEMORY[0x270FA3530]();
}

unint64_t realityio::USDDiagnostics::shouldSaveMessage(uint64_t a1, char *a2)
{
  uint64_t v4 = 0;
  uint64_t v33 = *MEMORY[0x263EF8340];
  int64_t v5 = a2[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *(char **)a2;
  }
  int v30 = v6;
  uint64_t v7 = (const char *)(a1 + 64);
  char v8 = 1;
LABEL_5:
  uint64_t v9 = v4;
  do
  {
    uint64_t v10 = off_265071D90[v9];
    unint64_t result = (unint64_t)strstr(v6, v10);
    if (result)
    {
      unint64_t v12 = result;
      size_t v13 = strlen(v10);
      if (*(char *)(a1 + 87) < 0)
      {
        long long v15 = *(const char **)(a1 + 64);
        size_t v14 = *(void *)(a1 + 72);
      }
      else
      {
        size_t v14 = *(unsigned __int8 *)(a1 + 87);
        long long v15 = v7;
      }
      int v16 = strncmp((const char *)(v12 + v13), v15, v14);
      char v8 = 0;
      unint64_t result = v16 == 0;
      uint64_t v4 = v9 + 1;
      if (v16) {
        BOOL v17 = v9 == 4;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17) {
        return result;
      }
      goto LABEL_5;
    }
    ++v9;
  }
  while (v9 != 5);
  if ((v8 & 1) == 0) {
    return 0;
  }
  int64_t v18 = *(unsigned __int8 *)(a1 + 87);
  int64_t v19 = *(void *)(a1 + 72);
  if ((v18 & 0x80u) == 0) {
    int64x2_t v20 = v7;
  }
  else {
    int64x2_t v20 = *(const char **)(a1 + 64);
  }
  if ((v18 & 0x80u) == 0) {
    int64_t v21 = v18;
  }
  else {
    int64_t v21 = v19;
  }
  if (v21)
  {
    if ((v5 & 0x80u) == 0) {
      int64_t v22 = v5;
    }
    else {
      int64_t v22 = *((void *)a2 + 1);
    }
    if (v22 >= v21)
    {
      uint64_t v23 = &v6[v22];
      int v24 = *v20;
      do
      {
        int64_t v25 = v22 - v21;
        if (v25 == -1) {
          break;
        }
        uint8x8_t v26 = (char *)memchr(v6, v24, v25 + 1);
        if (!v26) {
          break;
        }
        int v27 = v26;
        if (!memcmp(v26, v20, v21))
        {
          unint64_t result = 1;
          if (v27 == v23 || v27 - v30 == -1) {
            return result;
          }
          goto LABEL_39;
        }
        uint64_t v6 = v27 + 1;
        int64_t v22 = v23 - v6;
      }
      while (v23 - v6 >= v21);
    }
  }
  else
  {
LABEL_39:
    uint8x8_t v28 = *(NSObject **)realityio::logObjects((realityio *)result);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      if (a2[23] >= 0) {
        uint64_t v29 = a2;
      }
      else {
        uint64_t v29 = *(char **)a2;
      }
      *(_DWORD *)long long buf = 136315138;
      int v32 = v29;
      _os_log_impl(&dword_23F4EA000, v28, OS_LOG_TYPE_DEFAULT, "Unrecognized error pattern \"%s\"", buf, 0xCu);
    }
  }
  return 1;
}

void realityio::USDDiagnostics::saveMessage(uint64_t a1, int a2, uint64_t *a3)
{
  v14[1] = *MEMORY[0x263EF8340];
  if (*((char *)a3 + 23) < 0) {
    a3 = (uint64_t *)*a3;
  }
  uint64_t v5 = [NSString stringWithUTF8String:a3];
  if (v5) {
    uint64_t v6 = (__CFString *)v5;
  }
  else {
    uint64_t v6 = @"Unknown error.";
  }
  int v7 = [(__CFString *)v6 hasPrefix:@"Usd crate file version mismatch"];
  uint64_t v13 = *MEMORY[0x263F08320];
  v14[0] = v6;
  char v8 = [NSDictionary dictionaryWithObjects:v14 forKeys:&v13 count:1];
  if (v7) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = a2;
  }
  uint64_t v10 = [MEMORY[0x263F087E8] errorWithDomain:@"RealityIOErrorDomain" code:v9 userInfo:v8];

  id v11 = *(id *)(a1 + 8);
  objc_sync_enter(v11);
  [*(id *)(a1 + 8) addObject:v10];
  objc_sync_exit(v11);

  uint64_t v12 = *(void *)(a1 + 112);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 48))(v12);
  }
}

void sub_23F70EFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id realityio::USDDiagnostics::GetError(id *this)
{
  id v2 = this[1];
  objc_sync_enter(v2);
  uint64_t v3 = [this[1] firstObject];
  if ((unint64_t)[this[1] count] >= 2)
  {
    uint64_t v4 = [v3 userInfo];
    uint64_t v5 = (void *)[v4 mutableCopy];

    uint64_t v6 = objc_msgSend(this[1], "subarrayWithRange:", 1, objc_msgSend(this[1], "count") - 1);
    [v5 setObject:v6 forKey:@"AdditionalErrors"];
    int v7 = (void *)MEMORY[0x263F087E8];
    char v8 = [v3 domain];
    uint64_t v9 = [v3 code];
    uint64_t v10 = (void *)[v5 copy];
    uint64_t v11 = [v7 errorWithDomain:v8 code:v9 userInfo:v10];

    uint64_t v3 = (void *)v11;
  }
  objc_sync_exit(v2);

  return v3;
}

void sub_23F70F150(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_23F70F1AC()
{
}

id realityio::USDDiagnostics::GetErrors(id *this)
{
  id v2 = this[1];
  objc_sync_enter(v2);
  id v3 = this[1];
  objc_sync_exit(v2);

  return v3;
}

void realityio::USDDiagnostics::ClearErrors(id *this)
{
  obuint64_t j = this[1];
  objc_sync_enter(obj);
  [this[1] removeAllObjects];
  objc_sync_exit(obj);
}

void sub_23F70F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::GetWarnings(long long **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(this + 15);
  std::mutex::lock((std::mutex *)(this + 15));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[2], this[3], 0xAAAAAAAAAAAAAAABLL * (((char *)this[3] - (char *)this[2]) >> 3));

  std::mutex::unlock(v4);
}

void sub_23F70F2FC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::GetStatusMessages(long long **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(this + 23);
  std::mutex::lock((std::mutex *)(this + 23));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[5], this[6], 0xAAAAAAAAAAAAAAABLL * (((char *)this[6] - (char *)this[5]) >> 3));

  std::mutex::unlock(v4);
}

void sub_23F70F384(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::USDDiagnostics::IssueError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 40);
  if (realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)(a2 + 40)))
  {
    int v5 = *(_DWORD *)(a2 + 72);
    realityio::USDDiagnostics::saveMessage(a1, v5, v4);
  }
}

void realityio::USDDiagnostics::IssueFatalError(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)a3))
  {
    realityio::USDDiagnostics::saveMessage(a1, 4, a3);
  }
}

unint64_t realityio::USDDiagnostics::IssueStatus(uint64_t a1, uint64_t a2)
{
  id v3 = (long long *)(a2 + 40);
  unint64_t result = realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)(a2 + 40));
  if (result)
  {
    std::mutex::lock((std::mutex *)(a1 + 184));
    int v5 = (uint64_t *)(a1 + 40);
    unint64_t v6 = *(void *)(a1 + 48);
    if (v6 >= *(void *)(a1 + 56))
    {
      uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v3);
      uint64_t v7 = v6 + 24;
    }
    *(void *)(a1 + 48) = v7;
    std::mutex::unlock((std::mutex *)(a1 + 184));
    unint64_t result = *(void *)(a1 + 112);
    if (result)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 48);
      return v8();
    }
  }
  return result;
}

void sub_23F70F518(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t realityio::USDDiagnostics::IssueWarning(uint64_t a1, uint64_t a2)
{
  id v3 = (long long *)(a2 + 40);
  unint64_t result = realityio::USDDiagnostics::shouldSaveMessage(a1, (char *)(a2 + 40));
  if (result)
  {
    std::mutex::lock((std::mutex *)(a1 + 120));
    int v5 = (uint64_t *)(a1 + 16);
    unint64_t v6 = *(void *)(a1 + 24);
    if (v6 >= *(void *)(a1 + 32))
    {
      uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v5, v3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v5, v3);
      uint64_t v7 = v6 + 24;
    }
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v7;
    std::mutex::unlock((std::mutex *)(a1 + 120));
    unint64_t result = *(void *)(a1 + 112);
    if (result)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 48);
      return v8();
    }
  }
  return result;
}

void sub_23F70F5EC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfAssetPathGetTypeID()
{
  if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
  }
  return RIOPxrSdfAssetPathGetTypeID::typeID;
}

void __RIOPxrSdfAssetPathGetTypeID_block_invoke()
{
  if (!RIOPxrSdfAssetPathGetTypeID::typeID) {
    RIOPxrSdfAssetPathGetTypeID::typeID = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrSdfAssetPathIsLessThan(uint64_t a1, uint64_t a2)
{
  if (a1 && a2) {
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<();
  }
  else {
    return 0;
  }
}

uint64_t RIOPxrSdfAssetPathCreateEmptyPath()
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v3);
  RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((long long *)v3);
  uint64_t v1 = v0;
  if (v6 < 0) {
    operator delete(__p);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  return v1;
}

void sub_23F70F6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

__n128 RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(long long *a1)
{
  if (RIOPxrSdfAssetPathGetTypeID::onceToken != -1) {
    dispatch_once(&RIOPxrSdfAssetPathGetTypeID::onceToken, &__block_literal_global_32);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    long long v4 = *a1;
    *(void *)(Instance + 32) = *((void *)a1 + 2);
    *(_OWORD *)(Instance + 16) = v4;
    *((void *)a1 + 1) = 0;
    *((void *)a1 + 2) = 0;
    *(void *)a1 = 0;
    __n128 result = *(__n128 *)((char *)a1 + 24);
    *(void *)(Instance + 56) = *((void *)a1 + 5);
    *(__n128 *)(Instance + 40) = result;
    *((void *)a1 + 4) = 0;
    *((void *)a1 + 5) = 0;
    *((void *)a1 + 3) = 0;
  }
  return result;
}

BOOL RIOPxrSdfAssetPathIsEmpty(BOOL result)
{
  if (result)
  {
    if (*(char *)(result + 39) < 0) {
      uint64_t v1 = *(void *)(result + 24);
    }
    else {
      uint64_t v1 = *(unsigned __int8 *)(result + 39);
    }
    return v1 == 0;
  }
  return result;
}

uint64_t RIOPxrSdfAssetPathCreateFromCString(char *__s)
{
  if (__s && *__s)
  {
    std::string::basic_string[abi:ne180100]<0>(v4, __s);
    MEMORY[0x2455CE830](v6, v4);
    RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((long long *)v6);
    uint64_t v2 = v1;
    if (v9 < 0) {
      operator delete(__p);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
    return v2;
  }
  else
  {
    return RIOPxrSdfAssetPathCreateEmptyPath();
  }
}

void sub_23F70F874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t RIOPxrSdfAssetPathCreateFromCStringWithResolvedPath(char *__s, char *a2)
{
  if (__s && a2 && *__s && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v8, __s);
    std::string::basic_string[abi:ne180100]<0>(v6, a2);
    MEMORY[0x2455CE840](v10, v8, v6);
    RIOPxrSdfAssetPathCreate<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((long long *)v10);
    uint64_t v4 = v3;
    if (v13 < 0) {
      operator delete(__p);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    return v4;
  }
  else
  {
    return RIOPxrSdfAssetPathCreateEmptyPath();
  }
}

void sub_23F70F978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

CFStringRef RIOPxrSdfAssetPathAssetPathCopyString(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  uint64_t v1 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

CFStringRef RIOPxrSdfAssetPathResolvedPathCopyString(uint64_t a1)
{
  if (!a1) {
    return &stru_26F34B2D0;
  }
  uint64_t v1 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v1 = *(const char **)v1;
  }
  return CFStringCreateWithCString(0, v1, 0x8000100u);
}

void _RIOPxrSdfAssetPathCFFinalize(void **a1)
{
  if (*((char *)a1 + 63) < 0) {
    operator delete(a1[5]);
  }
  if (*((char *)a1 + 39) < 0)
  {
    uint64_t v2 = a1[2];
    operator delete(v2);
  }
}

uint64_t _RIOPxrSdfAssetPathCFEqual(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator==(a1 + 16, a2 + 16);
}

unint64_t _RIOPxrSdfAssetPathCFHash(const char *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfHash::_CombineImpl<pxrInternal__aapl__pxrReserved__::Tf_HashState,std::string const&,std::string const&>((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v2, a1 + 16, (uint64_t)(a1 + 40));
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

CFStringRef _RIOPxrSdfAssetPathCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfAssetPath %p>", a1);
}

CFStringRef _RIOPxrSdfAssetPathCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIOPxrSdfAssetPath %p>", a1);
}

atomic_uint **realityio::mtlxFromUsd@<X0>(void *a1@<X8>)
{
  v6[36] = *(char **)MEMORY[0x263EF8340];
  v6[0] = 0;
  v6[1] = 0;
  char v5 = v6;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v5, v6[0]);
  uint64_t v2 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdStage::Open();
  if (v4) {
    RIO_MTLX::Document::createDocument<RIO_MTLX::Document>(v2);
  }
  std::string::basic_string[abi:ne180100]<0>(a1, "");
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v4);
}

void sub_23F7101A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,std::__shared_weak_count *a41,atomic_uint *a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v46 - 112));
  if ((a32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&a42);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::convertMaterial(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2)
{
  uint64_t v271 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v217 = MEMORY[0x263F90740] + 16;
  if (v218
    && (*(unsigned char *)(v218 + 57) & 8) == 0
    && ((*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90740] + 48))(&v217) & 1) != 0)
  {
    uint64_t v216 = 0;
    MEMORY[0x2455CF810](&v248, "mtlx");
    unint64_t v4 = atomic_load(MEMORY[0x263F90550]);
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
    }
    std::string::size_type v5 = *(void *)(v4 + 216);
    v248.__r_.__value_.__l.__size_ = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v248.__r_.__value_.__l.__size_ &= 0xFFFFFFFFFFFFFFF8;
    }
    v262 = 0;
    v263 = 0;
    *(void *)&long long v264 = 0;
    v252 = &v262;
    LOBYTE(v253) = 0;
    char v6 = (std::__shared_weak_count *)operator new(0x10uLL);
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 0;
    v262 = (void **)&v6->__vftable;
    v263 = v6;
    *(void *)&long long v264 = &v6->__shared_weak_owners_;
    do
    {
      char v10 = v8;
      char v11 = (std::__shared_weak_count_vtbl *)*((void *)&v248.__r_.__value_.__l.__data_ + v9);
      *(std::__shared_weak_count_vtbl **)((char *)&v6->__vftable + v7) = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(std::__shared_weak_count_vtbl **)((char *)&v6->__vftable + v7) = (std::__shared_weak_count_vtbl *)(*(unint64_t *)((char *)&v6->__vftable + v7) & 0xFFFFFFFFFFFFFFF8);
      }
      v7 += 8;
      char v8 = 1;
      uint64_t v9 = 1;
    }
    while ((v10 & 1) == 0);
    v263 = (std::__shared_weak_count *)((char *)v6 + v7);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
    v252 = &v262;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v13 = *(uint64_t *)((char *)&v248.__r_.__value_.__l.__data_ + i);
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if (v215
      && (*(unsigned char *)(v215 + 57) & 8) == 0
      && ((*(uint64_t (**)(uint64_t *))(v214 + 32))(&v214) & 1) != 0)
    {
      uint64_t v183 = a1;
      v185 = a2;
      uint64_t v213 = 0;
      v212 = 0;
      v211 = &v212;
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v214);
      uint64_t v14 = v209;
      for (uint64_t j = v210; v14 != j; v14 += 32)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v262, (uint64_t *)(v14 + 8), (_DWORD *)(v14 + 16));
        uint64_t Name = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v14);
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v205, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v262, Name);
        if ((BYTE8(v264) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v264 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v264);
        if (v263) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v263);
        }
        if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v205))
        {
          uint64_t v186 = v14;
          MEMORY[0x2455D0E20](&v252, v14, 0);
          if (v257[4])
          {
            if (v258 >= 2) {
              int v16 = (uint64_t *)((char *)v252 + 8);
            }
            else {
              int v16 = &v253;
            }
            if (v258 >= 2) {
              BOOL v17 = (char *)v252 + 16;
            }
            else {
              BOOL v17 = v254;
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v262, v16, v17);
            BOOL v18 = v262 != *(_DWORD *)v185
               || v263 != *((std::__shared_weak_count **)v185 + 1)
               || (void)v264 != *((void *)v185 + 2)
               || (*((void *)&v264 + 1) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v185 + 3) & 0xFFFFFFFFFFFFFFF8);
            if ((BYTE8(v264) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v264 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v264);
            if (v263) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v263);
            }
            if (v18)
            {
              unsigned int v19 = v258;
              int64x2_t v20 = (char *)v252;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              if (v19 >= 2) {
                int64_t v21 = (void **)v20;
              }
              else {
                int64_t v21 = &v252;
              }
              unint64_t v22 = (unint64_t)v21[3];
              v248.__r_.__value_.__r.__words[0] = MEMORY[0x263F90710] + 16;
              unint64_t v249 = v22;
              if ((v22 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v249 &= 0xFFFFFFFFFFFFFFF8;
              }
              if (v19 >= 2) {
                uint64_t v23 = (void **)v20;
              }
              else {
                uint64_t v23 = &v252;
              }
              unint64_t v24 = (unint64_t)v23[4];
              v248.__r_.__value_.__r.__words[0] = MEMORY[0x263F90790] + 16;
              unint64_t v250 = v24;
              if ((v24 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v250 &= 0xFFFFFFFFFFFFFFF8;
              }
              int64_t v25 = (long long *)(v20 + 40);
              if (v19 < 2) {
                int64_t v25 = (long long *)v257;
              }
              long long v251 = *v25;
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v201, (uint64_t *)&v248.__r_.__value_.__l.__size_, &v248.__r_.__value_.__r.__words[2]);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v201, &v262);
              uint8x8_t v26 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v211, &v262);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v262);
              if (&v212 == v26)
              {
                uint8x8_t v28 = *(RIO_MTLX::NodeGraph **)v183;
                int v27 = *(std::__shared_weak_count **)(v183 + 8);
                if (v27) {
                  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v182 = v27;
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                v246[0] = (void **)(MEMORY[0x263F90760] + 16);
                uint64_t v29 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v201);
                if ((*(void *)v29 & 0xFFFFFFFFFFFFFFF8) != 0) {
                  uint64_t EmptyString = (*(void *)v29 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else {
                  uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
                }
                RIO_MTLX::Element::addChild<RIO_MTLX::NodeGraph>(v28, EmptyString, (uint64_t *)&v200);
                unint64_t v244 = 0;
                uint64_t v245 = 0;
                id v243 = (uint64_t ****)&v244;
                UsdPrimAllPrimsPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v31);
                uint64_t v34 = *UsdPrimAllPrimsPredicate;
                uint64_t v33 = UsdPrimAllPrimsPredicate[1];
                uint64_t v35 = UsdPrimAllPrimsPredicate[2];
                if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
                  && ((v34 & 0x2000) != 0 || (v33 & 0x2000) == 0))
                {
                  v34 |= 0x2000uLL;
                  v33 &= ~0x2000uLL;
                }
                *(void *)&long long v259 = v34;
                *((void *)&v259 + 1) = v33;
                *(void *)&long long v260 = v35;
                pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeDescendantsRange((uint64_t)&v201, (uint64_t *)&v259, (uint64_t)&v262);
                *(void *)&long long v259 = v262;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v259 + 2, &v263);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v259 + 3, (_DWORD *)&v263 + 1);
                long long v260 = v264;
                uint64_t v261 = v265;
                *(void *)&long long v240 = v266;
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v240 + 2, &v267);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v240 + 3, &v268);
                long long v241 = v269;
                uint64_t v242 = v270;
                while (v259 != v240
                     || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v260, (uint64_t)&v241))
                {
                  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator *)&v259, (uint64_t)&v238);
                  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                  uint64_t v236 = MEMORY[0x263F906F0] + 16;
                  unint64_t v235 = 0;
                  ShaderId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v236, (pxrInternal__aapl__pxrReserved__::TfToken *)&v235);
                  if (ShaderId)
                  {
                    memset(&v234, 0, sizeof(v234));
                    if ((v235 & 0xFFFFFFFFFFFFFFF8) != 0) {
                      unint64_t v37 = (v235 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else {
                      unint64_t v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(ShaderId);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v227, "ND_");
                    pxrInternal__aapl__pxrReserved__::TfStringGetSuffix();
                    uint64_t v38 = std::string::insert(&v247, 0, "_");
                    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
                    __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
                    v38->__r_.__value_.__l.__size_ = 0;
                    v38->__r_.__value_.__r.__words[2] = 0;
                    v38->__r_.__value_.__r.__words[0] = 0;
                    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v247.__r_.__value_.__l.__data_);
                    }
                    if (v229 >= 0) {
                      uint64_t v40 = (const char *)&v227;
                    }
                    else {
                      uint64_t v40 = (const char *)v227;
                    }
                    int v41 = *(char *)(v37 + 23);
                    std::string::size_type v42 = *(void *)(v37 + 8);
                    if (v41 >= 0) {
                      size_t v43 = *(unsigned __int8 *)(v37 + 23);
                    }
                    else {
                      size_t v43 = *(void *)(v37 + 8);
                    }
                    size_t v44 = strlen(v40);
                    if (v43 >= v44
                      && ((v45 = v44, v41 >= 0) ? (uint64_t v46 = (const char *)v37) : (uint64_t v46 = *(const char **)v37),
                          (__s = v46, !strncmp(v46, v40, v45))
                       && ((*(void *)__c = HIBYTE(__p.__r_.__value_.__r.__words[2]),
                            (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                         ? (p_p = &__p)
                         : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
                           (size_t v48 = strlen((const char *)p_p), v43 >= v48) && !strcmp(&__s[v43 - v48], (const char *)p_p))))
                    {
                      __s2 = p_p;
                      if (SLOBYTE(__c[0]) >= 0) {
                        int64_t size = *(void *)__c;
                      }
                      else {
                        int64_t size = __p.__r_.__value_.__l.__size_;
                      }
                      if (size)
                      {
                        os_signpost_id_t v66 = (char *)__s;
                        unint64_t v67 = &__s[v43];
                        if ((uint64_t)v43 >= size)
                        {
                          int __ca = __s2->__r_.__value_.__s.__data_[0];
                          do
                          {
                            if (v43 - size == -1) {
                              break;
                            }
                            uint64_t v70 = (const char *)memchr(v66, __ca, v43 - size + 1);
                            if (!v70) {
                              break;
                            }
                            id v68 = v70;
                            if (!memcmp(v70, __s2, size)) {
                              goto LABEL_165;
                            }
                            os_signpost_id_t v66 = (char *)(v68 + 1);
                            size_t v43 = v67 - (v68 + 1);
                          }
                          while ((uint64_t)v43 >= size);
                          id v68 = v67;
LABEL_165:
                          os_signpost_id_t v66 = (char *)__s;
                        }
                        else
                        {
                          id v68 = &__s[v43];
                        }
                        if (v68 == v67) {
                          uint64_t v69 = -1;
                        }
                        else {
                          uint64_t v69 = v68 - v66;
                        }
                      }
                      else
                      {
                        uint64_t v69 = 0;
                      }
                      std::string::basic_string(&v247, &__p, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v231);
                      if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v234.__r_.__value_.__l.__data_);
                      }
                      std::string v234 = v247;
                      if (v229 >= 0) {
                        std::string::size_type v71 = HIBYTE(v229);
                      }
                      else {
                        std::string::size_type v71 = (std::string::size_type)v228;
                      }
                      std::string::basic_string(&v247, (const std::string *)v37, v71, v69 - v71, (std::allocator<char> *)&TypeName);
                      uint64_t v72 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF830](&v231, &v247);
                      if (((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8) != 0) {
                        unint64_t v73 = ((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8) + 16;
                      }
                      else {
                        unint64_t v73 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v72);
                      }
                      if (*(char *)(v73 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)v73, *(void *)(v73 + 8));
                      }
                      else
                      {
                        long long v74 = *(_OWORD *)v73;
                        v233.__r_.__value_.__r.__words[2] = *(void *)(v73 + 16);
                        *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v74;
                      }
                      if ((v231 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v247.__r_.__value_.__l.__data_);
                      }
                    }
                    else if (v41 < 0)
                    {
                      std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)v37, v42);
                    }
                    else
                    {
                      long long v49 = *(_OWORD *)v37;
                      v233.__r_.__value_.__r.__words[2] = *(void *)(v37 + 16);
                      *(_OWORD *)&v233.__r_.__value_.__l.__data_ = v49;
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v229) < 0) {
                      operator delete(v227);
                    }
                    BOOL v50 = (RIO_MTLX::Node *)v200;
                    unint64_t v51 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v238);
                    if ((*(void *)v51 & 0xFFFFFFFFFFFFFFF8) != 0) {
                      uint64_t v52 = (*(void *)v51 & 0xFFFFFFFFFFFFFFF8) + 16;
                    }
                    else {
                      uint64_t v52 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v51);
                    }
                    RIO_MTLX::GraphElement::addNode(v50, &v233, v52, &v234, (uint64_t *)&v231);
                    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v236);
                    std::string::size_type v53 = v247.__r_.__value_.__l.__size_;
                    for (std::string::size_type k = v247.__r_.__value_.__r.__words[0]; k != v53; k += 32)
                    {
                      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__p, (uint64_t *)(k + 8), (_DWORD *)(k + 16));
                      uint64_t v55 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)k);
                      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v227, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&__p, v55);
                      if ((v226 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v226 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__r.__words[2]);
                      if (__p.__r_.__value_.__l.__size_) {
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__p.__r_.__value_.__l.__size_);
                      }
                      v221 = v231;
                      v222 = v232;
                      if (v232) {
                        atomic_fetch_add_explicit(&v232->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)k);
                      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&__p, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
                      unint64_t v219 = 0;
                      if (v224) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v224);
                      }
                      if ((v219 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v219 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if (v222) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v222);
                      }
                      if ((v230 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v230 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v229);
                      if (v228) {
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v228);
                      }
                    }
                    v227 = &v247;
                    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v227);
                    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v238, &v227);
                    uint64_t v56 = v244;
                    unint64_t v57 = &v244;
                    unint64_t v58 = (void **)&v244;
                    if (!v244) {
                      goto LABEL_132;
                    }
                    unint64_t v58 = (void **)&v244;
                    while (1)
                    {
                      while (1)
                      {
                        unint64_t v57 = (uint64_t **)v56;
                        uint8x8_t v59 = v56 + 4;
                        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v227, v56 + 4)) {
                          break;
                        }
                        uint64_t v56 = *v57;
                        unint64_t v58 = (void **)v57;
                        if (!*v57) {
                          goto LABEL_132;
                        }
                      }
                      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v59, &v227)) {
                        break;
                      }
                      unint64_t v58 = (void **)(v57 + 1);
                      uint64_t v56 = v57[1];
                      if (!v56) {
                        goto LABEL_132;
                      }
                    }
                    unint64_t v60 = *v58;
                    if (!*v58)
                    {
LABEL_132:
                      unint64_t v60 = operator new(0x38uLL);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v60 + 8, &v227);
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v60 + 9, (_DWORD *)&v227 + 1);
                      *((void *)v60 + 5) = 0;
                      *((void *)v60 + 6) = 0;
                      *(void *)unint64_t v60 = 0;
                      *((void *)v60 + 1) = 0;
                      *((void *)v60 + 2) = v57;
                      std::__shared_weak_count *v58 = v60;
                      uint8x8_t v61 = (uint64_t *)v60;
                      if (*v243)
                      {
                        id v243 = (uint64_t ****)*v243;
                        uint8x8_t v61 = (uint64_t *)*v58;
                      }
                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v244, v61);
                      ++v245;
                    }
                    uint64_t v62 = v231;
                    uint64_t v63 = v232;
                    if (v232) {
                      atomic_fetch_add_explicit(&v232->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    unint64_t v64 = (std::__shared_weak_count *)*((void *)v60 + 6);
                    *((void *)v60 + 5) = v62;
                    *((void *)v60 + 6) = v63;
                    if (v64) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
                    if (v232) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v232);
                    }
                    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v233.__r_.__value_.__l.__data_);
                    }
                    if (SHIBYTE(v234.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v234.__r_.__value_.__l.__data_);
                    }
                  }
                  if ((v235 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v235 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  MEMORY[0x2455CECB0](&v236);
                  if ((v239 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v239 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v238.__r_.__value_.__r.__words[2]);
                  if (v238.__r_.__value_.__l.__size_) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v238.__r_.__value_.__l.__size_);
                  }
                  pxrInternal__aapl__pxrReserved__::UsdPrimSubtreeIterator::increment((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v259);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v240 + 8);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v259 + 8);
                pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::GetOutputs((pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)v246);
                unint64_t v75 = (uint64_t *)v227;
                uint64_t v76 = (uint64_t)v228;
                __sa = v228;
                if (v227 != v228)
                {
                  do
                  {
                    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v259, v75 + 1, (_DWORD *)v75 + 4);
                    uint64_t v77 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v75);
                    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v240, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v259, v77);
                    if ((BYTE8(v260) & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v260 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v260);
                    if (*((void *)&v259 + 1)) {
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v259 + 1));
                    }
                    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v240))
                    {
                      MEMORY[0x2455D0FD0](&v259, v75, 0);
                      v238.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v240);
                      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&v233, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v238);
                      if (v261)
                      {
                        uint64_t v78 = (RIO_MTLX::Output *)v200;
                        pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)&v231, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v240);
                        unint64_t v79 = (unint64_t)v231 & 0xFFFFFFFFFFFFFFF8;
                        if (((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8) != 0)
                        {
                          std::string::size_type v80 = (char *)(v79 + 16);
                          if (*(char *)(v79 + 39) < 0) {
                            std::string::size_type v80 = *(char **)v80;
                          }
                        }
                        else
                        {
                          std::string::size_type v80 = "";
                        }
                        std::string::basic_string[abi:ne180100]<0>(&v238, v80);
                        RIO_MTLX::InterfaceElement::addOutput(v78, (uint64_t)&v238, &__p, (uint64_t *)&v247);
                        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v238.__r_.__value_.__l.__data_);
                        }
                        if ((v231 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v231 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        if (HIDWORD(v261) >= 2) {
                          unint64_t v81 = (uint64_t *)(v259 + 8);
                        }
                        else {
                          unint64_t v81 = (uint64_t *)&v259 + 1;
                        }
                        if (HIDWORD(v261) >= 2) {
                          int8x16_t v82 = (long long *)(v259 + 16);
                        }
                        else {
                          int8x16_t v82 = &v260;
                        }
                        pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v238, v81, v82);
                        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v238, &v231);
                        unint64_t v83 = v244;
                        if (!v244) {
                          goto LABEL_225;
                        }
                        int v84 = &v244;
                        do
                        {
                          uint64_t v85 = v84;
                          BOOL v86 = v83 + 4;
                          int v87 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v83 + 4, &v231);
                          uint64_t v88 = v83 + 1;
                          if (!v87)
                          {
                            uint64_t v88 = v83;
                            int v84 = (uint64_t **)v83;
                          }
                          unint64_t v83 = (uint64_t *)*v88;
                        }
                        while (*v88);
                        if (v84 == &v244
                          || (!v87 ? (uint64_t v89 = v86) : (uint64_t v89 = (uint64_t *)(v85 + 4)),
                              pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v231, v89)))
                        {
LABEL_225:
                          int v84 = &v244;
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231);
                        uint64_t v76 = (uint64_t)__sa;
                        if ((v239 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v239 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v238.__r_.__value_.__r.__words[2]);
                        uint64_t v90 = (RIO_MTLX::PortElement *)v238.__r_.__value_.__l.__size_;
                        if (v238.__r_.__value_.__l.__size_) {
                          uint64_t v90 = (RIO_MTLX::PortElement *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v238.__r_.__value_.__l.__size_);
                        }
                        if (&v244 != v84)
                        {
                          uint64_t v92 = (const std::string *)v84[5];
                          os_signpost_id_t v91 = (std::__shared_weak_count *)v84[6];
                          if (v91) {
                            atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v93 = (uint64_t *)v247.__r_.__value_.__r.__words[0];
                          uint64_t v94 = (long long *)RIO_MTLX::PortElement::NODE_NAME_ATTRIBUTE(v90);
                          RIO_MTLX::Element::setAttribute(v93, v94, v92 + 2);
                          uint64_t v76 = (uint64_t)__sa;
                          if (v91) {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v91);
                          }
                        }
                        if (v247.__r_.__value_.__l.__size_) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v247.__r_.__value_.__l.__size_);
                        }
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                      }
                      else
                      {
                        *(_OWORD *)&v234.__r_.__value_.__l.__data_ = v200;
                        if (*((void *)&v200 + 1)) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v200 + 1) + 8), 1uLL, memory_order_relaxed);
                        }
                        __p.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v75);
                        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&v238, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&__p);
                        unint64_t v235 = 0;
                        if (v237) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v237);
                        }
                        if ((v235 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v235 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        if ((v238.__r_.__value_.__s.__data_[0] & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v238.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        if (v234.__r_.__value_.__l.__size_) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v234.__r_.__value_.__l.__size_);
                        }
                      }
                      if ((v233.__r_.__value_.__s.__data_[0] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v233.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v259);
                    }
                    if ((BYTE8(v241) & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v241 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v241);
                    if (*((void *)&v240 + 1)) {
                      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v240 + 1));
                    }
                    v75 += 4;
                  }
                  while (v75 != (uint64_t *)v76);
                }
                *(void *)&long long v259 = &v227;
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v259);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v267);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v263);
                std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(v244);
                MEMORY[0x2455CF040](v246);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v201, &v262);
                std::string v95 = v212;
                uint64_t v96 = &v212;
                uint64_t v97 = (void **)&v212;
                if (!v212) {
                  goto LABEL_256;
                }
                uint64_t v97 = (void **)&v212;
                while (1)
                {
                  while (1)
                  {
                    uint64_t v96 = (uint64_t **)v95;
                    id v98 = v95 + 4;
                    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v262, v95 + 4)) {
                      break;
                    }
                    std::string v95 = *v96;
                    uint64_t v97 = (void **)v96;
                    if (!*v96) {
                      goto LABEL_256;
                    }
                  }
                  if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v98, &v262)) {
                    break;
                  }
                  uint64_t v97 = (void **)(v96 + 1);
                  std::string v95 = v96[1];
                  if (!v95) {
                    goto LABEL_256;
                  }
                }
                char v99 = (char *)*v97;
                if (!*v97)
                {
LABEL_256:
                  char v99 = (char *)operator new(0x38uLL);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v99 + 8, &v262);
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v99 + 9, (_DWORD *)&v262 + 1);
                  *((void *)v99 + 5) = 0;
                  *((void *)v99 + 6) = 0;
                  *(void *)char v99 = 0;
                  *((void *)v99 + 1) = 0;
                  *((void *)v99 + 2) = v96;
                  *uint64_t v97 = v99;
                  uint64_t v100 = (uint64_t *)v99;
                  if (*v211)
                  {
                    v211 = (uint64_t **)*v211;
                    uint64_t v100 = (uint64_t *)*v97;
                  }
                  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v212, v100);
                  ++v213;
                }
                long long v101 = v200;
                long long v200 = 0uLL;
                char v102 = (std::__shared_weak_count *)*((void *)v99 + 6);
                *(_OWORD *)(v99 + 40) = v101;
                if (v102) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v102);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v262);
                if (*((void *)&v200 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v200 + 1));
                }
                if (v182) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v182);
                }
              }
              if ((v204 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v204 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v203);
              if (v202) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v202);
              }
              if ((v250 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v250 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              MEMORY[0x2455CF2C0](&v248);
            }
          }
          pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo,1u>::~TfSmallVector((uint64_t)&v252);
          uint64_t v14 = v186;
        }
        if ((v208 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v208 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v207);
        if (v206) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v206);
        }
      }
      v262 = (void **)&v209;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v262);
      id v243 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v238, "unknownNodeType");
      char v103 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetShaderId((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v214, (pxrInternal__aapl__pxrReserved__::TfToken *)&v243);
      uint64_t v104 = v185;
      if (v103)
      {
        if (((unint64_t)v243 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v105 = ((unint64_t)v243 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v105 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v103);
        }
        std::string::basic_string[abi:ne180100]<0>(&v262, "ND_");
        std::string::basic_string[abi:ne180100]<0>(&v252, "_surfaceshader");
        uint64_t v106 = (std::__shared_weak_count *)BYTE7(v264);
        if ((SBYTE7(v264) & 0x80u) == 0) {
          uint64_t v107 = (const char *)&v262;
        }
        else {
          uint64_t v107 = (const char *)v262;
        }
        int v108 = *(char *)(v105 + 23);
        std::string::size_type v109 = *(void *)(v105 + 8);
        if (v108 >= 0) {
          size_t v110 = *(unsigned __int8 *)(v105 + 23);
        }
        else {
          size_t v110 = *(void *)(v105 + 8);
        }
        size_t v111 = strlen(v107);
        if (v110 >= v111
          && (v108 >= 0 ? (int8x8_t v112 = (const char *)v105) : (int8x8_t v112 = *(const char **)v105),
              !strncmp(v112, v107, v111)
           && ((int64_t v113 = v255, (v255 & 0x80u) == 0) ? (v114 = (char *)&v252) : (v114 = (char *)v252),
               (size_t v115 = strlen(v114), v110 >= v115) && !strcmp(&v112[v110 - v115], v114))))
        {
          if ((v113 & 0x80u) == 0) {
            int64_t v171 = v113;
          }
          else {
            int64_t v171 = v253;
          }
          if (v171)
          {
            id v172 = &v112[v110];
            if ((uint64_t)v110 >= v171)
            {
              int v179 = *v114;
              v180 = (char *)v112;
              do
              {
                if (v110 - v171 == -1) {
                  break;
                }
                v181 = (const char *)memchr(v180, v179, v110 - v171 + 1);
                if (!v181) {
                  break;
                }
                id v173 = v181;
                if (!memcmp(v181, v114, v171)) {
                  goto LABEL_494;
                }
                v180 = (char *)(v173 + 1);
                size_t v110 = v172 - (v173 + 1);
              }
              while ((uint64_t)v110 >= v171);
            }
            id v173 = v172;
LABEL_494:
            uint64_t v174 = v173 - v112;
            if (v173 == v172) {
              uint64_t v174 = -1;
            }
          }
          else
          {
            uint64_t v174 = 0;
          }
          if ((char)v106 >= 0) {
            v175 = v106;
          }
          else {
            v175 = v263;
          }
          std::string::basic_string(&v248, (const std::string *)v105, (std::string::size_type)v175, v174 - (void)v175, (std::allocator<char> *)&v227);
          uint64_t v104 = v185;
          v176 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF830](&v240, &v248);
          if ((v240 & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v177 = (v240 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v177 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v176);
          }
          if (*(char *)(v177 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v259, *(const std::string::value_type **)v177, *(void *)(v177 + 8));
          }
          else
          {
            long long v178 = *(_OWORD *)v177;
            *(void *)&long long v260 = *(void *)(v177 + 16);
            long long v259 = v178;
          }
          if ((v240 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v240 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v248.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (v108 < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v259, *(const std::string::value_type **)v105, v109);
          }
          else
          {
            long long v116 = *(_OWORD *)v105;
            *(void *)&long long v260 = *(void *)(v105 + 16);
            long long v259 = v116;
          }
          uint64_t v104 = v185;
        }
        if ((char)v255 < 0) {
          operator delete(v252);
        }
        if (SBYTE7(v264) < 0) {
          operator delete(v262);
        }
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v238.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&v238.__r_.__value_.__l.__data_ = v259;
        v238.__r_.__value_.__r.__words[2] = v260;
      }
      CFTypeRef v117 = *(RIO_MTLX::Node **)v183;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v104, &v252);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v252);
      ValidIdentifier = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
      uint64_t v119 = (const std::string *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(ValidIdentifier);
      RIO_MTLX::GraphElement::addNode(v117, &v238, (uint64_t)&v262, v119, (uint64_t *)&v205);
      if (SBYTE7(v264) < 0) {
        operator delete(v262);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v252);
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v214);
      long long v120 = (uint64_t *)v227;
      uint64_t v121 = (uint64_t)v228;
      if (v227 != v228)
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v262, v120 + 1, (_DWORD *)v120 + 4);
          uint64_t v122 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v120);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v252, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v262, v122);
          if ((BYTE8(v264) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v264 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v264);
          if (v263) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v263);
          }
          if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v252))
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
            if (v265)
            {
              if (HIDWORD(v265) >= 2) {
                v123 = (uint64_t *)(v262 + 1);
              }
              else {
                v123 = (uint64_t *)&v263;
              }
              if (HIDWORD(v265) >= 2) {
                uint64_t v124 = v262 + 2;
              }
              else {
                uint64_t v124 = (void **)&v264;
              }
              pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v248, v123, v124);
              BOOL v125 = LODWORD(v248.__r_.__value_.__l.__data_) == *(_DWORD *)v104
                  && *(_OWORD *)&v248.__r_.__value_.__r.__words[1] == *(_OWORD *)((char *)v104 + 8)
                  && (v249 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v104 + 3) & 0xFFFFFFFFFFFFFFF8);
              if ((v249 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v249 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v248.__r_.__value_.__r.__words[2]);
              if (v248.__r_.__value_.__l.__size_) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v248.__r_.__value_.__l.__size_);
              }
              if (v125)
              {
                unsigned int v126 = HIDWORD(v265);
                long long v127 = v262;
                if (HIDWORD(v265) >= 2) {
                  int v128 = (void ***)v262;
                }
                else {
                  int v128 = &v262;
                }
                LODWORD(v248.__r_.__value_.__l.__data_) = *(_DWORD *)v128;
                std::string::size_type v129 = (std::string::size_type)v128[1];
                v248.__r_.__value_.__l.__size_ = v129;
                if (v129) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v129 + 48), 1uLL, memory_order_relaxed);
                }
                if (v126 >= 2) {
                  long long v130 = (long long *)(v127 + 2);
                }
                else {
                  long long v130 = &v264;
                }
                if (v126 >= 2) {
                  int v131 = (_DWORD *)v127 + 5;
                }
                else {
                  int v131 = (_DWORD *)&v264 + 1;
                }
                if (v126 >= 2) {
                  long long v132 = (void ***)v127;
                }
                else {
                  long long v132 = &v262;
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v248.__r_.__value_.__r.__words[2], v130);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v248.__r_.__value_.__r.__words[2] + 1, v131);
                unint64_t v133 = (unint64_t)v132[3];
                unint64_t v249 = v133;
                if ((v133 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v133 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  v249 &= 0xFFFFFFFFFFFFFFF8;
                }
                uint64_t v196 = v205;
                v197 = v206;
                if (v206) {
                  atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v104 = v185;
                *(void *)&long long v240 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v248);
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&v259, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v240);
                pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v195, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v120);
                if (v199) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v199);
                }
                if ((v195 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if ((v259 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v259 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (v197) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v197);
                }
                if ((v249 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v249 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                goto LABEL_461;
              }
              if (v265)
              {
                unsigned int v134 = HIDWORD(v265);
                uint64_t v135 = v262;
                if (HIDWORD(v265) >= 2) {
                  v136 = (void ***)v262;
                }
                else {
                  v136 = &v262;
                }
                LODWORD(v248.__r_.__value_.__l.__data_) = *(_DWORD *)v136;
                std::string::size_type v137 = (std::string::size_type)v136[1];
                v248.__r_.__value_.__l.__size_ = v137;
                if (v137) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v137 + 48), 1uLL, memory_order_relaxed);
                }
                if (v134 >= 2) {
                  uint64_t v138 = (long long *)(v135 + 2);
                }
                else {
                  uint64_t v138 = &v264;
                }
                if (v134 >= 2) {
                  unint64_t v139 = (_DWORD *)v135 + 5;
                }
                else {
                  unint64_t v139 = (_DWORD *)&v264 + 1;
                }
                if (v134 >= 2) {
                  uint64_t v140 = (void ***)v135;
                }
                else {
                  uint64_t v140 = &v262;
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v248.__r_.__value_.__r.__words[2], v138);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v248.__r_.__value_.__r.__words[2] + 1, v139);
                unint64_t v141 = (unint64_t)v140[3];
                unint64_t v249 = v141;
                if ((v141 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  v249 &= 0xFFFFFFFFFFFFFFF8;
                }
                *(void *)&long long v259 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v248);
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v236, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v259);
                *(void *)&long long v240 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v248);
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&v259, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v240);
                if ((v259 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v259 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                int v142 = v205;
                pxrInternal__aapl__pxrReserved__::UsdShadeInput::GetBaseName((uint64_t *)&v240, (pxrInternal__aapl__pxrReserved__::UsdShadeInput *)v120);
                unint64_t v143 = v240 & 0xFFFFFFFFFFFFFFF8;
                if ((v240 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v144 = (char *)(v143 + 16);
                  if (*(char *)(v143 + 39) < 0) {
                    v144 = *(char **)v144;
                  }
                }
                else
                {
                  v144 = "";
                }
                std::string::basic_string[abi:ne180100]<0>(&v259, v144);
                RIO_MTLX::InterfaceElement::addInput(v142, (uint64_t)&v259, &__p, (uint64_t *)&v201);
                if (SBYTE7(v260) < 0) {
                  operator delete((void *)v259);
                }
                if ((v240 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v240 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v240, (uint64_t *)&v248.__r_.__value_.__l.__size_, &v248.__r_.__value_.__r.__words[2]);
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v240, (uint64_t)&v259);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v259, &v247);
                uint64_t v145 = (uint64_t **)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)&v211, &v247);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v247);
                if ((BYTE8(v260) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v260 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v260);
                if (*((void *)&v259 + 1)) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v259 + 1));
                }
                if ((BYTE8(v241) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v241 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v241);
                if (*((void *)&v240 + 1)) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v240 + 1));
                }
                if (&v212 == v145) {
                  goto LABEL_453;
                }
                uint64_t v146 = v145[5];
                if (v146)
                {
                  if (v147)
                  {
                    char v148 = (std::__shared_weak_count *)v145[6];
                    if (v148) {
                      atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    goto LABEL_406;
                  }
                }
                else
                {
                  uint64_t v147 = 0;
                }
                char v148 = 0;
LABEL_406:
                CFTypeRef v149 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v259, (uint64_t *)&v248.__r_.__value_.__l.__size_, &v248.__r_.__value_.__r.__words[2]);
                v150 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v149);
                if ((*(void *)v150 & 0xFFFFFFFFFFFFFFF8) != 0) {
                  unint64_t v151 = (*(void *)v150 & 0xFFFFFFFFFFFFFFF8) + 16;
                }
                else {
                  unint64_t v151 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v150);
                }
                if (*(char *)(v151 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v240, *(const std::string::value_type **)v151, *(void *)(v151 + 8));
                }
                else
                {
                  long long v152 = *(_OWORD *)v151;
                  *(void *)&long long v241 = *(void *)(v151 + 16);
                  long long v240 = v152;
                }
                if ((BYTE8(v260) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v260 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v260);
                if (*((void *)&v259 + 1)) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v259 + 1));
                }
                RIO_MTLX::Element::getChildOfType<RIO_MTLX::Output>((uint64_t)v147, (unsigned __int8 *)&v240, &v247);
                if (v148) {
                  atomic_fetch_add_explicit(&v148->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                __int16 v154 = RIO_MTLX::EMPTY_STRING(v153);
                RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>((uint64_t)v147, (uint64_t)v154, (uint64_t *)&v259);
                uint64_t v155 = *((void *)&v259 + 1);
                for (uint64_t m = v259; ; m += 16)
                {
                  if (m == v155)
                  {
                    v246[0] = (void **)&v259;
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v246);
                    long long v164 = 0;
                    int v165 = 0;
                    goto LABEL_441;
                  }
                  Nodeuint64_t Name = RIO_MTLX::PortElement::getNodeName(*(RIO_MTLX::PortElement **)m);
                  uint64_t v158 = BYTE7(v241);
                  if ((SBYTE7(v241) & 0x80u) == 0) {
                    uint64_t v159 = BYTE7(v241);
                  }
                  else {
                    uint64_t v159 = *((void *)&v240 + 1);
                  }
                  uint64_t v160 = *((unsigned __int8 *)NodeName + 23);
                  int v161 = (char)v160;
                  if ((v160 & 0x80u) != 0) {
                    uint64_t v160 = NodeName[1];
                  }
                  if (v159 == v160)
                  {
                    if (v161 >= 0) {
                      float v162 = (unsigned __int8 *)NodeName;
                    }
                    else {
                      float v162 = (unsigned __int8 *)*NodeName;
                    }
                    if ((BYTE7(v241) & 0x80) != 0)
                    {
                      if (!memcmp((const void *)v240, v162, *((size_t *)&v240 + 1)))
                      {
LABEL_437:
                        long long v164 = *(RIO_MTLX::PortElement **)m;
                        int v165 = *(std::string **)(m + 8);
                        if (v165) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)&v165->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
                        }
                        v246[0] = (void **)&v259;
                        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](v246);
LABEL_441:
                        if (v148) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v148);
                        }
                        v166 = v201;
                        v194[0] = (const std::string *)v164;
                        v194[1] = v165;
                        if (v165) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)&v165->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
                        }
                        RIO_MTLX::Input::setConnectedOutput(v166, v194);
                        if (v165)
                        {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v165);
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v165);
                        }
                        if (v247.__r_.__value_.__l.__size_) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v247.__r_.__value_.__l.__size_);
                        }
                        if (SBYTE7(v241) < 0) {
                          operator delete((void *)v240);
                        }
                        if (v148) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v148);
                        }
LABEL_453:
                        if (v202) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v202);
                        }
                        uint64_t v104 = v185;
                        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        if ((v236 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v236 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        if ((v249 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v249 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
LABEL_461:
                        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v248.__r_.__value_.__r.__words[2]);
                        if (v248.__r_.__value_.__l.__size_) {
                          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v248.__r_.__value_.__l.__size_);
                        }
                        break;
                      }
                    }
                    else
                    {
                      if (!BYTE7(v241)) {
                        goto LABEL_437;
                      }
                      uint64_t v163 = (unsigned __int8 *)&v240;
                      while (*v163 == *v162)
                      {
                        ++v163;
                        ++v162;
                        if (!--v158) {
                          goto LABEL_437;
                        }
                      }
                    }
                  }
                }
              }
            }
            pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v262);
          }
          if ((v256 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v256 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v254);
          if (v253) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v253);
          }
          v120 += 4;
        }
        while (v120 != (uint64_t *)v121);
      }
      v262 = &v227;
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100](&v262);
      v167 = *(RIO_MTLX **)v183;
      v168 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v104);
      if ((*(void *)v168 & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v169 = (*(void *)v168 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        uint64_t v169 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v168);
      }
      v192 = (const std::string *)v205;
      uint64_t v193 = v206;
      if (v206) {
        atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::GraphElement::addMaterialNode(v167, v169, &v192, (uint64_t *)&v262);
      if (v193) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v193);
      }
      if (v263) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v263);
      }
      if (v206) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v206);
      }
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v238.__r_.__value_.__l.__data_);
      }
      if ((v243 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v243 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(v212);
    }
    MEMORY[0x2455CECB0](&v214);
    if ((v216 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return MEMORY[0x2455CEF40](&v217);
}

void sub_23F71225C(_Unwind_Exception *a1)
{
  if ((STACK[0x3C8] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3C8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((STACK[0x230] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x230] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CEF40](&STACK[0x238]);
  _Unwind_Resume(a1);
}

void anonymous namespace'::setInput(void *a1, RIO_MTLX::Input **a2, void *a3, pxrInternal__aapl__pxrReserved__::UsdProperty *this, void **a5)
{
  *a1 = 0;
  a1[1] = 0;
  if ((unint64_t)*a5 <= 7)
  {
    pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)v37, this);
    unint64_t v8 = (unint64_t)*a5;
    if (v37 != a5)
    {
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v8 = 0;
      *a5 = v37[0];
      v37[0] = 0;
    }
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  MEMORY[0x2455CF810](v37, "asset");
  uint64_t v9 = (atomic_uint *)((unint64_t)v37[0] & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (((uint64_t)v37[0] & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if (v9 == (atomic_uint *)v10)
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v37);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
  }
  MEMORY[0x2455CF810](v37, "float2");
  char v11 = (atomic_uint *)((unint64_t)v37[0] & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (((uint64_t)v37[0] & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if (v11 == (atomic_uint *)v12) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>();
  }
  MEMORY[0x2455CF810](v37, "float3");
  uint64_t v13 = (atomic_uint *)((unint64_t)v37[0] & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (((uint64_t)v37[0] & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
  if (v13 == (atomic_uint *)v14) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  }
  MEMORY[0x2455CF810](v37, "float");
  unint64_t v15 = *a3 & 0xFFFFFFFFFFFFFFF8;
  int v16 = (atomic_uint *)((unint64_t)v37[0] & 0xFFFFFFFFFFFFFFF8);
  if (((uint64_t)v37[0] & 7) != 0) {
    atomic_fetch_add_explicit(v16, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v15 == v16)
  {
    LODWORD(v36[0]) = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  MEMORY[0x2455CF810](v37, "color3f");
  unint64_t v17 = *a3 & 0xFFFFFFFFFFFFFFF8;
  BOOL v18 = (atomic_uint *)((unint64_t)v37[0] & 0xFFFFFFFFFFFFFFF8);
  if (((uint64_t)v37[0] & 7) != 0) {
    atomic_fetch_add_explicit(v18, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v17 == v18) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  }
  MEMORY[0x2455CF810](v37, "int");
  unint64_t v19 = *a3 & 0xFFFFFFFFFFFFFFF8;
  int64x2_t v20 = (atomic_uint *)((unint64_t)v37[0] & 0xFFFFFFFFFFFFFFF8);
  if (((uint64_t)v37[0] & 7) != 0) {
    atomic_fetch_add_explicit(v20, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v19 == v20)
  {
    LODWORD(v36[0]) = 0;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>();
  }
  unint64_t v21 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (v21)
  {
    unint64_t v22 = (const char *)(v21 + 16);
    if (*(char *)(v21 + 39) < 0) {
      unint64_t v22 = *(const char **)v22;
    }
  }
  else
  {
    unint64_t v22 = "";
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "\n Unhandled input type = \"%s\"\n", v22);
  unint64_t v23 = (unint64_t)*a5 & 0xFFFFFFFFFFFFFFF8;
  if (v23)
  {
    unint64_t v24 = (char *)(v23 + 16);
    if (*(char *)(v23 + 39) < 0) {
      unint64_t v24 = *(char **)v24;
    }
  }
  else
  {
    unint64_t v24 = "";
  }
  int64_t v25 = *a2;
  uint8x8_t v26 = (RIO_MTLX *)std::string::basic_string[abi:ne180100]<0>(v37, v24);
  __asm { FMOV            V0.2S, #1.0 }
  __p[0] = _D0;
  LODWORD(__p[1]) = 1065353216;
  int v32 = RIO_MTLX::EMPTY_STRING(v26);
  RIO_MTLX::InterfaceElement::setInputValue<RIO_MTLX::Color3>(&v33, v25, (unsigned __int8 *)v37, (uint64_t)__p, v32);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
}

void sub_23F713414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 56);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v31 + 8);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void *anonymous namespace'::mtlxTypeString(_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  MEMORY[0x2455CF810](&v16, "color3f");
  unint64_t v4 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  std::string::size_type v5 = (atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit(v5, 0xFFFFFFFE, memory_order_release);
  }
  if ((atomic_uint *)v4 == v5)
  {
    unint64_t v14 = "color3";
  }
  else
  {
    MEMORY[0x2455CF810](&v16, "float");
    unint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v7 = (atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
    }
    if ((atomic_uint *)v6 == v7)
    {
      unint64_t v14 = "float";
    }
    else
    {
      MEMORY[0x2455CF810](&v16, "float3");
      unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v9 = (atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)v8 == v9)
      {
        unint64_t v14 = "float3";
      }
      else
      {
        MEMORY[0x2455CF810](&v16, "int");
        unint64_t v10 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        char v11 = (atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8);
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)v10 == v11)
        {
          unint64_t v14 = "int";
        }
        else
        {
          unint64_t v12 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v12)
          {
            uint64_t v13 = (const char *)(v12 + 16);
            if (*(char *)(v12 + 39) < 0) {
              uint64_t v13 = *(const char **)v13;
            }
          }
          else
          {
            uint64_t v13 = "";
          }
          fprintf((FILE *)*MEMORY[0x263EF8348], "\nUnhandled typetoke \"%s\" \n", v13);
          unint64_t v14 = "";
        }
      }
    }
  }
  return std::string::basic_string[abi:ne180100]<0>(this, v14);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::Node>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdShadeConnectionSourceInfo,1u>::~TfSmallVector(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = *(_DWORD *)(a1 + 60);
  if (v2 >= 2) {
    a1 = *(void *)a1;
  }
  uint64_t v3 = *(unsigned int *)(v1 + 56);
  if (v3)
  {
    uint64_t v4 = 56 * v3;
    do
    {
      uint64_t v5 = *(void *)(a1 + 32);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      a1 = MEMORY[0x2455CF2C0]() + 56;
      v4 -= 56;
    }
    while (v4);
    unsigned int v2 = *(_DWORD *)(v1 + 60);
  }
  if (v2 >= 2) {
    free(*(void **)v1);
  }
  return v1;
}

void RIO_MTLX::InterfaceElement::setInputValue<RIO_MTLX::Color3>(uint64_t **a1, RIO_MTLX::Input *a2, unsigned __int8 *a3, uint64_t a4, uint64_t *a5)
{
  RIO_MTLX::Element::getChildOfType<RIO_MTLX::Input>((uint64_t)a2, a3, a1);
  char v11 = *a1;
  if (!*a1)
  {
    unint64_t v12 = (const std::string *)RIO_MTLX::DEFAULT_TYPE_STRING(size);
    RIO_MTLX::InterfaceElement::addInput(a2, (uint64_t)a3, v12, (uint64_t *)&__p);
    long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    int64_t size = (RIO_MTLX *)a1[1];
    *(_OWORD *)a1 = v13;
    if (size)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)size);
      int64_t size = (RIO_MTLX *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
    }
    char v11 = *a1;
  }
  uint64_t v14 = *((unsigned __int8 *)a5 + 23);
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = a5[1];
  }
  if (!v14)
  {
    int64_t size = (RIO_MTLX *)RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE();
    a5 = &RIO_MTLX::TypedValue<RIO_MTLX::Color3>::TYPE(void)::v;
  }
  unint64_t v15 = (long long *)RIO_MTLX::TypedElement::TYPE_ATTRIBUTE(size);
  RIO_MTLX::Element::setAttribute(v11, v15, (const std::string *)a5);
  RIO_MTLX::toValueString<RIO_MTLX::Color3>(a4, &__p);
  unint64_t v17 = (long long *)RIO_MTLX::ValueElement::VALUE_ATTRIBUTE(v16);
  RIO_MTLX::Element::setAttribute(v11, v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F713918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 8);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 36) >= 2u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::_Destruct(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 36) >= 2u) {
    uint64_t v1 = *(void *)result;
  }
  uint64_t v2 = *(unsigned int *)(result + 32);
  if (v2)
  {
    uint64_t v3 = 32 * v2;
    uint64_t v4 = v1 + 16;
    do
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v4);
      __n128 result = *(void *)(v4 - 8);
      if (result) {
        __n128 result = pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(result);
      }
      v4 += 32;
      v3 -= 32;
    }
    while (v3);
  }
  return result;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::shared_ptr<RIO_MTLX::InterfaceElement>>>>::destroy(a1[1]);
    uint64_t v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t realityio::internal::dumpDiagnostics(const void **a1, atomic_uint **a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const void *)*((unsigned __int8 *)a1 + 23);
  if ((char)v2 < 0) {
    uint64_t v2 = a1[1];
  }
  if (!v2) {
    return 0;
  }
  if ((pxrInternal__aapl__pxrReserved__::TfIsDir() & 1) != 0
    || (uint64_t v5 = 0, pxrInternal__aapl__pxrReserved__::TfMakeDirs()))
  {
    uint64_t v65 = *a2;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v65);
    if (*((char *)a1 + 23) >= 0) {
      size_t v6 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v6 = (size_t)a1[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v69, v6 + 14);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v69;
    }
    else {
      uint64_t v7 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    if (v6)
    {
      if (*((char *)a1 + 23) >= 0) {
        unint64_t v8 = a1;
      }
      else {
        unint64_t v8 = *a1;
      }
      memmove(v7, v8, v6);
    }
    strcpy((char *)v7 + v6, "/snapshot.usdz");
    std::string::basic_string[abi:ne180100]<0>(&__stream, "rootLayer");
    std::string::basic_string[abi:ne180100]<0>(&__p, ".usda");
    pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(__stream);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v65);
    unint64_t v73 = 0;
    uint64_t v74 = 0;
    __streauint64_t m = (FILE *)&v73;
    pxrInternal__aapl__pxrReserved__::UsdStage::Export();
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__stream, v73);
    MEMORY[0x2455CE830](&__stream, &v71);
    memset(&__p, 0, sizeof(__p));
    pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v76 < 0) {
      operator delete(v75);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(__stream);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v65);
    if (*((char *)a1 + 23) >= 0) {
      size_t v9 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v9 = (size_t)a1[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, v9 + 17);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_s = &__s;
    }
    else {
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      if (*((char *)a1 + 23) >= 0) {
        char v11 = a1;
      }
      else {
        char v11 = *a1;
      }
      memmove(p_s, v11, v9);
    }
    strcpy((char *)p_s + v9, "/snapshot.reality");
    char v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!__s.__r_.__value_.__l.__size_)
      {
LABEL_81:
        operator delete(__s.__r_.__value_.__l.__data_);
        goto LABEL_82;
      }
      std::string::__init_copy_ctor_external(&v71, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      char v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      if (!*((unsigned char *)&__s.__r_.__value_.__s + 23))
      {
LABEL_82:
        std::string::basic_string[abi:ne180100]<0>(&v63, "reality.json");
        uint64_t ServiceLocator = REEngineGetServiceLocator();
        uint64_t v30 = MEMORY[0x2455CDC30](ServiceLocator);
        RESceneCreate();
        RESceneAddEntity();
        unint64_t v31 = REAssetManagerSceneAssetCreate();
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
        REAssetSerializeToJSON();
        if (SHIBYTE(v74) < 0) {
          operator delete(__stream);
        }
        RERelease();
        std::string::basic_string[abi:ne180100]<0>(&v71, "assets");
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if ((pxrInternal__aapl__pxrReserved__::TfIsDir() & 1) != 0
          || (pxrInternal__aapl__pxrReserved__::TfMakeDirs() & 1) != 0)
        {
          *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = 0uLL;
          v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]<0>(&v69, "assetManifest.json");
          pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v69.__r_.__value_.__l.__data_);
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v33 = fopen((const char *)p_p, "w");
          if (v33)
          {
            std::string::basic_string[abi:ne180100]<0>(&__s, "assetLinks.sh");
            pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
            if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s.__r_.__value_.__l.__data_);
            }
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v34 = &v69;
            }
            else {
              uint64_t v34 = (std::string *)v69.__r_.__value_.__r.__words[0];
            }
            uint64_t v35 = fopen((const char *)v34, "w");
            if (v35)
            {
              fwrite("/bin/mkdir -p assetLinks\n", 0x19uLL, 1uLL, v35);
              fwrite("{\n", 2uLL, 1uLL, v33);
              std::string::size_type v36 = v71.__r_.__value_.__r.__words[0];
              if ((std::string::size_type *)v71.__r_.__value_.__l.__data_ != &v71.__r_.__value_.__r.__words[1])
              {
                uint64_t v37 = 0;
                do
                {
                  CFStringRef Type = (const __CFString *)REAssetGetType();
                  CFStringRef v39 = Type;
                  if (Type)
                  {
                    CStringPtr = (char *)CFStringGetCStringPtr(Type, 0x8000100u);
                    if (!CStringPtr)
                    {
                      CFIndex Length = CFStringGetLength(v39);
                      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
                      std::string::basic_string[abi:ne180100](&__s, MaximumSizeForEncoding, 0);
                      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v43 = &__s;
                      }
                      else {
                        size_t v43 = (std::string *)__s.__r_.__value_.__r.__words[0];
                      }
                      CFStringGetCString(v39, (char *)v43, MaximumSizeForEncoding, 0x8000100u);
                      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        size_t v44 = &__s;
                      }
                      else {
                        size_t v44 = (std::string *)__s.__r_.__value_.__r.__words[0];
                      }
                      size_t v45 = strlen((const char *)v44);
                      std::string::resize(&__s, v45, 0);
                      goto LABEL_113;
                    }
                  }
                  else
                  {
                    CStringPtr = "";
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__s, CStringPtr);
LABEL_113:
                  uint64_t AssetId = REAssetGetAssetId();
                  pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
                  if (v67 >= 0) {
                    size_t v48 = &v66;
                  }
                  else {
                    size_t v48 = v66;
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v77, (pxrInternal__aapl__pxrReserved__ *)"%llu.%s.json", v47, v37, v48);
                  if (v67 < 0) {
                    operator delete(v66);
                  }
                  pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
                  REAssetSerializeToJSON();
                  if (v78 >= 0) {
                    long long v49 = v77;
                  }
                  else {
                    long long v49 = *(const char **)v77;
                  }
                  fprintf(v35, "/bin/ln -sf ../%s assetLinks/asset.%llu\n", v49, AssetId);
                  if (v78 >= 0) {
                    BOOL v50 = v77;
                  }
                  else {
                    BOOL v50 = *(const char **)v77;
                  }
                  fprintf(v33, "  \"%s\": \"%llu\"", v50, AssetId);
                  if (v37 != v71.__r_.__value_.__r.__words[2] - 1) {
                    fputc(44, v33);
                  }
                  fputc(10, v33);
                  CFRelease(v39);
                  if (v67 < 0) {
                    operator delete(v66);
                  }
                  if (v78 < 0) {
                    operator delete(*(void **)v77);
                  }
                  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__s.__r_.__value_.__l.__data_);
                  }
                  unint64_t v51 = *(std::string **)(v36 + 8);
                  if (v51)
                  {
                    do
                    {
                      uint64_t v52 = v51;
                      unint64_t v51 = (std::string *)v51->__r_.__value_.__r.__words[0];
                    }
                    while (v51);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v52 = *(std::string **)(v36 + 16);
                      BOOL v53 = v52->__r_.__value_.__r.__words[0] == v36;
                      std::string::size_type v36 = (std::string::size_type)v52;
                    }
                    while (!v53);
                  }
                  ++v37;
                  std::string::size_type v36 = (std::string::size_type)v52;
                }
                while (v52 != (std::string *)&v71.__r_.__value_.__r.__words[1]);
              }
              RERelease();
              fwrite("}\n", 2uLL, 1uLL, v33);
              fclose(v33);
            }
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v69.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy((void *)v71.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(v74) < 0) {
          operator delete(__stream);
        }
        if (v64 < 0) {
          operator delete(v63);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "info.json");
        pxrInternal__aapl__pxrReserved__::TfStringCatPaths();
        pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace();
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        fwrite("{\n", 2uLL, 1uLL, __stream);
        uint64_t v54 = __stream;
        uint64_t v55 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.CoreRE"];
        uint64_t v56 = *MEMORY[0x263EFFB70];
        unint64_t v57 = [v55 objectForInfoDictionaryKey:*MEMORY[0x263EFFB70]];
        int v58 = [v57 intValue];

        fprintf(v54, "\t\"CoreREVersion\": %lu,\n", v58);
        uint8x8_t v59 = __stream;
        unint64_t v60 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.CoreRealityIO"];
        uint8x8_t v61 = [v60 objectForInfoDictionaryKey:v56];
        LODWORD(v56) = [v61 intValue];

        fprintf(v59, "\t\"CoreRealityIOVersion\": %lu\n", (int)v56);
        uint64_t v5 = 1;
        fwrite("}\n", 2uLL, 1uLL, __stream);
        MEMORY[0x2455CEE40](&__stream);
        return v5;
      }
      std::string v71 = __s;
    }
    BOOL v13 = v12 < 0;
    uint64_t v14 = &__s;
    if (v13) {
      uint64_t v14 = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if (v14->__r_.__value_.__s.__data_[0] != 47)
    {
      getcwd((char *)&__stream, 0x400uLL);
      std::string::basic_string[abi:ne180100]<0>(&v69, (char *)&__stream);
      unint64_t v15 = std::string::append(&v69, "/");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v17 = &__s;
      }
      else {
        unint64_t v17 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s.__r_.__value_.__l.__size_;
      }
      unint64_t v19 = std::string::append(&__p, (const std::string::value_type *)v17, size);
      std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
      *(void *)uint64_t v77 = v19->__r_.__value_.__l.__size_;
      *(void *)&v77[7] = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
      char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v71.__r_.__value_.__l.__data_);
      }
      v71.__r_.__value_.__r.__words[0] = v20;
      v71.__r_.__value_.__l.__size_ = *(void *)v77;
      *(std::string::size_type *)((char *)&v71.__r_.__value_.__r.__words[1] + 7) = *(void *)&v77[7];
      *((unsigned char *)&v71.__r_.__value_.__s + 23) = v21;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v69.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v22 = REEngineGetServiceLocator();
    MEMORY[0x2455CDC30](v22);
    RESceneCreate();
    RESceneAddEntity();
    REAssetManagerSceneAssetCreate();
    RERelease();
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v23 = &v71;
    }
    else {
      unint64_t v23 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    unint64_t v24 = [NSString stringWithUTF8String:v23];
    RERealityFileWritingParametersCreate();
    RERealityFileWritingParametersSetMajorVersion();
    if (RERealityFileWriterCreateWithParameters())
    {
      RERealityFileWriterSetMetadataString();
      [v24 cStringUsingEncoding:4];
      if (RERealityFileWriterOpen())
      {
        REAssetManagerCreateAssetRequest();
        REAssetLoadRequestAddAsset();
        REAssetLoadRequestWaitForCompletion();
        RERelease();
        RERealityFileAssetWriteReportCreate();
        __p.__r_.__value_.__r.__words[0] = REAssetWithMetadataCreate();
        RERelease();
        int v25 = RERealityFileWriterWriteAssetArrayAndDependencies();
        uint8x8_t v26 = (__CFError *)RERealityFileAssetWriteReportGetError();
        RERelease();
        if (v26)
        {
          int v27 = (__CFString *)CFErrorCopyDescription(v26);
          realityio::CFStringCopyUTF8String(v27, (uint64_t)&__stream);
          if ((_BYTE)__stream)
          {
            uint8x8_t v28 = (const char *)&v73;
            if (SHIBYTE(v75) < 0) {
              uint8x8_t v28 = (const char *)v73;
            }
            fprintf((FILE *)*MEMORY[0x263EF8348], "\n ERROR %s\n", v28);
            if ((_BYTE)__stream && SHIBYTE(v75) < 0) {
              operator delete(v73);
            }
          }
        }
        else if (v25 && (RERealityFileWriterClose() & 1) != 0)
        {
          RERelease();
          RERelease();
          RERelease();
        }
      }
    }

    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_82;
    }
    goto LABEL_81;
  }
  return v5;
}

void sub_23F714644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::internal::anonymous namespace'::getDependentAssets(unint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v7 = a3 + 1;
  size_t v6 = a3[1];
  unint64_t v8 = a3 + 1;
  size_t v9 = a3 + 1;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v10 <= a1) {
          break;
        }
        size_t v6 = *v9;
        unint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a1) {
        break;
      }
      size_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    char v11 = (uint64_t *)operator new(0x28uLL);
    void v11[4] = a1;
    *char v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v9;
    *unint64_t v8 = v11;
    char v12 = (uint64_t *)**a3;
    if (v12)
    {
      *a3 = v12;
      BOOL v13 = *v8;
    }
    else
    {
      BOOL v13 = v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a3[1], v13);
    a3[2] = (uint64_t *)((char *)a3[2] + 1);
  }
  REAssetCopyDependencyArray();
  uint64_t Size = REAssetDynamicArrayGetSize();
  if (Size)
  {
    uint64_t v15 = Size;
    for (uint64_t i = 0; i != v15; ++i)
    {
      unint64_t Asset = REAssetDynamicArrayGetAsset();
      BOOL v18 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v19 = v18[4];
          if (Asset >= v19)
          {
            if (v19 >= Asset) {
              goto LABEL_20;
            }
            ++v18;
          }
          BOOL v18 = (void *)*v18;
        }
        while (v18);
      }
LABEL_20:
      ;
    }
  }

  return RERelease();
}

realityio::PhysicsRigidBodyComponentBuilder *realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(realityio::PhysicsRigidBodyComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__src, "PhysicsRigidBodyComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsRigidBodyComponentBuilderIdentifier);
  realityio::generatePhysicsRigidBodyDirtyStageSubscription(&v5);
  v10[0] = &unk_26F3489C8;
  void v10[3] = v10;
  v9[0] = &unk_26F348A48;
  v9[3] = v9;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)&__src, (uint64_t)__p, &v5, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((v12[15] & 0x80000000) != 0) {
    operator delete(__src);
  }
  *(void *)this = &unk_26F348950;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  __src = (void *)RERigidBodyComponentGetComponentType();
  std::vector<REComponentClass *>::__assign_with_size[abi:ne180100]<REComponentClass * const*,REComponentClass * const*>((char *)this + 280, (char *)&__src, (uint64_t)v12, 1uLL);
  return this;
}

void sub_23F714BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a18);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a22);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsRigidBodyComponentBuilder::run(realityio::PhysicsRigidBodyComponentBuilder *this, std::__shared_weak_count **a2)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 4);
  size_t v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&(*a2)->__shared_owners_);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v75, v6, v5);
  uint64_t v74 = 0;
  MEMORY[0x2455CF810](buf, "physics:mass");
  unint64_t v8 = atomic_load(MEMORY[0x263F90580]);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData();
  }
  UsdPhysicsAttributeDoubleValue = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)&v75, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 64), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v74, v7);
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string::size_type size = buf;
  if (UsdPhysicsAttributeDoubleValue)
  {
    char v11 = *(id *)(realityio::logObjects(UsdPhysicsAttributeDoubleValue) + 24);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v75, &v72);
      uint64_t v2 = &v72;
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = Text;
      _os_log_impl(&dword_23F4EA000, v11, OS_LOG_TYPE_INFO, "Updating entity's rigid body for prim %s", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
    }

    uint64_t v14 = realityio::EntityBuilder::kInputName(v13);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v14, (uint64_t)&v72);
    if ((_BYTE)v72)
    {
      uint64_t v15 = v73;
      std::string v71 = v73;
      if (v73)
      {
        long long v16 = (realityio::PhysicsMaterialAssetBuilder *)RERetain();
        uint64_t v17 = realityio::PhysicsMaterialAssetBuilder::kOutputName(v16);
        realityio::Inputs::_getValue<REAsset *>((uint64_t)a2, v17, (uint64_t)v67);
        if (!v67[0] || (uint64_t v66 = v68) == 0)
        {
          uint64_t v37 = *(NSObject **)(realityio::logObjects(v18) + 24);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_23F4EA000, v37, OS_LOG_TYPE_DEFAULT, "No physics material asset exists for the rigid body. The rigid body's component will not be created", buf, 2u);
          }
          goto LABEL_63;
        }
        uint64_t v19 = realityio::PhysicsColliderComponentBuilder::kOutputName(v18);
        int8x16_t v82 = 0;
        unint64_t v83 = 0;
        std::string::size_type v20 = a2[3];
        if (v20)
        {
          unint64_t v83 = std::__shared_weak_count::lock(v20);
          if (v83) {
            int8x16_t v82 = a2[2];
          }
        }
        MEMORY[0x2455CF830](&v84, v19);
        char v21 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(a2[1], &v82);
        if (v21 == v22)
        {
          std::operator+<char>();
          char v38 = std::string::append(&v79, ") at prim path (");
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v80.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
          int v41 = *(char *)(String + 23);
          if (v41 >= 0) {
            std::string::size_type v42 = (const std::string::value_type *)String;
          }
          else {
            std::string::size_type v42 = *(const std::string::value_type **)String;
          }
          if (v41 >= 0) {
            std::string::size_type v43 = *(unsigned __int8 *)(String + 23);
          }
          else {
            std::string::size_type v43 = *(void *)(String + 8);
          }
          size_t v44 = std::string::append(&v80, v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v81.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          uint64_t v33 = std::string::append(&v81, ")");
        }
        else
        {
          uint64_t v23 = 1;
          unint64_t v24 = v21;
          do
          {
            unint64_t v24 = (void *)*v24;
            --v23;
          }
          while (v24 != v22);
          if (!v23)
          {
            uint64_t v56 = v21[5];
            size_t v48 = *(std::mutex **)(v56 + 16);
            unint64_t v57 = *(std::__shared_weak_count **)(v56 + 24);
            if (v57) {
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if ((v21[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t EmptyString = (const void **)((v21[7] & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              uint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v21);
            }
            realityio::Outputs::getRawValue<RECollisionShape *>(v48, EmptyString, (uint64_t)buf);
            int v60 = buf[0];
            if (buf[0])
            {
              *(void *)&long long v59 = *(void *)&buf[8];
            }
            else
            {
              long long v85 = *(_OWORD *)&buf[8];
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v86, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
                if (buf[0]) {
                  BOOL v62 = 0;
                }
                else {
                  BOOL v62 = (v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                }
                int v61 = v62;
              }
              else
              {
                int v61 = 0;
                std::string v86 = v88;
              }
              long long v59 = v85;
              std::string::size_type size = (unsigned char *)v86.__r_.__value_.__l.__size_;
              size_t v48 = (std::mutex *)v86.__r_.__value_.__r.__words[0];
              LOBYTE(v2) = *((unsigned char *)&v86.__r_.__value_.__s + 23);
              if (v61)
              {
                long long v64 = v85;
                operator delete(v88.__r_.__value_.__l.__data_);
                long long v59 = v64;
              }
            }
            if (v57)
            {
              long long v65 = v59;
              std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              long long v59 = v65;
            }
            uint64_t v47 = v59;
            if (v60)
            {
              int v49 = 0;
              goto LABEL_49;
            }
            *(_OWORD *)long long buf = v59;
            if ((v2 & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&buf[16], (const std::string::value_type *)v48, (std::string::size_type)size);
              uint64_t v47 = *(void *)buf;
              uint64_t v63 = *(std::mutex **)&buf[16];
              LOBYTE(v2) = v88.__r_.__value_.__s.__data_[15];
              operator delete(v48);
              int v49 = 1;
              size_t v48 = v63;
              goto LABEL_49;
            }
LABEL_48:
            int v49 = 1;
LABEL_49:
            if ((v84 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            BOOL v50 = (realityio *)v83;
            if (v83) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v83);
            }
            if ((v49 & 1) != 0 || (*(void *)&long long v85 = v47) == 0)
            {
              BOOL v53 = *(NSObject **)(realityio::logObjects(v50) + 24);
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl(&dword_23F4EA000, v53, OS_LOG_TYPE_DEFAULT, "No physics collision shape exists for the rigid body. The rigid body's component will not be created.", buf, 2u);
              }
              if ((char)v2 < 0) {
                int v54 = v49;
              }
              else {
                int v54 = 0;
              }
              if (v54 == 1) {
                operator delete(v48);
              }
            }
            else
            {
              unint64_t v51 = a2[6];
              uint64_t v52 = operator new(0x38uLL);
              *uint64_t v52 = &unk_26F348AC8;
              v52[1] = a2;
              v52[2] = &v74;
              v52[3] = &v85;
              v52[4] = &v71;
              v52[5] = this;
              v52[6] = &v66;
              v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
              ((void (*)(std::__shared_weak_count *, unsigned char *))v51->__on_zero_shared)(v51, buf);
              std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
            }
LABEL_63:
            if (!v67[0] && v70 < 0) {
              operator delete(__p);
            }
LABEL_66:
            realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v71);
            realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&v72);
            goto LABEL_67;
          }
          std::operator+<char>();
          int v25 = std::string::append(&v79, ") at prim path (");
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v80.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          uint64_t v27 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v5);
          int v28 = *(char *)(v27 + 23);
          if (v28 >= 0) {
            uint64_t v29 = (const std::string::value_type *)v27;
          }
          else {
            uint64_t v29 = *(const std::string::value_type **)v27;
          }
          if (v28 >= 0) {
            std::string::size_type v30 = *(unsigned __int8 *)(v27 + 23);
          }
          else {
            std::string::size_type v30 = *(void *)(v27 + 8);
          }
          unint64_t v31 = std::string::append(&v80, v29, v30);
          long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
          v81.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v32;
          v31->__r_.__value_.__l.__size_ = 0;
          v31->__r_.__value_.__r.__words[2] = 0;
          v31->__r_.__value_.__r.__words[0] = 0;
          uint64_t v33 = std::string::append(&v81, ") because more than one connected builder produced the same output type");
        }
        long long v46 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[0] = v33->__r_.__value_.__r.__words[2];
        long long v85 = v46;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        realityio::DetailedError::DetailedError(buf, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v85);
        uint64_t v47 = *(void *)buf;
        size_t v48 = *(std::mutex **)&buf[16];
        LOBYTE(v2) = v88.__r_.__value_.__s.__data_[15];
        *(void *)&uint8_t buf[16] = 0;
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
        if (v86.__r_.__value_.__s.__data_[7] < 0) {
          operator delete((void *)v85);
        }
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        goto LABEL_48;
      }
    }
    else
    {
      std::string v71 = 0;
    }
    std::string::size_type v36 = *(NSObject **)(realityio::logObjects(v15) + 24);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_23F4EA000, v36, OS_LOG_TYPE_DEFAULT, "Stopping operation to set the rigid body component because entity no longer exists", buf, 2u);
    }
    goto LABEL_66;
  }
  uint64_t v34 = *(id *)(realityio::logObjects(UsdPhysicsAttributeDoubleValue) + 24);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v75, &v72);
    uint64_t v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v35;
    _os_log_impl(&dword_23F4EA000, v34, OS_LOG_TYPE_DEFAULT, "Could not retrieve mass value from the attribute on prim: %s", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
  }

LABEL_67:
  if ((v78 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v77);
  uint64_t result = v76;
  if (v76) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v76);
  }
  return result;
}

void sub_23F7153D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  operator delete(v53);
  uint64_t v56 = *(void *)(v54 - 184);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v57 = *(std::__shared_weak_count **)(v54 - 192);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (!a12 && a20 < 0) {
    operator delete(__p);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a21);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a22);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a31);
  _Unwind_Resume(a1);
}

void *realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::PhysicsRigidBodyComponentBuilder *this, realityio::Inputs *a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a2 + 6);
  uint64_t v4 = a2;
  v5[0] = &unk_26F348BC8;
  v5[1] = &v4;
  v5[2] = this;
  v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v5);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v5);
}

void sub_23F715670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::PhysicsRigidBodyComponentBuilder::~PhysicsRigidBodyComponentBuilder(realityio::PhysicsRigidBodyComponentBuilder *this)
{
  realityio::PhysicsRigidBodyComponentBuilder::~PhysicsRigidBodyComponentBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  *(void *)this = &unk_26F348950;
  uint64_t v2 = (void *)*((void *)this + 35);
  if (v2)
  {
    *((void *)this + 36) = v2;
    operator delete(v2);
  }
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *((void *)this + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 23);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3489C8;
  return result;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3489C8;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v19) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v19, &v21);
  size_t v6 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v21);
  uint64_t v7 = (realityio::PhysicsMaterialAssetBuilder *)v22;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v8 = realityio::PhysicsMaterialAssetBuilder::kOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v10 = atomic_load(MEMORY[0x263F90550]);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  LODWORD(v17) = 0;
  std::allocate_shared[abi:ne180100]<realityio::RelatedPrimInputDescriptor,std::allocator<realityio::RelatedPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken const&,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 128), (uint64_t *)(v10 + 104), (int *)&v17, &v19);
  char v11 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v19);
  char v12 = (realityio::PhysicsColliderComponentBuilder *)v20;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v13 = realityio::PhysicsColliderComponentBuilder::kOutputName(v12);
  unint64_t v14 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v14) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v16 = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v13, (uint64_t *)(v14 + 144), &v16, &v17);
  uint64_t v15 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F715A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F348A48;
  return result;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F348A48;
}

char *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::PhysicsRigidBodyComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_26F348AC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F348AC8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void v8[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  memset(v7, 0, sizeof(v7));
  REMakeMassFrameFromShapeAndMass();
  RERigidBodyComponentGetComponentType();
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26F348B38;
  v4[1] = v2;
  uint64_t v4[2] = v3;
  void v4[3] = v7;
  v8[3] = v4;
  uint64_t v5 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v8, v5);
  RENetworkMarkComponentDirty();
  return std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v8);
}

void sub_23F715DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void _ZNSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F348B38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F348B38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1, uint64_t *a2)
{
  return RERigidBodyComponentSetMassFrame();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio32PhysicsRigidBodyComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F348BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F348BC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t v3 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v3, (uint64_t)v8);
  if (v8[0])
  {
    uint64_t v7 = v9;
    if (v9)
    {
      RERetain();
      uint64_t v4 = *(void *)(v1 + 280);
      uint64_t v5 = *(void *)(v1 + 288);
      while (v4 != v5)
      {
        REEntityRemoveComponentByClass();
        v4 += 8;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v7);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_23F7160C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsRigidBodyComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t realityio::replication::write()
{
  return std::ostream::write();
}

uint64_t realityio::replication::write(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return realityio::replication::write();
}

void *realityio::replication::details::writeMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  uint64_t v19[2] = *MEMORY[0x263EF8340];
  v18.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::size(this);
  std::ostream::write();
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  uint64_t v6 = v5;
  uint64_t v15 = (void *)v4;
  uint64_t v16 = v5;
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  uint64_t v9 = result;
  uint64_t v10 = v8;
  if (v8) {
    BOOL v11 = v4 == (void)result;
  }
  else {
    BOOL v11 = 1;
  }
  char v12 = v11;
  if (v6 != v8 || (v12 & 1) == 0)
  {
    do
    {
      std::pair<std::string const,pxrInternal__aapl__pxrReserved__::VtValue>::pair[abi:ne180100](&v18, (long long *)(v4 + 32));
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v18;
      }
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17, (const pxrInternal__aapl__pxrReserved__::VtValue *)v19);
      realityio::replication::write();
      realityio::replication::write(a1, v17);
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      __n128 result = pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string,pxrInternal__aapl__pxrReserved__::VtValue> const*,std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::VtValue>,void *> *,long>>>::increment(&v15);
      uint64_t v4 = (uint64_t)v15;
      BOOL v13 = v15 == v9 || v10 == 0;
    }
    while (v16 != v10 || !v13);
  }
  return result;
}

void sub_23F716370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
}

uint64_t realityio::replication::write(uint64_t a1, uint64_t a2)
{
  realityio::replication::write();
  pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  realityio::replication::write();

  return std::ostream::write();
}

void realityio::replication::write(pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(a2);
  std::ostream::write();
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(v2))
  {
    std::ostream::write();
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<int>>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(v2))
  {
    std::ostream::write();
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) == 0)
    {
LABEL_8:
      std::ostream::write();
LABEL_9:
      std::ostream::write();
      return;
    }
LABEL_50:
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    goto LABEL_8;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(v2))
  {
    std::ostream::write();
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_50;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(v2))
  {
    std::ostream::write();
    uint64_t v5 = *((void *)v2 + 1);
    if ((v5 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
LABEL_102:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(v2))
  {
    std::ostream::write();
    uint64_t v6 = *((void *)v2 + 1);
    if ((v6 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<float>>(v2))
  {
    std::ostream::write();
    uint64_t v7 = *((void *)v2 + 1);
    if ((v7 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
LABEL_24:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<float>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<double>>(v2))
  {
    std::ostream::write();
    uint64_t v8 = *((void *)v2 + 1);
    if ((v8 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(v2))
  {
    std::ostream::write();
    uint64_t v9 = *((void *)v2 + 1);
    if ((v9 & 4) != 0) {
      uint64_t v10 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v2);
    else {
      uint64_t v10 = *(uint64_t **)v2;
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((uint64_t)a1, v10);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(v2))
  {
    std::ostream::write();
    uint64_t v11 = *((void *)v2 + 1);
    if ((v11 & 4) != 0) {
      char v12 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v11 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v2);
    else {
      char v12 = *(uint64_t **)v2;
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, v12);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(v2))
  {
    std::ostream::write();
    uint64_t v13 = *((void *)v2 + 1);
    if ((v13 & 4) != 0) {
      unint64_t v14 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v13 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v2);
    else {
      unint64_t v14 = *(uint64_t **)v2;
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((uint64_t)a1, v14);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(v2))
  {
    std::ostream::write();
    uint64_t v15 = *((void *)v2 + 1);
    if ((v15 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
LABEL_110:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(v2))
  {
    std::ostream::write();
    uint64_t v16 = *((void *)v2 + 1);
    if ((v16 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
LABEL_106:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(v2))
  {
    std::ostream::write();
    uint64_t v17 = *((void *)v2 + 1);
    if ((v17 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(v2))
  {
    std::ostream::write();
    uint64_t v18 = *((void *)v2 + 1);
    if ((v18 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_106;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(v2))
  {
    std::ostream::write();
    uint64_t v19 = *((void *)v2 + 1);
    if ((v19 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(v2))
  {
    std::ostream::write();
    uint64_t v20 = *((void *)v2 + 1);
    if ((v20 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_24;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(v2))
  {
    std::ostream::write();
    uint64_t v21 = *((void *)v2 + 1);
    if ((v21 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(v2))
  {
    std::ostream::write();
    uint64_t v22 = *((void *)v2 + 1);
    if ((v22 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(v2))
  {
    std::ostream::write();
    uint64_t v23 = *((void *)v2 + 1);
    if ((v23 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
LABEL_79:
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(v2))
  {
    std::ostream::write();
    uint64_t v24 = *((void *)v2 + 1);
    if ((v24 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(v2))
  {
    std::ostream::write();
    uint64_t v25 = *((void *)v2 + 1);
    if ((v25 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_79;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(v2))
  {
    std::ostream::write();
    uint64_t v26 = *((void *)v2 + 1);
    if ((v26 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_110;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(v2))
  {
    std::ostream::write();
    uint64_t v27 = *((void *)v2 + 1);
    if ((v27 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_106;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(v2))
  {
    std::ostream::write();
    uint64_t v28 = *((void *)v2 + 1);
    if ((v28 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_102;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(v2))
  {
    std::ostream::write();
    uint64_t v29 = *((void *)v2 + 1);
    if ((v29 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_106;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(v2))
  {
    std::ostream::write();
    uint64_t v30 = *((void *)v2 + 1);
    if ((v30 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_110;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(v2))
  {
    std::ostream::write();
    uint64_t v31 = *((void *)v2 + 1);
    if ((v31 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(v2))
  {
    std::ostream::write();
    uint64_t v32 = *((void *)v2 + 1);
    if ((v32 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<BOOL>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned char>(v2))
  {
LABEL_121:
    std::ostream::write();
    uint64_t v33 = *((void *)v2 + 1);
    if ((v33 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<int>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned int>(v2))
  {
LABEL_126:
    std::ostream::write();
    uint64_t v34 = *((void *)v2 + 1);
    if ((v34 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>(v2))
  {
    goto LABEL_131;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::pxr_half::half>(v2))
  {
    std::ostream::write();
    uint64_t v36 = *((void *)v2 + 1);
    if ((v36 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<float>(v2)) {
    goto LABEL_126;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<double>(v2)) {
    goto LABEL_131;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::string>(v2)) {
    goto LABEL_146;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::TfToken>(v2))
  {
    std::ostream::write();
    uint64_t v37 = *((void *)v2 + 1);
    if ((v37 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::write(a1, v2);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(v2))
  {
LABEL_146:
    std::ostream::write();
    uint64_t v38 = *((void *)v2 + 1);
    if ((v38 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::write();
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatd>(v2))
  {
LABEL_150:
    std::ostream::write();
    uint64_t v39 = *((void *)v2 + 1);
    if ((v39 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>(v2)) {
    goto LABEL_156;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuath>(v2)) {
    goto LABEL_131;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2d>(v2)) {
    goto LABEL_156;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2f>(v2)) {
    goto LABEL_131;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2h>(v2)) {
    goto LABEL_126;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec2i>(v2)) {
    goto LABEL_131;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3d>(v2))
  {
    std::ostream::write();
    uint64_t v41 = *((void *)v2 + 1);
    if ((v41 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3f>(v2)) {
    goto LABEL_172;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3h>(v2))
  {
    std::ostream::write();
    uint64_t v42 = *((void *)v2 + 1);
    if ((v42 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec3i>(v2))
  {
LABEL_172:
    std::ostream::write();
    uint64_t v43 = *((void *)v2 + 1);
    if ((v43 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4d>(v2)) {
    goto LABEL_150;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4f>(v2)) {
    goto LABEL_156;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4h>(v2)) {
    goto LABEL_131;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfVec4i>(v2))
  {
LABEL_156:
    std::ostream::write();
    uint64_t v40 = *((void *)v2 + 1);
    if ((v40 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(v2)) {
    goto LABEL_150;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(v2))
  {
    std::ostream::write();
    uint64_t v44 = *((void *)v2 + 1);
    if ((v44 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v2))
  {
    std::ostream::write();
    uint64_t v45 = *((void *)v2 + 1);
    if ((v45 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtDictionary>(v2))
  {
    std::ostream::write();
    uint64_t v46 = *((void *)v2 + 1);
    if ((v46 & 4) != 0) {
      uint64_t v47 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    else {
      uint64_t v47 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)v2;
    }
    realityio::replication::details::writeMap<pxrInternal__aapl__pxrReserved__::VtDictionary>((uint64_t)a1, v47);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>>(v2))
  {
    std::ostream::write();
    uint64_t v48 = *((void *)v2 + 1);
    if ((v48 & 4) != 0) {
      uint64_t v49 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    else {
      uint64_t v49 = *(void *)v2;
    }
    realityio::replication::write<pxrInternal__aapl__pxrReserved__::TfToken>(a1, v49);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(v2))
  {
    std::ostream::write();
    uint64_t v50 = *((void *)v2 + 1);
    if ((v50 & 4) != 0) {
      uint64_t v51 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    else {
      uint64_t v51 = *(void *)v2;
    }
    realityio::replication::write<std::string>((uint64_t)a1, v51);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>>(v2))
  {
    std::ostream::write();
    uint64_t v52 = *((void *)v2 + 1);
    if ((v52 & 4) != 0) {
      uint64_t v53 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    else {
      uint64_t v53 = *(void *)v2;
    }
    realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, v53);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(v2))
  {
    std::ostream::write();
    uint64_t v54 = *((void *)v2 + 1);
    if ((v54 & 4) != 0) {
      uint64_t v55 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    else {
      uint64_t v55 = *(void *)v2;
    }
    realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfReference>((uint64_t)a1, v55);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(v2))
  {
    std::ostream::write();
    uint64_t v56 = *((void *)v2 + 1);
    if ((v56 & 4) == 0)
    {
      unint64_t v57 = *(uint64_t **)v2;
LABEL_220:
      realityio::replication::write<int>((uint64_t)a1, v57);
      return;
    }
LABEL_219:
    unint64_t v57 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v56 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(v2);
    goto LABEL_220;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(v2))
  {
    std::ostream::write();
    uint64_t v58 = *((void *)v2 + 1);
    if ((v58 & 4) == 0)
    {
      long long v59 = *(uint64_t **)v2;
LABEL_225:
      realityio::replication::write<long long>((uint64_t)a1, v59);
      return;
    }
LABEL_224:
    long long v59 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v58 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(v2);
    goto LABEL_225;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(v2))
  {
    std::ostream::write();
    uint64_t v56 = *((void *)v2 + 1);
    if ((v56 & 4) == 0)
    {
      unint64_t v57 = *(uint64_t **)v2;
      goto LABEL_220;
    }
    goto LABEL_219;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(v2))
  {
    std::ostream::write();
    uint64_t v58 = *((void *)v2 + 1);
    if ((v58 & 4) == 0)
    {
      long long v59 = *(uint64_t **)v2;
      goto LABEL_225;
    }
    goto LABEL_224;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(v2))
  {
    std::ostream::write();
    uint64_t v60 = *((void *)v2 + 1);
    if ((v60 & 4) != 0) {
      int v61 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    else {
      int v61 = *(pxrInternal__aapl__pxrReserved__::SdfPath ***)v2;
    }
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t)a1, v61);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(v2))
  {
    std::ostream::write();
    uint64_t v62 = *((void *)v2 + 1);
    if ((v62 & 4) != 0) {
      uint64_t v63 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v62 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v2);
    else {
      uint64_t v63 = *(uint64_t **)v2;
    }
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, v63);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfSpecifier>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPermission>(v2)
    || pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfVariability>(v2))
  {
    goto LABEL_126;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<std::string,std::string>>(v2))
  {
    std::ostream::write();
    uint64_t v64 = *((void *)v2 + 1);
    if ((v64 & 4) != 0) {
      long long v65 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v64 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                              + 168))(v2);
    else {
      long long v65 = *(uint64_t **)v2;
    }
    realityio::replication::details::writeMap<std::map<std::string,std::string>>((uint64_t)a1, v65);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPayload>(v2))
  {
    std::ostream::write();
    uint64_t v66 = *((void *)v2 + 1);
    if ((v66 & 4) != 0) {
      uint64_t v67 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    else {
      uint64_t v67 = *(void *)v2;
    }
    realityio::replication::write((uint64_t)a1, v67);
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<double>>(v2))
  {
    std::ostream::write();
    uint64_t v68 = *((void *)v2 + 1);
    if ((v68 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    realityio::replication::details::writeVector<std::vector<long long>>();
    return;
  }
  if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(v2))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<std::string>>(v2))
    {
      std::ostream::write();
      uint64_t v70 = *((void *)v2 + 1);
      if ((v70 & 4) != 0) {
        std::string v71 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v70 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                                + 168))(v2);
      else {
        std::string v71 = *(uint64_t **)v2;
      }
      realityio::replication::details::writeVector<std::vector<std::string>>((uint64_t)a1, v71);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(v2)) {
      goto LABEL_121;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(v2))
    {
      std::ostream::write();
      uint64_t v72 = *((void *)v2 + 1);
      if ((v72 & 4) != 0) {
        uint64_t v73 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
      }
      else {
        uint64_t v73 = *(void *)v2;
      }
      uint64_t v76 = a1;
      goto LABEL_290;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(v2))
    {
      std::ostream::write();
      uint64_t v74 = *((void *)v2 + 1);
      if ((v74 & 4) != 0) {
        uint64_t v75 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
      }
      else {
        uint64_t v75 = *(void *)v2;
      }
      realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>((uint64_t)a1, v75);
      return;
    }
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(v2))
    {
      std::ostream::write();
      uint64_t v77 = *((void *)v2 + 1);
      if ((v77 & 4) != 0) {
        uint64_t v78 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
      }
      else {
        uint64_t v78 = *(void *)v2;
      }
      realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPayload>((uint64_t)a1, v78);
      return;
    }
    if (!pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(v2))
    {
      std::ostream::write();
      uint64_t v76 = a1;
      uint64_t v73 = (uint64_t)v2;
LABEL_290:
      realityio::replication::write(v76, v73);
      return;
    }
LABEL_131:
    std::ostream::write();
    uint64_t v35 = *((void *)v2 + 1);
    if ((v35 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    goto LABEL_9;
  }
  std::ostream::write();
  uint64_t v69 = *((void *)v2 + 1);
  if ((v69 & 4) != 0) {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
  }
  realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>();
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2)
{
  std::ostream::write();
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = (void *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (void *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (void *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (void *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, (void *)(a2 + 104));
    uint64_t v4 = (void *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::write<std::string>(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<std::string>>(a1, (uint64_t *)(a2 + 104));
    uint64_t v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<std::string>>(a1, v4);
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 104));
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_12SdfReferenceEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfReference>(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, (uint64_t *)(a2 + 104));
    uint64_t v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIiEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::write<int>(uint64_t a1, unsigned char *a2)
{
  if (!*a2)
  {
    realityio::replication::details::writeVector<std::vector<int>>();
    realityio::replication::details::writeVector<std::vector<int>>();
    realityio::replication::details::writeVector<std::vector<int>>();
    realityio::replication::details::writeVector<std::vector<int>>();
  }
  return realityio::replication::details::writeVector<std::vector<int>>();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIxEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::write<long long>(uint64_t a1, unsigned char *a2)
{
  if (!*a2)
  {
    realityio::replication::details::writeVector<std::vector<long long>>();
    realityio::replication::details::writeVector<std::vector<long long>>();
    realityio::replication::details::writeVector<std::vector<long long>>();
    realityio::replication::details::writeVector<std::vector<long long>>();
  }
  return realityio::replication::details::writeVector<std::vector<long long>>();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIjEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpIyEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPermission>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfPermissionE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfVariability>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__14SdfVariabilityE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::map<std::string,std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000023F7C9A54 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfPayload>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10SdfPayloadE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<double>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000023F7C9AF8 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__14SdfLayerOffsetENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<std::vector<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000023F7C9B75 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__20SdfUnregisteredValueE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, (uint64_t *)(a2 + 104));
    uint64_t v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__9SdfListOpINS_10SdfPayloadEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::write<pxrInternal__aapl__pxrReserved__::SdfPayload>(uint64_t a1, uint64_t a2)
{
  std::ostream::write();
  if (*(unsigned char *)a2)
  {
    uint64_t v4 = (uint64_t *)(a2 + 8);
  }
  else
  {
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 32));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 56));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 80));
    realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, (uint64_t *)(a2 + 104));
    uint64_t v4 = (uint64_t *)(a2 + 128);
  }
  return realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(a1, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<float>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t result = std::ostream::write();
  if (v3)
  {
    uint64_t v5 = a2[4];
    uint64_t v6 = 24 * v3;
    do
    {
      uint64_t result = realityio::replication::write();
      v5 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t result = std::ostream::write();
  if (v4)
  {
    uint64_t v6 = (void *)a2[4];
    uint64_t v7 = 8 * v4;
    do
    {
      uint64_t result = realityio::replication::write(a1, v6++);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t result = std::ostream::write();
  if (v3)
  {
    uint64_t v5 = a2[4];
    uint64_t v6 = 48 * v3;
    do
    {
      uint64_t result = realityio::replication::write();
      v5 += 48;
      v6 -= 48;
    }
    while (v6);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t result = std::ostream::write();
  if (v4 != v5)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = v7 + v4 - v5;
    do
    {
      realityio::replication::write();
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 24));
      realityio::replication::write();
      std::ostream::write();
      uint64_t result = (uint64_t)realityio::replication::details::writeMap<pxrInternal__aapl__pxrReserved__::VtDictionary>(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)(v7 + 48));
      v7 += 56;
    }
    while (v7 != v8);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<int>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<long long>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = (v3 - *a2) >> 3;
  uint64_t result = std::ostream::write();
  if (v3 != v4)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = 8 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v7);
      uint64_t result = realityio::replication::write();
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  uint64_t v5 = (void *)*a2;
  uint64_t v4 = (void *)a2[1];
  uint64_t v6 = ((uint64_t)v4 - *a2) >> 3;
  uint64_t result = std::ostream::write();
  if (v4 != v5)
  {
    uint64_t v8 = (void *)*a2;
    uint64_t v9 = 8 * v6;
    do
    {
      uint64_t result = realityio::replication::write(a1, v8++);
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void realityio::replication::details::writeMap<std::map<std::string,std::string>>(uint64_t a1, void *a2)
{
  v11.__r_.__value_.__r.__words[0] = a2[2];
  std::ostream::write();
  uint64_t v5 = (long long *)*a2;
  uint64_t v3 = (long long *)(a2 + 1);
  uint64_t v4 = v5;
  if (v5 != v3)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v11, v4 + 2);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
      }
      else {
        std::string v10 = v11;
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v12;
      }
      realityio::replication::write();
      realityio::replication::write();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = (long long *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(long long **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (long long *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != v3);
  }
}

void sub_23F718FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a23);
  _Unwind_Resume(a1);
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfLayerOffset>>()
{
  return std::ostream::write();
}

uint64_t realityio::replication::details::writeVector<std::vector<std::string>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = (v3 - *a2) / 24;
  uint64_t result = std::ostream::write();
  if (v3 != v4)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = 24 * v5;
    do
    {
      uint64_t result = realityio::replication::write();
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = (v4 - *a2) >> 4;
  uint64_t result = std::ostream::write();
  if (v4 != v5)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = 16 * v6;
    do
    {
      uint64_t result = realityio::replication::write(a1, v8);
      v8 += 16;
      v9 -= 16;
    }
    while (v9);
  }
  return result;
}

uint64_t realityio::replication::details::writeVector<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = (v4 - *a2) / 48;
  uint64_t result = std::ostream::write();
  if (v4 != v5)
  {
    uint64_t v8 = *a2;
    uint64_t v9 = 48 * v6;
    do
    {
      uint64_t result = realityio::replication::write(a1, v8);
      v8 += 48;
      v9 -= 48;
    }
    while (v9);
  }
  return result;
}

uint64_t realityio::TransformComponentBuilder::kOutputName(realityio::TransformComponentBuilder *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40C18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40C18))
  {
    operator new();
  }
  return _MergedGlobals_52;
}

void sub_23F71928C(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  __cxa_guard_abort(&qword_268C40C18);
  _Unwind_Resume(a1);
}

realityio::TransformComponentBuilder *realityio::TransformComponentBuilder::TransformComponentBuilder(realityio::TransformComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "TransformComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kTransformComponentBuilderIdentifier);
  realityio::generateTransformDirtyStageSubscription(&v5);
  v12[0] = &unk_26F348CC0;
  uint64_t v12[3] = v12;
  v11[0] = &unk_26F348D40;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F348C48;
  return this;
}

void sub_23F719408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](&a24);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)(v24 - 56));
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::TransformComponentBuilder::run(uint64_t **this, realityio::Inputs *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v53, v5, v4);
  int IsValid = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53);
  if (IsValid)
  {
    uint64_t v7 = *(NSObject **)(realityio::logObjects(IsValid) + 24);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
    if (v8)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_INFO, "Updating entity transform", buf, 2u);
    }
    uint64_t v9 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v8);
    realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v9, (uint64_t)v51);
    if (!v51[0])
    {
      uint64_t v31 = *(NSObject **)(realityio::logObjects(v10) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Stopping operation to set transform component because entity no longer exists", buf, 2u);
      }
      goto LABEL_57;
    }
    uint64_t v11 = realityio::EntityBuilder::kPrimPathOutputName(v10);
    realityio::Inputs::_getValue<pxrInternal__aapl__pxrReserved__::SdfPath *>((uint64_t)a2, v11, (uint64_t)v47);
    if (v47[0])
    {
      uint64_t v13 = v48;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, buf);
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = *(void *)buf;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
      if (v14 == v15)
      {
        *(void *)long long buf = 0;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        realityio::WrappedRERef<REAsset *>::operator=(v16, v52);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v45 = MEMORY[0x263F90730] + 16;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v44, 1.0);
        if (v46 && (*(unsigned char *)(v46 + 57) & 8) == 0 && (*(unsigned int (**)(uint64_t *))(v45 + 32))(&v45))
        {
          MEMORY[0x2455CEEE0](v43, &v45);
          pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation();
          ComponentCFStringRef Type = (void **)v43;
          std::vector<pxrInternal__aapl__pxrReserved__::UsdGeomXformOp>::__destroy_vector::operator()[abi:ne180100](&ComponentType);
        }
        MEMORY[0x2455CE5D0](v43, v44);
        REDecomposeMatrix();
        unint64_t v17 = atomic_load(&realityio::tokens::TransformBuilderTokens);
        if (!v17) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v39, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v17 + 64));
        if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v39))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&ComponentType, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v53);
          uint64_t v18 = (void **)v70;
          if (v70)
          {
            if (*(unsigned char *)(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->(&v70)
                          + 14))
              uint64_t v18 = ComponentType;
            else {
              uint64_t v18 = 0;
            }
          }
          uint64_t v37 = v18;
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v37);
          unint64_t v19 = atomic_load(&realityio::tokens::TransformBuilderTokens);
          if (!v19) {
            pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
          }
          v38[0] = 0;
          BOOL RealityKitStage = realityio::getRealityKitStageMetadata<BOOL>((uint64_t *)&v37, (void *)(v19 + 56), (pxrInternal__aapl__pxrReserved__::VtValue *)v38);
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&v37);
          uint64_t v21 = v70;
          if (v70 && atomic_fetch_add_explicit((atomic_uint *volatile)(v70 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          if (!RealityKitStage)
          {
            char v74 = 1;
            ComponentCFStringRef Type = (void **)REAnchoringComponentGetComponentType();
            std::__tree<REComponentClass *>::__emplace_unique_key_args<REComponentClass *,REComponentClass * const&>(this + 5, (unint64_t *)&ComponentType, (uint64_t *)&ComponentType);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          }
        }
        char v74 = 0;
        uint64_t v22 = *((void *)a2 + 5);
        unint64_t v57 = this;
        uint64_t v68 = 0;
        uint64_t v23 = (char *)operator new(0xB0uLL);
        *(void *)uint64_t v23 = &unk_26F348DC0;
        uint64_t v24 = v58[0];
        *((void *)v23 + 2) = v57;
        *((void *)v23 + 4) = v24;
        long long v25 = v60;
        *((_OWORD *)v23 + 3) = v59;
        *((_OWORD *)v23 + 4) = v25;
        *((_OWORD *)v23 + 5) = *(_OWORD *)v61;
        *(void *)(v23 + 93) = *(void *)&v61[13];
        *(_OWORD *)(v23 + 104) = v62;
        long long v62 = 0u;
        long long v26 = v63;
        uint64_t v27 = v66;
        *((void *)v23 + 17) = v64;
        *(_OWORD *)(v23 + 120) = v26;
        v58[0] = 0;
        uint64_t v64 = 0;
        long long v63 = 0u;
        *((void *)v23 + 20) = v27;
        *((_OWORD *)v23 + 9) = __p;
        long long __p = 0u;
        uint64_t v66 = 0;
        uint64_t v68 = v23;
        uint64_t v28 = *(void *)(v22 + 16);
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&ComponentType, (uint64_t)v67);
        realityio::ImportSessionImpl::performBlockLaterOnEngineQueue(v28, (uint64_t)&ComponentType);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&ComponentType);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v67);
        if (SHIBYTE(v66) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v64) < 0) {
          operator delete((void *)v63);
        }
        if ((BYTE8(v62) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v62 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v62 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(v58);
        if ((v42 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v41);
        if (v40) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v40);
        }
        MEMORY[0x2455CEF00](&v45);
        if (SHIBYTE(v78) < 0) {
          operator delete(*((void **)&v77 + 1));
        }
        if (SBYTE7(v77) < 0) {
          operator delete((void *)v76);
        }
        if ((BYTE8(v75) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v75 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v75 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(buf);
        goto LABEL_54;
      }
      uint64_t v32 = *(id *)(realityio::logObjects((realityio *)v16) + 24);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, v44);
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
        uint64_t v35 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v48);
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = Text;
        __int16 v72 = 2080;
        uint64_t v73 = v35;
        _os_log_impl(&dword_23F4EA000, v32, OS_LOG_TYPE_INFO, "Skipping entity transform for %s becuase entity is for %s", buf, 0x16u);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
      }
    }
    else
    {
      uint64_t v32 = *(id *)(realityio::logObjects(v12) + 24);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, v44);
        uint64_t v33 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v33;
        _os_log_impl(&dword_23F4EA000, v32, OS_LOG_TYPE_INFO, "Skipping entity transform for %s becuase entity path is not available for some reason", buf, 0xCu);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
      }
    }

LABEL_54:
    if (!v47[0] && v50 < 0) {
      operator delete(v49);
    }
LABEL_57:
    realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v51);
    goto LABEL_58;
  }
  uint64_t v29 = *(id *)(realityio::logObjects(IsValid) + 24);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v53, v44);
    uint64_t v30 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_impl(&dword_23F4EA000, v29, OS_LOG_TYPE_DEFAULT, "Stopping operation to set transform component because the prim is not valid: '%s'", buf, 0xCu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v44);
  }

LABEL_58:
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v55);
  uint64_t result = v54;
  if (v54) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  }
  return result;
}

void sub_23F719D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&a13);
  __int16 v72 = (atomic_uint *)STACK[0x2B8];
  if (STACK[0x2B8] && atomic_fetch_add_explicit(v72 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v72 + 8))(v72);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a23);
  MEMORY[0x2455CEF00](&a52);
  if (!a55 && a63 < 0) {
    operator delete(__p);
  }
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a64);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a70);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::TransformAnchoringData::TransformAnchoringData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if (v4) {
    RERetain();
  }
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v7 = *((_OWORD *)a2 + 3);
  *(void *)(a1 + 61) = *(uint64_t *)((char *)a2 + 61);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v8 = a2[9];
  *(void *)(a1 + 72) = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 72) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = a2[10];
  *(void *)(a1 + 80) = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 80) &= 0xFFFFFFFFFFFFFFF8;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), (const std::string::value_type *)a2[11], a2[12]);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 11);
    *(void *)(a1 + 104) = a2[13];
    *(_OWORD *)(a1 + 88) = v10;
  }
  uint64_t v11 = (std::string *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)a2[14], a2[15]);
  }
  else
  {
    long long v12 = *((_OWORD *)a2 + 7);
    *(void *)(a1 + 128) = a2[16];
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  return a1;
}

void sub_23F71A060(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 80);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(v1 + 72);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = *(void *)(a1 + 96);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 88);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 16));
  return a1;
}

void anonymous namespace'::TransformAnchoringData::~TransformAnchoringData(void **this)
{
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  unint64_t v2 = (unint64_t)this[10];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v3 = (unint64_t)this[9];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::WrappedRERef<REEntity *>::~WrappedRERef(this);
}

void *realityio::TransformComponentBuilder::clear(realityio::TransformComponentBuilder *this, realityio::Inputs *a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a2 + 6);
  v4[0] = &unk_26F349010;
  v4[1] = a2;
  uint64_t v4[2] = this;
  void v4[3] = v4;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 16))(v2, v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_23F71A268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::TransformComponentBuilder::~TransformComponentBuilder(realityio::TransformComponentBuilder *this)
{
  realityio::DynamicBuilder::~DynamicBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F348CC0;
  return result;
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F348CC0;
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v22) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)&v22, &v24);
  long long v6 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v24);
  long long v7 = (realityio::EntityBuilder *)v25;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v8 = realityio::EntityBuilder::kPrimPathOutputName(v7);
  unint64_t v9 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v20) = 0;
  std::allocate_shared[abi:ne180100]<realityio::CurrentPrimInputDescriptor,std::allocator<realityio::CurrentPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v8, (uint64_t *)(v9 + 160), (int *)&v20, &v22);
  long long v10 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  MEMORY[0x2455CF810](&v18, "resource_name");
  MEMORY[0x2455CF810](&v16, "resourceName");
  LODWORD(v12) = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(&v20, v18, &v16, (int *)&v12);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = v20;
  unint64_t v19 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  MEMORY[0x2455CF810](&v12, "resource_group");
  MEMORY[0x2455CF810](&v15, "resourceGroup");
  int v14 = 1;
  std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(&v16, v12, &v15, &v14);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = v17;
  uint64_t v12 = v16;
  uint64_t v13 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F71A5F8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t anonymous namespace'::referenceImageCallback@<X0>(_anonymous_namespace_ *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdStage *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v11, this, a2);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    unint64_t v5 = atomic_load(&realityio::tokens::TransformBuilderTokens);
    if (!v5) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v7, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 64));
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7)) {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
    }
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
    if (v8) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
    }
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
  uint64_t result = v12;
  if (v12) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v12);
  }
  return result;
}

void sub_23F71A9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  *(void *)(v3 - 40) = va;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)va1);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va2);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)(v3 - 72));
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<realityio::CustomInputDescriptor,std::allocator<realityio::CustomInputDescriptor>,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> (&)(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&),realityio::InputDescriptor::Optionality,void>(void *a1, uint64_t a2, uint64_t *a3, int *a4)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)operator new(0x68uLL);
  uint64_t v9 = v8;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_26F332568;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)EmptyString;
    __p.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  }
  v13[0] = &unk_26F3325B8;
  v13[3] = v13;
  realityio::CustomInputDescriptor::CustomInputDescriptor((void *)v9 + 3, (uint64_t)&__p, a3, (uint64_t)v13, *a4);
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100](v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = (char *)v9 + 24;
  a1[1] = v9;
}

void sub_23F71ABA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F348D40;
  return result;
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F348D40;
}

void std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1065353216;
  uint64_t v4 = realityio::TransformComponentBuilder::kOutputName((realityio::TransformComponentBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 304), &v7, &v8);
  long long v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F71AD58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::TransformComponentBuilder::TransformComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void realityio::Inputs::_getValue<void *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v57[2] = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  char v50 = 0;
  int v7 = *(std::__shared_weak_count **)(a2 + 24);
  if (v7)
  {
    char v50 = std::__shared_weak_count::lock(v7);
    if (v50) {
      uint64_t v49 = *(void *)(a2 + 16);
    }
  }
  MEMORY[0x2455CF830](&v51, a3);
  std::string::size_type v8 = std::__hash_table<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::__unordered_map_hasher<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,std::equal_to<realityio::BuilderAndIOName>,true>,std::__unordered_map_equal<realityio::BuilderAndIOName,std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>,std::equal_to<realityio::BuilderAndIOName>,realityio::BuilderAndIOName::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderAndIOName,realityio::BuilderAndIOName>>>::__equal_range_multi<realityio::BuilderAndIOName>(*(void **)(a2 + 8), &v49);
  if (v8 == v9)
  {
    std::operator+<char>();
    uint64_t v21 = std::string::append(&v47, ") at prim path (");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    int v24 = *(char *)(String + 23);
    if (v24 >= 0) {
      long long v25 = (const std::string::value_type *)String;
    }
    else {
      long long v25 = *(const std::string::value_type **)String;
    }
    if (v24 >= 0) {
      std::string::size_type v26 = *(unsigned __int8 *)(String + 23);
    }
    else {
      std::string::size_type v26 = *(void *)(String + 8);
    }
    uint64_t v27 = std::string::append(&v48, v25, v26);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v52, ")");
LABEL_22:
    long long v29 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    std::string::size_type v54 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v29;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(&v55, 204, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a1 + 8) = v55;
    v57[0] = v56.__r_.__value_.__l.__size_;
    std::string::size_type v30 = v56.__r_.__value_.__r.__words[0];
    *(void *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 7);
    char v31 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    memset(&v56, 0, sizeof(v56));
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
    uint64_t v32 = v57[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v30;
    *(void *)(a1 + 32) = v32;
    *(unsigned char *)(a1 + 47) = v31;
    if (SHIBYTE(v54) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v33 = (std::mutex *)v47.__r_.__value_.__r.__words[0];
LABEL_30:
      operator delete(v33);
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  uint64_t v10 = 1;
  long long v11 = v8;
  do
  {
    long long v11 = (void *)*v11;
    --v10;
  }
  while (v11 != v9);
  if (v10)
  {
    std::operator+<char>();
    uint64_t v12 = std::string::append(&v47, ") at prim path (");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 32));
    int v15 = *(char *)(v14 + 23);
    if (v15 >= 0) {
      uint64_t v16 = (const std::string::value_type *)v14;
    }
    else {
      uint64_t v16 = *(const std::string::value_type **)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(v14 + 23);
    }
    else {
      std::string::size_type v17 = *(void *)(v14 + 8);
    }
    uint64_t v18 = std::string::append(&v48, v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    uint64_t v20 = std::string::append(&v52, ") because more than one connected builder produced the same output type");
    goto LABEL_22;
  }
  uint64_t v34 = v8[5];
  uint64_t v36 = *(std::mutex **)(v34 + 16);
  uint64_t v35 = *(std::__shared_weak_count **)(v34 + 24);
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v8[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (const void **)((v8[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    unint64_t EmptyString = (const void **)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  }
  uint64_t v38 = v36 + 1;
  std::mutex::lock(v36 + 1);
  uint64_t v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v36->__m_.__opaque[32], EmptyString);
  uint64_t v40 = v39;
  uint64_t v41 = &v36->__m_.__opaque[40];
  if (&v36->__m_.__opaque[40] != (char *)v39)
  {
    uint64_t v42 = *(void *)(*(void *)(v39 + 56) + 8);
    std::mutex::unlock(v36 + 1);
    if (!v35) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  std::operator+<char>();
  uint64_t v43 = std::string::append(&v52, "\" does not exist in the builder outputs");
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v54 = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  realityio::DetailedError::DetailedError(&v55, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  uint64_t v3 = *((void *)&v55 + 1);
  uint64_t v42 = v55;
  unint64_t EmptyString = (const void **)v56.__r_.__value_.__l.__size_;
  std::string __s = (std::string::value_type *)v56.__r_.__value_.__r.__words[0];
  LODWORD(v48.__r_.__value_.__l.__data_) = v56.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v48.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v56.__r_.__value_.__r.__words[2] + 3);
  LODWORD(v36) = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
  memset(&v56, 0, sizeof(v56));
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  std::mutex::unlock(v38);
  *(void *)&long long v55 = v42;
  *((void *)&v55 + 1) = v3;
  if ((v36 & 0x80000000) == 0)
  {
    LODWORD(v56.__r_.__value_.__r.__words[2]) = v48.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v56.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v48.__r_.__value_.__r.__words + 3);
    LODWORD(v47.__r_.__value_.__l.__data_) = v56.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v47.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)v48.__r_.__value_.__r.__words + 3);
    uint64_t v38 = (std::mutex *)__s;
    if (!v35) {
      goto LABEL_39;
    }
LABEL_38:
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    goto LABEL_39;
  }
  std::string::__init_copy_ctor_external(&v56, __s, (std::string::size_type)EmptyString);
  uint64_t v3 = *((void *)&v55 + 1);
  uint64_t v42 = v55;
  unint64_t EmptyString = (const void **)v56.__r_.__value_.__l.__size_;
  std::string::size_type v45 = v56.__r_.__value_.__r.__words[0];
  LOBYTE(v36) = *((unsigned char *)&v56.__r_.__value_.__s + 23);
  LODWORD(v47.__r_.__value_.__l.__data_) = v56.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v47.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v56.__r_.__value_.__r.__words[2] + 3);
  operator delete(__s);
  uint64_t v38 = (std::mutex *)v45;
  if (v35) {
    goto LABEL_38;
  }
LABEL_39:
  if (v41 == (char *)v40)
  {
    *(void *)&long long v55 = v42;
    *((void *)&v55 + 1) = v3;
    if ((v36 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)v38, (std::string::size_type)EmptyString);
      *(unsigned char *)a1 = 0;
      *(_OWORD *)(a1 + 8) = v55;
      *(std::string *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v56;
      uint64_t v33 = v38;
      goto LABEL_30;
    }
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    v56.__r_.__value_.__l.__size_ = (std::string::size_type)EmptyString;
    LODWORD(v56.__r_.__value_.__r.__words[2]) = v47.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v56.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v47.__r_.__value_.__r.__words + 3);
    *((unsigned char *)&v56.__r_.__value_.__s + 23) = (_BYTE)v36;
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 8) = v55;
    *(std::string *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v56;
  }
  else
  {
    *(unsigned char *)a1 = 1;
    *(void *)(a1 + 8) = v42;
  }
LABEL_50:
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
}

void sub_23F71B2D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  operator delete(v33);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if ((a26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F348DC0;
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  uint64_t v2 = *(void *)(a1 + 112);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 32));
  return a1;
}

void std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26F348DC0;
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  uint64_t v2 = *(void *)(a1 + 112);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 104);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 32));

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0xB0uLL);
  void *v2 = &unk_26F348DC0;
  v2[2] = *(void *)(a1 + 16);
  return v2;
}

void sub_23F71B578(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F348DC0;
  a2[2] = *(void *)(a1 + 16);
}

void *std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__function::__alloc_func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 16);
}

void std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 16);

  operator delete(a1);
}

void std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  void v17[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 32;
  uint64_t v3 = *(void *)(a1 + 16);
  RETransformComponentGetComponentType();
  v17[0] = &unk_26F348E30;
  v17[1] = v2;
  v17[3] = v17;
  uint64_t v4 = REEntityGetOrAddComponentByClass();
  std::function<void ()(REComponent *)>::operator()((uint64_t)v17, v4);
  RENetworkMarkComponentDirty();
  std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v17);
  if (*(unsigned char *)(a1 + 100))
  {
    REAnchoringComponentGetComponentType();
    v16[0] = &unk_26F348EB0;
    v16[1] = v2;
    uint64_t v16[3] = v16;
    uint64_t v5 = REEntityGetOrAddComponentByClass();
    std::function<void ()(REComponent *)>::operator()((uint64_t)v16, v5);
    RENetworkMarkComponentDirty();
    std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v16);
  }
  long long v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  int v7 = v6;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348F30;
  LOBYTE(v6[1].__vftable) = 1;
  std::string::size_type v8 = v6 + 1;
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v9 = *(std::__shared_weak_count **)(v3 + 24);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = (long long *)realityio::TransformComponentBuilder::kOutputName((realityio::TransformComponentBuilder *)v6);
  std::mutex::lock((std::mutex *)(v10 + 64));
  uint64_t v12 = operator new(0x30uLL);
  v12[1] = 0;
  v12[2] = 0;
  *uint64_t v12 = &unk_26F348F80;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12[3] = &unk_26F348FD0;
  v12[4] = v8;
  void v12[5] = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  int v15 = v11;
  long long v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v10 + 40), (const void **)v11, (uint64_t)&std::piecewise_construct, &v15);
  uint64_t v14 = (std::__shared_weak_count *)v13[8];
  v13[7] = (uint64_t)(v12 + 3);
  v13[8] = (uint64_t)v12;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v10, (unsigned __int8 *)v11, (uint64_t)v11);
  std::mutex::unlock((std::mutex *)(v10 + 64));
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_23F71B858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::mutex::unlock(v18);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 16;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void *std::__function::__alloc_func<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = *(void *)(a1 + 96);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 88);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  return realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 16));
}

void _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F348E30;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F348E30;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_()
{
  return RETransformComponentSetLocalSRT();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E_;
}

void _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F348EB0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F348EB0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEEclEOSC_(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = atomic_load(&realityio::tokens::TransformBuilderTokens);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  if ((*(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v2 + 24) & 0xFFFFFFFFFFFFFFF8))
  {
    REAnchoringComponentSetDescriptorType();
    if (*(void *)(v1 + 80))
    {
      unint64_t v8 = atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v8) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*(void *)(v1 + 80) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v8 + 8) & 0xFFFFFFFFFFFFFFF8)
        && !atomic_load(&realityio::tokens::TransformBuilderTokens))
      {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      REAnchoringComponentSetDescriptorAlignment();
    }
  }
  else
  {
    unint64_t v3 = atomic_load(&realityio::tokens::TransformBuilderTokens);
    if (!v3) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    if ((*(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v3 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
      REAnchoringComponentSetDescriptorType();
      REAnchoringComponentSetDescriptorResourceGroup();
      REAnchoringComponentSetDescriptorResourceName();
    }
    else
    {
      uint64_t v4 = (realityio *)atomic_load(&realityio::tokens::TransformBuilderTokens);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TransformBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TransformBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      if ((*(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8) == (*(void *)v4 & 0xFFFFFFFFFFFFFFF8))
      {
        REAnchoringComponentSetDescriptorType();
      }
      else
      {
        uint64_t v5 = *(NSObject **)(realityio::logObjects(v4) + 24);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v6 = *(void *)(v1 + 72) & 0xFFFFFFFFFFFFFFF8;
          if (v6)
          {
            int v7 = (const char *)(v6 + 16);
            if (*(char *)(v6 + 39) < 0) {
              int v7 = *(const char **)v7;
            }
          }
          else
          {
            int v7 = "";
          }
          int v11 = 136315138;
          uint64_t v12 = v7;
          _os_log_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_DEFAULT, "Unknown anchor type %s", (uint8_t *)&v11, 0xCu);
        }
        REAnchoringComponentSetDescriptorType();
      }
    }
  }

  return REAnchoringComponentSetScaleFactor();
}

uint64_t _ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN9realityio25TransformComponentBuilder3runEPNS2_6InputsEENK3__0clEvEUlT_E0_NS_9allocatorIS8_EEFvP11REComponentEE11target_typeEv()
{
  return &_ZTIZZN9realityio25TransformComponentBuilder3runEPNS_6InputsEENK3__0clEvEUlT_E0_;
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348F30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348F80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<BOOL>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348F80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<BOOL>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = &unk_26F348FD0;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<BOOL>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26F349010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F349010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(realityio::EntityBuilder *a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 1);
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v4 = realityio::EntityBuilder::kInputName(a1);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>(v2, v4, (uint64_t)v29);
  if (v29[0])
  {
    uint64_t v28 = v30;
    if (v30)
    {
      uint64_t v5 = (realityio::TransformComponentBuilder *)RERetain();
      int v7 = *(std::mutex **)(v3 + 16);
      unint64_t v6 = *(std::__shared_weak_count **)(v3 + 24);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v8 = (const void **)realityio::TransformComponentBuilder::kOutputName(v5);
      std::mutex::lock(v7 + 1);
      uint64_t v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v7->__m_.__opaque[32], v8);
      if (&v7->__m_.__opaque[40] == (char *)v9)
      {
        std::operator+<char>();
        uint64_t v13 = std::string::append(&v34, "\" does not exist in the builder outputs");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        std::string::size_type v36 = v13->__r_.__value_.__r.__words[2];
        long long v35 = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        realityio::DetailedError::DetailedError(buf, 207, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v35);
        long long v32 = *(_OWORD *)buf;
        *(void *)uint64_t v33 = *(void *)&buf[16];
        *(void *)&v33[8] = *(void *)&buf[24];
        *(void *)&v33[15] = *(void *)&buf[31];
        char v15 = buf[39];
        memset(&buf[16], 0, 24);
        LOBYTE(v31) = 0;
        v33[23] = v15;
        if (SHIBYTE(v36) < 0) {
          operator delete((void *)v35);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v10 = *(void *)(v9 + 56);
        uint64_t v12 = *(void *)(v10 + 8);
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        LOBYTE(v31) = 1;
        *(void *)&long long v32 = v12;
        *((void *)&v32 + 1) = v11;
      }
      std::mutex::unlock(v7 + 1);
      if ((_BYTE)v31)
      {
        long long v16 = v32;
        if (*((void *)&v32 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
          v24[0] = 1;
          long long v25 = v16;
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
        }
        else
        {
          v24[0] = 1;
          long long v25 = (unint64_t)v32;
        }
      }
      else
      {
        *(_OWORD *)long long buf = v32;
        if ((v33[23] & 0x80000000) != 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&buf[16], *(const std::string::value_type **)v33, *(std::string::size_type *)&v33[8]);
        }
        else
        {
          *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)v33;
          *(void *)&uint8_t buf[32] = *(void *)&v33[16];
        }
        v24[0] = 0;
        long long v25 = *(_OWORD *)buf;
        long long v26 = *(_OWORD *)&buf[16];
        uint64_t v27 = *(void *)&buf[32];
      }
      std::string::size_type v17 = (realityio *)realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&v31);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      if (v24[0] && (void)v25)
      {
        uint64_t v18 = *(id *)(realityio::logObjects(v17) + 24);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          uint64_t Name = REEntityGetName();
          uint64_t v20 = *((void *)a1 + 1);
          uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)v20 + 8));
          pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v31, v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v20 + 32));
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v31, &v35);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = Name;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = Text;
          _os_log_impl(&dword_23F4EA000, v18, OS_LOG_TYPE_INFO, "Clearing xform on entity '%s' for prim '%s'", buf, 0x16u);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v35);
          if ((v33[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v32 + 8);
          if ((void)v32) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v32);
          }
        }

        RETransformComponentGetComponentType();
        REEntityRemoveComponentByClass();
      }
      realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)v24);
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v28);
  return realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v29);
}

void sub_23F71C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  realityio::Result<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>,realityio::DetailedError>::~Result((uint64_t)&a24);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a15);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::TransformComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

uint64_t *RIO_MTLX::EMPTY_STRING(RIO_MTLX *this)
{
  {
    RIO_MTLX::EMPTY_STRING(void)::v = 0;
    *(void *)algn_268C3FCD8 = 0;
    qword_268C3FCE0 = 0;
  }
  return &RIO_MTLX::EMPTY_STRING(void)::v;
}

BOOL RIO_MTLX::anonymous namespace'::invalidNameChar(unsigned int this)
{
  if ((this & 0x80000000) != 0) {
    int v2 = __maskrune(this, 0x500uLL);
  }
  else {
    int v2 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * this + 60) & 0x500;
  }
  return this != 95 && v2 == 0 && this != 58;
}

BOOL RIO_MTLX::isValidName(char *a1)
{
  uint64_t v2 = a1[23];
  char v3 = v2;
  uint64_t v4 = *(char **)a1;
  uint64_t v5 = *((void *)a1 + 1);
  if ((v2 & 0x80u) == 0) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = *(char **)a1;
  }
  if ((v2 & 0x80u) == 0) {
    uint64_t v7 = a1[23];
  }
  else {
    uint64_t v7 = *((void *)a1 + 1);
  }
  if (v7)
  {
    unint64_t v8 = &v6[v7];
    {
      ++v6;
      if (!--v7)
      {
        unint64_t v6 = v8;
        break;
      }
    }
    uint64_t v2 = a1[23];
    uint64_t v4 = *(char **)a1;
    uint64_t v5 = *((void *)a1 + 1);
    char v3 = a1[23];
  }
  if (v3 < 0) {
    uint64_t v2 = v5;
  }
  else {
    uint64_t v4 = a1;
  }
  return v6 == &v4[v2];
}

void RIO_MTLX::incrementName(std::string *__str@<X0>, void *a2@<X8>)
{
  char v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    size_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __str->__r_.__value_.__l.__size_;
  }
  if (v4 >= 0) {
    unint64_t v6 = __str;
  }
  else {
    unint64_t v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = (char *)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  size_t v8 = size;
  do
  {
    std::string::size_type v9 = v8;
    if (!v8) {
      break;
    }
    int v10 = v7[v8];
    if (v10 < 0) {
      break;
    }
    int v11 = *(_DWORD *)(MEMORY[0x263EF8318] + 4 * v10 + 60);
    size_t v8 = v9 - 1;
  }
  while ((v11 & 0x400) != 0);
  if (v9 >= size)
  {
    std::string::basic_string[abi:ne180100]((uint64_t)a2, size + 1);
    if (*((char *)a2 + 23) < 0) {
      a2 = (void *)*a2;
    }
    if (size)
    {
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v18 = __str;
      }
      else {
        uint64_t v18 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      memmove(a2, v18, size);
    }
    *(_WORD *)((char *)a2 + size) = 50;
  }
  else
  {
    std::string::basic_string(&v21, __str, 0, v9, (std::allocator<char> *)&__stra);
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v12 = __str->__r_.__value_.__l.__size_;
    }
    std::string::basic_string(&__stra, __str, v9, v12, (std::allocator<char> *)&v19);
    int v13 = std::stoi(&__stra, 0, 10);
    std::to_string(&v19, v13 + 1);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v14 = &v21;
    }
    else {
      long long v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = v21.__r_.__value_.__l.__size_;
    }
    long long v16 = std::string::insert(&v19, 0, (const std::string::value_type *)v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__stra.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23F71C7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::splitString(std::string *__str@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  int v6 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    uint64_t v7 = __str;
  }
  else {
    uint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  int v9 = *((char *)a2 + 23);
  if (v9 >= 0) {
    int v10 = (unsigned __int8 *)a2;
  }
  else {
    int v10 = *a2;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v11 = (size_t)a2[1];
  }
  if (!size)
  {
LABEL_18:
    std::string::size_type v12 = -1;
LABEL_19:
    unint64_t v14 = -1;
    goto LABEL_20;
  }
  std::string::size_type v12 = 0;
  if (!v11) {
    goto LABEL_19;
  }
  int v13 = (unsigned __int8 *)v7 + size;
  while (memchr(v10, v7->__r_.__value_.__s.__data_[v12], v11))
  {
    if (size == ++v12) {
      goto LABEL_18;
    }
  }
  if (size <= v12) {
    goto LABEL_19;
  }
  uint64_t v39 = (unsigned __int8 *)v7 + v12;
LABEL_69:
  size_t v40 = v11;
  uint64_t v41 = v10;
  while (*v39 != *v41)
  {
    ++v41;
    if (!--v40)
    {
      if (++v39 != v13) {
        goto LABEL_69;
      }
      uint64_t v39 = (unsigned __int8 *)v7 + size;
      break;
    }
  }
  if (v39 == v13) {
    unint64_t v14 = -1;
  }
  else {
    unint64_t v14 = v39 - (unsigned __int8 *)v7;
  }
LABEL_20:
  if ((v14 & v12) != 0xFFFFFFFFFFFFFFFFLL)
  {
    do
    {
      std::string::basic_string(&__p, __str, v12, v14 - v12, (std::allocator<char> *)&__v);
      unint64_t v16 = *(void *)(a3 + 8);
      unint64_t v15 = *(void *)(a3 + 16);
      if (v16 >= v15)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a3) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<char const*>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a3) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v21) {
          long long v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(a3 + 16, v21);
        }
        else {
          long long v22 = 0;
        }
        uint64_t v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v25 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 8) = v25;
        if (v26 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v16 = v17;
        *(void *)(a3 + 8) = v16 + 24;
      }
      int v27 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
      if (v27 >= 0) {
        uint64_t v28 = __str;
      }
      else {
        uint64_t v28 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if (v27 >= 0) {
        std::string::size_type v29 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v29 = __str->__r_.__value_.__l.__size_;
      }
      int v30 = *((char *)a2 + 23);
      if (v30 >= 0) {
        uint64_t v31 = (unsigned __int8 *)a2;
      }
      else {
        uint64_t v31 = *a2;
      }
      if (v30 >= 0) {
        size_t v32 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v32 = (size_t)a2[1];
      }
      if (v29 <= v14)
      {
        unint64_t v14 = -1;
      }
      else if (v32)
      {
        uint64_t v33 = (unsigned __int8 *)v28 + v29;
        while (memchr(v31, v28->__r_.__value_.__s.__data_[v14], v32))
        {
          if (v29 == ++v14)
          {
            unint64_t v14 = -1;
LABEL_64:
            uint64_t v34 = -1;
            goto LABEL_65;
          }
        }
        if (v29 <= v14) {
          goto LABEL_64;
        }
        long long v35 = (unsigned __int8 *)v28 + v14;
LABEL_56:
        size_t v36 = v32;
        uint64_t v37 = v31;
        while (*v35 != *v37)
        {
          ++v37;
          if (!--v36)
          {
            if (++v35 != v33) {
              goto LABEL_56;
            }
            long long v35 = (unsigned __int8 *)v28 + v29;
            break;
          }
        }
        if (v35 == v33) {
          uint64_t v34 = -1;
        }
        else {
          uint64_t v34 = v35 - (unsigned __int8 *)v28;
        }
        goto LABEL_65;
      }
      uint64_t v34 = -1;
LABEL_65:
      std::string::size_type v12 = v14;
      unint64_t v38 = v34 & v14;
      unint64_t v14 = v34;
    }
    while (v38 != -1);
  }
}

void sub_23F71CB18(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

__n128 RIO_MTLX::replaceSubstrings@<Q0>(std::string *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)i + 39) < 0)
    {
      if (i[3])
      {
LABEL_6:
        for (std::string::size_type j = 0; ; j += v21)
        {
          if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
            std::string::size_type size = this->__r_.__value_.__l.__size_;
          }
          else
          {
            std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
            uint64_t v7 = this;
          }
          int v8 = *((char *)i + 39);
          int v9 = v8 >= 0 ? (char *)(i + 2) : (char *)i[2];
          int64_t v10 = v8 >= 0 ? *((unsigned __int8 *)i + 39) : i[3];
          if (size < j) {
            break;
          }
          if (v10)
          {
            size_t v11 = (char *)v7 + j;
            std::string::size_type v12 = (char *)v7 + size;
            int64_t v13 = size - j;
            if (v13 >= v10)
            {
              int v14 = *v9;
              while (1)
              {
                int64_t v15 = v13 - v10;
                if (v15 == -1) {
                  break;
                }
                unint64_t v16 = (char *)memchr(v11, v14, v15 + 1);
                if (!v16) {
                  break;
                }
                long long v17 = v16;
                if (!memcmp(v16, v9, v10))
                {
                  if (v17 == v12) {
                    goto LABEL_38;
                  }
                  std::string::size_type j = v17 - (char *)v7;
                  goto LABEL_27;
                }
                size_t v11 = v17 + 1;
                int64_t v13 = v12 - (v17 + 1);
                if (v13 < v10) {
                  goto LABEL_38;
                }
              }
            }
            break;
          }
LABEL_27:
          if (j == -1) {
            break;
          }
          int v18 = *((char *)i + 63);
          if (v18 >= 0) {
            unint64_t v19 = (const std::string::value_type *)(i + 5);
          }
          else {
            unint64_t v19 = (const std::string::value_type *)i[5];
          }
          if (v18 >= 0) {
            std::string::size_type v20 = *((unsigned __int8 *)i + 63);
          }
          else {
            std::string::size_type v20 = i[6];
          }
          std::string::replace(this, j, v10, v19, v20);
          if (*((char *)i + 63) < 0) {
            uint64_t v21 = i[6];
          }
          else {
            uint64_t v21 = *((unsigned __int8 *)i + 63);
          }
        }
      }
    }
    else if (*((unsigned char *)i + 39))
    {
      goto LABEL_6;
    }
LABEL_38:
    ;
  }
  __n128 result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a3 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

void *realityio::SkeletalPoseDefinitionAssetAction::operator()@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X2>, void *a2@<X3>, void *a3@<X4>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::VtValue::VtValue(a4, a1);
  uint64_t v13 = 0;
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  if (a2[1] != *a2)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a3 + v8));
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>((pxrInternal__aapl__pxrReserved__::VtValue *)v14)
        && (v15 & 4) != 0)
      {
        (*(void (**)(unsigned char *))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(v14);
      }
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      ++v9;
      v8 += 16;
    }
    while (v9 < (uint64_t)(a2[1] - *a2) >> 3);
  }
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(a4))
  {
    if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<realityio::WrappedRERef<REAsset *>>(a4))
    {
      uint64_t v10 = *((void *)a4 + 1);
      if ((v10 & 4) != 0) {
        size_t v11 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v10 & 0xFFFFFFFFFFFFFFF8)
      }
                                                                                                + 168))(a4);
      else {
        size_t v11 = *(uint64_t **)a4;
      }
    }
    else
    {
      size_t v11 = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
    }
    realityio::WrappedRERef<REAsset *>::operator=(&v13, v11);
  }
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v13);
}

void sub_23F71CE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a9);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<realityio::WrappedRERef<REAsset *>>::Invoke()
{
}

void *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<realityio::WrappedRERef<REAsset *>>(void *result)
{
  if (result)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

realityio::tokens::TextBuilderTokens_StaticTokenType *realityio::tokens::TextBuilderTokens_StaticTokenType::TextBuilderTokens_StaticTokenType(realityio::tokens::TextBuilderTokens_StaticTokenType *this)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  std::string::size_type v29 = (uint64_t *)(MEMORY[0x2455CF820](this, "baseline", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 96, "middle", 0);
  MEMORY[0x2455CF820]((char *)this + 104, "pointSize", 0);
  MEMORY[0x2455CF820]((char *)this + 112, "Preliminary_Text", 0);
  MEMORY[0x2455CF820]((char *)this + 120, "right", 0);
  MEMORY[0x2455CF820]((char *)this + 128, "singleLine", 0);
  MEMORY[0x2455CF820]((char *)this + 136, "top", 0);
  MEMORY[0x2455CF820]((char *)this + 144, "verticalAlignment", 0);
  MEMORY[0x2455CF820]((char *)this + 152, "width", 0);
  MEMORY[0x2455CF820]((char *)this + 160, "wrapMode", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v30 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v29;
  uint64_t v31 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v32 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v32 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v33 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v33 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v34 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v34 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v35 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v35 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v36 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v36 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v37 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v37 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v38 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v38 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v39 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v39 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v40 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v40 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v41 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v42 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v43 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v44 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v45 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v46 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v47 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v48 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v49 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v50 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  uint64_t v23 = (char *)operator new(0xA8uLL);
  uint64_t v24 = 0;
  *((void *)this + 21) = v23;
  *((void *)this + 22) = v23;
  *((void *)this + 23) = v23 + 168;
  do
  {
    uint64_t v25 = *(uint64_t *)((char *)&v30 + v24);
    *(void *)&v23[v24] = v25;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v23[v24] &= 0xFFFFFFFFFFFFFFF8;
    }
    v24 += 8;
  }
  while (v24 != 168);
  *((void *)this + 22) = v23 + 168;
  for (uint64_t i = 160; i != -8; i -= 8)
  {
    uint64_t v27 = *(uint64_t *)((char *)&v30 + i);
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F71D5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void **a22,uint64_t a23,char a24)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a22);
  uint64_t v34 = 160;
  while (1)
  {
    uint64_t v35 = *(void *)(&a24 + v34);
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v34 -= 8;
    if (v34 == -8)
    {
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F71D898()
{
}

void sub_23F71D8A0()
{
}

void sub_23F71D8A8()
{
}

void sub_23F71D8B0()
{
}

void sub_23F71D8B8()
{
}

void sub_23F71D8C0()
{
}

void sub_23F71D8C8()
{
}

void sub_23F71D8D0()
{
}

void sub_23F71D8D8()
{
}

void sub_23F71D8E0()
{
}

void sub_23F71D8E8()
{
}

void sub_23F71D8F0()
{
}

void realityio::generateTextPrimDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40C30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40C30))
  {
    operator new();
  }
  uint64_t v3 = *(void *)algn_268C40C28;
  *a1 = _MergedGlobals_53;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F71DF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49)
{
  MEMORY[0x2455D2BD0](v50, 0x10A1C40F82F910ELL);
  a49 = (void **)&a38;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a49);
  MEMORY[0x2455D2BD0](v49, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v51, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40C30);
  _Unwind_Resume(a1);
}

void realityio::textInformationFromPrim(realityio *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  unint64_t v5 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Helvetica");
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::VtArray((uint64_t)__s, (uint64_t)__p, 1);
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v5 + 48), (uint64_t)buf);
  if (buf[0])
  {
    long long v65 = *(_OWORD *)&v71[4];
    long long v66 = v72;
    uint64_t v6 = v73;
  }
  else
  {
    long long v65 = *(_OWORD *)__s;
    long long v66 = v63;
    uint64_t v6 = v64;
  }
  uint64_t v67 = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 1);
    if (*((void *)&v66 + 1)) {
      uint64_t v7 = (atomic_ullong *)*((void *)&v66 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)buf);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(__s);
  if (v69 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v8 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v9 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 160), (uint64_t)buf);
  if (buf[0]) {
    unint64_t v10 = *(void *)&v71[4];
  }
  else {
    unint64_t v10 = *(void *)(v9 + 40);
  }
  __p[0] = (void *)v10;
  if ((v10 & 7) != 0)
  {
    uint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v11, 2u, memory_order_relaxed) & 1) == 0) {
      __p[0] = v11;
    }
  }
  if (buf[0])
  {
    if ((v71[4] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v71[4] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (SHIBYTE(v73) < 0)
  {
    operator delete((void *)v72);
  }
  unint64_t v12 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v13 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 64), (uint64_t)buf);
  if (buf[0]) {
    uint64_t v14 = *(atomic_uint **)&v71[4];
  }
  else {
    uint64_t v14 = *(atomic_uint **)(v13 + 40);
  }
  int v61 = v14;
  if ((v14 & 7) != 0)
  {
    uint64_t v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
      int v61 = v15;
    }
  }
  if (buf[0])
  {
    if ((v71[4] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v71[4] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (SHIBYTE(v73) < 0)
  {
    operator delete((void *)v72);
  }
  unint64_t v16 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v16) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  unint64_t v17 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v17) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 144), (uint64_t)buf);
  if (buf[0]) {
    uint64_t v18 = *(atomic_uint **)&v71[4];
  }
  else {
    uint64_t v18 = *(atomic_uint **)(v17 + 40);
  }
  long long v60 = v18;
  if ((v18 & 7) != 0)
  {
    uint64_t v19 = (atomic_uint *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v19, 2u, memory_order_relaxed) & 1) == 0) {
      long long v60 = v19;
    }
  }
  if (buf[0])
  {
    if ((v71[4] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v71[4] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (SHIBYTE(v73) < 0)
  {
    operator delete((void *)v72);
  }
  unint64_t v20 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v20) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  std::string::basic_string[abi:ne180100]<0>(__s, "");
  realityio::getAttributeValue<std::string>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v20 + 24), (uint64_t)buf);
  int v21 = buf[0];
  if (buf[0])
  {
    if ((SBYTE7(v72) & 0x80000000) == 0)
    {
      uint64_t v22 = (std::string::value_type **)&v71[4];
      goto LABEL_55;
    }
    uint64_t v24 = *(const std::string::value_type **)&v71[4];
    uint64_t v25 = (std::string::size_type *)&v71[12];
LABEL_60:
    std::string::__init_copy_ctor_external((std::string *)a2, v24, *v25);
    if (buf[0]) {
      goto LABEL_56;
    }
    goto LABEL_61;
  }
  uint64_t v22 = __s;
  if (SBYTE7(v63) < 0)
  {
    uint64_t v24 = __s[0];
    uint64_t v25 = (std::string::size_type *)&__s[1];
    goto LABEL_60;
  }
LABEL_55:
  *(_OWORD *)a2 = *(_OWORD *)v22;
  *(void *)(a2 + 16) = v22[2];
  if (v21)
  {
LABEL_56:
    if ((SBYTE7(v72) & 0x80000000) == 0) {
      goto LABEL_64;
    }
    uint64_t v23 = (void **)&v71[4];
    goto LABEL_63;
  }
LABEL_61:
  if ((SHIBYTE(v73) & 0x80000000) == 0) {
    goto LABEL_64;
  }
  uint64_t v23 = (void **)&v72;
LABEL_63:
  operator delete(*v23);
LABEL_64:
  if ((void)v65)
  {
    if (*((char *)v67 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a2 + 24), *(const std::string::value_type **)v67, *((void *)v67 + 1));
    }
    else
    {
      long long v26 = *v67;
      *(void *)(a2 + 40) = *((void *)v67 + 2);
      *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v26;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((void *)(a2 + 24), "Helvetica");
  }
  unint64_t v27 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v27) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<double>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v27 + 104), (uint64_t)buf);
  if (buf[0])
  {
    double v28 = *(double *)&v71[4];
  }
  else
  {
    if (SHIBYTE(v73) < 0) {
      operator delete((void *)v72);
    }
    double v28 = 144.0;
  }
  *(double *)(a2 + 48) = v28 * 0.00035277723;
  unint64_t v29 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v29) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<double>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v29 + 152), (uint64_t)buf);
  if (buf[0])
  {
    uint64_t v30 = *(void *)&v71[4];
  }
  else
  {
    uint64_t v30 = 0x3FE3333333333333;
    if (SHIBYTE(v73) < 0) {
      operator delete((void *)v72);
    }
  }
  *(void *)(a2 + 56) = v30;
  unint64_t v31 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v31) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<double>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v31 + 56), (uint64_t)buf);
  if (buf[0])
  {
    uint64_t v32 = *(void *)&v71[4];
  }
  else
  {
    uint64_t v32 = 0x3FC3333333333333;
    if (SHIBYTE(v73) < 0) {
      operator delete((void *)v72);
    }
  }
  *(void *)(a2 + 64) = v32;
  unint64_t v33 = atomic_load(&realityio::tokens::TextBuilderTokens);
  if (!v33) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::TextBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::TextBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  realityio::getAttributeValue<double>(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v33 + 32), (uint64_t)buf);
  if (buf[0])
  {
    uint64_t v34 = *(void *)&v71[4];
  }
  else
  {
    uint64_t v34 = 0x3FC999999999999ALL;
    if (SHIBYTE(v73) < 0) {
      operator delete((void *)v72);
    }
  }
  *(void *)(a2 + 72) = v34;
  unint64_t v35 = (unint64_t)__p[0];
  *(void **)(a2 + 80) = __p[0];
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 80) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a2 + 88) = v61;
  if ((v61 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v61 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 88) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a2 + 96) = v60;
  if ((v60 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 96) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) == 0)
  {
    if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
    {
      char v36 = 1;
      goto LABEL_111;
    }
    if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
    {
      char v36 = 2;
      goto LABEL_111;
    }
    uint64_t v37 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
    if (v37)
    {
      char v36 = 3;
      goto LABEL_111;
    }
    uint64_t v38 = *(NSObject **)(realityio::logObjects((realityio *)v37) + 24);
    BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    char v36 = 0;
    if (!v39) {
      goto LABEL_111;
    }
    unint64_t v40 = (unint64_t)v61 & 0xFFFFFFFFFFFFFFF8;
    if (((unint64_t)v61 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v41 = (const char *)(v40 + 16);
      if (*(char *)(v40 + 39) < 0) {
        uint64_t v41 = *(const char **)v41;
      }
    }
    else
    {
      uint64_t v41 = "";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)std::string v71 = v41;
    _os_log_impl(&dword_23F4EA000, v38, OS_LOG_TYPE_DEFAULT, "Unknown text horizontal alignment value \"%s\" defaulting to \"left\"", buf, 0xCu);
  }
  char v36 = 0;
LABEL_111:
  *(unsigned char *)(a2 + 104) = v36;
  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0
    || (pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0)
  {
    char v42 = 2;
    goto LABEL_114;
  }
  uint64_t v50 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if ((v50 & 1) == 0)
  {
    uint64_t v51 = *(NSObject **)(realityio::logObjects((realityio *)v50) + 24);
    BOOL v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
    char v42 = 0;
    if (!v52) {
      goto LABEL_114;
    }
    unint64_t v53 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
    if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      std::string::size_type v54 = (const char *)(v53 + 16);
      if (*(char *)(v53 + 39) < 0) {
        std::string::size_type v54 = *(const char **)v54;
      }
    }
    else
    {
      std::string::size_type v54 = "";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)std::string v71 = v54;
    _os_log_impl(&dword_23F4EA000, v51, OS_LOG_TYPE_DEFAULT, "Unknown wrap mode value \"%s\" defaulting to \"flowing\"", buf, 0xCu);
  }
  char v42 = 0;
LABEL_114:
  *(unsigned char *)(a2 + 105) = v42;
  int v43 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  char v44 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if (!v43)
  {
    if ((v44 & 1) == 0)
    {
      if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) == 0)
      {
        uint64_t v55 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if (v55) {
          goto LABEL_149;
        }
        uint64_t v46 = *(NSObject **)(realityio::logObjects((realityio *)v55) + 24);
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_149;
        }
        unint64_t v56 = (unint64_t)v60 & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v48 = (const char *)(v56 + 16);
          if (*(char *)(v56 + 39) < 0) {
            uint64_t v48 = *(const char **)v48;
          }
        }
        else
        {
          uint64_t v48 = "";
        }
        unint64_t v57 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v58 = (const char *)(v57 + 16);
          if (*(char *)(v57 + 39) < 0) {
            uint64_t v58 = *(const char **)v58;
          }
        }
        else
        {
          uint64_t v58 = "";
        }
        goto LABEL_148;
      }
LABEL_132:
      char v49 = 2;
      goto LABEL_150;
    }
LABEL_125:
    char v49 = 0;
    goto LABEL_150;
  }
  if (v44) {
    goto LABEL_125;
  }
  if (pxrInternal__aapl__pxrReserved__::TfToken::operator==()) {
    goto LABEL_132;
  }
  if (pxrInternal__aapl__pxrReserved__::TfToken::operator==()) {
    goto LABEL_149;
  }
  if (pxrInternal__aapl__pxrReserved__::TfToken::operator==()) {
    goto LABEL_149;
  }
  uint64_t v45 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
  if (v45) {
    goto LABEL_149;
  }
  uint64_t v46 = *(NSObject **)(realityio::logObjects((realityio *)v45) + 24);
  if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_149;
  }
  unint64_t v47 = (unint64_t)v60 & 0xFFFFFFFFFFFFFFF8;
  if (((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v48 = (const char *)(v47 + 16);
    if (*(char *)(v47 + 39) < 0) {
      uint64_t v48 = *(const char **)v48;
    }
  }
  else
  {
    uint64_t v48 = "";
  }
  unint64_t v59 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
  if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v58 = (const char *)(v59 + 16);
    if (*(char *)(v59 + 39) < 0) {
      uint64_t v58 = *(const char **)v58;
    }
  }
  else
  {
    uint64_t v58 = "";
  }
LABEL_148:
  *(_DWORD *)long long buf = 136315394;
  *(void *)std::string v71 = v48;
  *(_WORD *)&v71[8] = 2080;
  *(void *)&v71[10] = v58;
  _os_log_impl(&dword_23F4EA000, v46, OS_LOG_TYPE_DEFAULT, "Unknown text vertical alignment value \"%s\" for wrap mode \"%s\"; defaulting to \"bottom\"",
    buf,
    0x16u);
LABEL_149:
  char v49 = 1;
LABEL_150:
  *(unsigned char *)(a2 + 106) = v49;
  if (SBYTE7(v63) < 0) {
    operator delete(__s[0]);
  }
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v65);
}

void sub_23F71EE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 + 47) < 0) {
    operator delete(*v43);
  }
  if (*(char *)(v42 + 23) < 0) {
    operator delete(*(void **)v42);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a20);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(unsigned char *)a3)
      {
        uint64_t v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            unint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              unint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            unint64_t v9 = "";
          }
          uint64_t v14 = *(void *)(a3 + 24);
          uint64_t v13 = a3 + 24;
          uint64_t v12 = v14;
          if (*(char *)(v13 + 23) >= 0) {
            uint64_t v12 = v13;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v15);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      uint64_t v11 = v21;
      *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&buf[16];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      LOBYTE(v11) = HIBYTE(v21);
      long long v21 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v11;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    uint64_t v10 = v21;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&buf[16];
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
    LOBYTE(v10) = HIBYTE(v21);
    long long v21 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v10;
    if ((v18[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F71F21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)&v13, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    __p[0] = v8;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1, (double *)__p, a2);
    uint64_t v9 = *((void *)&v13 + 1);
    if (*((void *)&v13 + 1))
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v13 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)(*(void (**)(uint64_t))(*(void *)v9 + 8))(v9); {
    }
      }
  }
  else
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v13, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    *(_OWORD *)(a2 + 8) = v13;
    uint64_t v10 = v15;
    *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v14;
    *(void *)(a2 + 32) = v10;
    *(void *)(a2 + 39) = *(void *)((char *)&v15 + 7);
    LOBYTE(v10) = HIBYTE(v15);
    long long v15 = 0uLL;
    uint64_t v14 = 0;
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 47) = v10;
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_23F71F3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13)
{
  if (a13)
  {
    if (atomic_fetch_add_explicit(a13 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a13 + 8))(a13);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v42 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41))
      {
        uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        long long v7 = *(_OWORD *)(v6 + 16);
        long long v38 = *(_OWORD *)v6;
        v39[0] = v7;
        uint64_t v8 = *(void *)(v6 + 32);
        if (v8)
        {
          uint64_t v9 = (atomic_ullong *)*((void *)&v39[0] + 1);
          if (!*((void *)&v39[0] + 1)) {
            uint64_t v9 = (atomic_ullong *)(v8 - 16);
          }
          atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a3 = 1;
        long long v10 = v39[0];
        *(_OWORD *)(a3 + 8) = v38;
        *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
        long long v38 = 0u;
        v39[0] = 0u;
        *(void *)(a3 + 40) = v8;
        *(void *)&v39[1] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v38);
        goto LABEL_46;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
      {
        char v16 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        unint64_t v17 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40, (const pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        if (v40.__r_.__value_.__l.__size_)
        {
          uint64_t v18 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(v17);
          long long v19 = *(_OWORD *)(v18 + 16);
          long long v38 = *(_OWORD *)v18;
          v39[0] = v19;
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20)
          {
            long long v21 = (atomic_ullong *)*((void *)&v39[0] + 1);
            if (!*((void *)&v39[0] + 1)) {
              long long v21 = (atomic_ullong *)(v20 - 16);
            }
            atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a3 = 1;
          long long v22 = v39[0];
          *(_OWORD *)(a3 + 8) = v38;
          *(_OWORD *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v22;
          long long v38 = 0u;
          v39[0] = 0u;
          *(void *)(a3 + 40) = v20;
          *(void *)&v39[1] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v38);
        }
        else
        {
          uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a3 + 8) = v38;
          uint64_t v33 = *((void *)&v39[0] + 1);
          *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&v39[0];
          *(void *)(a3 + 32) = v33;
          *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
          LOBYTE(v33) = BYTE7(v39[1]);
          memset(v39, 0, 24);
          *(unsigned char *)a3 = 0;
          *(unsigned char *)(a3 + 47) = v33;
          if (SHIBYTE(v37) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v40);
        goto LABEL_46;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v31 = *((void *)&v39[0] + 1);
      *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v31;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v31) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v31;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_46:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v41);
        return;
      }
      uint64_t v30 = __p[0];
    }
    else
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v35, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, *a2);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v34;
      }
      else {
        uint64_t v25 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v34.__r_.__value_.__l.__size_;
      }
      unint64_t v27 = std::string::append(&v40, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v37 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a3 + 8) = v38;
      uint64_t v29 = *((void *)&v39[0] + 1);
      *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&v39[0];
      *(void *)(a3 + 32) = v29;
      *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
      LOBYTE(v29) = BYTE7(v39[1]);
      memset(v39, 0, 24);
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v29;
      if (SHIBYTE(v37) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      uint64_t v30 = (void *)v35.__r_.__value_.__r.__words[0];
    }
    operator delete(v30);
    goto LABEL_46;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v38, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a3 + 8) = v38;
  uint64_t v13 = *((void *)&v39[0] + 1);
  *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&v39[0];
  *(void *)(a3 + 32) = v13;
  *(void *)(a3 + 39) = *(void *)((char *)v39 + 15);
  LOBYTE(v13) = BYTE7(v39[1]);
  memset(v39, 0, 24);
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 47) = v13;
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F71F898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

std::type_info *pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = (std::type_info *)a1;
  uint64_t v4[2] = *MEMORY[0x263EF8340];
  if ((pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1) & 1) == 0)
  {
    uint64_t v1 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(v1, v4);
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v4);
  }
  return v1;
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>::Invoke()
{
}

void *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(void *result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef((void *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<std::string>(pxrInternal__aapl__pxrReserved__::UsdObject *this@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<std::string>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a3);
      if (!*(unsigned char *)a3)
      {
        long long v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v14 = *(void *)(a3 + 24);
          uint64_t v13 = a3 + 24;
          uint64_t v12 = v14;
          if (*(char *)(v13 + 23) >= 0) {
            uint64_t v12 = v13;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v12;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v15, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v15);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
      uint64_t v11 = v21;
      *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&buf[16];
      *(void *)(a3 + 32) = v11;
      *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
      LOBYTE(v11) = HIBYTE(v21);
      long long v21 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 47) = v11;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
    }
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v18);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)buf;
    uint64_t v10 = v21;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)&buf[16];
    *(void *)(a3 + 32) = v10;
    *(void *)(a3 + 39) = *(void *)((char *)&v21 + 7);
    LOBYTE(v10) = HIBYTE(v21);
    long long v21 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v10;
    if ((v18[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F71FDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  realityio::Result<std::string,realityio::DetailedError>::~Result(v5);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

unsigned char *realityio::Result<std::string,realityio::DetailedError>::~Result(unsigned char *a1)
{
  if (*a1)
  {
    if ((char)a1[31] < 0)
    {
      uint64_t v2 = (void **)(a1 + 8);
LABEL_6:
      operator delete(*v2);
    }
  }
  else if ((char)a1[47] < 0)
  {
    uint64_t v2 = (void **)(a1 + 24);
    goto LABEL_6;
  }
  return a1;
}

void realityio::ImportSessionInit(realityio *this)
{
  if (!REComponentClassFromName())
  {
      && REStructBuilderCreate())
    {
      if (REStructBuilderInit())
      {
        REStructBuilderAddMemberDataTypeWithTag();
      }
      REStructBuilderDestroy();
    }
    REComponentClassFromName();
  }
}

void sub_23F71FF3C(_Unwind_Exception *a1)
{
}

void anonymous namespace'::RIOPrimPathComponent::primPathComponentCreate()
{
}

void anonymous namespace'::RIOPrimPathComponent::primPathComponentDestroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (*a2)
    {
      RECIntrospectionFree();
      *a2 = 0;
    }
    JUMPOUT(0x2455D2BD0);
  }
}

void realityio::ImportSessionDeinit(realityio *this)
{
  {
    RECustomComponentTypeDestroy();
  }
}

void sub_23F720044(_Unwind_Exception *a1)
{
}

void realityio::ImportSession::SessionMeshAssetCacheDeleter::operator()(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(a2 + 24, *(void **)(a2 + 32));
    std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(a2, *(void **)(a2 + 8));
    JUMPOUT(0x2455D2BD0);
  }
}

void ___Z26shouldImportSubdsByDefaultv_block_invoke()
{
  id v0 = [MEMORY[0x263EFFA40] standardUserDefaults];
  _MergedGlobals_54 = [v0 BOOLForKey:@"com.apple.RealityIO.disableSubd"] ^ 1;
}

void sub_23F720124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void realityio::ImportSession::ImportSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, char a8)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26F3490E8;
  *(unsigned char *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 60) = a7;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 88) = 850045863;
  *(void *)(a1 + 160) = 850045863;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 248) = a1 + 256;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1 + 232;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 272) = a8;
  *(unsigned char *)(a1 + 273) = 1;
  uint64_t v9 = (realityio *)_os_feature_enabled_impl();
  if (v9)
  {
    uint64_t v10 = *(NSObject **)realityio::logObjects(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_DEFAULT, "ImportSession forced to TargetBasedBuilderDirtying mode due to \"RealityIO/TargetBasedBuilderDirtying\" FeatureFlag", v11, 2u);
    }
  }
  else if (a5 != 2)
  {
    if (a5 == 1) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_23F720458(_Unwind_Exception *a1)
{
  __cxa_guard_abort(qword_268C40C50);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(void **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(*(void **)(v1 + 232));
  std::mutex::~mutex(v4);
  uint64_t v8 = *(void *)(v1 + 152);
  *(void *)(v1 + 152) = 0;
  if (v8) {
    realityio::ImportSession::SessionMeshAssetCacheDeleter::operator()(v7, v8);
  }
  std::mutex::~mutex(v3);
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(v2, *(void **)(v1 + 72));
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  uint64_t v9 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSession::deduplicateMeshAsset(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 160);
  std::mutex::lock((std::mutex *)(a1 + 160));
  uint64_t v9 = *(void *)(a1 + 152);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = realityio::SessionMeshAssetCache::deduplicateMeshAsset(v9, a2, a3, a4);
  std::mutex::unlock(v8);
  return v10;
}

void sub_23F720628(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::SessionMeshAssetCache::deduplicateMeshAsset(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  CompiledStreamAndRemap = (const void *)REAssetCreateCompiledStreamAndRemap();
  CFTypeRef cf = CompiledStreamAndRemap;
  if (!CompiledStreamAndRemap) {
    goto LABEL_44;
  }
  bzero(&c, 0x68uLL);
  CC_SHA256_Init(&c);
  BytePtr = CFDataGetBytePtr((CFDataRef)CompiledStreamAndRemap);
  CC_LONG Length = CFDataGetLength((CFDataRef)CompiledStreamAndRemap);
  CC_SHA256_Update(&c, BytePtr, Length);
  CC_SHA256_Final(md, &c);
  CFRelease(cf);
  CFTypeRef cf = 0;
  uint64_t v12 = (void **)(a1 + 32);
  uint64_t v11 = *(void **)(a1 + 32);
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v13 = (void **)v11;
        uint64_t v14 = (void *)((char *)v11 + 28);
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)a2, (void *)((char *)v11 + 28)))break; {
        uint64_t v11 = *v13;
        }
        uint64_t v12 = v13;
        if (!*v13) {
          goto LABEL_10;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v14, (void *)a2)) {
        break;
      }
      uint64_t v12 = v13 + 1;
      uint64_t v11 = v13[1];
      if (!v11) {
        goto LABEL_10;
      }
    }
    long long v15 = (char *)*v12;
    if (*v12) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v13 = (void **)(a1 + 32);
  }
LABEL_10:
  long long v15 = (char *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 7, (_DWORD *)a2);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v15 + 8, (_DWORD *)(a2 + 4));
  bzero(v15 + 36, 0x20uLL);
  *(void *)long long v15 = 0;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 2) = v13;
  *uint64_t v12 = v15;
  uint64_t v16 = **(void **)(a1 + 24);
  unint64_t v17 = (uint64_t *)v15;
  if (v16)
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v16;
    unint64_t v17 = (uint64_t *)*v12;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v17);
  ++*(void *)(a1 + 40);
LABEL_13:
  long long v18 = v39;
  *(_OWORD *)(v15 + 36) = *(_OWORD *)md;
  *(_OWORD *)(v15 + 52) = v18;
  uint64_t v19 = std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::find<realityio::SessionMeshAssetCache::CryptographicHash>(a1, md);
  uint64_t v20 = v19;
  if ((uint64_t *)(a1 + 8) != v19)
  {
    if (a4)
    {
      RERelease();
      a3 = v20[8];
      RERetain();
    }
    else
    {
      a3 = v19[8];
    }
    goto LABEL_44;
  }
  *(void *)c.count = a3;
  if (a3) {
    RERetain();
  }
  long long v21 = (uint64_t *)*v20;
  if (!*v20)
  {
    unint64_t v27 = (uint64_t **)v20;
    uint64_t v22 = v20;
LABEL_38:
    uint64_t v30 = operator new(0x48uLL);
    long long v31 = v39;
    v30[2] = *(_OWORD *)md;
    v30[3] = v31;
    *((void *)v30 + 8) = 0;
    *(void *)uint64_t v30 = 0;
    *((void *)v30 + 1) = 0;
    *((void *)v30 + 2) = v22;
    *unint64_t v27 = (uint64_t *)v30;
    uint64_t v32 = **(void **)a1;
    uint64_t v33 = (uint64_t *)v30;
    if (v32)
    {
      *(void *)a1 = v32;
      uint64_t v33 = *v27;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)*v20, v33);
    ++*(void *)(a1 + 16);
    goto LABEL_41;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v22 = v21;
      unsigned int v23 = *((unsigned __int8 *)v21 + 32);
      unsigned int v24 = md[0];
      unsigned int v25 = v23;
      if (md[0] == v23) {
        break;
      }
LABEL_23:
      if (v24 <= v25) {
        goto LABEL_26;
      }
      long long v21 = (uint64_t *)*v22;
      unint64_t v27 = (uint64_t **)v22;
      if (!*v22) {
        goto LABEL_38;
      }
    }
    uint64_t v26 = 0;
    while (v26 != 31)
    {
      unsigned int v24 = md[v26 + 1];
      unsigned int v25 = *((unsigned __int8 *)v22 + v26++ + 33);
      if (v24 != v25) {
        goto LABEL_23;
      }
    }
LABEL_26:
    unsigned int v28 = md[0];
    if (md[0] == v23) {
      break;
    }
LABEL_30:
    if (v23 <= v28) {
      goto LABEL_36;
    }
    long long v21 = (uint64_t *)v22[1];
    if (!v21)
    {
      unint64_t v27 = (uint64_t **)(v22 + 1);
      goto LABEL_38;
    }
  }
  uint64_t v29 = 0;
  while (v29 != 31)
  {
    unsigned int v23 = *((unsigned __int8 *)v22 + v29 + 33);
    unsigned int v28 = md[++v29];
    if (v23 != v28) {
      goto LABEL_30;
    }
  }
LABEL_36:
  uint64_t v30 = v22;
LABEL_41:
  uint64_t v34 = *((void *)v30 + 8);
  if (v34 != *(void *)c.count)
  {
    *((void *)v30 + 8) = *(void *)c.count;
    *(void *)c.count = v34;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&c);
LABEL_44:
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
  return a3;
}

void sub_23F7209A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va1);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef((const void **)va);
  _Unwind_Resume(a1);
}

void realityio::ImportSession::clearMeshAsset(realityio::ImportSession *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 160);
  std::mutex::lock((std::mutex *)((char *)this + 160));
  uint64_t v5 = *((void *)this + 19);
  if (v5) {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t **)(v5 + 24), a2);
  }

  std::mutex::unlock(v4);
}

void sub_23F720A38(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::ImportSession::purgeMeshAssetCache(realityio::ImportSession *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 160);
  std::mutex::lock((std::mutex *)((char *)this + 160));
  uint64_t v3 = (realityio::SessionMeshAssetCache *)*((void *)this + 19);
  if (v3) {
    realityio::SessionMeshAssetCache::purge(v3);
  }

  std::mutex::unlock(v2);
}

void sub_23F720A98(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::SessionMeshAssetCache::purge(realityio::SessionMeshAssetCache *this)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  v34[0] = 0;
  v34[1] = 0;
  uint64_t v33 = v34;
  uint64_t v2 = (void *)*((void *)this + 3);
  uint64_t v3 = (char *)this + 32;
  if (v2 != (void *)((char *)this + 32))
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v35, (_DWORD *)v2 + 7);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v35[4], (_DWORD *)v2 + 8);
      long long v4 = *(_OWORD *)((char *)v2 + 52);
      *(_OWORD *)&unsigned char v35[8] = *(_OWORD *)((char *)v2 + 36);
      *(_OWORD *)&v35[24] = v4;
      std::__tree<realityio::SessionMeshAssetCache::CryptographicHash>::__emplace_unique_key_args<realityio::SessionMeshAssetCache::CryptographicHash,realityio::SessionMeshAssetCache::CryptographicHash const&>((uint64_t *)&v33, &v35[8], &v35[8]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v35);
      uint64_t v5 = (char *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)v2[2];
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  v32[0] = 0;
  v32[1] = 0;
  long long v31 = v32;
  uint64_t v8 = (uint64_t *)((char *)this + 8);
  uint64_t v9 = *(uint64_t **)this;
  if (*(realityio::SessionMeshAssetCache **)this != (realityio::SessionMeshAssetCache *)((char *)this + 8))
  {
    while (1)
    {
      long long v10 = *((_OWORD *)v9 + 3);
      *(_OWORD *)std::string v35 = *((_OWORD *)v9 + 2);
      *(_OWORD *)&unsigned char v35[16] = v10;
      *(void *)&v35[32] = v9[8];
      if (*(void *)&v35[32]) {
        RERetain();
      }
      uint64_t v11 = v34[0];
      if (!v34[0]) {
        goto LABEL_28;
      }
      unsigned int v12 = v35[0];
      uint64_t v13 = v34;
      do
      {
        unsigned int v14 = *((unsigned __int8 *)v11 + 25);
        unsigned int v15 = v35[0];
        if (v14 == v35[0])
        {
          uint64_t v16 = 0;
          while (v16 != 31)
          {
            unsigned int v14 = *((unsigned __int8 *)v11 + v16 + 26);
            unsigned int v15 = v35[++v16];
            if (v14 != v15) {
              goto LABEL_17;
            }
          }
          uint64_t v13 = (void **)v11;
        }
        else
        {
LABEL_17:
          if (v14 > v15) {
            ++v11;
          }
          else {
            uint64_t v13 = (void **)v11;
          }
        }
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
      if (v13 == v34) {
        goto LABEL_28;
      }
      unsigned int v17 = *((unsigned __int8 *)v13 + 25);
      if (v35[0] == v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = (char *)v13 + 26;
        while (v18 != 31)
        {
          unsigned int v12 = v35[v18 + 1];
          unsigned int v17 = v19[v18++];
          if (v12 != v17) {
            goto LABEL_27;
          }
        }
        goto LABEL_29;
      }
LABEL_27:
      if (v12 > v17) {
LABEL_28:
      }
        std::__tree<realityio::SessionMeshAssetCache::CryptographicHash>::__emplace_unique_key_args<realityio::SessionMeshAssetCache::CryptographicHash,realityio::SessionMeshAssetCache::CryptographicHash const&>((uint64_t *)&v31, v35, v35);
LABEL_29:
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v35[32]);
      uint64_t v20 = (uint64_t *)v9[1];
      if (v20)
      {
        do
        {
          long long v21 = v20;
          uint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          long long v21 = (uint64_t *)v9[2];
          BOOL v7 = *v21 == (void)v9;
          uint64_t v9 = v21;
        }
        while (!v7);
      }
      uint64_t v9 = v21;
      if (v21 == v8)
      {
        uint64_t v22 = (uint64_t)v31;
        if (v31 != v32)
        {
          do
          {
            unsigned int v23 = std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::find<realityio::SessionMeshAssetCache::CryptographicHash>((uint64_t)this, (unsigned __int8 *)(v22 + 25));
            if (v8 != v23)
            {
              unsigned int v24 = v23;
              unsigned int v25 = (uint64_t *)v23[1];
              if (v25)
              {
                do
                {
                  uint64_t v26 = v25;
                  unsigned int v25 = (uint64_t *)*v25;
                }
                while (v25);
              }
              else
              {
                unint64_t v27 = v23;
                do
                {
                  uint64_t v26 = (uint64_t *)v27[2];
                  BOOL v7 = *v26 == (void)v27;
                  unint64_t v27 = v26;
                }
                while (!v7);
              }
              if (*(uint64_t **)this == v23) {
                *(void *)this = v26;
              }
              unsigned int v28 = (uint64_t *)*((void *)this + 1);
              --*((void *)this + 2);
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v28, v24);
              realityio::WrappedRERef<REAsset *>::~WrappedRERef(v24 + 8);
              operator delete(v24);
            }
            uint64_t v29 = *(void **)(v22 + 8);
            if (v29)
            {
              do
              {
                uint64_t v30 = (void **)v29;
                uint64_t v29 = (void *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                uint64_t v30 = *(void ***)(v22 + 16);
                BOOL v7 = *v30 == (void *)v22;
                uint64_t v22 = (uint64_t)v30;
              }
              while (!v7);
            }
            uint64_t v22 = (uint64_t)v30;
          }
          while (v30 != v32);
        }
        break;
      }
    }
  }
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v32[0]);
  std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(v34[0]);
}

void sub_23F720DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

float realityio::ImportSession::getWorldScaleAtPrim(realityio::ImportSession *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  *(void *)&v10[0] = *(void *)(*(void *)(*((void *)this + 2) + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)v10);
  pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>(&v8, (uint64_t *)v10);
  pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit();
  double v3 = v2;
  uint64_t v4 = v9;
  if (v9 && atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)v10);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v11);
  memset(v10, 0, sizeof(v10));
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::GetLocalToWorldTransform();
  MEMORY[0x2455CE5D0](v10, &v8);
  LODWORD(v9) = 0;
  uint64_t v8 = 0;
  REDecomposeMatrix();
  float v5 = v3;
  float v6 = *((float *)&v8 + 1) * v5;
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table((uint64_t)v11);
  return v6;
}

void sub_23F720F38(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,pxrInternal__aapl__pxrReserved__::TfHash,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::UsdPrim,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>,std::equal_to<pxrInternal__aapl__pxrReserved__::UsdPrim>,pxrInternal__aapl__pxrReserved__::TfHash,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::UsdPrim,pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::_Entry>>>::~__hash_table(v1 - 80);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionImpl::ImportSessionImpl(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const void **a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26F349110;
  uint64_t v9 = *a5;
  *(void *)(a1 + 8) = *a5;
  if (v9) {
    CFRetain(v9);
  }
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 184) = 850045863;
  *(void *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 264) = a4;
  *(unsigned char *)(a1 + 272) = 0;
  uint64_t v41 = (void **)(a1 + 136);
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 280), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 304), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 328), "");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 352), "");
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = a1 + 384;
  long long v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v48, v10);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v48);
  Identifier = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v11);
  std::string::operator=((std::string *)(a1 + 280), Identifier);
  std::string::size_type size = v48.__r_.__value_.__l.__size_;
  if (v48.__r_.__value_.__l.__size_
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v48.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
  }
  *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = 0uLL;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v48, (char *)v48.__r_.__value_.__l.__size_);
  realityio::ImportSessionInit(v14);
  unsigned int v15 = [MEMORY[0x263F086E0] mainBundle];
  uint64_t v16 = [v15 resourcePath];

  if (!v16)
  {
LABEL_72:
    *(void *)(a1 + 16) = a3;
    RERetain();
    operator new();
  }
  std::string::basic_string[abi:ne180100]<0>(&v48, (char *)[v16 UTF8String]);
  LOBYTE(v17) = *((unsigned char *)&v48.__r_.__value_.__s + 23);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v18 = v48.__r_.__value_.__l.__size_;
    if (!v48.__r_.__value_.__l.__size_)
    {
      std::string::size_type v23 = 0;
      goto LABEL_31;
    }
  }
  else
  {
    if (!*((unsigned char *)&v48.__r_.__value_.__s + 23))
    {
LABEL_28:
      std::string v46 = v48;
      goto LABEL_32;
    }
    std::string::size_type v18 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  }
  uint64_t v19 = (std::string *)v48.__r_.__value_.__r.__words[0];
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v48;
  }
  if (v19->__r_.__value_.__s.__data_[v18 - 1] != 47)
  {
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v20 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v20 = v48.__r_.__value_.__l.__size_;
    }
    p_s1 = &__s1;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v20 + 1);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v48;
      }
      else {
        uint64_t v22 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      memmove(p_s1, v22, v20);
    }
    *(_WORD *)((char *)&p_s1->__r_.__value_.__l.__data_ + v20) = 47;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    std::string v48 = __s1;
    std::string::size_type v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  if ((v17 & 0x80) == 0) {
    goto LABEL_28;
  }
  std::string::size_type v23 = v48.__r_.__value_.__l.__size_;
LABEL_31:
  std::string::__init_copy_ctor_external(&v46, v48.__r_.__value_.__l.__data_, v23);
LABEL_32:
  unsigned int v24 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&v44, v24);
  unsigned int v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&v44);
  uint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v25);
  if (*(char *)(v26 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v26, *(void *)(v26 + 8));
  }
  else
  {
    long long v27 = *(_OWORD *)v26;
    v45.__r_.__value_.__r.__words[2] = *(void *)(v26 + 16);
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v27;
  }
  pxrInternal__aapl__pxrReserved__::TfStringGetCommonPrefix();
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  std::string::size_type v28 = v44.__r_.__value_.__l.__size_;
  if (v44.__r_.__value_.__l.__size_
    && atomic_fetch_add_explicit((atomic_uint *volatile)(v44.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(std::string::size_type))(*(void *)v28 + 8))(v28);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  uint64_t v29 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  char v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = __s1.__r_.__value_.__l.__size_;
  }
  std::string::size_type v32 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v32 = v48.__r_.__value_.__l.__size_;
  }
  if (v31 == v32)
  {
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v33 = &v48;
    }
    else {
      uint64_t v33 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string v35 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, v33, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_69;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      uint64_t v34 = &__s1;
      while (v34->__r_.__value_.__s.__data_[0] == v33->__r_.__value_.__s.__data_[0])
      {
        uint64_t v34 = (std::string *)((char *)v34 + 1);
        uint64_t v33 = (std::string *)((char *)v33 + 1);
        if (!--v29) {
          goto LABEL_58;
        }
      }
      goto LABEL_67;
    }
LABEL_58:
    uint64_t v36 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(&v42, v36);
    std::string::size_type v37 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(&v42);
    long long v38 = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v37);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v39 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v39 = __s1.__r_.__value_.__l.__size_;
    }
    std::string::basic_string(&v44, v38, v39, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v49);
    if (*(char *)(a1 + 159) < 0) {
      operator delete(*v41);
    }
    *(_OWORD *)uint64_t v41 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
    *(void *)(a1 + 152) = *((void *)&v44.__r_.__value_.__l + 2);
    *((unsigned char *)&v44.__r_.__value_.__s + 23) = 0;
    v44.__r_.__value_.__s.__data_[0] = 0;
    uint64_t v40 = v43;
    if (v43 && atomic_fetch_add_explicit((atomic_uint *volatile)(v43 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
    }
    char v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
LABEL_67:
  if ((v30 & 0x80) == 0) {
    goto LABEL_70;
  }
  std::string v35 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_69:
  operator delete(v35);
LABEL_70:
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  goto LABEL_72;
}

void sub_23F72168C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, const void **a9, void **a10, void **a11, void **a12, std::mutex *a13, void **a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v52 - 137) < 0) {
    operator delete(*(void **)(v52 - 160));
  }

  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(*(void **)(v47 + 384));
  if (*(char *)(v47 + 375) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v47 + 351) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v47 + 327) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v47 + 303) < 0) {
    operator delete(*v50);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v49);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)(v48 + 88));
  std::mutex::~mutex(a13);
  std::__tree<std::string>::destroy(v48, *(char **)(v47 + 168));
  if (*(char *)(v47 + 159) < 0) {
    operator delete(*a14);
  }
  std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__value_func[abi:ne180100]((void *)(v48 - 56));
  std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::~__value_func[abi:ne180100]((void *)(v48 - 88));
  uint64_t v54 = *(void *)(v47 + 64);
  *(void *)(v47 + 64) = 0;
  if (v54) {
    std::default_delete<realityio::BuilderDependencyDAG>::operator()[abi:ne180100](v54);
  }
  uint64_t v55 = *(std::__shared_weak_count **)(v47 + 48);
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(a9);
  _Unwind_Resume(a1);
}

uint64_t *realityio::ImportSessionImpl::setMissingMaterial(uint64_t a1, uint64_t *a2)
{
  if (*a2)
  {
    double v3 = (uint64_t *)(a1 + 248);
    return realityio::WrappedRERef<REAsset *>::operator=(v3, a2);
  }
  else
  {
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    MEMORY[0x2455CDC30](ServiceLocator);
    uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
    uint64_t v8 = AssetHandle;
    if (AssetHandle) {
      RERetain();
    }
    uint64_t v7 = *(void *)(a1 + 248);
    if (v7 != AssetHandle)
    {
      *(void *)(a1 + 248) = AssetHandle;
      uint64_t v8 = v7;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v8);
    return (uint64_t *)RERelease();
  }
}

void realityio::ImportSessionImpl::~ImportSessionImpl(realityio::ImportSessionImpl *this)
{
  *(void *)this = &unk_26F349110;
  double v2 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    uint64_t v8 = (void **)(v5 + 136);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v5 + 112, *(void **)(v5 + 120));
    uint64_t v8 = (void **)(v5 + 88);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::BuilderRegistrationInfo>>>>::destroy(v5 + 64, *(void **)(v5 + 72));
    std::__hash_table<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::__unordered_map_hasher<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::__unordered_map_equal<pxrInternal__aapl__pxrReserved__::TfToken,std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>,std::equal_to<pxrInternal__aapl__pxrReserved__::TfToken>,pxrInternal__aapl__pxrReserved__::TfToken::HashFunctor,true>,std::allocator<std::__hash_value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::shared_ptr<realityio::OutputDescriptor const>>>>::~__hash_table(v5 + 24);
    uint64_t v8 = (void **)v5;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v8);
    MEMORY[0x2455D2BD0](v5, 0x10A0C409217B224);
  }
  RERelease();
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(*((void **)this + 48));
  if (*((char *)this + 375) < 0) {
    operator delete(*((void **)this + 44));
  }
  if (*((char *)this + 351) < 0) {
    operator delete(*((void **)this + 41));
  }
  if (*((char *)this + 327) < 0) {
    operator delete(*((void **)this + 38));
  }
  if (*((char *)this + 303) < 0) {
    operator delete(*((void **)this + 35));
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)this + 32);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 31);
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  std::__function::__value_func<void ()(REEntity *,REScene **,REAsset **,unsigned long,unsigned long)>::~__value_func[abi:ne180100]((void *)this + 13);
  std::__function::__value_func<void ()(REScene *,char const*,REEntity *)>::~__value_func[abi:ne180100]((void *)this + 9);
  uint64_t v6 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v6) {
    std::default_delete<realityio::BuilderDependencyDAG>::operator()[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef((const void **)this + 1);
}

void realityio::ImportSessionImpl::queueDedupingAssetForDeferredLoad(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 264) + 16) + 40) + 488);
    uint64_t v3 = a2[1];
    *(void *)&long long v4 = *a2;
    *((void *)&v4 + 1) = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    realityio::AssetLoadTracker::add(v2, &v4);
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

void sub_23F721CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::ImportSession::registerAssetDescriptorHandler()
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v2 = v3;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)&v2, v3[0]);
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  MEMORY[0x2455CDC30](ServiceLocator);
  REAssetProviderBuilderCreate();
  REAssetProviderBuilderSetUserData();
  REAssetProviderBuilderSetREAssetRefLoadCallback();
  REAssetManagerRegisterAssetProviderBuilder();
  RERelease();
  return 1;
}

void sub_23F721DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
}

uint64_t ___ZN9realityio13ImportSession30registerAssetDescriptorHandlerEP8REEngine_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, CFErrorRef *a4)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v70 = *(void *)(a1 + 32);
  REAssetProviderCompiledDataLoadContextGetDescriptor();
  id v71 = (id) REAssetDescriptorCopyData();
  std::string::basic_string[abi:ne180100]<0>(v78, (char *)[v71 bytes]);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  long long v4 = NSString;
  int v5 = v79;
  uint64_t v6 = (void **)v78[0];
  uint64_t v7 = [NSString defaultCStringEncoding];
  if (v5 >= 0) {
    uint64_t v8 = v78;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = [v4 stringWithCString:v8 encoding:v7];
  long long v10 = [NSURL URLWithString:v9];
  uint64_t v11 = v10;
  if (v10)
  {
    unsigned int v12 = [v10 scheme];
    if (v12)
    {
      uint64_t v13 = [v11 host];
      if (v13)
      {
        unsigned int v14 = [v11 path];
        BOOL v15 = v14 == 0;

        if (!v15)
        {
          id v16 = [v11 scheme];
          std::string::basic_string[abi:ne180100]<0>(&v86, (char *)[v16 UTF8String]);

          id v17 = [v11 host];
          std::string::basic_string[abi:ne180100]<0>(v81, (char *)[v17 UTF8String]);

          id v18 = [v11 path];
          std::string::basic_string[abi:ne180100]<0>(&v80, (char *)[v18 UTF8String]);

          MEMORY[0x2455CF7A0](&buf, &v80);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v74, (int *)&buf);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v75);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
          uint64_t v19 = [MEMORY[0x263F08BA0] componentsWithURL:v11 resolvingAgainstBaseURL:0];
          size_t v20 = objc_opt_new();
          long long v94 = 0u;
          memset(v93, 0, sizeof(v93));
          long long v21 = [v19 queryItems];
          uint64_t v22 = [v21 countByEnumeratingWithState:v93 objects:&buf count:16];
          if (v22)
          {
            uint64_t v23 = *(void *)v93[0].__r_.__value_.__r.__words[2];
            do
            {
              for (uint64_t i = 0; i != v22; ++i)
              {
                if (*(void *)v93[0].__r_.__value_.__r.__words[2] != v23) {
                  objc_enumerationMutation(v21);
                }
                unsigned int v25 = *(void **)(v93[0].__r_.__value_.__l.__size_ + 8 * i);
                uint64_t v26 = [v25 value];
                BOOL v27 = v26 == 0;

                if (!v27)
                {
                  std::string::size_type v28 = [v25 value];
                  uint64_t v29 = [v25 name];
                  [v20 setObject:v28 forKey:v29];
                }
              }
              uint64_t v22 = [v21 countByEnumeratingWithState:v93 objects:&buf count:16];
            }
            while (v22);
          }

          id v30 = [v20 objectForKeyedSubscript:@"bundlepath"];
          std::string::basic_string[abi:ne180100]<0>(v93, (char *)[v30 UTF8String]);

          MEMORY[0x2455CE830](&buf, v93);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v77.__r_.__value_.__l.__data_);
            std::string v77 = v91;
            *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
            v91.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::string v77 = v91;
          }
          if (SHIBYTE(v93[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93[0].__r_.__value_.__l.__data_);
          }

          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v80.__r_.__value_.__l.__data_);
          }
          if ((char)v82 < 0) {
            operator delete(v81[0]);
          }
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }

          std::string v35 = [MEMORY[0x263F086E0] mainBundle];
          uint64_t v36 = [v35 resourcePath];

          id v37 = v36;
          std::string::basic_string[abi:ne180100]<0>(v81, (char *)[v37 UTF8String]);
          memset(&v80, 0, sizeof(v80));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!__p.__r_.__value_.__l.__size_) {
              goto LABEL_125;
            }
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
              goto LABEL_125;
            }
            p_p = &__p;
          }
          if (p_p->__r_.__value_.__s.__data_[0] == 47)
          {
            std::string::operator=(&v80, &__p);
          }
          else
          {
            if ((v82 & 0x80u) == 0) {
              size_t v40 = v82;
            }
            else {
              size_t v40 = (size_t)v81[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&buf, v40 + 1);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            if (v40)
            {
              if ((v82 & 0x80u) == 0) {
                uint64_t v42 = v81;
              }
              else {
                uint64_t v42 = (void **)v81[0];
              }
              memmove(p_buf, v42, v40);
            }
            *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v40) = 47;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v43 = &__p;
            }
            else {
              uint64_t v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            std::string v45 = std::string::append(&buf, (const std::string::value_type *)v43, size);
            std::string::size_type v46 = v45->__r_.__value_.__r.__words[0];
            v93[0].__r_.__value_.__r.__words[0] = v45->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v93[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7);
            char v47 = HIBYTE(v45->__r_.__value_.__r.__words[2]);
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80.__r_.__value_.__l.__data_);
            }
            v80.__r_.__value_.__r.__words[0] = v46;
            v80.__r_.__value_.__l.__size_ = v93[0].__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v80.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v93[0].__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v80.__r_.__value_.__s + 23) = v47;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          MEMORY[0x2455CE840](&buf, &__p, &v80);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = buf;
          *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
          buf.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v77.__r_.__value_.__l.__data_);
            std::string v77 = v91;
            *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
            v91.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            std::string v77 = v91;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(v93, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else {
            v93[0] = __p;
          }
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v93[1], v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
          }
          else {
            v93[1] = v77;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v72, &v74);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v73, &v75);
          uint64_t v87 = v70;
          realityio::ImportSession::registerAssetDescriptorHandler();
          uint64_t v48 = std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(&buf, (long long *)v93, &v72);
          if (v49 != (_anonymous_namespace_ *)&qword_268C3FD10)
          {
            size_t v20 = (void *)*((void *)v49 + 11);
            std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>((uint64_t)v49 + 32);
            operator delete(v49);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v92);
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v49 == (_anonymous_namespace_ *)&qword_268C3FD10)
          {
            memset(&v86, 0, sizeof(v86));
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)&v88, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
            pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetUnion((uint64_t *)&buf, (pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)&v86, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v88);
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__vdeallocate((void **)&v86.__r_.__value_.__l.__data_);
            std::string v86 = buf;
            uint64_t v89 = &buf;
            memset(&buf, 0, sizeof(buf));
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v88);
            uint64_t v51 = pxrInternal__aapl__pxrReserved__::TfPathExists();
            if (v51)
            {
              id v68 = v37;
              pxrInternal__aapl__pxrReserved__::UsdStage::OpenMasked();
              uint64_t v52 = (const void *)RIOPxrUsdStageCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &>(&v88);
              long long v85 = v52;
              if (v52) {
                CFRetain(v52);
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 0;
              LODWORD(v89) = 0;
              unint64_t v53 = (void *)RIOImportSessionCreate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage> &,REEngine *&,realityio::WrappedCFRef<RIOPxrUsdStage *> &,realityio::ImportSessionImpl::PipelineVersion,realityio::ImportSessionImpl::Threading>((uint64_t *)&v88, &v87, (uint64_t)&v85, (int *)&buf, (unsigned int *)&v89);
              uint64_t v54 = v53[4];
              *(unsigned char *)(*(void *)(v54 + 40) + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1;
              std::string::operator=((std::string *)(v54 + 136), &v93[1]);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v83, &v72);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v84, &v73);
              uint64_t v55 = v53[4];
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v89, &v83);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v89 + 1, &v84);
              uint64_t v56 = *(void *)(v55 + 40);
              unint64_t v57 = *(std::__shared_weak_count **)(v55 + 48);
              if (v57) {
                atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&buf, &v89);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)buf.__r_.__value_.__r.__words + 1, (_DWORD *)&v89 + 1);
              realityio::LiveSceneManager::updateAsset(v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&buf, 0);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              uint64_t v58 = v53;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&buf);
              if (v57) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v89);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              id v37 = v68;
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v83);
              MEMORY[0x2455CE830](&buf, v53[4] + 136);
              if (SHIBYTE(v93[0].__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v93[0].__r_.__value_.__l.__data_);
              }
              v93[0] = buf;
              *((unsigned char *)&buf.__r_.__value_.__s + 23) = 0;
              buf.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v93[1].__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v93[1].__r_.__value_.__l.__data_);
                v93[1] = v91;
                *((unsigned char *)&v91.__r_.__value_.__s + 23) = 0;
                v91.__r_.__value_.__s.__data_[0] = 0;
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                v93[1] = v91;
              }
              long long v60 = std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(&buf, (long long *)v93, &v72);
              if (v61 != (_anonymous_namespace_ *)&qword_268C3FD10)
              {
                size_t v20 = (void *)*((void *)v61 + 11);
                uint64_t v58 = v53;
                std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>((uint64_t)v61 + 32);
                operator delete(v61);
                CFRelease(v53);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v92);
              if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v91.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              if (v61 == (_anonymous_namespace_ *)&qword_268C3FD10)
              {
                CFRelease(v58);
                size_t v20 = 0;
              }
              realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&v85);
              pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v88);
            }
            else
            {
              unint64_t v59 = *(NSObject **)realityio::logObjects((realityio *)v51);
              if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
              {
                if ((v93[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  data = &v93[1];
                }
                else {
                  data = (std::string *)v93[1].__r_.__value_.__l.__data_;
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)data;
                _os_log_error_impl(&dword_23F4EA000, v59, OS_LOG_TYPE_ERROR, "AssetFile (\"%s\") does not exist", (uint8_t *)&buf, 0xCu);
              }
              size_t v20 = 0;
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
            std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          long long v63 = (realityio *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v72);
          if (SHIBYTE(v93[1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93[1].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93[0].__r_.__value_.__l.__data_);
          }
          if (v20)
          {
            uint64_t ServiceLocator = REEngineGetServiceLocator();
            MEMORY[0x2455CDC30](ServiceLocator);
            REAssetManagerReplaceAssetRefDataWith();
            uint64_t v33 = 1;
LABEL_126:
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v80.__r_.__value_.__l.__data_);
            }
            if ((char)v82 < 0) {
              operator delete(v81[0]);
            }

            goto LABEL_24;
          }
          long long v65 = *(NSObject **)realityio::logObjects(v63);
          if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
          {
            long long v66 = v78;
            if (v79 < 0) {
              long long v66 = (void **)v78[0];
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
            _os_log_error_impl(&dword_23F4EA000, v65, OS_LOG_TYPE_ERROR, "Invalid Asset from (\"%s\") in USD AssetDescriptor.", (uint8_t *)&buf, 0xCu);
          }
          if (a4)
          {
            uint64_t v33 = 0;
            *a4 = CFErrorCreate(0, @"REAssetRefErrorDomain", 0, 0);
            goto LABEL_126;
          }
LABEL_125:
          uint64_t v33 = 0;
          goto LABEL_126;
        }
      }
      else
      {
      }
    }
  }

  std::string::size_type v32 = *(NSObject **)realityio::logObjects(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    std::string::size_type v39 = v78;
    if (v79 < 0) {
      std::string::size_type v39 = (void **)v78[0];
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
    _os_log_error_impl(&dword_23F4EA000, v32, OS_LOG_TYPE_ERROR, "Invalid URL (\"%s\") in USD AssetDescriptor.", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v33 = 0;
LABEL_24:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v79 < 0) {
    operator delete(v78[0]);
  }

  return v33;
}

void sub_23F722AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, int a18, __int16 a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,const void *a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair((uint64_t)&a59);
  realityio::WrappedCFRef<RIOPxrUsdStage *>::~WrappedCFRef(&a52);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)&a57);
  a57 = (uint64_t)&a53;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&a57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a17);
  if (*(char *)(v59 - 129) < 0) {
    operator delete(*(void **)(v59 - 152));
  }
  if (*(char *)(v59 - 153) < 0) {
    operator delete(*(void **)(v59 - 176));
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a50 < 0) {
    operator delete(a45);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a19);
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a38 < 0) {
    operator delete(a33);
  }

  _Unwind_Resume(a1);
}

void realityio::ImportSession::assetDescriptorCacheEject(long long *a1, _DWORD *a2)
{
  std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(&v5, a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_23F722F14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::assetDescriptorCache(_anonymous_namespace_ *this)
{
  {
    qword_268C3FD18 = 0;
    qword_268C3FD10 = 0;
  }
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint **realityio::ImportSession::gatherTextureInfo(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  void v11[4] = *MEMORY[0x263EF8340];
  char v7 = (uint64_t *)(a1 + 16);
  long long v10 = *(atomic_uint **)(*(void *)(*(void *)(a1 + 16) + 8) + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v10);
  uint64_t v8 = *v7;
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
  realityio::TextureBuilder::gatherTextureInfo((uint64_t *)&v10, a2, a3, v8 + 328, (uint64_t)v11);
  std::__function::__value_func<void ()(RETextureImportOperation0 *,char const*,char const*)>::~__value_func[abi:ne180100](v11);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v10);
}

void sub_23F7230B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, atomic_uint *a9, uint64_t a10)
{
}

BOOL realityio::ImportSession::allowUnsupportedTextures(realityio::ImportSession *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (*(unsigned char *)(v2 + 272))
  {
    if (*(char *)(v2 + 303) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v2 + 280), *(void *)(v2 + 288));
    }
    else {
      std::string __str = *(std::string *)(v2 + 280);
    }
  }
  else
  {
    BOOL v27 = *(atomic_uint **)(*(void *)(v2 + 8) + 16);
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v27);
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v27);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer((uint64_t *)&__p, v3);
    long long v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->((uint64_t *)&__p);
    uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);
    if (*(char *)(Identifier + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)Identifier, *(void *)(Identifier + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)Identifier;
      __str.__r_.__value_.__r.__words[2] = *(void *)(Identifier + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
    }
    unint64_t v7 = v25;
    if (v25 && atomic_fetch_add_explicit((atomic_uint *volatile)(v25 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(unint64_t))(*(void *)v7 + 8))(v7);
    }
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v27);
  }
  uint64_t v8 = *((unsigned __int8 *)this + 55);
  if (*((char *)this + 55) < 0) {
    uint64_t v9 = *((void *)this + 5);
  }
  else {
    uint64_t v9 = *((unsigned __int8 *)this + 55);
  }
  long long v10 = (const void **)((char *)this + 32);
  if (v9)
  {
    if ((v8 & 0x80u) == 0) {
      uint64_t v11 = *((unsigned __int8 *)this + 55);
    }
    else {
      uint64_t v11 = *((void *)this + 5);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    char v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (v11 == size)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v8 & 0x80) == 0)
      {
        if (*((unsigned char *)this + 55))
        {
          BOOL v15 = (unsigned __int8 *)this + 32;
          while (*v15 == p_str->__r_.__value_.__s.__data_[0])
          {
            ++v15;
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v8) {
              goto LABEL_55;
            }
          }
          goto LABEL_32;
        }
LABEL_55:
        BOOL v21 = *((unsigned char *)this + 56) != 0;
        if (v13 < 0) {
          goto LABEL_53;
        }
        return v21;
      }
      if (!memcmp(*v10, p_str, *((void *)this + 5))) {
        goto LABEL_55;
      }
    }
  }
LABEL_32:
  std::string::operator=((std::string *)((char *)this + 32), &__str);
  pxrInternal__aapl__pxrReserved__::TfGetExtension();
  unint64_t v16 = 0;
  while ((char)v26 < 0)
  {
    if (v25 <= v16)
    {
      if (v25 == 4)
      {
        size_t v20 = __p;
        goto LABEL_48;
      }
LABEL_49:
      BOOL v21 = 1;
      goto LABEL_50;
    }
LABEL_37:
    if ((v26 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    char v18 = __tolower(p_p[v16]);
    if ((v26 & 0x80u) == 0) {
      uint64_t v19 = &__p;
    }
    else {
      uint64_t v19 = __p;
    }
    v19[v16++] = v18;
  }
  if (v16 < v26) {
    goto LABEL_37;
  }
  if (v26 != 4) {
    goto LABEL_49;
  }
  size_t v20 = &__p;
LABEL_48:
  if (*v20 != 2053403509) {
    goto LABEL_49;
  }
  if (*((char *)this + 55) < 0) {
    long long v10 = (const void **)*v10;
  }
  double v23 = MEMORY[0x2455CE370](v10, 0);
  if (v23 < 1688194860.0 || v23 == 520844460.0) {
    goto LABEL_49;
  }
  BOOL v21 = 0;
LABEL_50:
  *((unsigned char *)this + 56) = v21;
  if ((char)v26 < 0) {
    operator delete(__p);
  }
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_53:
  }
    operator delete(__str.__r_.__value_.__l.__data_);
  return v21;
}

void sub_23F7233B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL realityio::ImportSession::reloadAsset(uint64_t a1, uint64_t a2, CFErrorRef *a3)
{
  v84[4] = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16)))
  {
    if (a3)
    {
      std::operator+<char>();
      std::string v5 = std::string::append(&v77, " while update is in progress");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
    return 0;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchNormPath();
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  std::string::basic_string[abi:ne180100]<0>(&__p, "m4a");
  std::string::basic_string[abi:ne180100]<0>(v79, "caf");
  std::string::basic_string[abi:ne180100]<0>(v80, "ac3");
  std::string::basic_string[abi:ne180100]<0>(v81, "flac");
  std::string::basic_string[abi:ne180100]<0>(v82, "wav");
  std::string::basic_string[abi:ne180100]<0>(v83, "aiff");
  std::string::basic_string[abi:ne180100]<0>(v84, "mp3");
  uint64_t v9 = 0;
  v64[0] = 0;
  v64[1] = 0;
  long long v63 = v64;
  do
  {
    std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&v63, (uint64_t *)v64, (const void **)((char *)&__p.__r_.__value_.__l.__data_ + v9), (uint64_t)&__p + v9);
    v9 += 24;
  }
  while (v9 != 168);
  for (uint64_t i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v84[i + 2]) < 0) {
      operator delete((void *)v84[i]);
    }
  }
  v62[0] = 0;
  v62[1] = 0;
  int v61 = v62;
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__ *)std::__tree<std::string>::__count_unique<std::string>((uint64_t)&v63, (const void **)&v65);
  if (v11)
  {
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v67;
    }
    pxrInternal__aapl__pxrReserved__::ArGetResolver(v11);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v77, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      std::string v77 = v67;
    }
    pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (!v74.__r_.__value_.__r.__words[0])
    {
      std::operator+<char>();
      uint64_t v36 = std::string::append(&v76, " could not be opened for reading.");
      long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&v77);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      BOOL v7 = 0;
      goto LABEL_140;
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v74.__r_.__value_.__l.__data_ + 24))(&v71);
    std::string::size_type v32 = (const UInt8 *)v71.__r_.__value_.__r.__words[0];
    if (v71.__r_.__value_.__r.__words[0]
      && (CFIndex v33 = (*(uint64_t (**)(std::string::size_type))(*(void *)v74.__r_.__value_.__l.__data_ + 16))(v74.__r_.__value_.__r.__words[0]),
          (CFDataRef v34 = CFDataCreateWithBytesNoCopy(0, v32, v33, (CFAllocatorRef)*MEMORY[0x263EFFB28])) != 0))
    {
      uint64_t v35 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 248, (const void **)&v67.__r_.__value_.__l.__data_);
      if (a1 + 256 != v35)
      {
        if (*(char *)(v35 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(v35 + 56), *(void *)(v35 + 64));
        }
        else {
          std::string v77 = *(std::string *)(v35 + 56);
        }
        realityio::ImportSession::extraAssets((realityio::ImportSession *)a1, (uint64_t *)&v76);
        int v72 = &v77;
        std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v76, (const void **)&v77.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v72);
        std::__tree<std::string>::destroy((uint64_t)&v76, (char *)v76.__r_.__value_.__l.__size_);
        REAudioFileAssetMakeMutableAndReplaceWithData();
        CFRelease(v34);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        BOOL v7 = 1;
        goto LABEL_138;
      }
      std::operator+<char>();
      uint64_t v51 = std::string::append(&v76, " is not in use as an asset.");
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&v77);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      CFRelease(v34);
    }
    else
    {
      std::operator+<char>();
      *a3 = realityio::createError((uint64_t)&v77);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
    BOOL v7 = 0;
LABEL_138:
    if (v71.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v71.__r_.__value_.__l.__size_);
    }
LABEL_140:
    if (v74.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v74.__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_144;
  }
  *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = 0uLL;
  v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76.__r_.__value_.__l.__size_;
  pxrInternal__aapl__pxrReserved__::ArchNormPath();
  uint64_t v12 = *(void *)(a1 + 232);
  if (!v12) {
    goto LABEL_24;
  }
  uint64_t v13 = a1 + 232;
  do
  {
    BOOL v14 = std::less<std::string>::operator()[abi:ne180100](a1 + 240, (const void **)(v12 + 32), (const void **)&v77.__r_.__value_.__l.__data_);
    BOOL v15 = (uint64_t *)(v12 + 8);
    if (!v14)
    {
      BOOL v15 = (uint64_t *)v12;
      uint64_t v13 = v12;
    }
    uint64_t v12 = *v15;
  }
  while (*v15);
  if (v13 == a1 + 232
    || std::less<std::string>::operator()[abi:ne180100](a1 + 240, (const void **)&v77.__r_.__value_.__l.__data_, (const void **)(v13 + 32)))
  {
LABEL_24:
    char v16 = 0;
  }
  else
  {
    if ((std::string *)(v13 + 56) != &v76)
    {
      size_t v40 = *(void **)(v13 + 56);
      uint64_t v41 = (void *)(v13 + 64);
      if (v76.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v42 = v76.__r_.__value_.__r.__words[0];
        v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76.__r_.__value_.__l.__size_;
        *(void *)(v76.__r_.__value_.__l.__size_ + 16) = 0;
        *(_OWORD *)&v76.__r_.__value_.__r.__words[1] = 0uLL;
        if (*(void *)(v42 + 8)) {
          std::string::size_type v43 = *(void *)(v42 + 8);
        }
        else {
          std::string::size_type v43 = v42;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
        __p.__r_.__value_.__l.__size_ = v43;
        __p.__r_.__value_.__r.__words[2] = v43;
        if (!v43
          || (__p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next(v43),
              v40 == v41))
        {
          uint64_t v50 = v40;
        }
        else
        {
          do
          {
            std::string::operator=((std::string *)(v43 + 32), (const std::string *)(v40 + 4));
            std::string::operator=((std::string *)(v43 + 56), (const std::string *)(v40 + 7));
            std::string::operator=((std::string *)(v43 + 80), (const std::string *)(v40 + 10));
            long long v44 = *(_OWORD *)(v40 + 13);
            *(_WORD *)(v43 + 120) = *((_WORD *)v40 + 60);
            *(_OWORD *)(v43 + 104) = v44;
            std::string::operator=((std::string *)(v43 + 128), (const std::string *)(v40 + 16));
            std::string v45 = (uint64_t *)__p.__r_.__value_.__r.__words[2];
            std::string::size_type size = v76.__r_.__value_.__l.__size_;
            p_std::string::size_type size = &v76.__r_.__value_.__l.__size_;
            uint64_t v48 = &v76.__r_.__value_.__l.__size_;
            if (v76.__r_.__value_.__l.__size_)
            {
              do
              {
                while (1)
                {
                  p_std::string::size_type size = (std::string::size_type *)size;
                  if (!realityio::TextureImportOperationSettings::operator<((uint64_t)(v45 + 4), size + 32))break; {
                  std::string::size_type size = *p_size;
                  }
                  uint64_t v48 = p_size;
                  if (!*p_size) {
                    goto LABEL_114;
                  }
                }
                std::string::size_type size = p_size[1];
              }
              while (size);
              uint64_t v48 = p_size + 1;
            }
LABEL_114:
            *std::string v45 = 0;
            v45[1] = 0;
            v45[2] = (uint64_t)p_size;
            *uint64_t v48 = (std::string::size_type)v45;
            if (*(void *)v76.__r_.__value_.__l.__data_)
            {
              v76.__r_.__value_.__r.__words[0] = *(void *)v76.__r_.__value_.__l.__data_;
              std::string v45 = (uint64_t *)*v48;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v76.__r_.__value_.__l.__size_, v45);
            ++v76.__r_.__value_.__r.__words[2];
            std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
            __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_) {
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next(__p.__r_.__value_.__l.__size_);
            }
            char v49 = (void *)v40[1];
            if (v49)
            {
              do
              {
                uint64_t v50 = v49;
                char v49 = (void *)*v49;
              }
              while (v49);
            }
            else
            {
              do
              {
                uint64_t v50 = (void *)v40[2];
                BOOL v31 = *v50 == (void)v40;
                size_t v40 = v50;
              }
              while (!v31);
            }
            if (!v43) {
              break;
            }
            size_t v40 = v50;
          }
          while (v50 != v41);
        }
        std::__tree<realityio::TextureImportOperationSettings>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&__p);
        size_t v40 = v50;
      }
      if (v40 != v41)
      {
        do
        {
          std::__tree<realityio::TextureImportOperationSettings>::__construct_node<realityio::TextureImportOperationSettings const&>((uint64_t)&v76, (const realityio::TextureImportOperationSettings *)(v40 + 4), (uint64_t)&__p);
          std::string::size_type v54 = v76.__r_.__value_.__l.__size_;
          uint64_t v55 = &v76.__r_.__value_.__l.__size_;
          uint64_t v56 = &v76.__r_.__value_.__l.__size_;
          if (v76.__r_.__value_.__l.__size_)
          {
            uint64_t v57 = __p.__r_.__value_.__r.__words[0] + 32;
            do
            {
              while (1)
              {
                uint64_t v55 = (std::string::size_type *)v54;
                if (!realityio::TextureImportOperationSettings::operator<(v57, v54 + 32)) {
                  break;
                }
                std::string::size_type v54 = *v55;
                uint64_t v56 = v55;
                if (!*v55) {
                  goto LABEL_159;
                }
              }
              std::string::size_type v54 = v55[1];
            }
            while (v54);
            uint64_t v56 = v55 + 1;
          }
LABEL_159:
          uint64_t v58 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
          *(void *)__p.__r_.__value_.__l.__data_ = 0;
          v58[1] = 0;
          void v58[2] = (uint64_t)v55;
          *uint64_t v56 = (std::string::size_type)v58;
          if (*(void *)v76.__r_.__value_.__l.__data_)
          {
            v76.__r_.__value_.__r.__words[0] = *(void *)v76.__r_.__value_.__l.__data_;
            uint64_t v58 = (uint64_t *)*v56;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v76.__r_.__value_.__l.__size_, v58);
          ++v76.__r_.__value_.__r.__words[2];
          __p.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<realityio::TextureImportOperationSettings,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<realityio::TextureImportOperationSettings,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
          uint64_t v59 = (void *)v40[1];
          if (v59)
          {
            do
            {
              long long v60 = v59;
              uint64_t v59 = (void *)*v59;
            }
            while (v59);
          }
          else
          {
            do
            {
              long long v60 = (void *)v40[2];
              BOOL v31 = *v60 == (void)v40;
              size_t v40 = v60;
            }
            while (!v31);
          }
          size_t v40 = v60;
        }
        while (v60 != v41);
      }
    }
    char v16 = 1;
  }
  if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v16) {
      goto LABEL_27;
    }
LABEL_93:
    if (a3)
    {
      std::operator+<char>();
      long long v38 = std::string::append(&v77, "is not in use as an asset");
      long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      *a3 = realityio::createError((uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
    }
    BOOL v7 = 0;
    goto LABEL_127;
  }
  operator delete(v77.__r_.__value_.__l.__data_);
  if ((v16 & 1) == 0) {
    goto LABEL_93;
  }
LABEL_27:
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v18 = MEMORY[0x2455CDC60](ServiceLocator);
  uint64_t v19 = (std::string::__raw *)v76.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v76.__r_.__value_.__l.__data_ == &v76.__r_.__value_.__r.__words[1])
  {
    BOOL v7 = 1;
  }
  else
  {
    uint64_t v20 = v18;
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x263EFFB28];
    do
    {
      realityio::TextureImportOperationSettings::makeTextureResourceKey((realityio::TextureImportOperationSettings *)&v19[1].__words[1], &v77);
      realityio::ImportSession::getTextureAssetWithKey(a1, (const void **)&v77.__r_.__value_.__l.__data_, &v75);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v74, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      }
      else {
        std::string v74 = v67;
      }
      pxrInternal__aapl__pxrReserved__::ArGetResolver(v22);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v67;
      }
      pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v72)
      {
        (*(void (**)(const UInt8 **__return_ptr))(v72->__r_.__value_.__r.__words[0] + 24))(&v69);
        double v23 = v69;
        if (v69)
        {
          CFTypeRef cf = 0;
          CFIndex v24 = (*(uint64_t (**)(std::string *))(v72->__r_.__value_.__r.__words[0] + 16))(v72);
          CFDataRef v25 = CFDataCreateWithBytesNoCopy(0, v23, v24, v21);
          if (cf) {
            CFRelease(cf);
          }
          CFTypeRef cf = v25;
          realityio::TextureBuilder::createStandaloneTextureAssetData(&cf, (realityio::TextureImportOperationSettings *)&v19[1].__words[1], (uint64_t)&__p);
          if (__p.__r_.__value_.__s.__data_[0])
          {
            int v26 = MEMORY[0x2455CDE80](v20, v75, __p.__r_.__value_.__l.__size_, a3) ^ 1;
          }
          else
          {
            if (a3)
            {
              std::error_code::message(&v71, (const std::error_code *)&__p.__r_.__value_.__r.__words[1]);
              *a3 = realityio::createError((uint64_t)&v71);
              if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v71.__r_.__value_.__l.__data_);
              }
            }
            int v26 = 1;
          }
          realityio::Result<realityio::WrappedRERef<RETextureAssetData *>,realityio::DetailedError>::~Result((uint64_t)&__p);
          realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&cf);
        }
        else
        {
          if (a3)
          {
            std::operator+<char>();
            *a3 = realityio::createError((uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          int v26 = 1;
        }
        if (v70) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v70);
        }
      }
      else
      {
        if (a3)
        {
          std::operator+<char>();
          BOOL v27 = std::string::append(&v71, "could not be opened for reading");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          *a3 = realityio::createError((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v71.__r_.__value_.__l.__data_);
          }
        }
        int v26 = 1;
      }
      if (v73) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v73);
      }
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v74.__r_.__value_.__l.__data_);
      }
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v75);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      BOOL v7 = v26 == 0;
      if (v26) {
        break;
      }
      uint64_t v29 = (std::string *)v19->__words[1];
      if (v29)
      {
        do
        {
          id v30 = v29;
          uint64_t v29 = (std::string *)v29->__r_.__value_.__r.__words[0];
        }
        while (v29);
      }
      else
      {
        do
        {
          id v30 = (std::string *)v19->__words[2];
          BOOL v31 = v30->__r_.__value_.__r.__words[0] == (void)v19;
          uint64_t v19 = (std::string::__raw *)v30;
        }
        while (!v31);
      }
      uint64_t v19 = (std::string::__raw *)v30;
    }
    while (v30 != (std::string *)&v76.__r_.__value_.__r.__words[1]);
  }
LABEL_127:
  std::__tree<realityio::TextureImportOperationSettings>::destroy((uint64_t)&v76, (void *)v76.__r_.__value_.__l.__size_);
LABEL_144:
  std::__tree<std::string>::destroy((uint64_t)&v61, v62[0]);
  std::__tree<std::string>::destroy((uint64_t)&v63, v64[0]);
  if (v66 < 0) {
    operator delete(v65);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_23F724078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a31);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a36);
  }
  if (a52 < 0) {
    operator delete(__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&a9, (char *)a10);
  std::__tree<std::string>::destroy((uint64_t)&a12, (char *)a13);
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void realityio::ImportSession::insertTextureImportSettingsIntoCache(uint64_t a1, uint64_t a2, const realityio::TextureImportOperationSettings *a3)
{
  pxrInternal__aapl__pxrReserved__::ArchNormPath();
  uint64_t v8 = __p;
  std::string v5 = std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 224), (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v8);
  std::__tree<realityio::TextureImportOperationSettings>::__emplace_unique_key_args<realityio::TextureImportOperationSettings,realityio::TextureImportOperationSettings const&>((uint64_t **)v5 + 7, (uint64_t)a3, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F72447C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::ImportSession::registerAudioAsset(uint64_t a1, long long *a2, std::string *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::ArchNormPath();
  uint64_t v11 = a2;
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 248), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  std::string::operator=((std::string *)(v8 + 7), a3);
  realityio::ImportSessionImpl::addOrReplaceExtraAsset(*(void *)(a1 + 16), (long long *)a3, a4);
  if (v10 < 0) {
    operator delete(__p);
  }
}

void sub_23F724530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::ImportSessionImpl::getAssetURLFromBundle(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t a4)
{
  v26[2] = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  CFStringRef Type = (__CFString *)REAssetGetType();
  realityio::CFStringCopyUTF8String(Type, (uint64_t)v23);
  if (!v23[0]) {
    return 0;
  }
  uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)String, *(void *)(String + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)String;
    v22.__r_.__value_.__r.__words[2] = *(void *)(String + 16);
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v9;
  }
  uint64_t v12 = (__CFString *)REAssetCopyMetadataString();
  CFTypeRef cf = v12;
  if (v12)
  {
    realityio::CFStringCopyUTF8String(v12, (uint64_t)v18);
    if (!v18[0])
    {
      uint64_t AssetURLFromBundle = 0;
      goto LABEL_18;
    }
    pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier();
    uint64_t v13 = std::string::insert(&__p, 0, "/");
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[0];
    v26[0] = v13->__r_.__value_.__l.__size_;
    *(void *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    v22.__r_.__value_.__r.__words[0] = v14;
    v22.__r_.__value_.__l.__size_ = v26[0];
    *(std::string::size_type *)((char *)&v22.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v26 + 7);
    *((unsigned char *)&v22.__r_.__value_.__s + 23) = v15;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v18[0] && v20 < 0) {
      operator delete(v19);
    }
  }
  uint64_t AssetURLFromBundle = realityio::ImportSessionImpl::getAssetURLFromBundle(a1, (uint64_t *)&v22, (uint64_t *)&v24, v11, a4);
LABEL_18:
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&cf);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (v23[0] && v25 < 0) {
    operator delete(v24);
  }
  return AssetURLFromBundle;
}

void sub_23F72472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15 && a21 < 0) {
    operator delete(a16);
  }
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(&a22);
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a29)
  {
    if (a35 < 0) {
      operator delete(a30);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::ImportSessionImpl::getAssetURLFromBundle(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (*(char *)(a1 + 327) < 0)
  {
    if (!*(void *)(a1 + 312)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 327))
  {
    return 0;
  }
  if (*(char *)(a1 + 375) < 0)
  {
    if (*(void *)(a1 + 360)) {
      goto LABEL_7;
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 375)) {
    return 0;
  }
LABEL_7:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  long long v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"asset://", 8);
  realityio::urlSafeString(a2, __p);
  if (v27 >= 0) {
    char v10 = __p;
  }
  else {
    char v10 = (void **)__p[0];
  }
  if (v27 >= 0) {
    uint64_t v11 = HIBYTE(v27);
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"?", 1);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"bundleId=", 9);
  realityio::urlSafeString((uint64_t *)(a1 + 304), __p);
  if (v27 >= 0) {
    std::string::size_type v14 = __p;
  }
  else {
    std::string::size_type v14 = (void **)__p[0];
  }
  if (v27 >= 0) {
    uint64_t v15 = HIBYTE(v27);
  }
  else {
    uint64_t v15 = (uint64_t)__p[1];
  }
  char v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"&", 1);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  id v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"bundleName=", 11);
  realityio::urlSafeString((uint64_t *)(a1 + 352), __p);
  if (v27 >= 0) {
    uint64_t v18 = __p;
  }
  else {
    uint64_t v18 = (void **)__p[0];
  }
  if (v27 >= 0) {
    uint64_t v19 = HIBYTE(v27);
  }
  else {
    uint64_t v19 = (uint64_t)__p[1];
  }
  char v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"&", 1);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  CFAllocatorRef v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"assetType=", 10);
  realityio::urlSafeString(a3, __p);
  if (v27 >= 0) {
    std::string v22 = __p;
  }
  else {
    std::string v22 = (void **)__p[0];
  }
  if (v27 >= 0) {
    uint64_t v23 = HIBYTE(v27);
  }
  else {
    uint64_t v23 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  if (*(char *)(a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  *(_OWORD *)a5 = *(_OWORD *)__p;
  *(void *)(a5 + 16) = v27;
  v28[0] = *MEMORY[0x263F8C2B8];
  uint64_t v24 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v29[0] = v24;
  v29[1] = MEMORY[0x263F8C318] + 16;
  if (v30 < 0) {
    operator delete((void *)v29[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2455D2B30](&v31);
  return 1;
}

void sub_23F724B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

BOOL realityio::ImportSessionImpl::addExtraAsset(uint64_t a1, const void **a2, uint64_t a3)
{
  long long v6 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  char v7 = (uint64_t **)(a1 + 160);
  uint64_t v8 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(a1 + 160, a2);
  uint64_t v9 = a1 + 168;
  if (v9 == v8)
  {
    uint64_t v11 = a2;
    std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, a2, (uint64_t)&std::piecewise_construct, (long long **)&v11)[7] = a3;
  }
  std::mutex::unlock(v6);
  return v9 == v8;
}

void sub_23F724C10(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionImpl::removeExtraAsset(uint64_t a1, const void **a2)
{
  long long v4 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__erase_unique<std::string>((uint64_t **)(a1 + 160), a2);

  std::mutex::unlock(v4);
}

void sub_23F724C80(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionImpl::addOrReplaceExtraAsset(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v6 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  char v7 = a2;
  std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 160), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7)[7] = a3;
  std::mutex::unlock(v6);
}

void sub_23F724D04(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *realityio::ImportSessionImpl::setSceneUpdatePassCompletion(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 40);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  realityio::LiveSceneManager::setSceneUpdatePassCompletion(v2, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_23F724D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV1::ImportSessionV1(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, const void **a5)
{
  void v9[5] = *MEMORY[0x263EF8340];
  v9[0] = *a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v9);
  realityio::ImportSessionImpl::ImportSessionImpl(a1, v9, a3, a4, a5);
}

void sub_23F724FEC(_Unwind_Exception *a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(v2);
  realityio::ImportSessionImpl::~ImportSessionImpl(v1);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV1::~ImportSessionV1(realityio::ImportSessionV1 *this)
{
  *(void *)this = &unk_26F349188;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)this + 50);

  realityio::ImportSessionImpl::~ImportSessionImpl(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26F349188;
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)this + 50);
  realityio::ImportSessionImpl::~ImportSessionImpl(this);

  JUMPOUT(0x2455D2BD0);
}

realityio::LiveSceneManager *realityio::ImportSessionV1::updateLiveScene(realityio::ImportSessionV1 *this, unsigned __int8 a2)
{
  long long v4 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_265071670);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(v4);
  std::string v5 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_265071670);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(v5);
  __n128 result = (realityio::LiveSceneManager *)*((void *)this + 5);
  if (result)
  {
    if (*((unsigned char *)this + 408))
    {
      *(unsigned char *)(*((void *)this + 4) + 168) = 1;
      *((unsigned char *)this + 408) = 0;
    }
    return (realityio::LiveSceneManager *)realityio::LiveSceneManager::updateLiveScene(result, a2);
  }
  return result;
}

uint64_t realityio::ImportSessionV1::rootEntity(realityio::ImportSessionV1 *this)
{
  return *((void *)this + 50);
}

uint64_t realityio::ImportSessionV1::version(realityio::ImportSessionV1 *this)
{
  return 1;
}

uint64_t realityio::ImportSessionV1::gatherFaultRecords(uint64_t result, uint64_t a2)
{
  if (atomic_load((unsigned int *)(*(void *)(result + 264) + 28))) {
    return std::function<void ()(char const*,ExecFault::Type,char const*)>::operator()(a2, (uint64_t)"status", 5, (uint64_t)"session cancelled");
  }
  return result;
}

uint64_t realityio::ImportSessionV1::getEntityAtPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1))
  {
    long long v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)a1 + 16);
    return v4(a1);
  }
  else
  {
    long long v6 = (void *)*((void *)a1 + 48);
    if (!v6) {
      goto LABEL_12;
    }
    char v7 = (void *)((char *)a1 + 384);
    do
    {
      int v8 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v6 + 4, a2);
      uint64_t v9 = v6 + 1;
      if (!v8)
      {
        uint64_t v9 = v6;
        char v7 = v6;
      }
      long long v6 = (void *)*v9;
    }
    while (*v9);
    if (v7 != (void *)((char *)a1 + 384)
      && (pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, v7 + 4) & 1) == 0)
    {
      return v7[5];
    }
LABEL_12:
    char v10 = (realityio::BuilderDependencyDAG *)*((void *)a1 + 8);
    uint64_t v11 = realityio::kEntityBuilderIdentifier;
    MEMORY[0x2455CF810](&v25, realityio::kEntityBuilderIdentifier);
    realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v10, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v25, &v30);
    std::string::size_type EntityRefFromBuilderPtr = getEntityRefFromBuilderPtr(v30);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    if ((v25 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!EntityRefFromBuilderPtr)
    {
      uint64_t v18 = *(atomic_uint **)(*((void *)a1 + 1) + 16);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v18);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v18);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v25, v13, a2);
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v18);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25))
      {
        while ((pxrInternal__aapl__pxrReserved__::UsdPrim::IsPseudoRoot((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25) & 1) == 0)
        {
          std::string::size_type v14 = (realityio::BuilderDependencyDAG *)*((void *)a1 + 8);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v25, &v18);
          MEMORY[0x2455CF810](&v22, v11);
          realityio::BuilderDependencyDAG::getBuilderAtPrimPathWithBuilderIdentifier(v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, &v23);
          std::string::size_type v15 = getEntityRefFromBuilderPtr(v23);
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
          if ((v22 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v18);
          if (v15)
          {
            std::string::size_type EntityRefFromBuilderPtr = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)a1 + 16))(a1);
            goto LABEL_33;
          }
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, (uint64_t)&v18);
          LODWORD(v25) = v18;
          uint64_t v16 = v19;
          uint64_t v19 = 0;
          uint64_t v17 = v26;
          uint64_t v26 = v16;
          if (v17) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v17);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v27, &v20);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v28);
          if ((v29 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v29 = v21;
          uint64_t v21 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
          if (v19) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v19);
          }
        }
      }
      std::string::size_type EntityRefFromBuilderPtr = 0;
LABEL_33:
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v27);
      if (v26) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v26);
      }
    }
    return EntityRefFromBuilderPtr;
  }
}

void sub_23F725544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

std::string::size_type getEntityRefFromBuilderPtr(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }
  uint64_t v3 = (std::mutex *)*((void *)v1 + 2);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)v1 + 3);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v4 = (const void **)realityio::EntityBuilder::kOutputName(v1);
  realityio::Outputs::getValue<realityio::WrappedRERef<REEntity *>>(v3, v4, v7);
  if (v7[0].__r_.__value_.__s.__data_[0]) {
    std::string::size_type size = v7[0].__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = 0;
  }
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return size;
}

void sub_23F7256C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::ImportSessionV1::dumpDiagnostics(void *a1, const void **a2)
{
  long long v6 = *(atomic_uint **)(a1[1] + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v6);
  (*(void (**)(void *))(*a1 + 16))(a1);
  uint64_t v4 = realityio::internal::dumpDiagnostics(a2, &v6);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v6);
  return v4;
}

void sub_23F725770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void realityio::ImportSessionV1::gatherStatistics(realityio::ImportSessionV1 *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load((unint64_t *)off_265071670);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(v3);
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter((uint64_t *)&__p, v4);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  MEMORY[0x2455CEA10](v5);
  long long v6 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)v16;
  if (v16 && atomic_fetch_add_explicit(v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    long long v6 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TraceReporter *))(*(void *)v6 + 8))(v6);
  }
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter((uint64_t *)&__p, v6);
  char v7 = (pxrInternal__aapl__pxrReserved__::TraceReporter *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::TraceReporter>::operator->((uint64_t *)&__p);
  uint64_t Counters = pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(v7);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)v16;
  if (v16 && atomic_fetch_add_explicit(v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v9 + 8))(v9);
  }
  for (uint64_t i = *(void **)(Counters + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v11 = i[2];
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v11 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = (void *)i[3];
    if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    uint64_t v16 = (atomic_uint *)&unk_26F33366B;
    std::string __p = v12;
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "importSessionVersion");
  uint64_t v13 = 0x3FF0000000000000;
  std::string::size_type v14 = &unk_26F33366B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  if (v17 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "importSession:Version");
  uint64_t v13 = 0x3FF0000000000000;
  std::string::size_type v14 = &unk_26F33366B;
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
  if (v17 < 0) {
    operator delete(__p);
  }
  if (*((unsigned char *)this + 409))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "importSession:TargetDirtying");
    std::string::size_type v14 = &unk_26F333523;
    LOBYTE(v13) = 1;
    pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath();
    pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
    if (v17 < 0) {
      operator delete(__p);
    }
  }
}

void sub_23F725A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL realityio::ImportSessionV1::dumpDependencies(uint64_t a1, uint64_t a2)
{
  uint64_t v99 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 64);
  std::string v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v75 = (void *)v4;
  realityio::BuilderDependencyDAG::getAllBuilders(v4, (uint64_t *)&v91);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (const char *)a2;
  }
  else {
    uint64_t v5 = *(const char **)a2;
  }
  long long v6 = fopen(v5, "w");
  if (!v6) {
    goto LABEL_191;
  }
  fwrite("digraph G {\n", 0xCuLL, 1uLL, v6);
  fwrite("node [shape=record];\n", 0x15uLL, 1uLL, v6);
  long long v88 = 0u;
  long long v89 = 0u;
  float v90 = 1.0;
  *(_OWORD *)std::string __p = 0u;
  long long v86 = 0u;
  v87[0] = 1.0;
  char v7 = v91;
  std::string v76 = v92;
  if (v91 == v92) {
    goto LABEL_190;
  }
  int v8 = 0;
  do
  {
    uint64_t v9 = (std::__shared_weak_count *)v7[1];
    if (v9 && (char v10 = std::__shared_weak_count::lock(v9)) != 0)
    {
      std::string v77 = v10;
      unint64_t v11 = *v7;
    }
    else
    {
      std::string v77 = 0;
      unint64_t v11 = 0;
    }
    snprintf(__str, 0x400uLL, "node_%i", v8);
    unint64_t v12 = realityio::WeakBuilderPtrHash::operator()((uint64_t)&v89 + 8, v7);
    unint64_t v13 = v12;
    unint64_t v14 = *((void *)&v88 + 1);
    if (*((void *)&v88 + 1))
    {
      uint8x8_t v15 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v88 + 8));
      v15.i16[0] = vaddlv_u8(v15);
      unint64_t v16 = v15.u32[0];
      if (v15.u32[0] > 1uLL)
      {
        unint64_t v2 = v12;
        if (v12 >= *((void *)&v88 + 1)) {
          unint64_t v2 = v12 % *((void *)&v88 + 1);
        }
      }
      else
      {
        unint64_t v2 = (*((void *)&v88 + 1) - 1) & v12;
      }
      char v17 = *(unint64_t **)(v88 + 8 * v2);
      if (v17)
      {
        for (unint64_t i = *v17; i; unint64_t i = *(void *)i)
        {
          unint64_t v19 = *(void *)(i + 8);
          if (v19 == v13)
          {
            if (realityio::WeakBuilderPtrEqual::operator()((uint64_t)&v90, (uint64_t *)(i + 16), v7)) {
              goto LABEL_51;
            }
          }
          else
          {
            if (v16 > 1)
            {
              if (v19 >= v14) {
                v19 %= v14;
              }
            }
            else
            {
              v19 &= v14 - 1;
            }
            if (v19 != v2) {
              break;
            }
          }
        }
      }
    }
    int v20 = operator new(0x38uLL);
    unint64_t i = (unint64_t)v20;
    std::string v80 = v20;
    std::string v81 = &v89;
    *int v20 = 0;
    v20[1] = v13;
    v20[2] = *v7;
    unint64_t v21 = v7[1];
    v20[3] = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
    }
    void v20[4] = 0;
    v20[5] = 0;
    v20[6] = 0;
    LOBYTE(v82) = 1;
    float v22 = (float)(unint64_t)(*((void *)&v89 + 1) + 1);
    if (!v14 || (float)(v90 * (float)v14) < v22)
    {
      BOOL v23 = (v14 & (v14 - 1)) != 0;
      if (v14 < 3) {
        BOOL v23 = 1;
      }
      unint64_t v24 = v23 | (2 * v14);
      unint64_t v25 = vcvtps_u32_f32(v22 / v90);
      if (v24 <= v25) {
        size_t v26 = v25;
      }
      else {
        size_t v26 = v24;
      }
      std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>((uint64_t)&v88, v26);
      unint64_t v14 = *((void *)&v88 + 1);
      if ((*((void *)&v88 + 1) & (*((void *)&v88 + 1) - 1)) != 0)
      {
        if (v13 >= *((void *)&v88 + 1)) {
          unint64_t v2 = v13 % *((void *)&v88 + 1);
        }
        else {
          unint64_t v2 = v13;
        }
      }
      else
      {
        unint64_t v2 = (*((void *)&v88 + 1) - 1) & v13;
      }
    }
    uint64_t v27 = v88;
    int v28 = *(unint64_t **)(v88 + 8 * v2);
    if (v28)
    {
      *(void *)unint64_t i = *v28;
LABEL_49:
      *int v28 = i;
      goto LABEL_50;
    }
    *(void *)unint64_t i = v89;
    *(void *)&long long v89 = i;
    *(void *)(v27 + 8 * v2) = &v89;
    if (*(void *)i)
    {
      unint64_t v29 = *(void *)(*(void *)i + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v29 >= v14) {
          v29 %= v14;
        }
      }
      else
      {
        v29 &= v14 - 1;
      }
      int v28 = (unint64_t *)(v88 + 8 * v29);
      goto LABEL_49;
    }
LABEL_50:
    std::string v80 = 0;
    ++*((void *)&v89 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v80);
LABEL_51:
    MEMORY[0x2455D2770](i + 32, __str);
    std::string::basic_string[abi:ne180100]<0>(&v94, __str);
    unint64_t v30 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v86 + 8, (uint64_t)&v94);
    unint64_t v31 = v30;
    unint64_t v32 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v33.i16[0] = vaddlv_u8(v33);
      unint64_t v34 = v33.u32[0];
      if (v33.u32[0] > 1uLL)
      {
        unint64_t i = v30;
        if ((void *)v30 >= __p[1]) {
          unint64_t i = v30 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t i = ((unint64_t)__p[1] - 1) & v30;
      }
      uint64_t v35 = (void **)*((void *)__p[0] + i);
      if (v35)
      {
        unint64_t v2 = (unint64_t)*v35;
        if (*v35)
        {
          do
          {
            unint64_t v36 = *(void *)(v2 + 8);
            if (v36 == v31)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v87, (unsigned __int8 *)(v2 + 16), (unsigned __int8 *)&v94))goto LABEL_123; {
            }
              }
            else
            {
              if (v34 > 1)
              {
                if (v36 >= v32) {
                  v36 %= v32;
                }
              }
              else
              {
                v36 &= v32 - 1;
              }
              if (v36 != i) {
                break;
              }
            }
            unint64_t v2 = *(void *)v2;
          }
          while (v2);
        }
      }
    }
    long long v37 = operator new(0x38uLL);
    std::string v80 = v37;
    std::string v81 = &v86;
    *long long v37 = 0;
    v37[1] = v31;
    *((_OWORD *)v37 + 1) = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
    std::string::size_type v38 = v94.__r_.__value_.__r.__words[2];
    memset(&v94, 0, sizeof(v94));
    v37[5] = 0;
    v37[6] = 0;
    v37[4] = v38;
    LOBYTE(v82) = 1;
    float v39 = (float)(unint64_t)(*((void *)&v86 + 1) + 1);
    if (!v32 || (float)(v87[0] * (float)v32) < v39)
    {
      BOOL v40 = (v32 & (v32 - 1)) != 0;
      if (v32 < 3) {
        BOOL v40 = 1;
      }
      unint64_t v41 = v40 | (2 * v32);
      unint64_t v42 = vcvtps_u32_f32(v39 / v87[0]);
      if (v41 <= v42) {
        int8x8_t prime = (int8x8_t)v42;
      }
      else {
        int8x8_t prime = (int8x8_t)v41;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      }
      unint64_t v32 = (unint64_t)__p[1];
      if ((void *)*(void *)&prime > __p[1]) {
        goto LABEL_79;
      }
      if ((void *)*(void *)&prime < __p[1])
      {
        unint64_t v50 = vcvtps_u32_f32((float)*((unint64_t *)&v86 + 1) / v87[0]);
        if (__p[1] < (void *)3
          || (uint8x8_t v51 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v51.i16[0] = vaddlv_u8(v51), v51.u32[0] > 1uLL))
        {
          unint64_t v50 = std::__next_prime(v50);
        }
        else
        {
          uint64_t v52 = 1 << -(char)__clz(v50 - 1);
          if (v50 >= 2) {
            unint64_t v50 = v52;
          }
        }
        if (*(void *)&prime <= v50) {
          int8x8_t prime = (int8x8_t)v50;
        }
        if (*(void *)&prime >= v32)
        {
          unint64_t v32 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_79:
            if (*(void *)&prime >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            long long v44 = operator new(8 * *(void *)&prime);
            std::string v45 = __p[0];
            __p[0] = v44;
            if (v45) {
              operator delete(v45);
            }
            uint64_t v46 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v46++) = 0;
            while (*(void *)&prime != v46);
            char v47 = (void **)v86;
            if ((void)v86)
            {
              unint64_t v48 = *(void *)(v86 + 8);
              uint8x8_t v49 = (uint8x8_t)vcnt_s8(prime);
              v49.i16[0] = vaddlv_u8(v49);
              if (v49.u32[0] > 1uLL)
              {
                if (v48 >= *(void *)&prime) {
                  v48 %= *(void *)&prime;
                }
              }
              else
              {
                v48 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v48) = &v86;
              for (j = *v47; j; unint64_t v48 = v54)
              {
                unint64_t v54 = j[1];
                if (v49.u32[0] > 1uLL)
                {
                  if (v54 >= *(void *)&prime) {
                    v54 %= *(void *)&prime;
                  }
                }
                else
                {
                  v54 &= *(void *)&prime - 1;
                }
                if (v54 != v48)
                {
                  if (!*((void *)__p[0] + v54))
                  {
                    *((void *)__p[0] + v54) = v47;
                    goto LABEL_104;
                  }
                  *char v47 = (void *)*j;
                  void *j = **((void **)__p[0] + v54);
                  **((void **)__p[0] + v54) = j;
                  std::string::size_type j = v47;
                }
                unint64_t v54 = v48;
LABEL_104:
                char v47 = (void **)j;
                std::string::size_type j = (void *)*j;
              }
            }
            unint64_t v32 = (unint64_t)prime;
            goto LABEL_108;
          }
          long long v63 = __p[0];
          __p[0] = 0;
          if (v63) {
            operator delete(v63);
          }
          unint64_t v32 = 0;
          __p[1] = 0;
        }
      }
LABEL_108:
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v31 >= v32) {
          unint64_t i = v31 % v32;
        }
        else {
          unint64_t i = v31;
        }
      }
      else
      {
        unint64_t i = (v32 - 1) & v31;
      }
    }
    uint64_t v55 = (unint64_t *)*((void *)__p[0] + i);
    unint64_t v2 = (unint64_t)v80;
    if (v55)
    {
      *(void *)std::string v80 = *v55;
LABEL_121:
      *uint64_t v55 = v2;
      goto LABEL_122;
    }
    *(void *)std::string v80 = v86;
    *(void *)&long long v86 = v2;
    *((void *)__p[0] + i) = &v86;
    if (*(void *)v2)
    {
      unint64_t v56 = *(void *)(*(void *)v2 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v56 >= v32) {
          v56 %= v32;
        }
      }
      else
      {
        v56 &= v32 - 1;
      }
      uint64_t v55 = (unint64_t *)((char *)__p[0] + 8 * v56);
      goto LABEL_121;
    }
LABEL_122:
    std::string v80 = 0;
    ++*((void *)&v86 + 1);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v80);
LABEL_123:
    unint64_t v58 = *v7;
    unint64_t v57 = v7[1];
    if (v57) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v59 = *(std::__shared_weak_count **)(v2 + 48);
    *(void *)(v2 + 40) = v58;
    *(void *)(v2 + 48) = v57;
    if (v59) {
      std::__shared_weak_count::__release_weak(v59);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    long long v60 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *(**)(long long *__return_ptr, unint64_t))(*(void *)v11 + 24))(&v83, v11);
    if ((v83 & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v60);
    }
    std::string::basic_string[abi:ne180100]<0>(&v80, "com.apple.");
    std::string::basic_string[abi:ne180100]<0>(&v94, "");
    pxrInternal__aapl__pxrReserved__::TfStringReplace();
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82) < 0) {
      operator delete(v80);
    }
    if ((v83 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t Text = (const char *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 8));
    long long v62 = &v84;
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v62 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    fprintf(v6, "%s [label=\"%s:%s\" ];\n", __str, Text, (const char *)v62);
    if ((SHIBYTE(v84.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v77) {
        goto LABEL_142;
      }
LABEL_141:
      std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      goto LABEL_142;
    }
    operator delete(v84.__r_.__value_.__l.__data_);
    if (v77) {
      goto LABEL_141;
    }
LABEL_142:
    ++v8;
    v7 += 2;
  }
  while (v7 != v76);
  uint64_t v64 = v91;
  for (std::string::size_type k = v92; v64 != k; v64 += 2)
  {
    long long v83 = 0uLL;
    char v66 = (std::__shared_weak_count *)v64[1];
    if (v66)
    {
      *((void *)&v83 + 1) = std::__shared_weak_count::lock(v66);
      if (*((void *)&v83 + 1)) {
        *(void *)&long long v83 = *v64;
      }
    }
    *(void *)std::string __str = 0;
    uint64_t v97 = 0;
    uint64_t v98 = 0;
    std::string v80 = 0;
    std::string v81 = 0;
    uint64_t v82 = 0;
    realityio::BuilderWorkingSetPriorityQueue<std::shared_ptr<realityio::Builder>>::insert((uint64_t *)&v80, &v83);
    realityio::BuilderDependencyDAG::findDownstreamDependencies(v75, (long long **)&v80, (uint64_t *)__str);
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v83;
    if (*((void *)&v83 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v83 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    long long v78 = &v84;
    std::string v67 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::__emplace_unique_key_args<std::weak_ptr<realityio::Builder>,std::piecewise_construct_t const&,std::tuple<std::weak_ptr<realityio::Builder>&&>,std::tuple<>>((uint64_t)&v88, (unint64_t *)&v84, (_OWORD **)&v78);
    if (*((char *)v67 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v94, (const std::string::value_type *)v67[4], v67[5]);
    }
    else {
      std::string v94 = *(std::string *)(v67 + 4);
    }
    if (v84.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v84.__r_.__value_.__l.__size_);
    }
    uint64_t v68 = *(void *)__str;
    uint64_t v69 = v97;
    while (v68 != v69)
    {
      if (*(void *)v68 != (void)v83)
      {
        long long v78 = *(std::string **)v68;
        uint64_t v70 = *(std::__shared_weak_count **)(v68 + 8);
        char v79 = v70;
        if (v70) {
          atomic_fetch_add_explicit(&v70->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v95 = &v78;
        std::string v71 = std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::__emplace_unique_key_args<std::weak_ptr<realityio::Builder>,std::piecewise_construct_t const&,std::tuple<std::weak_ptr<realityio::Builder>&&>,std::tuple<>>((uint64_t)&v88, (unint64_t *)&v78, (_OWORD **)&v95);
        if (*((char *)v71 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v84, (const std::string::value_type *)v71[4], v71[5]);
        }
        else {
          std::string v84 = *(std::string *)(v71 + 4);
        }
        if (v79) {
          std::__shared_weak_count::__release_weak(v79);
        }
        if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v72 = &v94;
        }
        else {
          int v72 = (std::string *)v94.__r_.__value_.__r.__words[0];
        }
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v73 = &v84;
        }
        else {
          int v73 = (std::string *)v84.__r_.__value_.__r.__words[0];
        }
        fprintf(v6, "%s -> %s \n", (const char *)v72, (const char *)v73);
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
      }
      v68 += 16;
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v94);
    std::string v80 = __str;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    if (*((void *)&v83 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
    }
  }
LABEL_190:
  fwrite("}\n", 2uLL, 1uLL, v6);
  fclose(v6);
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>>>::~__hash_table((uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::~__hash_table((uint64_t)&v88);
LABEL_191:
  *(void *)std::string __str = &v91;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
  return v6 != 0;
}

void sub_23F726614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,char *a60)
{
  a60 = &a50;
  std::vector<std::weak_ptr<realityio::Builder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
  _Unwind_Resume(a1);
}

uint64_t *realityio::ImportSessionImpl::getPrototypeEntityRoot(realityio::ImportSessionImpl *this)
{
  void v6[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t *)((char *)this + 256);
  if (!*((void *)this + 32))
  {
    uint64_t v2 = REEntityCreate();
    RENetworkComponentGetComponentType();
    v6[0] = &unk_26F33C750;
    void v6[3] = v6;
    uint64_t v3 = REEntityGetOrAddComponentByClass();
    std::function<void ()(REComponent *)>::operator()((uint64_t)v6, v3);
    RENetworkMarkComponentDirty();
    std::__function::__value_func<void ()(REComponent *)>::~__value_func[abi:ne180100](v6);
    v6[0] = v2;
    if (v2) {
      RERetain();
    }
    uint64_t v4 = *v1;
    if (*v1 != v2)
    {
      uint64_t *v1 = v2;
      v6[0] = v4;
    }
    realityio::WrappedRERef<REEntity *>::~WrappedRERef(v6);
    RERelease();
  }
  return v1;
}

void sub_23F726860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t realityio::ImportSessionImpl::generateOverridePrimPathToEntityForActiveSceneAssets(void *a1, uint64_t a2)
{
  uint64_t v24 = a2;
  uint64_t v3 = a1 + 48;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy((void *)a1[48]);
  a1[48] = 0;
  a1[49] = 0;
  a1[47] = v3;
  uint64_t result = REComponentClassFromName();
  if (result)
  {
    long long v23 = 0u;
    memset(v22, 0, sizeof(v22));
    std::deque<REEntity *>::push_back(v22, &v24);
    for (uint64_t i = *((void *)&v23 + 1); *((void *)&v23 + 1); uint64_t i = *((void *)&v23 + 1))
    {
      uint64_t v6 = *(void *)(*(void *)(*((void *)&v22[0] + 1) + (((unint64_t)v23 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v23 & 0x1FF));
      *(void *)&long long v23 = v23 + 1;
      *((void *)&v23 + 1) = i - 1;
      if ((unint64_t)v23 >= 0x400)
      {
        operator delete(**((void ***)&v22[0] + 1));
        *((void *)&v22[0] + 1) += 8;
        *(void *)&long long v23 = v23 - 512;
      }
      ChildCFIndex Count = REEntityGetChildCount();
      if (ChildCount)
      {
        for (uint64_t j = 0; j != ChildCount; ++j)
        {
          __p[0] = (void *)REEntityGetChild();
          std::deque<REEntity *>::push_back(v22, __p);
        }
      }
      if (REEntityGetCustomComponent())
      {
        Object = (char **)RECustomComponentGetObject();
        std::string::basic_string[abi:ne180100]<0>(__p, *Object);
        MEMORY[0x2455CF7A0](v19, __p);
        uint64_t v16 = v6;
        if (v6) {
          RERetain();
        }
        LODWORD(v20) = v19[0];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
        HIDWORD(v20) = v19[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
        uint64_t v21 = v16;
        uint64_t v16 = 0;
        char v10 = (void *)*v3;
        unint64_t v11 = v3;
        unint64_t v12 = v3;
        if (!*v3) {
          goto LABEL_20;
        }
        unint64_t v11 = v3;
        while (1)
        {
          while (1)
          {
            unint64_t v12 = v10;
            unint64_t v13 = v10 + 4;
            if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(&v20, v10 + 4)) {
              break;
            }
            char v10 = (void *)*v12;
            unint64_t v11 = v12;
            if (!*v12) {
              goto LABEL_20;
            }
          }
          if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v13, &v20)) {
            break;
          }
          unint64_t v11 = v12 + 1;
          char v10 = (void *)v12[1];
          if (!v10) {
            goto LABEL_20;
          }
        }
        if (!*v11)
        {
LABEL_20:
          unint64_t v14 = operator new(0x30uLL);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14 + 8, &v20);
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(v14 + 9, (_DWORD *)&v20 + 1);
          *((void *)v14 + 5) = v21;
          uint64_t v21 = 0;
          *(void *)unint64_t v14 = 0;
          *((void *)v14 + 1) = 0;
          *((void *)v14 + 2) = v12;
          *unint64_t v11 = v14;
          uint64_t v15 = *(void *)a1[47];
          if (v15)
          {
            a1[47] = v15;
            unint64_t v14 = (_DWORD *)*v11;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[48], (uint64_t *)v14);
          ++a1[49];
        }
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v21);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v20);
        realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    return std::deque<unsigned long>::~deque[abi:ne180100](v22);
  }
  return result;
}

void sub_23F726B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>::~pair(uint64_t a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

BOOL realityio::ImportSessionV1::updateInProgress(realityio::ImportSessionV1 *this)
{
  return *(void *)(*((void *)this + 5) + 40) != 0;
}

void realityio::ImportSession::~ImportSession(realityio::ImportSession *this)
{
  realityio::ImportSession::~ImportSession(this);

  JUMPOUT(0x2455D2BD0);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(void *)this = &unk_26F3490E8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 248, *((void **)this + 32));
  std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(*((void **)this + 29));
  std::mutex::~mutex((std::mutex *)((char *)this + 160));
  uint64_t v3 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v3) {
    realityio::ImportSession::SessionMeshAssetCacheDeleter::operator()(v2, v3);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 88));
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

atomic_uint **realityio::ImportSession::description@<X0>(realityio::ImportSession *this@<X0>, CFStringRef *a2@<X8>)
{
  uint64_t v3 = (void *)*((void *)this + 2);
  *a2 = 0;
  int v8 = *(atomic_uint **)(v3[1] + 16);
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v8);
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v8);
  uint64_t v5 = v3[2];
  uint64_t v6 = (*(uint64_t (**)(void *))(*v3 + 72))(v3);
  *a2 = CFStringCreateWithFormat(0, 0, @"<ImportSession: %p { stage: %p, engine: %p, version: %d }>", v3, v4, v5, v6);
  return pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::~TfRefPtr(&v8);
}

void sub_23F726CFC(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::SessionMeshAssetCache::CryptographicHash>,0>((uint64_t)a2 + 28);
    operator delete(a2);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::SessionMeshAssetCache::CryptographicHash>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::SessionMeshAssetCache::CryptographicHash>::~pair(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::destroy(a1, a2[1]);
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(a2 + 8);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<realityio::SessionMeshAssetCache::CryptographicHash,std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>,std::less<realityio::SessionMeshAssetCache::CryptographicHash>,true>,std::allocator<std::__value_type<realityio::SessionMeshAssetCache::CryptographicHash,realityio::WrappedRERef<REAsset *>>>>::find<realityio::SessionMeshAssetCache::CryptographicHash>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  uint64_t v6 = v2;
  do
  {
    unsigned int v7 = *((unsigned __int8 *)v3 + 32);
    unsigned int v8 = *a2;
    if (v7 == v5)
    {
      uint64_t v9 = 0;
      while (v9 != 31)
      {
        unsigned int v7 = *((unsigned __int8 *)v3 + v9 + 33);
        unsigned int v8 = a2[++v9];
        if (v7 != v8) {
          goto LABEL_7;
        }
      }
      uint64_t v6 = v3;
    }
    else
    {
LABEL_7:
      if (v7 > v8) {
        ++v3;
      }
      else {
        uint64_t v6 = v3;
      }
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v6 == v2) {
    return v2;
  }
  unsigned int v10 = *((unsigned __int8 *)v6 + 32);
  if (v5 != v10)
  {
LABEL_17:
    if (v5 <= v10) {
      return v6;
    }
    return v2;
  }
  uint64_t v11 = 0;
  while (v11 != 31)
  {
    unsigned int v5 = a2[v11 + 1];
    unsigned int v10 = *((unsigned __int8 *)v6 + v11++ + 33);
    if (v5 != v10) {
      goto LABEL_17;
    }
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::SessionMeshAssetCache::CryptographicHash>>>::__erase_unique<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t **a1, void *a2)
{
  uint64_t v3 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,unsigned int>>>::find<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::SessionMeshAssetCache::CryptographicHash>,0>((uint64_t)v4 + 28);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<realityio::SessionMeshAssetCache::CryptographicHash>::__emplace_unique_key_args<realityio::SessionMeshAssetCache::CryptographicHash,realityio::SessionMeshAssetCache::CryptographicHash const&>(uint64_t *result, unsigned __int8 *a2, _OWORD *a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (!v5)
  {
    unsigned int v10 = result + 1;
    goto LABEL_20;
  }
  unsigned int v9 = *a2;
  unsigned int v7 = a2 + 1;
  unsigned int v8 = v9;
  while (1)
  {
    while (1)
    {
      unsigned int v10 = (void *)v5;
      unsigned int v11 = *(unsigned __int8 *)(v5 + 25);
      unsigned int v12 = v8;
      unsigned int v13 = v11;
      if (v8 == v11) {
        break;
      }
LABEL_7:
      if (v12 <= v13) {
        goto LABEL_10;
      }
      uint64_t v5 = *v10;
      uint64_t v6 = (uint64_t **)v10;
      if (!*v10) {
        goto LABEL_20;
      }
    }
    uint64_t v14 = 0;
    while (v14 != 31)
    {
      unsigned int v12 = v7[v14];
      unsigned int v13 = *((unsigned __int8 *)v10 + v14++ + 26);
      if (v12 != v13) {
        goto LABEL_7;
      }
    }
LABEL_10:
    unsigned int v15 = v8;
    if (v8 == v11) {
      break;
    }
LABEL_14:
    if (v11 <= v15) {
      return result;
    }
    uint64_t v6 = (uint64_t **)(v10 + 1);
    uint64_t v5 = v10[1];
    if (!v5) {
      goto LABEL_20;
    }
  }
  uint64_t v16 = 0;
  while (v16 != 31)
  {
    unsigned int v11 = *((unsigned __int8 *)v10 + v16 + 26);
    unsigned int v15 = v7[v16++];
    if (v11 != v15) {
      goto LABEL_14;
    }
  }
  if (!v10)
  {
LABEL_20:
    char v17 = (char *)operator new(0x40uLL);
    long long v18 = a3[1];
    *(_OWORD *)(v17 + 25) = *a3;
    *(_OWORD *)(v17 + 41) = v18;
    *(void *)char v17 = 0;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 2) = v10;
    uint64_t *v6 = (uint64_t *)v17;
    uint64_t v19 = *(void *)*v4;
    if (v19)
    {
      *uint64_t v4 = v19;
      uint64_t v20 = *v6;
    }
    else
    {
      uint64_t v20 = (uint64_t *)v17;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v20);
    ++v4[2];
  }
  return result;
}

std::string *std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>::pair[abi:ne180100]<pxrInternal__aapl__pxrReserved__::SdfAssetPath&,pxrInternal__aapl__pxrReserved__::SdfPath&,0>(std::string *this, long long *a2, _DWORD *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  unsigned int v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&this[2], a3);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this[2].__r_.__value_.__r.__words + 1, a3 + 1);
  return this;
}

void sub_23F727148(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()) {
    return 1;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<()) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::operator<((void *)(a2 + 48), (void *)(a3 + 48));
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 48);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<realityio::TextureImportOperationSettings>>,0>(uint64_t a1)
{
  std::__tree<realityio::TextureImportOperationSettings>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::default_delete<realityio::BuilderDependencyDAG>::operator()[abi:ne180100](uint64_t a1)
{
  realityio::WrappedRERef<REEngine *>::~WrappedRERef((void *)(a1 + 120));
  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::~__hash_table(a1 + 80);
  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::~__hash_table(a1 + 40);
  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::~__hash_table(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>,std::equal_to<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery>,realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::BuilderAtPrimPathQuery,std::weak_ptr<realityio::Builder>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::__unordered_map_hasher<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,realityio::BuilderDependencyDAG::SocketQuery::Hash,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,true>,std::__unordered_map_equal<realityio::BuilderDependencyDAG::SocketQuery,std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>,std::equal_to<realityio::BuilderDependencyDAG::SocketQuery>,realityio::BuilderDependencyDAG::SocketQuery::Hash,true>,std::allocator<std::__hash_value_type<realityio::BuilderDependencyDAG::SocketQuery,std::pair<std::weak_ptr<realityio::Builder>,pxrInternal__aapl__pxrReserved__::TfToken>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,realityio::BuilderDependencyDAG::BuilderGraphNode>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REEntity *>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REEntity *>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REEntity *>>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REEntity *>::~WrappedRERef((void *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26F349230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F349230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::operator()(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (realityio::UsdStageStateTracker::*)(realityio::UsdStageDelta const&),realityio::UsdStageStateTracker*&,std::placeholders::__ph<1> const&>>,void ()(realityio::UsdStageDelta const&)>::target_type()
{
}

uint64_t std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>>>::__erase_unique<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>>>::find<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath> const,REAsset *>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void *std::__tree<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::__map_value_compare<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>,std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>,true>,std::allocator<std::__value_type<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>,REAsset *>>>::find<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  long long v6 = (void *)(a1 + 8);
  do
  {
    int v7 = std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    long long v8 = v3 + 1;
    if (!v7)
    {
      long long v8 = v3;
      long long v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2
    || std::less<std::pair<pxrInternal__aapl__pxrReserved__::SdfAssetPath,pxrInternal__aapl__pxrReserved__::SdfPath>>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
  {
    return v2;
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 32);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_23F7277E4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<realityio::TextureImportOperationSettings>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<realityio::TextureImportOperationSettings>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<realityio::TextureImportOperationSettings>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 4);
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_23F727984(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<realityio::TextureImportOperationSettings>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<realityio::TextureImportOperationSettings>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3492F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::LiveSceneManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3492F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::LiveSceneManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<realityio::Builder>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::weak_ptr<realityio::Builder> const,std::string>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<realityio::Builder>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<realityio::Builder>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void *std::__hash_table<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,std::__unordered_map_hasher<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrHash,realityio::WeakBuilderPtrEqual,true>,std::__unordered_map_equal<std::weak_ptr<realityio::Builder>,std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,realityio::WeakBuilderPtrEqual,realityio::WeakBuilderPtrHash,true>,std::allocator<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>>>::__emplace_unique_key_args<std::weak_ptr<realityio::Builder>,std::piecewise_construct_t const&,std::tuple<std::weak_ptr<realityio::Builder>&&>,std::tuple<>>(uint64_t a1, unint64_t *a2, _OWORD **a3)
{
  int v7 = (void *)(a1 + 24);
  unint64_t v8 = realityio::WeakBuilderPtrHash::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unsigned int v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (realityio::WeakBuilderPtrEqual::operator()(a1 + 32, i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x38uLL);
  v28[0] = i;
  v28[1] = a1 + 16;
  *uint64_t i = 0;
  i[1] = v9;
  char v17 = *a3;
  *((_OWORD *)i + 1) = **a3;
  void *v17 = 0;
  v17[1] = 0;
  i[5] = 0;
  i[6] = 0;
  i[4] = 0;
  char v29 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::__unordered_map_hasher<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::hash<std::shared_ptr<realityio::Builder>>,std::equal_to<std::shared_ptr<realityio::Builder>>,true>,std::__unordered_map_equal<std::shared_ptr<realityio::Builder>,std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>,std::equal_to<std::shared_ptr<realityio::Builder>>,std::hash<std::shared_ptr<realityio::Builder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<realityio::Builder>,unsigned int>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *uint64_t i = *v25;
LABEL_38:
    *unint64_t v25 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v16;
  *uint64_t v16 = i;
  *(void *)(v24 + 8 * v3) = v16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  v28[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28);
  return i;
}

void sub_23F727F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::weak_ptr<realityio::Builder>,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

realityio::tokens::AnimationBuilderTokens_StaticTokenType *realityio::tokens::AnimationBuilderTokens_StaticTokenType::AnimationBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "primvars:realitykit:stageTimeLine", 0) + 8);
  MEMORY[0x2455CF820](v2, "primvars:realitykit:animationLibrary:timelines", 0);
  MEMORY[0x2455CF820](this + 2, "primvars:realitykit:animationLibrary:times", 0);
  MEMORY[0x2455CF820](this + 3, "autoPlay", 0);
  unint64_t v3 = *this;
  char v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      char v17 = v4;
    }
  }
  uint64_t v5 = *v2;
  float v18 = v5;
  if ((v5 & 7) != 0)
  {
    long long v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      float v18 = v6;
    }
  }
  int v7 = this[2];
  float v19 = v7;
  if ((v7 & 7) != 0)
  {
    unint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      float v19 = v8;
    }
  }
  unint64_t v9 = this[3];
  BOOL v20 = v9;
  if ((v9 & 7) != 0)
  {
    unint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      BOOL v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  uint8x8_t v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    unsigned int v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    unint64_t v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::AnimationBuilderTokens_StaticTokenType *)this;
}

void sub_23F728250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t realityio::PhysicsMaterialAssetBuilder::kOutputName(realityio::PhysicsMaterialAssetBuilder *this)
{
  {
    operator new();
  }
  return realityio::PhysicsMaterialAssetBuilder::kOutputName(void)::kOutputName;
}

void sub_23F728388(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

realityio::PhysicsMaterialAssetBuilder *realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(realityio::PhysicsMaterialAssetBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[4] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "PhysicsMaterialAssetBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kPhysicsMaterialAssetBuilderIdentifier);
  realityio::generatePhysicsMaterialsDirtyStageSubscription(&v5);
  v12[0] = &unk_26F3493C8;
  uint64_t v12[3] = v12;
  v11[0] = &unk_26F349448;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F349350;
  *((void *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((realityio::PhysicsMaterialAssetBuilder *)((char *)this + 288));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

void sub_23F72852C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  unint64_t v26 = v25;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v26);
  realityio::DynamicBuilder::~DynamicBuilder(v24);
  _Unwind_Resume(a1);
}

uint64_t realityio::PhysicsMaterialAssetBuilder::run(realityio::PhysicsMaterialAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v37, v5, v4);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v34 = 0;
  MEMORY[0x2455CF810](buf, "physics:restitution");
  int v7 = (unint64_t *)MEMORY[0x263F90580];
  unint64_t v8 = atomic_load(MEMORY[0x263F90580]);
  if (!v8) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData();
  }
  UsdPhysicsAttributeDoubleValue = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)&v37, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 48), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v36, v6);
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((UsdPhysicsAttributeDoubleValue & 1) == 0)
  {
    char v10 = *(id *)(realityio::logObjects(UsdPhysicsAttributeDoubleValue) + 24);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v33);
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = Text;
      _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_DEFAULT, "Unable to get restitution attribute value for %s", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    }
  }
  MEMORY[0x2455CF810](buf, "physics:staticFriction");
  unint64_t v13 = atomic_load(v7);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData();
  }
  uint64_t v14 = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)&v37, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v13 + 40), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v35, v12);
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v14 & 1) == 0)
  {
    unint64_t v15 = *(id *)(realityio::logObjects(v14) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v33);
      uint64_t v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_DEFAULT, "Unable to get static friction attribute value for %s", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    }
  }
  MEMORY[0x2455CF810](buf, "physics:dynamicFriction");
  unint64_t v18 = atomic_load(v7);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::AaplUsdPhysicsTokensType>>::_TryToCreateData();
  }
  float v19 = (realityio *)realityio::getUsdPhysicsAttributeDoubleValue((realityio *)&v37, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v18 + 32), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, v17);
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v19 & 1) == 0)
  {
    BOOL v20 = *(id *)(realityio::logObjects(v19) + 24);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v37, &v33);
      uint64_t v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl(&dword_23F4EA000, v20, OS_LOG_TYPE_DEFAULT, "Unable to get dynamic friction attribute value for %s", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
    }
  }
  unint64_t v22 = *(NSObject **)(realityio::logObjects(v19) + 24);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_23F4EA000, v22, OS_LOG_TYPE_INFO, "Creating and Saving physics material reference", buf, 2u);
  }
  *(void *)std::string buf = 0;
  uint64_t v23 = *((void *)this + 35);
  if (v23)
  {
    *((void *)this + 35) = 0;
    *(void *)std::string buf = v23;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(buf);
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  uint64_t v33 = MEMORY[0x2455CDC30](ServiceLocator);
  uint64_t v25 = *((void *)a2 + 6);
  unint64_t v26 = operator new(0x30uLL);
  *unint64_t v26 = &unk_26F3494C8;
  v26[1] = &v33;
  v26[2] = &v36;
  void v26[3] = &v35;
  v26[4] = &v34;
  v26[5] = this;
  unint64_t v42 = v26;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v25 + 16))(v25, buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  uint64_t v32 = *((void *)this + 35);
  if (v32) {
    RERetain();
  }
  realityio::Builder::addAsset((uint64_t *)this, &v32, 0);
  uint64_t v27 = (realityio::PhysicsMaterialAssetBuilder *)realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v32);
  uint64_t v29 = *((void *)this + 2);
  int v28 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v30 = (long long *)realityio::PhysicsMaterialAssetBuilder::kOutputName(v27);
  *(void *)std::string buf = *((void *)this + 35);
  realityio::Outputs::storeValue<REAsset *>(v29, v30, (uint64_t *)buf);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v39);
  uint64_t result = v38;
  if (v38) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v38);
  }
  return result;
}

void sub_23F728A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F728B48()
{
}

void realityio::PhysicsMaterialAssetBuilder::clear(realityio::PhysicsMaterialAssetBuilder *this, realityio::Inputs *a2)
{
  uint64_t v5 = (std::mutex *)*((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = (const void **)realityio::PhysicsMaterialAssetBuilder::kOutputName(this);
  realityio::Outputs::getRawValue<REAsset *>(v5, v6, (uint64_t)&v14);
  int v8 = v14;
  if (!(_BYTE)v14)
  {
    int v7 = (realityio::PhysicsMaterialAssetBuilder *)&v13;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v5 = (std::mutex *)v13.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if (!(_BYTE)v14 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v13 = __p;
      uint64_t v5 = (std::mutex *)__p.__r_.__value_.__r.__words[0];
      char v2 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v8)
  {
    uint64_t v10 = *((void *)this + 2);
    unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint8x8_t v11 = (const void **)realityio::PhysicsMaterialAssetBuilder::kOutputName(v7);
    std::mutex::lock((std::mutex *)(v10 + 64));
    if (v10 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v10 + 40, v11))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v10 + 40), v11); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v10, (unsigned __int8 *)v11);
    }
    std::mutex::unlock((std::mutex *)(v10 + 64));
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v14 = 0;
    uint64_t v12 = *((void *)this + 35);
    if (v12)
    {
      *((void *)this + 35) = 0;
      uint64_t v14 = v12;
    }
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v14);
  }
  else if (v2 < 0)
  {
    operator delete(v5);
  }
}

void sub_23F728CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a15 && a23 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void realityio::PhysicsMaterialAssetBuilder::~PhysicsMaterialAssetBuilder(void **this)
{
  realityio::PhysicsMaterialAssetBuilder::~PhysicsMaterialAssetBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t vars8;

  *this = &unk_26F349350;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 42));
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  if (*((char *)this + 311) < 0) {
    operator delete(this[36]);
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(this + 35);
  *this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](this + 27);
  char v2 = (std::__shared_weak_count *)this[26];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (unint64_t)this[24];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = (unint64_t)this[23];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder((realityio::Builder *)this);
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F3493C8;
  return result;
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F3493C8;
}

char *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()@<X0>(void *a1@<X8>)
{
  char v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  a1[1] = v2;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t result = v2 + 24;
  *a1 = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F349448;
  return result;
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F349448;
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  char v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)char v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1065353216;
  uint64_t v4 = realityio::PhysicsMaterialAssetBuilder::kOutputName((realityio::PhysicsMaterialAssetBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v7 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>(v4, (std::string::size_type *)(v5 + 128), &v7, &v8);
  long long v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_23F7290F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::PhysicsMaterialAssetBuilder::PhysicsMaterialAssetBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char v2 = (char *)operator new(0x30uLL);
  *(void *)char v2 = &unk_26F3494C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F3494C8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = REAssetManagerPhysicsMaterialAssetCreate2();
  uint64_t v5 = v2;
  if (v2) {
    RERetain();
  }
  uint64_t v3 = *(void *)(v1 + 280);
  if (v3 != v2)
  {
    *(void *)(v1 + 280) = v2;
    uint64_t v5 = v3;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  return RERelease();
}

uint64_t std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::PhysicsMaterialAssetBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType *realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType::ArbitraryComponentBuilderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(MEMORY[0x2455CF820](this, "__realitykit_offset", 0) + 8);
  MEMORY[0x2455CF820](v2, "__realitykit_type", 0);
  MEMORY[0x2455CF820](this + 2, "info:id", 0);
  uint64_t v3 = *this;
  unint64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    long long v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  int v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    std::string::size_type v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  unint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint8x8_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    std::string v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType *)this;
}

void sub_23F7294A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t realityio::internal::assertHandler(unsigned int a1, const char *a2, const char *a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (a1 > 1)
  {
    uint64_t v14 = 0;
    os_log_type_t v15 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    int v26 = 0;
    *(void *)uint64_t v18 = 0xE00000001;
    int v19 = 1;
    pid_t v20 = getpid();
    size_t v17 = 648;
    sysctl(v18, 4u, buf, &v17, 0, 0);
    if ((v26 & 0x800) != 0) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = 2;
    }
    os_log_type_t v15 = OS_LOG_TYPE_ERROR;
  }
  if (os_log_type_enabled(&_os_log_internal, v15))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 2080;
    uint64_t v25 = a2;
    _os_log_impl(&dword_23F4EA000, &_os_log_internal, v15, "Assertion failed (%s:%i). Condition: %s", buf, 0x1Cu);
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "Assertion failed (%s:%i). Condition: %s\nCheck os_log for additional details!\n", a3, a4, a2);
  if (a5 >= 1)
  {
    *(void *)std::string buf = &a10;
    os_log_with_args();
  }
  return v14;
}

uint64_t realityio::TextureAssetAction::ImportOperationSettings::idString(realityio::TextureAssetAction::ImportOperationSettings *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v27);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"swizzle_", 8);
  int v3 = *((char *)this + 71);
  if (v3 >= 0) {
    uint64_t v4 = (char *)this + 48;
  }
  else {
    uint64_t v4 = (char *)*((void *)this + 6);
  }
  if (v3 >= 0) {
    uint64_t v5 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v5 = *((void *)this + 7);
  }
  long long v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
  int v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"_", 1);
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"textureSemantic_", 16);
  int v9 = *((char *)this + 47);
  if (v9 >= 0) {
    unint64_t v10 = (char *)this + 24;
  }
  else {
    unint64_t v10 = (char *)*((void *)this + 3);
  }
  if (v9 >= 0) {
    uint64_t v11 = *((unsigned __int8 *)this + 47);
  }
  else {
    uint64_t v11 = *((void *)this + 4);
  }
  uint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  std::string v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"_", 1);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"colorSpace_", 11);
  int v15 = *((char *)this + 23);
  if (v15 >= 0) {
    uint64_t v16 = this;
  }
  else {
    uint64_t v16 = *(realityio::TextureAssetAction::ImportOperationSettings **)this;
  }
  if (v15 >= 0) {
    uint64_t v17 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v17 = *((void *)this + 1);
  }
  uint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
  int v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"_", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"downSample_", 11);
  pid_t v20 = (void *)std::ostream::operator<<();
  uint64_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"_", 1);
  __int16 v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"restictTo8_", 11);
  if (*((unsigned char *)this + 76)) {
    int v23 = "true";
  }
  else {
    int v23 = "false";
  }
  if (*((unsigned char *)this + 76)) {
    uint64_t v24 = 4;
  }
  else {
    uint64_t v24 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  std::stringbuf::str();
  v27[0] = *MEMORY[0x263F8C2B8];
  uint64_t v25 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v28[0] = v25;
  v28[1] = MEMORY[0x263F8C318] + 16;
  if (v29 < 0) {
    operator delete((void *)v28[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x2455D2B30](&v30);
}

void sub_23F72996C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void realityio::TextureAssetAction::operator()(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X3>, void *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  uint64_t ServiceLocator = REEngineGetServiceLocator();
  if (MEMORY[0x2455CDC60]())
  {
    int v7 = RERenderManagerGetRenderDevice();
    [v7 supportsTextureSwizzle];
  }
  uint64_t v79 = 0;
  memset(&v74, 0, sizeof(v74));
  std::string::basic_string[abi:ne180100]<0>(&v69, "");
  long long v62 = &v70;
  std::string::basic_string[abi:ne180100]<0>(&v70, "");
  p_p = &__p;
  std::string::size_type v8 = (pxrInternal__aapl__pxrReserved__ *)std::string::basic_string[abi:ne180100]<0>(&__p, "rgba");
  int v72 = 0;
  char v73 = 0;
  uint64_t v9 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    do
    {
      std::string v13 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v80, (const pxrInternal__aapl__pxrReserved__::VtValue *)(*a4 + v11));
      uint64_t IsImpl = pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(v13);
      if (IsImpl)
      {
        if ((BYTE8(v80) & 4) != 0) {
          uint64_t v15 = (*(uint64_t (**)(long long *))((*((void *)&v80 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v80);
        }
        else {
          uint64_t v15 = v80;
        }
        if (*(char *)(v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v15, *(void *)(v15 + 8));
        }
        else
        {
          long long v16 = *(_OWORD *)v15;
          buf.__r_.__value_.__r.__words[2] = *(void *)(v15 + 16);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
        }
        if (*(char *)(v15 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(v15 + 24), *(void *)(v15 + 32));
        }
        else
        {
          long long v23 = *(_OWORD *)(v15 + 24);
          v78.__r_.__value_.__r.__words[2] = *(void *)(v15 + 40);
          *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v23;
        }
        std::string::operator=(&v74, &v78);
        if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v78.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        uint64_t v17 = *((void *)&v80 + 1);
        if (!*((void *)&v80 + 1)) {
          goto LABEL_18;
        }
        uint64_t IsImpl = strcmp((const char *)(*(void *)(*(void *)(*((void *)&v80 + 1) & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N9realityio18TextureAssetAction23ImportOperationSettingsE" & 0x7FFFFFFFFFFFFFFFLL));
        if (IsImpl)
        {
          if ((v17 & 4) == 0
          {
LABEL_18:
            pid_t v20 = *(id *)(realityio::logObjects((realityio *)IsImpl) + 24);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              std::string::size_type Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
              std::string::size_type v22 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + v10));
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = Text;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v22;
              _os_log_impl(&dword_23F4EA000, v20, OS_LOG_TYPE_DEFAULT, "\"%s\" TextureAssetAction::Unused input \"%s\"\n", (uint8_t *)&buf, 0x16u);
            }

            goto LABEL_29;
          }
          uint64_t v17 = *((void *)&v80 + 1);
        }
        if ((v17 & 4) != 0) {
          uint64_t v18 = (*(uint64_t (**)(long long *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v80);
        }
        else {
          uint64_t v18 = v80;
        }
        std::string::operator=(&v69, (const std::string *)v18);
        std::string::operator=(&v70, (const std::string *)(v18 + 24));
        std::string::operator=(&__p, (const std::string *)(v18 + 48));
        int v19 = *(_DWORD *)(v18 + 72);
        char v73 = *(unsigned char *)(v18 + 76);
        int v72 = v19;
      }
LABEL_29:
      pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v80);
      ++v12;
      uint64_t v9 = *a3;
      v11 += 16;
      v10 += 8;
    }
    while (v12 < (a3[1] - *a3) >> 3);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver(v8);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v74;
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (!v68)
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "Could not retrieve asset path");
    ExecFault::errorValue(2, &buf, 0, a5);
  }
  (*(void (**)(const UInt8 **__return_ptr))(*(void *)v68 + 24))(&v67);
  uint64_t v24 = v67;
  CFIndex v25 = (*(uint64_t (**)(uint64_t))(*(void *)v68 + 16))(v68);
  CFDataRef v26 = CFDataCreateWithBytesNoCopy(0, v24, v25, (CFAllocatorRef)*MEMORY[0x263EFFB28]);
  CFTypeRef cf = v26;
  if (!v26)
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "Could not retrieve texture data");
    ExecFault::errorValue(2, &buf, 0, a5);
  }
  CFRetain(v26);
  CFRelease(cf);
  CFTypeRef v65 = cf;
  CFRetain(cf);
  if (!ServiceLocator)
  {
    int v28 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(&v76, "Could not find service locator");
    realityio::DetailedError::DetailedError(&v80, 0, (uint64_t)v28, (long long *)&v76);
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v80;
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)v81;
    *(std::string::size_type *)((char *)&v78.__r_.__value_.__r.__words[1] + 7) = *(void *)&v81[15];
    char v29 = v81[23];
    memset(v81, 0, sizeof(v81));
    buf.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v78.__r_.__value_.__s + 23) = v29;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
LABEL_137:
    realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&v65);
    if (buf.__r_.__value_.__s.__data_[0])
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      RETextureImportOperationSetAssetResourceName();
      v76.__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v75 = 0;
      if (RETextureImportOperationCreateAssetData())
      {
        MEMORY[0x2455CDC30](ServiceLocator);
        TextureAssetFromDataAsynCC_SHA256_CTX c = REAssetManagerCreateTextureAssetFromDataAsync();
        if (v75) {
          RERelease();
        }
        std::string::size_type v75 = TextureAssetFromDataAsync;
        realityio::ECSAction::queueForDeferredAssetLoad(a1, (uint64_t *)&v75);
        RERelease();
        *((void *)&v80 + 1) = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<realityio::WrappedRERef<REAsset *>>(void)::ti;
        pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<realityio::WrappedRERef<REAsset *>>::_PlaceCopy();
      }
      uint64_t v55 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v80, "Error importing texture ");
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v56 = &v74;
      }
      else {
        unint64_t v56 = (std::string *)v74.__r_.__value_.__r.__words[0];
      }
      if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v74.__r_.__value_.__l.__size_;
      }
      std::string::append(v55, (const std::string::value_type *)v56, size);
      ExecFault::errorValue(2, (const std::string *)&v80, (__CFError *)v76.__r_.__value_.__l.__data_, a5);
    }
    std::error_code::message(&v76, (const std::error_code *)&buf.__r_.__value_.__r.__words[1]);
    unint64_t v53 = std::string::insert(&v76, 0, "Could not instantiate import operation");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    *(void *)std::string v81 = *((void *)&v53->__r_.__value_.__l + 2);
    long long v80 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    ExecFault::errorValue(2, (const std::string *)&v80, 0, a5);
  }
  std::string::size_type v75 = RETextureImportOperationCreateWithData();
  if (!v75)
  {
    uint64_t v30 = std::system_category();
    std::string::basic_string[abi:ne180100]<0>(&v76, "Failed to create import operation");
    realityio::DetailedError::DetailedError(&v80, 0, (uint64_t)v30, (long long *)&v76);
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = v80;
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)v81;
    *(std::string::size_type *)((char *)&v78.__r_.__value_.__r.__words[1] + 7) = *(void *)&v81[15];
    char v31 = v81[23];
    memset(v81, 0, sizeof(v81));
    buf.__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&v78.__r_.__value_.__s + 23) = v31;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    goto LABEL_136;
  }
  RERetain();
  RERelease();
  if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    switch(*((unsigned char *)&v70.__r_.__value_.__s + 23))
    {
      case 3:
        if (LOWORD(v70.__r_.__value_.__l.__data_) != 24946 || v70.__r_.__value_.__s.__data_[2] != 119) {
          goto LABEL_105;
        }
        goto LABEL_104;
      case 4:
        goto LABEL_81;
      case 5:
        if (LODWORD(v70.__r_.__value_.__l.__data_) != 1869377379 || v70.__r_.__value_.__s.__data_[4] != 114) {
          goto LABEL_105;
        }
        goto LABEL_104;
      case 6:
        if ((LODWORD(v70.__r_.__value_.__l.__data_) != 1818321779 || WORD2(v70.__r_.__value_.__r.__words[0]) != 29281)
          && (LODWORD(v70.__r_.__value_.__l.__data_) != 1836216174 || WORD2(v70.__r_.__value_.__r.__words[0]) != 27745))
        {
          goto LABEL_105;
        }
        goto LABEL_104;
      case 8:
        std::string::size_type v36 = v70.__r_.__value_.__r.__words[0];
        goto LABEL_103;
      default:
        goto LABEL_105;
    }
  }
  switch(v70.__r_.__value_.__l.__size_)
  {
    case 3uLL:
      if (*(_WORD *)v70.__r_.__value_.__l.__data_ != 24946 || *(unsigned char *)(v70.__r_.__value_.__r.__words[0] + 2) != 119) {
        break;
      }
      goto LABEL_104;
    case 4uLL:
      long long v62 = (std::string *)v70.__r_.__value_.__r.__words[0];
LABEL_81:
      unsigned int v37 = bswap32(v62->__r_.__value_.__l.__data_);
      BOOL v38 = v37 >= 0x6E6F6E65;
      int v39 = v37 > 0x6E6F6E65;
      int v40 = !v38;
      if (v39 == v40) {
        goto LABEL_104;
      }
      break;
    case 5uLL:
      if (*(_DWORD *)v70.__r_.__value_.__l.__data_ != 1869377379
        || *(unsigned char *)(v70.__r_.__value_.__r.__words[0] + 4) != 114)
      {
        break;
      }
      goto LABEL_104;
    case 6uLL:
      if ((*(_DWORD *)v70.__r_.__value_.__l.__data_ != 1818321779
         || *(_WORD *)(v70.__r_.__value_.__r.__words[0] + 4) != 29281)
        && (*(_DWORD *)v70.__r_.__value_.__l.__data_ != 1836216174
         || *(_WORD *)(v70.__r_.__value_.__r.__words[0] + 4) != 27745))
      {
        break;
      }
      goto LABEL_104;
    case 8uLL:
      std::string::size_type v36 = *(void *)v70.__r_.__value_.__l.__data_;
LABEL_103:
      if (v36 == 0x726F6C6F43726468) {
LABEL_104:
      }
        RETextureImportOperationSetSemantic();
      break;
    default:
      break;
  }
LABEL_105:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v69.__r_.__value_.__l.__size_) {
      goto LABEL_119;
    }
    *(void *)&long long v80 = 0;
    long long v44 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v69.__r_.__value_.__s + 23)) {
      goto LABEL_119;
    }
    *(void *)&long long v80 = 0;
    long long v44 = &v69;
  }
  CFStringRef v45 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)v44, 0x8000100u);
  if ((void)v80) {
    CFRelease((CFTypeRef)v80);
  }
  *(void *)&long long v80 = v45;
  if (v45)
  {
    v76.__r_.__value_.__r.__words[0] = 0;
    uint64_t v46 = MEMORY[0x2455CDE90](v45);
    if (v76.__r_.__value_.__r.__words[0]) {
      CFRelease(v76.__r_.__value_.__l.__data_);
    }
    v76.__r_.__value_.__r.__words[0] = v46;
    if (v46) {
      RETextureImportOperationSetColorSpaceName();
    }
    realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v76.__r_.__value_.__l.__data_);
  }
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)&v80);
LABEL_119:
  if (v72)
  {
    RETextureImportOperationSetDimensionsMode();
    RETextureImportOperationSetDownsampleFactor();
  }
  char v47 = RETextureImportOperationCopyTextureDescriptorTemplate();
  unint64_t v48 = v47;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 1)
    {
      if (__p.__r_.__value_.__l.__size_ == 3)
      {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_128;
      }
LABEL_132:
      uint64_t v50 = 84148994;
LABEL_133:
      [v47 setSwizzle:v50];
      if (v73)
      {
        RETextureImportOperationSetPixelFormatMode();
        [v48 setPixelFormat:10];
      }
      RETextureImportOperationSetTextureDescriptorTemplate();
      std::string::size_type v51 = v75;
      std::string::size_type v75 = 0;
      buf.__r_.__value_.__s.__data_[0] = 1;
      buf.__r_.__value_.__l.__size_ = v51;
      *(void *)&long long v80 = 0;
      realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&v80);

LABEL_136:
      realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&v75);
      goto LABEL_137;
    }
    int v58 = *__p.__r_.__value_.__l.__data_;
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 1)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 3) {
        goto LABEL_132;
      }
LABEL_128:
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 26482 && p_p->__r_.__value_.__s.__data_[2] == 98)
      {
        uint64_t v50 = 17040130;
        goto LABEL_133;
      }
      goto LABEL_132;
    }
    int v58 = __p.__r_.__value_.__s.__data_[0];
  }
  if (v58 > 102)
  {
    if (v58 == 103)
    {
      uint64_t v50 = 16974595;
      goto LABEL_133;
    }
    if (v58 == 114)
    {
      uint64_t v50 = 16908802;
      goto LABEL_133;
    }
  }
  else
  {
    if (v58 == 97)
    {
      uint64_t v50 = 17106181;
      goto LABEL_133;
    }
    if (v58 == 98)
    {
      uint64_t v50 = 17040388;
      goto LABEL_133;
    }
  }
  goto LABEL_132;
}

void sub_23F72A530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20,const void *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48)
{
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v48 - 232));
  realityio::WrappedCFRef<__CFString const*>::~WrappedCFRef((const void **)(v48 - 144));
  realityio::WrappedRERef<RETextureImportOperation0 *>::~WrappedRERef(&a48);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&a20);
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(&a21);
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v48 - 160));
  _Unwind_Resume(a1);
}

void realityio::tokens::MaterialBuilderTokens_StaticTokenType::~MaterialBuilderTokens_StaticTokenType(realityio::tokens::MaterialBuilderTokens_StaticTokenType *this)
{
  unint64_t v42 = (void **)((char *)this + 328);
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v42);
  uint64_t v2 = *((void *)this + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 39);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 38);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 37);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 36);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 35);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 34);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 33);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 32);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 31);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 30);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 29);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 28);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 27);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 26);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 25);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 24);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 23);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 22);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 21);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 20);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 19);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 18);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 17);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 16);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 15);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 14);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 13);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 12);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 11);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 10);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 9);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *((void *)this + 8);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *((void *)this + 7);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *((void *)this + 6);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *((void *)this + 5);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *((void *)this + 4);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *((void *)this + 3);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *((void *)this + 2);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *((void *)this + 1);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

realityio::tokens::MaterialBuilderTokens_StaticTokenType *realityio::tokens::MaterialBuilderTokens_StaticTokenType::MaterialBuilderTokens_StaticTokenType(realityio::tokens::MaterialBuilderTokens_StaticTokenType *this)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  uint8x8_t v49 = (uint64_t *)(MEMORY[0x2455CF820](this, "Material", 0) + 8);
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]();
  MEMORY[0x2455CF820]((char *)this + 256, "UV0", 0);
  MEMORY[0x2455CF820]((char *)this + 264, "UV1", 0);
  MEMORY[0x2455CF820]((char *)this + 272, "cullMode", 0);
  MEMORY[0x2455CF820]((char *)this + 280, "front", 0);
  MEMORY[0x2455CF820]((char *)this + 288, "back", 0);
  MEMORY[0x2455CF820]((char *)this + 296, "none", 0);
  MEMORY[0x2455CF820]((char *)this + 304, "unspecified", 0);
  MEMORY[0x2455CF820]((char *)this + 312, "displayColor", 0);
  MEMORY[0x2455CF820]((char *)this + 320, "displayOpacity", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v50 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v49;
  uint64_t v51 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v52 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v53 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v54 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v55 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v56 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v57 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v58 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v59 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v60 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v61 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v62 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v63 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v64 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v65 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v66 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v67 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v68 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v69 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v70 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v71 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v72 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v73 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v74 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v75 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v76 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v77 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v78 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v79 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v80 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v81 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v82 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v83 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v84 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v85 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v86 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v87 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v88 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v89 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v89 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v90 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v90 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = 0;
  uint64_t v43 = (char *)operator new(0x148uLL);
  uint64_t v44 = 0;
  *((void *)this + 41) = v43;
  *((void *)this + 42) = v43;
  *((void *)this + 43) = v43 + 328;
  do
  {
    uint64_t v45 = *(uint64_t *)((char *)&v50 + v44);
    *(void *)&v43[v44] = v45;
    if ((v45 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v43[v44] &= 0xFFFFFFFFFFFFFFF8;
    }
    v44 += 8;
  }
  while (v44 != 328);
  *((void *)this + 42) = v43 + 328;
  for (uint64_t i = 320; i != -8; i -= 8)
  {
    uint64_t v47 = *(uint64_t *)((char *)&v50 + i);
    if ((v47 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_23F72B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void **a42,uint64_t a43,char a44)
{
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&a42);
  uint64_t v54 = 320;
  while (1)
  {
    uint64_t v55 = *(void *)(&a44 + v54);
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v54 -= 8;
    if (v54 == -8)
    {
      if ((*v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_23F72BCF0()
{
}

void sub_23F72BCF8()
{
}

void sub_23F72BD00()
{
}

void sub_23F72BD08()
{
}

void sub_23F72BD10()
{
}

void sub_23F72BD18()
{
}

void sub_23F72BD20()
{
}

void sub_23F72BD28()
{
}

void sub_23F72BD30()
{
}

void sub_23F72BD38()
{
}

void sub_23F72BD40()
{
}

void sub_23F72BD48()
{
}

void sub_23F72BD50()
{
}

void sub_23F72BD58()
{
}

void sub_23F72BD60()
{
}

void sub_23F72BD68()
{
}

void sub_23F72BD70()
{
}

void sub_23F72BD78()
{
}

void sub_23F72BD80()
{
}

void sub_23F72BD88()
{
}

void sub_23F72BD90()
{
}

void sub_23F72BD98()
{
}

void sub_23F72BDA0()
{
}

void sub_23F72BDA8()
{
}

void sub_23F72BDB0()
{
}

void sub_23F72BDB8()
{
}

void sub_23F72BDC0()
{
}

void sub_23F72BDC8()
{
}

void sub_23F72BDD0()
{
}

void sub_23F72BDD8()
{
}

void sub_23F72BDE0()
{
}

void sub_23F72BDE8()
{
}

void realityio::generateMaterialAssetsDirtyStageSubscription(void *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40CA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40CA8))
  {
    operator new();
  }
  uint64_t v3 = unk_268C40CA0;
  *a1 = _MergedGlobals_55;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_23F72C074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, char a20)
{
  MEMORY[0x2455D2BD0](v21, 0x10A1C40F82F910ELL);
  a17 = (void **)&a20;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&a17);
  MEMORY[0x2455D2BD0](v20, 0x10A1C401BF1BAA1);
  MEMORY[0x2455D2BD0](v22, 0x10A1C407F0BD61ELL);
  __cxa_guard_abort(&qword_268C40CA8);
  _Unwind_Resume(a1);
}

uint64_t realityio::isMaterialX(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!v2
    || (*(unsigned char *)(v2 + 57) & 8) != 0
    || !(*(unsigned int (**)(realityio *, const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *))(*(void *)this + 32))(this, a2))
  {
    return 0;
  }
  unint64_t v4 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceOutput(&v21, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 24));
  if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v5 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
    if (!v5) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
    }
    uint64_t v19 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v18, (uint64_t *)(v5 + 24));
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
    if (!v16 || (*(unsigned char *)(v16 + 57) & 8) != 0 || ((*(uint64_t (**)(uint64_t *))(v15 + 32))(&v15) & 1) == 0) {
      goto LABEL_22;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v11, &v16, &v17);
    uint64_t v9 = v12;
    if (!v12 || (uint64_t v10 = *((void *)v12 + 7), (v10 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v12, v8);
      uint64_t v10 = *((void *)v9 + 7);
    }
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v13);
    if (v12) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v12);
    }
    if (v10) {
      uint64_t v6 = MEMORY[0x2455D0FB0](&v21);
    }
    else {
LABEL_22:
    }
      uint64_t v6 = 0;
    MEMORY[0x2455CECB0](&v15);
    uint64_t v11 = &v18;
    std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  }
  else
  {
    uint64_t v6 = 0;
  }
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
  if (v22) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v22);
  }
  return v6;
}

void sub_23F72C454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a9);
  MEMORY[0x2455CECB0](&a13);
  a9 = &a16;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  pxrInternal__aapl__pxrReserved__::UsdShadeOutput::~UsdShadeOutput((pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)(v16 - 48));
  _Unwind_Resume(a1);
}

uint64_t realityio::hasMaterialXSurface(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this)) {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v5[0] = MEMORY[0x263F90740] + 16;
  uint64_t isMaterialX = realityio::isMaterialX((realityio *)v5, v2);
  MEMORY[0x2455CEF40](v5);
  return isMaterialX;
}

uint64_t realityio::getFileResolvedPath@<X0>(std::string *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v14[0] = MEMORY[0x263F906F0] + 16;
  unint64_t v4 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v10, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v14, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 48));
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v6);
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10)
    && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput())
  {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>();
  }
  if (SHIBYTE(v9) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    if (SHIBYTE(v9) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = __p;
    a1->__r_.__value_.__r.__words[2] = v9;
  }
  if (v7 < 0) {
    operator delete(v6);
  }
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v12);
  if (v11) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v11);
  }
  return MEMORY[0x2455CECB0](v14);
}

void sub_23F72C674(_Unwind_Exception *a1)
{
  MEMORY[0x2455CECB0](v1 - 40);
  _Unwind_Resume(a1);
}

uint64_t realityio::createMaterialInputs@<X0>(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  v55[0] = MEMORY[0x263F90740] + 16;
  unint64_t v6 = atomic_load(MEMORY[0x263F90550]);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
  }
  uint64_t v7 = *(void *)(v6 + 216);
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v7 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v78 = 0uLL;
  uint64_t v79 = 0;
  uint64_t v81 = (void **)&v78;
  char v82 = 0;
  uint64_t v8 = operator new(8uLL);
  *(void *)&long long v78 = v8;
  *((void *)&v78 + 1) = v8;
  *uint64_t v8 = v7;
  uint64_t v79 = v8 + 1;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)&v78 + 1) = v8 + 1;
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::ComputeSurfaceSource();
  uint64_t v81 = (void **)&v78;
  std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100](&v81);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v54 && (*(unsigned char *)(v54 + 57) & 8) == 0 && ((*(uint64_t (**)(uint64_t *))(v53 + 32))(&v53) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v53, &v78);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1, (int *)&v78);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)a1 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v78);
    MEMORY[0x2455CF810](v9, "diffuseColor");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v73, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v78);
    if ((v78 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CF810](&v78, "opacity");
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(&v69, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v78);
    if ((v78 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v73)
      && pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
      && pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v69)
      && (pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput() & 1) != 0
      && MEMORY[0x2455D0E10](&v73)
      && MEMORY[0x2455D0E10](&v69))
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
      if (LODWORD(v80.__r_.__value_.__r.__words[1]))
      {
        unsigned int v10 = HIDWORD(v80.__r_.__value_.__r.__words[1]);
        uint64_t v11 = v78;
        if (HIDWORD(v80.__r_.__value_.__r.__words[1]) >= 2) {
          uint64_t v12 = (long long *)v78;
        }
        else {
          uint64_t v12 = &v78;
        }
        LODWORD(v67) = *(_DWORD *)v12;
        std::string::size_type v13 = *((void *)v12 + 1);
        __p.__r_.__value_.__r.__words[0] = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 48), 1uLL, memory_order_relaxed);
        }
        if (v10 >= 2) {
          uint64_t v14 = (_DWORD *)(v11 + 16);
        }
        else {
          uint64_t v14 = &v79;
        }
        if (v10 >= 2) {
          uint64_t v15 = (_DWORD *)(v11 + 20);
        }
        else {
          uint64_t v15 = (_DWORD *)&v79 + 1;
        }
        if (v10 >= 2) {
          uint64_t v16 = (long long *)v11;
        }
        else {
          uint64_t v16 = &v78;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p.__r_.__value_.__r.__words[1], v14);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p.__r_.__value_.__r.__words[1] + 1, v15);
        std::string::size_type v17 = *((void *)v16 + 3);
        __p.__r_.__value_.__r.__words[2] = v17;
        if ((v17 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          __p.__r_.__value_.__r.__words[2] &= 0xFFFFFFFFFFFFFFF8;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
        if (v84)
        {
          if (v85 >= 2) {
            uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v81;
          }
          else {
            uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v81;
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy::_PtrProxy((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::_PtrProxy *)&v64, v18);
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v63, (uint64_t *)&__p, &__p.__r_.__value_.__r.__words[1]);
          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v62, (uint64_t *)&v65, v66);
          pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(&v61, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v67);
          pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(&v60, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v64);
          realityio::getFileResolvedPath(&v59);
          realityio::getFileResolvedPath(&v58);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v63, &v57);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v62, &v56);
          uint64_t v20 = v56;
          uint64_t v19 = v57;
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
          pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v57);
          BOOL v21 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v59, (unsigned __int8 *)&v58);
          if (pxrInternal__aapl__pxrReserved__::TfToken::operator==()) {
            int v22 = 1;
          }
          else {
            int v22 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
          }
          int v51 = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
          if (v19 == v20) {
            BOOL v21 = 1;
          }
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v58.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
          if ((v60 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          int v52 = v21 & v22 & v51;
          if ((v61 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)v62);
          pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v63);
          pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v64);
        }
        else
        {
          int v52 = 0;
        }
        pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v81);
        if ((__p.__r_.__value_.__s.__data_[16] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[2] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p.__r_.__value_.__l.__size_);
        if (__p.__r_.__value_.__r.__words[0]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        int v52 = 0;
      }
      pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v78);
    }
    else
    {
      int v52 = 0;
    }
    if ((v72 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
    if (v70) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
    }
    if ((v77 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
    if (v74) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v74);
    }
    *(void *)(a2 + 8) = 0;
    uint64_t v24 = (void *)(a2 + 8);
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = a2 + 8;
    pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v53);
    uint64_t v25 = v64;
    uint64_t v26 = (uint64_t)v65;
    if (v64 != v65)
    {
      while (1)
      {
        if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v25)
          || !pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
          || !MEMORY[0x2455D0E10](v25))
        {
          goto LABEL_121;
        }
        pxrInternal__aapl__pxrReserved__::UsdShadeUtils::GetValueProducingAttributes();
        if (v84) {
          break;
        }
LABEL_120:
        pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector((uint64_t)&v81);
LABEL_121:
        uint64_t v25 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v25 + 32);
        if (v25 == (pxrInternal__aapl__pxrReserved__::UsdObject *)v26) {
          goto LABEL_141;
        }
      }
      unsigned int v27 = v85;
      uint64_t v28 = v81;
      uint64_t v29 = &v81;
      if (v85 >= 2) {
        uint64_t v29 = (void ***)v81;
      }
      LODWORD(v73) = *(_DWORD *)v29;
      uint64_t v30 = (uint64_t)v29[1];
      uint64_t v74 = v30;
      if (v30) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 48), 1uLL, memory_order_relaxed);
      }
      if (v27 >= 2) {
        uint64_t v31 = (uint64_t *)(v28 + 2);
      }
      else {
        uint64_t v31 = &v83;
      }
      if (v27 >= 2) {
        uint64_t v32 = (_DWORD *)v28 + 5;
      }
      else {
        uint64_t v32 = (_DWORD *)&v83 + 1;
      }
      if (v27 >= 2) {
        uint64_t v33 = (void ***)v28;
      }
      else {
        uint64_t v33 = &v81;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v75, v31);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v76, v32);
      unint64_t v34 = (unint64_t)v33[3];
      unint64_t v77 = v34;
      if ((v34 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v77 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v35 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v69, &v74, &v75);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v35, v62);
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)&v59, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v73);
      Baseuint64_t Name = (uint64_t)pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)&v58, v25);
      if (v52)
      {
        Baseuint64_t Name = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
        if (BaseName)
        {
          Baseuint64_t Name = pxrInternal__aapl__pxrReserved__::TfToken::operator==();
          if (BaseName)
          {
LABEL_108:
            if ((v58.__r_.__value_.__s.__data_[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v58.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((v59.__r_.__value_.__s.__data_[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v59.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v62);
            if ((v72 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v71);
            if (v70) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v70);
            }
            if ((v77 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v75);
            if (v74) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v74);
            }
            goto LABEL_120;
          }
        }
      }
      uint64_t v37 = (void *)*v24;
      if (!*v24) {
        goto LABEL_89;
      }
      uint64_t v38 = (void *)(a2 + 8);
      do
      {
        Baseuint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v37 + 4, v62);
        uint64_t v39 = v37 + 1;
        if (!BaseName)
        {
          uint64_t v39 = v37;
          uint64_t v38 = v37;
        }
        uint64_t v37 = (void *)*v39;
      }
      while (*v39);
      if (v38 == v24
        || (Baseuint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v62, v38 + 4), BaseName))
      {
LABEL_89:
        memset(&v63, 0, sizeof(v63));
        std::string::size_type v40 = v58.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
        if ((v58.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v41 = (char *)(v40 + 16);
          if (*(char *)(v40 + 39) < 0) {
            uint64_t v41 = *(char **)v41;
          }
        }
        else
        {
          uint64_t v41 = "";
        }
        if ((v59.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          std::string::size_type EmptyString = (v59.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          std::string::size_type EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)BaseName);
        }
        uint64_t v67 = v41;
        if (*(char *)(EmptyString + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
          uint64_t v41 = v67;
        }
        else
        {
          long long v43 = *(_OWORD *)EmptyString;
          __p.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
        }
        std::string::basic_string[abi:ne180100]<0>(&v78, v41);
        std::string v80 = __p;
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v63, &v78);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79) < 0) {
          operator delete((void *)v78);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(void *)&long long v78 = v62;
        uint64_t v44 = (std::vector<std::pair<std::string, std::string>> *)(std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)a2, v62, (_DWORD **)&v78)+ 5);
        if (v44 == &v63) {
          goto LABEL_107;
        }
      }
      else
      {
        *(void *)&long long v78 = v62;
        uint64_t v45 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)a2, v62, (_DWORD **)&v78);
        memset(&v63, 0, sizeof(v63));
        uint64_t v46 = std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::string *)&v63, (long long *)v45[5], (long long *)v45[6], 0xAAAAAAAAAAAAAAABLL * ((v45[6] - v45[5]) >> 4));
        std::string::size_type v47 = v58.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
        if ((v58.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v48 = (char *)(v47 + 16);
          if (*(char *)(v47 + 39) < 0) {
            uint64_t v48 = *(char **)v48;
          }
        }
        else
        {
          uint64_t v48 = "";
        }
        if ((v59.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          std::string::size_type v49 = (v59.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          std::string::size_type v49 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v46);
        }
        uint64_t v67 = v48;
        if (*(char *)(v49 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v49, *(void *)(v49 + 8));
          uint64_t v48 = v67;
        }
        else
        {
          long long v50 = *(_OWORD *)v49;
          __p.__r_.__value_.__r.__words[2] = *(void *)(v49 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v50;
        }
        std::string::basic_string[abi:ne180100]<0>(&v78, v48);
        std::string v80 = __p;
        memset(&__p, 0, sizeof(__p));
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v63, &v78);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79) < 0) {
          operator delete((void *)v78);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(void *)&long long v78 = v62;
        uint64_t v44 = (std::vector<std::pair<std::string, std::string>> *)(std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::string>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath const&>,std::tuple<>>((uint64_t **)a2, v62, (_DWORD **)&v78)+ 5);
        if (v44 == &v63) {
          goto LABEL_107;
        }
      }
      std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v44, &v63.__begin_->first, (long long *)v63.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v63.__end_ - (char *)v63.__begin_) >> 4));
LABEL_107:
      *(void *)&long long v78 = &v63;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
      goto LABEL_108;
    }
LABEL_141:
    *(void *)&long long v78 = &v64;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeInput>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  }
  else
  {
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)a2 = a2 + 8;
  }
  MEMORY[0x2455CECB0](&v53);
  return MEMORY[0x2455CEF40](v55);
}

void sub_23F72D1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  if (a2)
  {
    if (a29 < 0) {
      operator delete(__p);
    }
    if (a35 < 0) {
      operator delete(a30);
    }
    if ((a36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((a37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a38);
    pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a42);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a46);
    pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector(v50 - 136);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a50);
    pxrInternal__aapl__pxrReserved__::TfSmallVector<pxrInternal__aapl__pxrReserved__::UsdAttribute,1u>::~TfSmallVector(v50 - 184);
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v50 - 248));
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)(v50 - 216));
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::TexcoordID::computeNormalizedName(realityio::TexcoordID *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  if (!v2)
  {
    std::to_string(&v24, *((_DWORD *)this + 1));
    uint64_t v3 = std::string::insert(&v24, 0, "UV");
    std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v3->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)this + 39) < 0) {
      operator delete(*((void **)this + 2));
    }
    std::string::size_type v6 = v23.__r_.__value_.__r.__words[0];
    *((void *)this + 2) = v4;
    *((void *)this + 3) = v6;
    *(void *)((char *)this + 31) = *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7);
    *((unsigned char *)this + 39) = v5;
    goto LABEL_70;
  }
  if ((v2 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }
  pxrInternal__aapl__pxrReserved__::TfStringToUpper();
  uint64_t v7 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
  *((void *)this + 4) = *((void *)&v24.__r_.__value_.__l + 2);
  uint64_t v8 = std::string::basic_string(&v24, (const std::string *)((char *)this + 16), 0, 9uLL, (std::allocator<char> *)&v23);
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) != 9) {
      goto LABEL_30;
    }
    if (v24.__r_.__value_.__r.__words[0] != 0x535241564D495250 || v24.__r_.__value_.__s.__data_[8] != 58) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  if (v24.__r_.__value_.__l.__size_ != 9)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  BOOL v11 = *(void *)v24.__r_.__value_.__l.__data_ != 0x535241564D495250
     || *(unsigned char *)(v24.__r_.__value_.__r.__words[0] + 8) != 58;
  operator delete(v24.__r_.__value_.__l.__data_);
  if (!v11)
  {
LABEL_26:
    uint64_t v8 = std::string::basic_string(&v24, (const std::string *)((char *)this + 16), 9uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    if (*((char *)this + 39) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)&v24.__r_.__value_.__l.__data_;
    *((void *)this + 4) = *((void *)&v24.__r_.__value_.__l + 2);
  }
LABEL_30:
  if (*((char *)this + 39) < 0) {
    unint64_t v12 = *((void *)this + 3);
  }
  else {
    unint64_t v12 = *((unsigned __int8 *)this + 39);
  }
  if (v12 >= 2)
  {
    std::string::basic_string(&v24, (const std::string *)((char *)this + 16), 0, 2uLL, (std::allocator<char> *)&v23);
    std::string::basic_string(&v23, (const std::string *)((char *)this + 16), 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v23.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (v24.__r_.__value_.__l.__size_ != 2) {
          goto LABEL_68;
        }
        uint64_t v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(v24.__r_.__value_.__r.__words[2]) != 2) {
          goto LABEL_68;
        }
        uint64_t v18 = &v24;
      }
      if (LOWORD(v18->__r_.__value_.__l.__data_) == 21587) {
        MEMORY[0x2455D2770]((char *)this + 16, "UV0");
      }
      goto LABEL_68;
    }
    if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v24.__r_.__value_.__l.__size_ != 2) {
        goto LABEL_68;
      }
      uint64_t v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if (*(_WORD *)v24.__r_.__value_.__l.__data_ != 22101) {
        goto LABEL_51;
      }
    }
    else
    {
      if (HIBYTE(v24.__r_.__value_.__r.__words[2]) != 2) {
        goto LABEL_68;
      }
      if (LOWORD(v24.__r_.__value_.__l.__data_) != 22101)
      {
        uint64_t v14 = &v24;
LABEL_51:
        if (LOWORD(v14->__r_.__value_.__l.__data_) == 21587) {
          goto LABEL_52;
        }
LABEL_68:
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v23.__r_.__value_.__l.__data_);
        }
LABEL_70:
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
LABEL_52:
    uint64_t v19 = 0;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v23;
    }
    else {
      uint64_t v20 = (std::string *)v23.__r_.__value_.__r.__words[0];
    }
    while (memchr("0123456789", v20->__r_.__value_.__s.__data_[v19], 0xAuLL))
    {
      if (size == ++v19) {
        goto LABEL_65;
      }
    }
    if (v19 != -1) {
      goto LABEL_68;
    }
LABEL_65:
    std::operator+<char>();
    if (*((char *)this + 39) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)uint64_t v7 = v21;
    *((void *)this + 4) = v22;
    goto LABEL_68;
  }
  uint64_t v15 = *(NSObject **)(realityio::logObjects((realityio *)v8) + 24);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v16 = *((void *)this + 1) & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      std::string::size_type v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0) {
        std::string::size_type v17 = *(const char **)v17;
      }
    }
    else
    {
      std::string::size_type v17 = "";
    }
    LODWORD(v24.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_DEFAULT, "Invalid Primvar Name '%s'", (uint8_t *)&v24, 0xCu);
  }
}

void sub_23F72D788(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void realityio::TexcoordID::getIndexFromName(realityio::TexcoordID *this)
{
  if (*((char *)this + 39) < 0) {
    unint64_t v2 = *((void *)this + 3);
  }
  else {
    unint64_t v2 = *((unsigned __int8 *)this + 39);
  }
  if (v2 <= 1)
  {
    *((_DWORD *)this + 1) = -1;
    return;
  }
  std::string::basic_string(&v26, (const std::string *)((char *)this + 16), 0, 2uLL, (std::allocator<char> *)&v25);
  std::string::basic_string(&v25, (const std::string *)((char *)this + 16), 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
  char v3 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v25.__r_.__value_.__l.__size_;
    if (v25.__r_.__value_.__l.__size_)
    {
LABEL_10:
      if (size >= 3) {
        goto LABEL_37;
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v26.__r_.__value_.__l.__size_ != 2) {
          goto LABEL_37;
        }
        char v5 = (std::string *)v26.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v26.__r_.__value_.__l.__data_ != 22101) {
          goto LABEL_24;
        }
      }
      else
      {
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 2) {
          goto LABEL_37;
        }
        if (LOWORD(v26.__r_.__value_.__l.__data_) != 22101)
        {
          char v5 = &v26;
LABEL_24:
          if (LOWORD(v5->__r_.__value_.__l.__data_) == 21587) {
            goto LABEL_25;
          }
LABEL_37:
          *((_DWORD *)this + 1) = -1;
          goto LABEL_38;
        }
      }
LABEL_25:
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = &v25;
      }
      else {
        uint64_t v7 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v8 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v8 = v25.__r_.__value_.__l.__size_;
      }
      if (!v8) {
        goto LABEL_43;
      }
      uint64_t v9 = 0;
      while (memchr("0123456789", v7->__r_.__value_.__s.__data_[v9], 0xAuLL))
      {
        if (v8 == ++v9) {
          goto LABEL_43;
        }
      }
      if (v9 == -1)
      {
LABEL_43:
        int v10 = atoi((const char *)v7);
        *((_DWORD *)this + 1) = v10;
        if (v10 >= 8)
        {
          *((_DWORD *)this + 1) = -1;
          BOOL v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)std::string::basic_string[abi:ne180100]<0>(&v21, "error:");
          uint64_t v13 = *((void *)this + 1);
          unint64_t v12 = (uint64_t *)((char *)this + 8);
          unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFF8;
          if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0) {
            uint64_t EmptyString = v14 + 16;
          }
          else {
            uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
          }
          int v16 = *(char *)(EmptyString + 23);
          if (v16 >= 0) {
            std::string::size_type v17 = (const std::string::value_type *)EmptyString;
          }
          else {
            std::string::size_type v17 = *(const std::string::value_type **)EmptyString;
          }
          if (v16 >= 0) {
            std::string::size_type v18 = *(unsigned __int8 *)(EmptyString + 23);
          }
          else {
            std::string::size_type v18 = *(void *)(EmptyString + 8);
          }
          uint64_t v19 = std::string::append(&v21, v17, v18);
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          std::string::size_type v23 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          MEMORY[0x2455CF830](&v24, __p);
          if (&v24 == v12)
          {
            if ((v24 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else
          {
            if ((*v12 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *unint64_t v12 = v24;
            uint64_t v24 = 0;
          }
          if (SHIBYTE(v23) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v21.__r_.__value_.__l.__data_);
          }
          char v3 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
        }
        goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  else if (*((unsigned char *)&v25.__r_.__value_.__s + 23))
  {
    std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    goto LABEL_10;
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v26.__r_.__value_.__l.__size_ != 2) {
      goto LABEL_37;
    }
    std::string::size_type v6 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) != 2) {
      goto LABEL_37;
    }
    std::string::size_type v6 = &v26;
  }
  if (LOWORD(v6->__r_.__value_.__l.__data_) != 21587) {
    goto LABEL_37;
  }
  *((_DWORD *)this + 1) = 0;
LABEL_38:
  if (v3 < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

uint64_t realityio::TexcoordID::operator<(realityio::TexcoordID *a1, realityio::TexcoordID *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v144, "ST");
  std::string::basic_string[abi:ne180100]<0>(v142, "UV");
  std::string::basic_string[abi:ne180100]<0>(&v139, "PRIMVARS:ST");
  std::string::basic_string[abi:ne180100]<0>(v137, "PRIMVARS:UV");
  uint64_t v4 = *(unsigned char *)a1 != 0;
  if ((*(unsigned char *)a1 != 0) == (*(unsigned char *)a2 != 0))
  {
    realityio::TexcoordID::getNormalizedName(a1, &__s1);
    realityio::TexcoordID::getNormalizedName(a2, &v135);
    uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    size_t size = __s1.__r_.__value_.__l.__size_;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v8 = __s1.__r_.__value_.__l.__size_;
    }
    uint64_t v9 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
    size_t v10 = v135.__r_.__value_.__l.__size_;
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v11 = v135.__r_.__value_.__l.__size_;
    }
    if (v8 != v11) {
      goto LABEL_19;
    }
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v12 = &v135;
    }
    else {
      unint64_t v12 = (std::string *)v135.__r_.__value_.__r.__words[0];
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)memcmp(__s1.__r_.__value_.__l.__data_, v12, __s1.__r_.__value_.__l.__size_);
      if (EmptyString) {
        goto LABEL_19;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == v12->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        unint64_t v12 = (std::string *)((char *)v12 + 1);
        if (!--v14) {
          goto LABEL_32;
        }
      }
LABEL_19:
      int v15 = (char)v146;
      if ((v146 & 0x80u) == 0) {
        std::string::size_type v16 = v146;
      }
      else {
        std::string::size_type v16 = v145;
      }
      if (v8 == v16)
      {
        if ((v146 & 0x80u) == 0) {
          std::string::size_type v17 = (void **)&v144;
        }
        else {
          std::string::size_type v17 = v144;
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v17, size)) {
            goto LABEL_86;
          }
        }
        else
        {
          if (!v6) {
            goto LABEL_86;
          }
          std::string::size_type v18 = &__s1;
          uint64_t v19 = v6;
          while (v18->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v17)
          {
            std::string::size_type v18 = (std::string *)((char *)v18 + 1);
            std::string::size_type v17 = (void **)((char *)v17 + 1);
            if (!--v19) {
              goto LABEL_86;
            }
          }
        }
      }
      if (v11 == v16)
      {
        if (v15 >= 0) {
          std::string::size_type v23 = (void **)&v144;
        }
        else {
          std::string::size_type v23 = v144;
        }
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(v135.__r_.__value_.__l.__data_, v23, v10)) {
            goto LABEL_276;
          }
        }
        else
        {
          if (!v9) {
            goto LABEL_276;
          }
          uint64_t v24 = &v135;
          uint64_t v25 = v9;
          while (v24->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v23)
          {
            uint64_t v24 = (std::string *)((char *)v24 + 1);
            std::string::size_type v23 = (void **)((char *)v23 + 1);
            if (!--v25) {
              goto LABEL_276;
            }
          }
        }
      }
      int v29 = (char)v141;
      if ((v141 & 0x80u) == 0) {
        std::string::size_type v30 = v141;
      }
      else {
        std::string::size_type v30 = v140;
      }
      if (v8 != v30)
      {
LABEL_76:
        if (v11 == v30)
        {
          if (v29 >= 0) {
            uint64_t v33 = (void **)&v139;
          }
          else {
            uint64_t v33 = v139;
          }
          if ((v9 & 0x80) == 0)
          {
            if (v9)
            {
              unint64_t v34 = &v135;
              while (v34->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v33)
              {
                uint64_t v4 = 0;
                unint64_t v34 = (std::string *)((char *)v34 + 1);
                uint64_t v33 = (void **)((char *)v33 + 1);
                if (!--v9) {
                  goto LABEL_295;
                }
              }
              goto LABEL_117;
            }
LABEL_276:
            uint64_t v4 = 0;
            goto LABEL_295;
          }
          if (!memcmp(v135.__r_.__value_.__l.__data_, v33, v10)) {
            goto LABEL_276;
          }
        }
LABEL_117:
        int v46 = 0;
        while (1)
        {
          std::to_string(&v133, v46);
          if ((v146 & 0x80u) == 0) {
            std::string::size_type v47 = (const std::string::value_type *)&v144;
          }
          else {
            std::string::size_type v47 = (const std::string::value_type *)v144;
          }
          if ((v146 & 0x80u) == 0) {
            std::string::size_type v48 = v146;
          }
          else {
            std::string::size_type v48 = v145;
          }
          std::string::size_type v49 = std::string::insert(&v133, 0, v47, v48);
          std::string __p = *v49;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v133.__r_.__value_.__l.__data_);
          }
          std::to_string(&v132, v46);
          if ((v143 & 0x80u) == 0) {
            uint64_t v50 = (const std::string::value_type *)v142;
          }
          else {
            uint64_t v50 = (const std::string::value_type *)v142[0];
          }
          if ((v143 & 0x80u) == 0) {
            std::string::size_type v51 = v143;
          }
          else {
            std::string::size_type v51 = (std::string::size_type)v142[1];
          }
          int v52 = std::string::insert(&v132, 0, v50, v51);
          std::string v133 = *v52;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
          std::to_string(&v131, v46);
          if ((v141 & 0x80u) == 0) {
            uint64_t v53 = (const std::string::value_type *)&v139;
          }
          else {
            uint64_t v53 = (const std::string::value_type *)v139;
          }
          if ((v141 & 0x80u) == 0) {
            std::string::size_type v54 = v141;
          }
          else {
            std::string::size_type v54 = v140;
          }
          uint64_t v55 = std::string::insert(&v131, 0, v53, v54);
          std::string v132 = *v55;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v131.__r_.__value_.__l.__data_);
          }
          std::to_string(&v130, v46);
          if ((v138 & 0x80u) == 0) {
            uint64_t v56 = (const std::string::value_type *)v137;
          }
          else {
            uint64_t v56 = (const std::string::value_type *)v137[0];
          }
          if ((v138 & 0x80u) == 0) {
            std::string::size_type v57 = v138;
          }
          else {
            std::string::size_type v57 = (std::string::size_type)v137[1];
          }
          std::string v58 = std::string::insert(&v130, 0, v56, v57);
          std::string v131 = *v58;
          v58->__r_.__value_.__l.__size_ = 0;
          v58->__r_.__value_.__r.__words[2] = 0;
          v58->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v130.__r_.__value_.__l.__data_);
          }
          uint64_t v59 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          size_t v60 = __s1.__r_.__value_.__l.__size_;
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v61 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v61 = __s1.__r_.__value_.__l.__size_;
          }
          int v62 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v63 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v63 = __p.__r_.__value_.__l.__size_;
          }
          if (v61 == v63)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (!memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_)) {
                goto LABEL_260;
              }
            }
            else
            {
              if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
                goto LABEL_260;
              }
              uint64_t v65 = &__s1;
              uint64_t v66 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              while (v65->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
              {
                uint64_t v65 = (std::string *)((char *)v65 + 1);
                p_p = (std::string *)((char *)p_p + 1);
                if (!--v66) {
                  goto LABEL_260;
                }
              }
            }
          }
          uint64_t v67 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
          size_t v68 = v135.__r_.__value_.__l.__size_;
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v69 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v69 = v135.__r_.__value_.__l.__size_;
          }
          if (v69 == v63)
          {
            if (v62 >= 0) {
              uint64_t v70 = &__p;
            }
            else {
              uint64_t v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&v135.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              std::string::size_type v73 = v69;
              int v74 = memcmp(v135.__r_.__value_.__l.__data_, v70, v135.__r_.__value_.__l.__size_);
              std::string::size_type v69 = v73;
              if (!v74) {
                goto LABEL_244;
              }
            }
            else
            {
              if (!*((unsigned char *)&v135.__r_.__value_.__s + 23)) {
                goto LABEL_244;
              }
              uint64_t v71 = &v135;
              uint64_t v72 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
              while (v71->__r_.__value_.__s.__data_[0] == v70->__r_.__value_.__s.__data_[0])
              {
                uint64_t v71 = (std::string *)((char *)v71 + 1);
                uint64_t v70 = (std::string *)((char *)v70 + 1);
                if (!--v72) {
                  goto LABEL_244;
                }
              }
            }
          }
          int v75 = SHIBYTE(v133.__r_.__value_.__r.__words[2]);
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v76 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v76 = v133.__r_.__value_.__l.__size_;
          }
          if (v61 == v76)
          {
            if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v77 = &v133;
            }
            else {
              unint64_t v77 = (std::string *)v133.__r_.__value_.__r.__words[0];
            }
            if ((v59 & 0x80) != 0)
            {
              size_t v80 = v60;
              size_t v128 = v60;
              int v81 = v62;
              std::string::size_type v82 = v69;
              int v83 = memcmp(__s1.__r_.__value_.__l.__data_, v77, v80);
              std::string::size_type v69 = v82;
              int v62 = v81;
              size_t v60 = v128;
              if (!v83) {
                goto LABEL_260;
              }
            }
            else
            {
              if (!v59) {
                goto LABEL_260;
              }
              long long v78 = &__s1;
              uint64_t v79 = v59;
              while (v78->__r_.__value_.__s.__data_[0] == v77->__r_.__value_.__s.__data_[0])
              {
                long long v78 = (std::string *)((char *)v78 + 1);
                unint64_t v77 = (std::string *)((char *)v77 + 1);
                if (!--v79) {
                  goto LABEL_260;
                }
              }
            }
          }
          if (v69 == v76)
          {
            if (v75 >= 0) {
              int v84 = &v133;
            }
            else {
              int v84 = (std::string *)v133.__r_.__value_.__r.__words[0];
            }
            if ((v67 & 0x80) != 0)
            {
              std::string::size_type v87 = v69;
              int v88 = memcmp(v135.__r_.__value_.__l.__data_, v84, v68);
              std::string::size_type v69 = v87;
              if (!v88) {
                goto LABEL_244;
              }
            }
            else
            {
              if (!v67) {
                goto LABEL_244;
              }
              unsigned int v85 = &v135;
              uint64_t v86 = v67;
              while (v85->__r_.__value_.__s.__data_[0] == v84->__r_.__value_.__s.__data_[0])
              {
                unsigned int v85 = (std::string *)((char *)v85 + 1);
                int v84 = (std::string *)((char *)v84 + 1);
                if (!--v86) {
                  goto LABEL_244;
                }
              }
            }
          }
          size_t v127 = v68;
          unsigned int v129 = v9;
          int v89 = SHIBYTE(v132.__r_.__value_.__r.__words[2]);
          if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v90 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v90 = v132.__r_.__value_.__l.__size_;
          }
          if (v61 == v90)
          {
            if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v91 = &v132;
            }
            else {
              uint64_t v91 = (std::string *)v132.__r_.__value_.__r.__words[0];
            }
            if ((v59 & 0x80) != 0)
            {
              std::string::size_type v95 = v69;
              int v96 = memcmp(__s1.__r_.__value_.__l.__data_, v91, v60);
              std::string::size_type v69 = v95;
              if (!v96) {
                goto LABEL_260;
              }
            }
            else
            {
              if (!v59) {
                goto LABEL_260;
              }
              uint64_t v92 = &__s1;
              uint64_t v93 = v59;
              while (v92->__r_.__value_.__s.__data_[0] == v91->__r_.__value_.__s.__data_[0])
              {
                BOOL v94 = 0;
                uint64_t v92 = (std::string *)((char *)v92 + 1);
                uint64_t v91 = (std::string *)((char *)v91 + 1);
                uint64_t v4 = 1;
                if (!--v93) {
                  goto LABEL_261;
                }
              }
            }
          }
          if (v69 == v90)
          {
            if (v89 >= 0) {
              uint64_t v97 = &v132;
            }
            else {
              uint64_t v97 = (std::string *)v132.__r_.__value_.__r.__words[0];
            }
            if ((v67 & 0x80) != 0)
            {
              std::string::size_type v100 = v69;
              int v101 = memcmp(v135.__r_.__value_.__l.__data_, v97, v127);
              std::string::size_type v69 = v100;
              if (!v101)
              {
LABEL_244:
                uint64_t v4 = 0;
                BOOL v94 = 0;
                goto LABEL_261;
              }
            }
            else
            {
              if (!v67) {
                goto LABEL_244;
              }
              uint64_t v98 = &v135;
              uint64_t v99 = v67;
              while (v98->__r_.__value_.__s.__data_[0] == v97->__r_.__value_.__s.__data_[0])
              {
                uint64_t v4 = 0;
                BOOL v94 = 0;
                uint64_t v98 = (std::string *)((char *)v98 + 1);
                uint64_t v97 = (std::string *)((char *)v97 + 1);
                if (!--v99) {
                  goto LABEL_261;
                }
              }
            }
          }
          int v102 = SHIBYTE(v131.__r_.__value_.__r.__words[2]);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v103 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v103 = v131.__r_.__value_.__l.__size_;
          }
          if (v61 == v103)
          {
            if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v104 = &v131;
            }
            else {
              uint64_t v104 = (std::string *)v131.__r_.__value_.__r.__words[0];
            }
            if ((v59 & 0x80) != 0)
            {
              size_t v106 = v60;
              std::string::size_type v107 = v69;
              int v108 = memcmp(__s1.__r_.__value_.__l.__data_, v104, v106);
              std::string::size_type v69 = v107;
              if (!v108)
              {
LABEL_260:
                BOOL v94 = 0;
                uint64_t v4 = 1;
                goto LABEL_261;
              }
            }
            else
            {
              if (!v59) {
                goto LABEL_260;
              }
              unint64_t v105 = &__s1;
              while (v105->__r_.__value_.__s.__data_[0] == v104->__r_.__value_.__s.__data_[0])
              {
                BOOL v94 = 0;
                unint64_t v105 = (std::string *)((char *)v105 + 1);
                uint64_t v104 = (std::string *)((char *)v104 + 1);
                uint64_t v4 = 1;
                if (!--v59) {
                  goto LABEL_261;
                }
              }
            }
          }
          if (v69 == v103)
          {
            if (v102 >= 0) {
              std::string::size_type v109 = &v131;
            }
            else {
              std::string::size_type v109 = (std::string *)v131.__r_.__value_.__r.__words[0];
            }
            if ((v67 & 0x80) != 0)
            {
              BOOL v119 = memcmp(v135.__r_.__value_.__l.__data_, v109, v127) == 0;
            }
            else if (v67)
            {
              uint64_t v110 = v67 - 1;
              size_t v111 = &v135;
              do
              {
                int v113 = v111->__r_.__value_.__s.__data_[0];
                size_t v111 = (std::string *)((char *)v111 + 1);
                int v112 = v113;
                int v115 = v109->__r_.__value_.__s.__data_[0];
                std::string::size_type v109 = (std::string *)((char *)v109 + 1);
                int v114 = v115;
                BOOL v117 = v110-- != 0;
                BOOL v118 = v112 == v114;
                BOOL v119 = v112 == v114;
              }
              while (v118 && v117);
            }
            else
            {
              BOOL v119 = 1;
            }
          }
          else
          {
            BOOL v119 = 0;
          }
          BOOL v94 = !v119;
          uint64_t v4 = !v119 & v129;
LABEL_261:
          if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v131.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v132.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v133.__r_.__value_.__l.__data_);
            if (v62 < 0) {
LABEL_271:
            }
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else if (v62 < 0)
          {
            goto LABEL_271;
          }
          if (!v94) {
            goto LABEL_295;
          }
          ++v46;
          LODWORD(v9) = v4;
          if (v46 == 8)
          {
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v120 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v120 = __s1.__r_.__value_.__l.__size_;
            }
            if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v121 = &__s1;
            }
            else {
              uint64_t v121 = (std::string *)__s1.__r_.__value_.__r.__words[0];
            }
            if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v122 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v122 = v135.__r_.__value_.__l.__size_;
            }
            if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v123 = &v135;
            }
            else {
              v123 = (std::string *)v135.__r_.__value_.__r.__words[0];
            }
            if (v122 >= v120) {
              size_t v124 = v120;
            }
            else {
              size_t v124 = v122;
            }
            int v125 = memcmp(v121, v123, v124);
            if (v125) {
              uint64_t v4 = v125 < 0;
            }
            else {
              uint64_t v4 = v120 < v122;
            }
            goto LABEL_295;
          }
        }
      }
      if ((v141 & 0x80u) == 0) {
        uint64_t v31 = (void **)&v139;
      }
      else {
        uint64_t v31 = v139;
      }
      if ((v6 & 0x80) != 0)
      {
        if (memcmp(__s1.__r_.__value_.__l.__data_, v31, size)) {
          goto LABEL_76;
        }
      }
      else if (v6)
      {
        uint64_t v32 = &__s1;
        while (v32->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v31)
        {
          uint64_t v32 = (std::string *)((char *)v32 + 1);
          uint64_t v31 = (void **)((char *)v31 + 1);
          if (!--v6) {
            goto LABEL_86;
          }
        }
        goto LABEL_76;
      }
LABEL_86:
      uint64_t v4 = 1;
      goto LABEL_295;
    }
LABEL_32:
    uint64_t v20 = *((void *)a1 + 1);
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    if (v20)
    {
      uint64_t v21 = *((void *)a2 + 1);
      if ((v21 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      BOOL v22 = v21 == 0;
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v22) {
      goto LABEL_276;
    }
    uint64_t v26 = *((void *)a1 + 1);
    if ((v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    unsigned int v27 = (atomic_uint *)(v26 & 0xFFFFFFFFFFFFFFF8);
    if ((v26 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v28 = (const void **)(v27 + 4);
    }
    else
    {
      uint64_t EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      uint64_t v28 = (const void **)EmptyString;
    }
    uint64_t v35 = *((void *)a2 + 1);
    if ((v35 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v36 = (atomic_uint *)(v35 & 0xFFFFFFFFFFFFFFF8);
    if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0) {
      uint64_t v37 = (uint64_t)(v36 + 4);
    }
    else {
      uint64_t v37 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    }
    int v38 = *(char *)(v37 + 23);
    int v39 = *((char *)v28 + 23);
    if (v39 >= 0) {
      size_t v40 = *((unsigned __int8 *)v28 + 23);
    }
    else {
      size_t v40 = (size_t)v28[1];
    }
    if (v39 >= 0) {
      uint64_t v41 = v28;
    }
    else {
      uint64_t v41 = *v28;
    }
    if (v38 >= 0) {
      size_t v42 = *(unsigned __int8 *)(v37 + 23);
    }
    else {
      size_t v42 = *(void *)(v37 + 8);
    }
    if (v38 >= 0) {
      long long v43 = (const void *)v37;
    }
    else {
      long long v43 = *(const void **)v37;
    }
    if (v42 >= v40) {
      size_t v44 = v40;
    }
    else {
      size_t v44 = v42;
    }
    int v45 = memcmp(v41, v43, v44);
    if (v45) {
      uint64_t v4 = v45 < 0;
    }
    else {
      uint64_t v4 = v40 < v42;
    }
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit(v36, 0xFFFFFFFE, memory_order_release);
    }
    if ((v26 & 7) != 0) {
      atomic_fetch_add_explicit(v27, 0xFFFFFFFE, memory_order_release);
    }
LABEL_295:
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v135.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
  }
  if ((char)v138 < 0) {
    operator delete(v137[0]);
  }
  if ((char)v141 < 0) {
    operator delete(v139);
  }
  if ((char)v143 < 0) {
    operator delete(v142[0]);
  }
  if ((char)v146 < 0) {
    operator delete(v144);
  }
  return v4;
}

uint64_t realityio::getCullMode(realityio *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v9 = 0;
  unint64_t v3 = atomic_load(&realityio::tokens::MaterialBuilderTokens);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::MaterialBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::MaterialBuilderTokens_StaticTokenType>>::_TryToCreateData();
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v5, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v3 + 272));
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v5)) {
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
  if (v6) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v6);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return 2;
}

void sub_23F72E7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a9);

  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a10);
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::vector<std::pair<std::string, std::string>> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    if (a4 > 0x555555555555555) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::pair<std::string,std::string>>::__vallocate[abi:ne180100](this, v11);
    unint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (long long *)__str, a3, &this->__end_->first);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 16 * (((char *)this->__end_ - (char *)begin) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(__str, v13, &begin->first);
    unint64_t v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (long long *)v13, a3, &this->__end_->first);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  uint64_t v14 = (std::pair<std::string, std::string> *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(__str, (std::string *)a3, &begin->first);
  for (std::vector<std::pair<std::string, std::string>>::pointer i = this->__end_;
        i != v14;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)p_end_cap, (uint64_t)i))
  {
    --i;
  }
  this->__end_ = v14;
}

void sub_23F72E984(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_23F72E98C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__vdeallocate(std::vector<std::pair<std::string, std::string>> *this)
{
  std::vector<std::pair<std::string, std::string>>::pointer begin = this->__begin_;
  if (this->__begin_)
  {
    std::vector<std::pair<std::string, std::string>>::pointer end = this->__end_;
    std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    if (end != begin)
    {
      do
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&this->__end_cap_, (uint64_t)--end);
      while (end != begin);
      std::vector<std::pair<std::string, std::string>>::pointer v4 = this->__begin_;
    }
    this->__end_ = begin;
    operator delete(v4);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,std::string> *,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t RIODependencyDescriptorGetTypeID()
{
  if (qword_268C40CB8 != -1) {
    dispatch_once(&qword_268C40CB8, &__block_literal_global_34);
  }
  return _MergedGlobals_56;
}

void __RIODependencyDescriptorGetTypeID_block_invoke()
{
  if (!_MergedGlobals_56) {
    _MergedGlobals_56 = _CFRuntimeRegisterClass();
  }
}

uint64_t RIOPxrUsdUtilsCopyAllDependencies()
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *((void *)&v18[0] + 1) = 0;
  *(void *)&v18[1] = 0;
  *(void *)&v18[0] = (char *)v18 + 8;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  std::__tree<std::string>::destroy((uint64_t)v18, *((char **)&v18[0] + 1));
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  uint64_t v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdUtilsComputeAllDependencies();
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::UsdUtilsDependencyInfo ()(pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::UsdUtilsDependencyInfo const&)>::~__value_func[abi:ne180100](&v22);
  long long v16 = 0uLL;
  v17[0] = 0;
  id v0 = (atomic_uint **)*((void *)&v18[0] + 1);
  uint64_t v1 = *(atomic_uint ***)&v18[0];
  uint64_t v2 = *((void *)&v18[0] + 1) - *(void *)&v18[0];
  if (*((void *)&v18[0] + 1) != *(void *)&v18[0])
  {
    if (v2 < 0) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v26 = v17;
    BOOL v22 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v2 >> 3);
    std::string::size_type v23 = v22;
    uint64_t v24 = v22;
    uint64_t v25 = &v22[v3];
    std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer((uint64_t *)&v16, &v22);
    std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)&v22);
    id v0 = (atomic_uint **)*((void *)&v18[0] + 1);
    uint64_t v1 = *(atomic_uint ***)&v18[0];
  }
  if (v1 != v0)
  {
    do
    {
      uint64_t v21 = *v1;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)&v21);
      std::vector<std::pair<std::string, std::string>>::pointer v4 = v21;
      if (v21)
      {
        uint64_t v5 = (uint64_t *)*((void *)&v16 + 1);
        if (*((void *)&v16 + 1) >= v17[0])
        {
          uint64_t v7 = (uint64_t)(*((void *)&v16 + 1) - v16) >> 3;
          if ((unint64_t)(v7 + 1) >> 61) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v8 = (uint64_t)(v17[0] - v16) >> 2;
          if (v8 <= v7 + 1) {
            unint64_t v8 = v7 + 1;
          }
          if (v17[0] - (void)v16 >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v8;
          }
          uint64_t v26 = v17;
          if (v9)
          {
            unint64_t v9 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::TransformAnimationAggregationBuilder::TransformAnimationSceneDataT const*>>(v9);
            std::vector<std::pair<std::string, std::string>>::pointer v4 = v21;
          }
          else
          {
            uint64_t v10 = 0;
          }
          BOOL v22 = (void **)v9;
          std::string::size_type v23 = (void **)(v9 + 8 * v7);
          uint64_t v24 = v23;
          uint64_t v25 = (void **)(v9 + 8 * v10);
          *std::string::size_type v23 = v4;
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(v9 + 8 * v7));
          ++v24;
          std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer((uint64_t *)&v16, &v22);
          uint64_t v6 = (uint64_t *)*((void *)&v16 + 1);
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer((uint64_t)&v22);
        }
        else
        {
          **((void **)&v16 + 1) = v21;
          pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v5);
          uint64_t v6 = v5 + 1;
        }
        *((void *)&v16 + 1) = v6;
      }
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(&v21);
      ++v1;
    }
    while (v1 != v0);
    id v0 = *(atomic_uint ***)&v18[0];
  }
  if (v0)
  {
    unint64_t v11 = (atomic_uint **)*((void *)&v18[0] + 1);
    unint64_t v12 = v0;
    if (*((atomic_uint ***)&v18[0] + 1) != v0)
    {
      do
        unint64_t v11 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v11 - 1);
      while (v11 != v0);
      unint64_t v12 = *(atomic_uint ***)&v18[0];
    }
    *((void *)&v18[0] + 1) = v0;
    operator delete(v12);
  }
  v18[0] = v16;
  *(void *)&v18[1] = v17[0];
  v17[0] = 0;
  long long v16 = 0uLL;
  if (qword_268C40CB8 != -1) {
    dispatch_once(&qword_268C40CB8, &__block_literal_global_34);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v14 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 16) = v18[0];
    *(void *)(Instance + 32) = *(void *)&v18[1];
    memset(v18, 0, 24);
    *(_OWORD *)(Instance + 40) = *(_OWORD *)((char *)&v18[1] + 8);
    *(void *)(Instance + 56) = *((void *)&v18[2] + 1);
    memset((char *)&v18[1] + 8, 0, 24);
    *(void *)(Instance + 80) = 0;
    *(_OWORD *)(Instance + 64) = v19;
    *(void *)(Instance + 80) = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
  }
  BOOL v22 = (void **)&v16;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v22);
  BOOL v22 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  BOOL v22 = (void **)&v18[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v22);
  BOOL v22 = (void **)v18;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v22);
  return v14;
}

void sub_23F72EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22,char a23)
{
  a22 = (void **)&a9;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&a22);
  realityio::DependencyDescriptor::~DependencyDescriptor(&a13);
  _Unwind_Resume(a1);
}

void realityio::DependencyDescriptor::~DependencyDescriptor(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

__CFArray *RIODependencyDescriptorCopyLayers(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = *(void **)(a1 + 16);
  for (std::vector<std::pair<std::string, std::string>>::pointer i = *(void **)(a1 + 24); v3 != i; ++v3)
  {
    if (RIOPxrSdfLayerGetTypeID::onceToken != -1) {
      dispatch_once(&RIOPxrSdfLayerGetTypeID::onceToken, &__block_literal_global_11);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    uint64_t v6 = (const void *)Instance;
    if (Instance)
    {
      *(void *)(Instance + 16) = *v3;
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef((uint64_t *)(Instance + 16));
    }
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
  }
  return Mutable;
}

__CFArray *RIODependencyDescriptorCopyAssets(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  while (v3 != v4)
  {
    uint64_t v5 = (const char *)v3;
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v5 = *(const char **)v3;
    }
    CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
    v3 += 24;
  }
  return Mutable;
}

__CFArray *RIODependencyDescriptorCopyUnresolvedPaths(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  while (v3 != v4)
  {
    uint64_t v5 = (const char *)v3;
    if (*(char *)(v3 + 23) < 0) {
      uint64_t v5 = *(const char **)v3;
    }
    CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
    CFArrayAppendValue(Mutable, v6);
    CFRelease(v6);
    v3 += 24;
  }
  return Mutable;
}

pxrInternal__aapl__pxrReserved__::SdfLayer *RIOGetLoadedLayerIdentifiers()
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x263EFFF70]);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers((uint64_t *)&v10, Mutable);
  uint64_t v1 = v10;
  if (v10 != (uint64_t *)v11)
  {
    do
    {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->(v1 + 4);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v2);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v4 = (const char *)Identifier;
      }
      else {
        uint64_t v4 = *(const char **)Identifier;
      }
      CFStringRef v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
      CFArrayAppendValue(Mutable, v5);
      CFRelease(v5);
      CFStringRef v6 = (uint64_t *)v1[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          CFStringRef v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v1[2];
          BOOL v8 = *v7 == (void)v1;
          uint64_t v1 = v7;
        }
        while (!v8);
      }
      uint64_t v1 = v7;
    }
    while (v7 != (uint64_t *)v11);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(v11[0]);
  return Mutable;
}

void sub_23F72F20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void _RIODependencyDescriptorCFFinalize(void **a1)
{
  uint64_t v2 = a1 + 2;
  uint64_t v3 = a1 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = a1 + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

BOOL _RIODependencyDescriptorCFEqual(const void *a1, const void *a2)
{
  return a1 == a2;
}

uint64_t _RIODependencyDescriptorCFHash(const void *a1)
{
  return (uint64_t)a1 + 16;
}

CFStringRef _RIODependencyDescriptorCFCopyFormatDescription(const void *a1, const __CFDictionary *a2)
{
  return CFStringCreateWithFormat(0, 0, @"<RIODependencyDescriptor %p>", a1);
}

CFStringRef _RIODependencyDescriptorCFCopyDebugDescription(const void *a1)
{
  return CFStringCreateWithFormat(0, 0, @"<RIODependencyDescriptor %p>", a1);
}

void std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (atomic_uint **)**a1;
  if (v2)
  {
    uint64_t v4 = (atomic_uint **)v1[1];
    CFStringRef v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr(v4 - 1);
      while (v4 != v2);
      CFStringRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__value_func<pxrInternal__aapl__pxrReserved__::UsdUtilsDependencyInfo ()(pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::UsdUtilsDependencyInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *std::vector<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = -8; v4 + i + 8 != v5; i -= 8)
  {
    BOOL v8 = (uint64_t *)(v6 + i);
    *BOOL v8 = *(void *)(v4 + i);
    __n128 result = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::_AddRef(v8);
  }
  uint64_t v9 = v6 + i + 8;
  a2[1] = v9;
  uint64_t v10 = *v3;
  *uint64_t v3 = v9;
  a2[1] = v10;
  uint64_t v11 = v3[1];
  v3[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = v3[2];
  v3[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::~TfRefPtr((atomic_uint **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(*a1);
    std::__tree<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>::destroy(a1[1]);
    uint64_t v2 = (atomic_uint *)a1[5];
    if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
    }
    operator delete(a1);
  }
}

realityio::ArbitraryComponentBuilder *realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(realityio::ArbitraryComponentBuilder *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v12[13] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(v9, "ArbitraryComponentBuilder");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)realityio::kArbitraryComponentBuilderIdentifier);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40D38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40D38))
  {
    operator new();
  }
  uint64_t v5 = _MergedGlobals_57;
  uint64_t v6 = (std::__shared_weak_count *)unk_268C40D30;
  if (unk_268C40D30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C40D30 + 8), 1uLL, memory_order_relaxed);
  }
  v12[0] = &unk_26F349988;
  uint64_t v12[3] = v12;
  v11[0] = &unk_26F349A88;
  v11[3] = v11;
  realityio::DynamicBuilder::DynamicBuilder(this, a2, (uint64_t)v9, (uint64_t)__p, &v5, (uint64_t)v12, (uint64_t)v11);
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100](v12);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  *(void *)this = &unk_26F349610;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = (char *)this + 288;
  return this;
}

void sub_23F72F9A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  std::string::size_type v47 = *(std::__shared_weak_count **)(v45 - 104);
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (a44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a44);
  }
  *(void *)(v45 - 232) = &a37;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 232));
  std::string::size_type v48 = *(std::__shared_weak_count **)(v45 - 120);
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  *(void *)(v45 - 232) = &a25;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 232));
  a25 = &a28;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&a32, a33);
  uint64_t v49 = 24;
  while (1)
  {
    uint64_t v50 = *(void *)(v45 - 160 + v49);
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v49 -= 8;
    if (v49 == -8)
    {
      *(void *)(v45 - 160) = &a40;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 160));
      MEMORY[0x2455D2BD0](v44, 0x10A1C407F0BD61ELL);
      __cxa_guard_abort(&qword_268C40D38);
      if (a18 < 0) {
        operator delete(__p);
      }
      if (a24 < 0) {
        operator delete(a19);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t MockREComponentClassGetComponentTypeInfo(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    REComponentClassGetName();
    return REGlobalTypeRegistryWithReadLock();
  }
  return result;
}

double ___Z40MockREComponentClassGetComponentTypeInfoP16REComponentClass_block_invoke(uint64_t a1)
{
  if (RETypeRegistryGetTypeInfoByTypeName())
  {
    SubClassCFIndex Count = RETypeInfoGetSubClassCount();
    if (SubClassCount)
    {
      uint64_t v4 = SubClassCount;
      uint64_t v5 = 0;
      while (1)
      {
        RETypeInfoGetSubClass();
        if (REComponentClassFromTypeInfo())
        {
          uint64_t Name = (const char *)REComponentClassGetName();
          if (!strcmp(**(const char ***)(a1 + 32), Name)) {
            break;
          }
        }
        if (v4 == ++v5) {
          return result;
        }
      }
      uint64_t v7 = *(_OWORD **)(a1 + 40);
      double result = 0.0;
      *uint64_t v7 = 0u;
      v7[1] = 0u;
    }
  }
  return result;
}

__n128 __copy_helper_block_ea8_32c72_ZTSKZ40MockREComponentClassGetComponentTypeInfoP16REComponentClassE3__0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

void buildValueType(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2, long long *a3, uint64_t *a4, const void **a5, realityio::ImportSession **a6, unsigned char *a7, int a8)
{
  uint64_t v12 = a1;
  uint64_t v234 = *MEMORY[0x263EF8340];
  int IsValid = (realityio *)pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1);
  if (IsValid)
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttributes((uint64_t *)v223, v12);
    uint64_t v14 = v223[0];
    int v15 = v223[1];
    uint64_t v160 = v12;
    if (v223[0] != v223[1])
    {
      while (1)
      {
        uint64_t Name = (void *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v14);
        unint64_t v17 = atomic_load(&realityio::tokens::ArbitraryComponentBuilderTokens);
        if (!v17) {
          pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType>>::_TryToCreateData();
        }
        if ((*Name & 0xFFFFFFFFFFFFFFF8) == (*(void *)(v17 + 16) & 0xFFFFFFFFFFFFFFF8)
          || (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(v14) | a8) != 1)
        {
          goto LABEL_125;
        }
        std::string::size_type v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v14);
        if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t EmptyString = (*(void *)v18 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
        }
        if (*(char *)(EmptyString + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v174, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
        }
        else
        {
          long long v20 = *(_OWORD *)EmptyString;
          v174.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
          *(_OWORD *)&v174.__r_.__value_.__l.__data_ = v20;
        }
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((uint64_t *)__p, v14);
        MEMORY[0x2455CF810](buf, "");
        uint64_t v21 = *(void *)__p;
        BOOL v22 = (atomic_uint *)(*(void *)buf & 0xFFFFFFFFFFFFFFF8);
        if ((buf[0] & 7) != 0) {
          atomic_fetch_add_explicit(v22, 0xFFFFFFFE, memory_order_release);
        }
        if ((__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v21 & 0xFFFFFFFFFFFFFFF8) == v22) {
          goto LABEL_56;
        }
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((uint64_t *)buf, v14);
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)v185, v14);
        std::string::size_type v23 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](v204, "values");
        uint64_t v24 = *(void *)v204;
        if ((*(void *)v185 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v204 & 0xFFFFFFFFFFFFFFF8))
        {
          if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0) {
            unint64_t v26 = (*(void *)buf & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else {
            unint64_t v26 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
          }
          if (*(char *)(v26 + 23) >= 0) {
            size_t v27 = *(unsigned __int8 *)(v26 + 23);
          }
          else {
            size_t v27 = *(void *)(v26 + 8);
          }
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v27 + 7);
          if (__p[23] >= 0) {
            uint64_t v28 = __p;
          }
          else {
            uint64_t v28 = *(unsigned char **)__p;
          }
          if (v27)
          {
            if (*(char *)(v26 + 23) >= 0) {
              int v29 = (const void *)v26;
            }
            else {
              int v29 = *(const void **)v26;
            }
            memmove(v28, v29, v27);
          }
          strcpy(&v28[v27], ":counts");
          MEMORY[0x2455CF830](v202, __p);
          uint64_t v12 = v160;
          char HasAttribute = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(v160, (const pxrInternal__aapl__pxrReserved__::TfToken *)v202);
          if ((v202[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v202 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          char v25 = HasAttribute ^ 1;
          uint64_t v24 = *(void *)v204;
        }
        else
        {
          char v25 = 1;
        }
        if ((v24 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v25 & 1) == 0) {
          break;
        }
        if ((v185[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((buf[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_121:
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v169.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v174.__r_.__value_.__l.__data_);
        }
LABEL_125:
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v14 + 32);
        if (v14 == v15) {
          goto LABEL_137;
        }
      }
      Namespace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((uint64_t *)__p, v14);
      if ((*(void *)__p & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v32 = (const std::string *)((*(void *)__p & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v32 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Namespace);
      }
      std::string::operator=(&v174, v32);
      if ((__p[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v169.__r_.__value_.__l.__data_);
      }
      std::string v169 = *(std::string *)__p;
      if ((v185[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
LABEL_56:
      MEMORY[0x2455CF810](buf, "");
      memset(__p, 0, 24);
      *(void *)&__p[24] = *(void *)buf;
      long long v208 = 0u;
      *(_OWORD *)uint64_t v209 = 0u;
      long long v33 = a3[1];
      v222[0] = *a3;
      v222[1] = v33;
      std::string::basic_string[abi:ne180100]<0>(buf, "");
      unint64_t v34 = (std::__shared_weak_count *)a2[1];
      v178[0] = *a2;
      v178[1] = (uint64_t)v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v36 = MemberInfo;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (*(void *)__p) {
        BOOL v37 = v36;
      }
      else {
        BOOL v37 = 0;
      }
      if (!v37)
      {
        uint64_t v41 = *(id *)(realityio::logObjects((realityio *)MemberInfo) + 24);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          size_t v42 = a7;
          if (*((char *)a4 + 23) >= 0) {
            long long v43 = a4;
          }
          else {
            long long v43 = (uint64_t *)*a4;
          }
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v14, v185);
          uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v185);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v43;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = Text;
          _os_log_impl(&dword_23F4EA000, v41, OS_LOG_TYPE_DEFAULT, "Unknown component detail for \"%s\" from attribute: \"%s\"", buf, 0x16u);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v185);
          a7 = v42;
        }

        goto LABEL_117;
      }
      v221[2] = v208;
      v221[3] = *(_OWORD *)v209;
      if (RETypeInfoGetCategory() == 2)
      {
        *(_OWORD *)v185 = v208;
        *(_OWORD *)&v185[16] = *(_OWORD *)v209;
        EnumConstantCFIndex Count = RETypeInfoGetEnumConstantCount();
        realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(v14, (uint64_t)buf);
        if (!buf[0]) {
          goto LABEL_103;
        }
        if ((*(void *)&buf[8] & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v40 = (*(void *)&buf[8] & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v40 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v39);
        }
        if (*(char *)(v40 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)v40, *(void *)(v40 + 8));
        }
        else
        {
          long long v47 = *(_OWORD *)v40;
          v225.__r_.__value_.__r.__words[2] = *(void *)(v40 + 16);
          *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v47;
        }
        if (EnumConstantCount)
        {
          uint64_t v48 = 0;
          do
          {
            *(_OWORD *)uint64_t v204 = v208;
            long long v205 = *(_OWORD *)v209;
            EnumConstantuint64_t Name = (const char *)RETypeInfoGetEnumConstantName();
            unint64_t v40 = strlen(EnumConstantName);
            size_t v50 = v40;
            if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v40 != v225.__r_.__value_.__l.__size_) {
                continue;
              }
              if (v40 == -1) {
                std::string::__throw_out_of_range[abi:ne180100]();
              }
              std::string::size_type v51 = (std::string *)v225.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (v40 != HIBYTE(v225.__r_.__value_.__r.__words[2])) {
                continue;
              }
              std::string::size_type v51 = &v225;
            }
            unint64_t v40 = memcmp(v51, EnumConstantName, v50);
            if (!v40)
            {
              *(_OWORD *)v202 = v208;
              *(_OWORD *)&v202[16] = *(_OWORD *)v209;
              uint64_t v12 = v160;
              size_t Size = RETypeInfoGetSize();
              long long v230 = v208;
              long long v231 = *(_OWORD *)v209;
              __src[0] = (void *)RETypeInfoGetEnumConstantValue();
              *(_OWORD *)uint64_t v229 = v208;
              *(_OWORD *)&v229[16] = *(_OWORD *)v209;
              if (RETypeInfoIsOptional())
              {
                long long v227 = v208;
                long long v228 = *(_OWORD *)v209;
                REOptionalAccessorSetValue();
              }
              else
              {
                memcpy(*(void **)&__p[16], __src, Size);
              }
              goto LABEL_98;
            }
          }
          while (EnumConstantCount != ++v48);
        }
        int v52 = *(id *)(realityio::logObjects((realityio *)v40) + 24);
        uint64_t v12 = v160;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v14, &v230);
          uint64_t v53 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v230);
          std::string::size_type v54 = &v225;
          if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v54 = (std::string *)v225.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v202 = 136315394;
          *(void *)&v202[4] = v53;
          *(_WORD *)&v202[12] = 2080;
          *(void *)&v202[14] = v54;
          _os_log_impl(&dword_23F4EA000, v52, OS_LOG_TYPE_DEFAULT, "Component data (\"%s\") has no associated enum name for (\"%s\")", v202, 0x16u);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v230);
        }

LABEL_98:
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v225.__r_.__value_.__l.__data_);
        }
        if (buf[0])
        {
          if ((buf[8] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&buf[8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
LABEL_103:
          if (SHIBYTE(v200) < 0) {
            operator delete(*(void **)&buf[24]);
          }
        }
      }
      else
      {
        if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==() & 1) != 0
          || pxrInternal__aapl__pxrReserved__::TfToken::operator==())
        {
          uint64_t v45 = REComponentClassFromName();
          MockREComponentClassGetComponentTypeInfo((uint64_t)buf, v45);
          long long v46 = *(_OWORD *)&buf[16];
          *a3 = *(_OWORD *)buf;
          a3[1] = v46;
        }
      }
      if (a7)
      {
        if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v174.__r_.__value_.__l.__size_ == 11)
          {
            uint64_t v55 = (std::string *)v174.__r_.__value_.__r.__words[0];
LABEL_111:
            std::string::size_type v56 = v55->__r_.__value_.__r.__words[0];
            uint64_t v57 = *(std::string::size_type *)((char *)v55->__r_.__value_.__r.__words + 3);
            if (v56 == 0x636146656C616373 && v57 == 0x726F74636146656CLL) {
              *a7 = 1;
            }
          }
        }
        else if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) == 11)
        {
          uint64_t v55 = &v174;
          goto LABEL_111;
        }
      }
LABEL_117:
      if ((__p[24] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      goto LABEL_121;
    }
LABEL_137:
    *(void *)std::string __p = v223;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationships((uint64_t *)v202, v12);
    std::string::size_type v63 = *(pxrInternal__aapl__pxrReserved__::UsdObject **)v202;
    uint64_t v64 = *(pxrInternal__aapl__pxrReserved__::UsdObject **)&v202[8];
    if (*(void *)v202 != *(void *)&v202[8])
    {
      while (1)
      {
        long long v230 = 0uLL;
        *(void *)&long long v231 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()) {
          break;
        }
LABEL_213:
        *(void *)std::string __p = &v230;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::string::size_type v63 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v63 + 32);
        if (v63 == v64) {
          goto LABEL_214;
        }
      }
      pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a6 + 1);
      uint64_t v65 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v63);
      if ((*(void *)v65 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v66 = (*(void *)v65 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t v66 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v65);
      }
      if (*(char *)(v66 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v229, *(const std::string::value_type **)v66, *(void *)(v66 + 8));
      }
      else
      {
        long long v67 = *(_OWORD *)v66;
        *(void *)&v229[16] = *(void *)(v66 + 16);
        *(_OWORD *)uint64_t v229 = v67;
      }
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((uint64_t *)__p, v63);
      MEMORY[0x2455CF810](buf, "");
      uint64_t v68 = *(void *)__p;
      std::string::size_type v69 = (atomic_uint *)(*(void *)buf & 0xFFFFFFFFFFFFFFF8);
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit(v69, 0xFFFFFFFE, memory_order_release);
      }
      if ((__p[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((atomic_uint *)(v68 & 0xFFFFFFFFFFFFFFF8) != v69)
      {
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((uint64_t *)buf, v63);
        pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName((uint64_t *)v185, v63);
        uint64_t v70 = (pxrInternal__aapl__pxrReserved__::TfToken *)MEMORY[0x2455CF810](__p, "values");
        uint64_t v71 = *(void *)v185;
        uint64_t v72 = (atomic_uint *)(*(void *)__p & 0xFFFFFFFFFFFFFFF8);
        if ((__p[0] & 7) != 0) {
          atomic_fetch_add_explicit(v72, 0xFFFFFFFE, memory_order_release);
        }
        if ((atomic_uint *)(v71 & 0xFFFFFFFFFFFFFFF8) != v72)
        {
          if ((v185[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((buf[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
LABEL_211:
          if ((v229[23] & 0x80000000) != 0) {
            operator delete(*(void **)v229);
          }
          goto LABEL_213;
        }
        if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v73 = (*(void *)buf & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v73 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v70);
        }
        if (*(char *)(v73 + 23) >= 0) {
          size_t v74 = *(unsigned __int8 *)(v73 + 23);
        }
        else {
          size_t v74 = *(void *)(v73 + 8);
        }
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v74 + 7);
        if (__p[23] >= 0) {
          int v75 = __p;
        }
        else {
          int v75 = *(unsigned char **)__p;
        }
        if (v74)
        {
          if (*(char *)(v73 + 23) >= 0) {
            std::string::size_type v76 = (const void *)v73;
          }
          else {
            std::string::size_type v76 = *(const void **)v73;
          }
          memmove(v75, v76, v74);
        }
        strcpy(&v75[v74], ":counts");
        MEMORY[0x2455CF830](v204, __p);
        char v77 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute(v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)v204);
        if ((v204[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v204 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        if ((v185[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((buf[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v77 & 1) == 0) {
          goto LABEL_211;
        }
      }
      MEMORY[0x2455CF810](buf, "");
      memset(__p, 0, 24);
      *(void *)&__p[24] = *(void *)buf;
      long long v208 = 0u;
      *(_OWORD *)uint64_t v209 = 0u;
      long long v78 = a3[1];
      v221[0] = *a3;
      v221[1] = v78;
      std::string::basic_string[abi:ne180100]<0>(buf, "");
      uint64_t v79 = (std::__shared_weak_count *)a2[1];
      v177[0] = *a2;
      v177[1] = (uint64_t)v79;
      if (v79) {
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v81 = v80;
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v81)
        {
LABEL_186:
          long long v219 = v208;
          long long v220 = *(_OWORD *)v209;
          if ((RETypeInfoIsList() & 1) != 0 || (long long v217 = v208, v218 = *(_OWORD *)v209, RETypeInfoIsArray()))
          {
            memset(buf, 0, sizeof(buf));
            long long v215 = *(_OWORD *)buf;
            long long v216 = *(_OWORD *)&buf[16];
            RETypeInfoGetSize();
            long long v213 = *(_OWORD *)buf;
            long long v214 = *(_OWORD *)&buf[16];
            if ((RETypeInfoIsList() & 1) != 0
              || (long long v211 = *(_OWORD *)buf, v212 = *(_OWORD *)&buf[16], RETypeInfoIsArray()))
            {
              memset(&v225, 0, sizeof(v225));
              uint64_t v176 = *(void *)&__p[16];
              operator new();
            }
            operator new();
          }
          MEMORY[0x2455CF810](buf, "isEntityHandle");
          int HasCustomDataKey = pxrInternal__aapl__pxrReserved__::UsdObject::HasCustomDataKey(v63, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
          if ((buf[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (HasCustomDataKey) {
            operator new();
          }
LABEL_205:
          if (SBYTE7(v228) < 0) {
            operator delete((void *)v227);
          }
          if ((__p[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&__p[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
          }
          goto LABEL_211;
        }
      }
      else if (v81)
      {
        goto LABEL_186;
      }
      std::string::size_type v82 = *(id *)(realityio::logObjects((realityio *)v80) + 24);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a4 + 23) >= 0) {
          int v83 = a4;
        }
        else {
          int v83 = (uint64_t *)*a4;
        }
        int v84 = v229;
        if (v229[23] < 0) {
          int v84 = *(unsigned char **)v229;
        }
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v83;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v84;
        _os_log_impl(&dword_23F4EA000, v82, OS_LOG_TYPE_DEFAULT, "Unknown component detail for \"%s\" from relationship: \"%s\"", buf, 0x16u);
      }

      goto LABEL_205;
    }
LABEL_214:
    *(void *)std::string __p = v202;
    std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    uint64_t UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(v86);
    uint64_t v89 = *UsdPrimDefaultPredicate;
    uint64_t v88 = UsdPrimDefaultPredicate[1];
    uint64_t v90 = UsdPrimDefaultPredicate[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v89 & 0x2000) != 0 || (v88 & 0x2000) == 0))
    {
      v89 |= 0x2000uLL;
      v88 &= ~0x2000uLL;
    }
    *(void *)std::string buf = v89;
    *(void *)&buf[8] = v88;
    *(void *)&uint8_t buf[16] = v90;
    pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)v12, (uint64_t *)buf, (uint64_t)__p);
    *(void *)uint64_t v204 = *(void *)__p;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v204[8], &__p[8]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v204[12], &__p[12]);
    long long v205 = *(_OWORD *)&__p[16];
    *(void *)v202 = *((void *)&v208 + 1);
    uint64_t v206 = v208;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v202[8], v209);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v202[12], &v209[4]);
    *(_OWORD *)&v202[16] = *(_OWORD *)&v209[8];
    uint64_t v203 = v210;
    while (*(void *)v204 != *(void *)v202
         || *(void *)&v204[8] != *(void *)&v202[8]
         || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v205, (uint64_t)&v202[16]))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v204, (uint64_t)&v174);
      if (pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v174)) {
        goto LABEL_437;
      }
      std::string::size_type v92 = v174.__r_.__value_.__l.__size_;
      if (!v174.__r_.__value_.__l.__size_ || (*(unsigned char *)(v174.__r_.__value_.__l.__size_ + 57) & 8) != 0) {
        pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v174.__r_.__value_.__l.__size_, v91);
      }
      uint64_t v93 = *(void **)(v92 + 24);
      MEMORY[0x2455CF810](buf, "RealityKitDict");
      uint64_t v95 = *(void *)buf;
      if ((*v93 & 0xFFFFFFFFFFFFFFF8) == (*(void *)buf & 0xFFFFFFFFFFFFFFF8))
      {
        BOOL v98 = 1;
      }
      else
      {
        std::string::size_type v96 = v174.__r_.__value_.__l.__size_;
        if (!v174.__r_.__value_.__l.__size_ || (*(unsigned char *)(v174.__r_.__value_.__l.__size_ + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v174.__r_.__value_.__l.__size_, v94);
        }
        uint64_t v97 = *(void **)(v96 + 24);
        MEMORY[0x2455CF810](v185, "Dict");
        BOOL v98 = (*v97 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v185 & 0xFFFFFFFFFFFFFFF8);
        if ((v185[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v95 = *(void *)buf;
      }
      if ((v95 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v98)
      {
        uint64_t v99 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v174);
        if ((*(void *)v99 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unint64_t v100 = (*(void *)v99 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else {
          unint64_t v100 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v99);
        }
        if (*(char *)(v100 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)v100, *(void *)(v100 + 8));
        }
        else
        {
          long long v103 = *(_OWORD *)v100;
          v173.__r_.__value_.__r.__words[2] = *(void *)(v100 + 16);
          *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v103;
        }
        MEMORY[0x2455CF810](v185, "");
        memset(buf, 0, 24);
        *(void *)&unsigned char buf[24] = *(void *)v185;
        long long v200 = 0u;
        long long v201 = 0u;
        long long v105 = a3[1];
        v198[0] = *a3;
        v198[1] = v105;
        std::string::basic_string[abi:ne180100]<0>(v185, "");
        size_t v106 = (std::__shared_weak_count *)a2[1];
        v171[0] = *a2;
        v171[1] = (uint64_t)v106;
        if (v106) {
          atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v106) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v106);
        }
        if ((v185[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v185);
          if (!v107) {
            goto LABEL_428;
          }
        }
        else if (!v107)
        {
          goto LABEL_428;
        }
        long long v196 = v200;
        long long v197 = v201;
        if (!RETypeInfoIsDictionary()) {
          goto LABEL_428;
        }
        MEMORY[0x2455CF810](v185, "values");
        int v111 = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v174, (const pxrInternal__aapl__pxrReserved__::TfToken *)v185);
        if ((v185[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v111)
        {
          MEMORY[0x2455CF810](v185, "values");
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v169, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v174, (const pxrInternal__aapl__pxrReserved__::TfToken *)v185);
          if ((v185[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          memset(v179, 0, sizeof(v179));
          MEMORY[0x2455CF810](v185, "values");
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v230, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v174, (const pxrInternal__aapl__pxrReserved__::TfToken *)v185);
          if ((v185[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)uint64_t v229 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v230);
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)v185, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v229);
          uint64_t v113 = qword_268C40D08;
          if (!qword_268C40D08) {
            goto LABEL_280;
          }
          int v114 = &qword_268C40D08;
          do
          {
            int v115 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D10, (uint64_t *)(v113 + 32), (uint64_t *)v185);
            long long v116 = (uint64_t *)(v113 + 8);
            if (!v115)
            {
              long long v116 = (uint64_t *)v113;
              int v114 = (uint64_t *)v113;
            }
            uint64_t v113 = *v116;
          }
          while (*v116);
          if (v114 == &qword_268C40D08
            || std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D10, (uint64_t *)v185, v114 + 4))
          {
LABEL_280:
            int v114 = &qword_268C40D08;
          }
          if ((v185[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          memset(v229, 0, sizeof(v229));
          long long v227 = v200;
          long long v228 = v201;
          RETypeInfoGetDictionaryValueType();
          uint64_t v226 = 0;
          *(_OWORD *)uint64_t v223 = *(_OWORD *)v229;
          long long v224 = *(_OWORD *)&v229[16];
          if (v114 != &qword_268C40D08)
          {
            BOOL v117 = (realityio *)MEMORY[0x2455CF830](v185, &v180);
            BOOL v118 = v114 + 6;
            BOOL v119 = (void *)v114[6];
            if (!v119) {
              goto LABEL_291;
            }
            uint64_t v120 = (uint64_t)(v114 + 7);
            uint64_t v121 = v118;
            do
            {
              BOOL v117 = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v120, v119 + 4, (uint64_t *)v185);
              std::string::size_type v122 = v119 + 1;
              if (!v117)
              {
                std::string::size_type v122 = v119;
                uint64_t v121 = v119;
              }
              BOOL v119 = (void *)*v122;
            }
            while (*v122);
            if (v121 == v118
              || (BOOL v117 = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v120, (uint64_t *)v185, v121 + 4), v117))
            {
LABEL_291:
              uint64_t v121 = v118;
            }
            if ((v185[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v118 != v121)
            {
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)v185, (uint64_t)(v121 + 5));
              v123 = *(std::string **)&v185[24];
              if (*(unsigned char **)&v185[24] == v185)
              {
                if (v226 == &v225)
                {
                  (*(void (**)(unsigned char *, void **))(*(void *)v185 + 24))(v185, __src);
                  (*(void (**)(void))(**(void **)&v185[24] + 32))(*(void *)&v185[24]);
                  *(void *)&v185[24] = 0;
                  (*(void (**)(std::string *, unsigned char *))(v226->__r_.__value_.__r.__words[0] + 24))(v226, v185);
                  (*(void (**)(std::string *))(v226->__r_.__value_.__r.__words[0] + 32))(v226);
                  uint64_t v226 = 0;
                  *(void *)&v185[24] = v185;
                  (*((void (**)(void **, std::string *))__src[0] + 3))(__src, &v225);
                  (*((void (**)(void **))__src[0] + 4))(__src);
                }
                else
                {
                  (*(void (**)(unsigned char *, std::string *))(*(void *)v185 + 24))(v185, &v225);
                  (*(void (**)(void))(**(void **)&v185[24] + 32))(*(void *)&v185[24]);
                  *(void *)&v185[24] = v226;
                }
                v123 = &v225;
LABEL_357:
                uint64_t v226 = v123;
              }
              else
              {
                if (v226 != &v225)
                {
                  *(void *)&v185[24] = v226;
                  goto LABEL_357;
                }
                (*(void (**)(std::string *, unsigned char *))(v225.__r_.__value_.__r.__words[0] + 24))(&v225, v185);
                (*(void (**)(std::string *))(v226->__r_.__value_.__r.__words[0] + 32))(v226);
                uint64_t v226 = *(std::string **)&v185[24];
                *(void *)&v185[24] = v185;
              }
              BOOL v117 = (realityio *)std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](v185);
            }
          }
          if (v226)
          {
            *(void *)v185 = *(void *)&buf[16];
            operator new();
          }
          unint64_t v139 = *(id *)(realityio::logObjects(v117) + 24);
          if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
          {
            if ((v180.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v140 = &v180;
            }
            else {
              std::string::size_type v140 = (std::string *)v180.__r_.__value_.__r.__words[0];
            }
            unint64_t v141 = *(void *)&buf[24] & 0xFFFFFFFFFFFFFFF8;
            if ((*(void *)&buf[24] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              int v142 = (const char *)(v141 + 16);
              if (*(char *)(v141 + 39) < 0) {
                int v142 = *(const char **)v142;
              }
            }
            else
            {
              int v142 = "";
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v230, __src);
            uint64_t v143 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__src);
            *(_DWORD *)v185 = 136315650;
            *(void *)&v185[4] = v140;
            *(_WORD *)&v185[12] = 2080;
            *(void *)&v185[14] = v142;
            *(_WORD *)&v185[22] = 2080;
            *(void *)&v185[24] = v143;
            _os_log_impl(&dword_23F4EA000, v139, OS_LOG_TYPE_DEFAULT, "Unsupported hashtable type conversion USD values (\"%s\") to RE (\"%s\") for \"%s\" ", v185, 0x20u);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__src);
          }

          if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v180.__r_.__value_.__l.__data_);
          }
          std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v225);
          if ((BYTE8(v231) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231);
          if (*((void *)&v230 + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v230 + 1));
          }
          *(void *)v185 = v179;
          std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)v185);
          if ((v170 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v169.__r_.__value_.__r.__words[2]);
          if (v169.__r_.__value_.__l.__size_) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v169.__r_.__value_.__l.__size_);
          }
LABEL_428:
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v172.__r_.__value_.__l.__data_);
          }
          if ((buf[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&buf[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v110 = (void *)v173.__r_.__value_.__r.__words[0];
            goto LABEL_436;
          }
          goto LABEL_437;
        }
        v223[1] = 0;
        v223[0] = 0;
        *(void *)&long long v224 = 0;
        size_t v124 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a6 + 1);
        memset(&v169, 0, sizeof(v169));
        MEMORY[0x2455CF810](v185, "values");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((uint64_t *)&v230, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v174, (const pxrInternal__aapl__pxrReserved__::TfToken *)v185);
        if ((v185[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets();
        memset(v229, 0, sizeof(v229));
        long long v194 = v200;
        long long v195 = v201;
        RETypeInfoGetDictionaryValueType();
        if (v169.__r_.__value_.__l.__size_ != v169.__r_.__value_.__r.__words[0])
        {
          pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath((uint64_t *)v185, v124, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v169.__r_.__value_.__l.__data_);
          int v125 = *(_DWORD *)v185;
          if ((v185[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v185[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185[16]);
          if (*(void *)&v185[8]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v185[8]);
          }
          pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath((uint64_t *)v185, v124, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v169.__r_.__value_.__l.__data_);
          int v126 = *(_DWORD *)v185;
          if ((v185[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v185[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185[16]);
          if (*(void *)&v185[8]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v185[8]);
          }
          long long v192 = *(_OWORD *)v229;
          long long v193 = *(_OWORD *)&v229[16];
          size_t v127 = (char *)RETypeInfoGetName();
          std::string::basic_string[abi:ne180100]<0>(__src, v127);
          long long v190 = *(_OWORD *)v229;
          long long v191 = *(_OWORD *)&v229[16];
          if (RETypeInfoIsList())
          {
            if (v125 == 3) {
              goto LABEL_311;
            }
LABEL_343:
            if (v126 != 1) {
              goto LABEL_386;
            }
            v182[2] = *(_OWORD *)v229;
            v182[3] = *(_OWORD *)&v229[16];
            if (!RETypeInfoIsObject()) {
              goto LABEL_386;
            }
            if ((v233 & 0x80000000) == 0)
            {
              if (v233 == 11)
              {
                v136 = __src;
                goto LABEL_382;
              }
              goto LABEL_386;
            }
            if (__src[1] != (void *)11) {
              goto LABEL_386;
            }
            v136 = (void **)__src[0];
LABEL_382:
            v144 = *v136;
            uint64_t v145 = *(uint64_t *)((char *)v136 + 3);
            if (v144 == (void *)0x6E61487465737341 && v145 == 0x656C646E61487465)
            {
              if (v223[1] != v223[0])
              {
                uint64_t v151 = 0;
                uint64_t v152 = 0;
                unint64_t v153 = 0;
                do
                {
                  if (((uint64_t)(v169.__r_.__value_.__l.__size_ - v169.__r_.__value_.__r.__words[0]) >> 3) - 1 < v153) {
                    break;
                  }
                  uint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v169.__r_.__value_.__r.__words[0] + v152));
                  if (*(char *)(String + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v185, *(const std::string::value_type **)String, *(void *)(String + 8));
                  }
                  else
                  {
                    long long v155 = *(_OWORD *)String;
                    *(void *)&v185[16] = *(void *)(String + 16);
                    *(_OWORD *)v185 = v155;
                  }
                  realityio::ImportSession::extraAssets(a6[5], (uint64_t *)&v227);
                  v225.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
                  uint64_t v156 = std::__tree<std::__value_type<std::string,REAsset *>,std::__map_value_compare<std::string,std::__value_type<std::string,REAsset *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,REAsset *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v227, (const void **)v185, (uint64_t)&std::piecewise_construct, (long long **)&v225)[7];
                  std::__tree<std::string>::destroy((uint64_t)&v227, *((char **)&v227 + 1));
                  if (v156)
                  {
                    uint64_t v157 = *(std::__shared_weak_count **)((char *)v223[0] + v151 + 8);
                    if (v157) {
                      atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    MEMORY[0x2455CF810](&v167, "AssetHandle");
                    uint64_t v159 = v151;
                    if (v157)
                    {
                      atomic_fetch_add_explicit(&v157->__shared_owners_, 1uLL, memory_order_relaxed);
                      uint64_t v158 = v167;
                      uint64_t v167 = 0;
                      std::__shared_weak_count::__release_shared[abi:ne180100](v157);
                    }
                    else
                    {
                      uint64_t v158 = v167;
                      uint64_t v167 = 0;
                    }
                    REAssetHandleSet();
                    if ((v158 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v158 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    uint64_t v151 = v159;
                    if (v157) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v157);
                    }
                  }
                  if ((v185[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v185);
                  }
                  ++v153;
                  v152 += 8;
                  v151 += 16;
                }
                while (v153 < (v223[1] - v223[0]) >> 4);
              }
            }
            else
            {
LABEL_386:
              if (v223[1] != v223[0])
              {
                uint64_t v147 = 0;
                unint64_t v148 = 0;
                while (1)
                {
                  if (((uint64_t)(v169.__r_.__value_.__l.__size_ - v169.__r_.__value_.__r.__words[0]) >> 3) - 1 < v148) {
                    goto LABEL_421;
                  }
                  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)v185, v124, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v169.__r_.__value_.__r.__words[0] + v147));
                  long long v149 = *((_OWORD *)v223[0] + v148);
                  long long v166 = v149;
                  v150 = (std::__shared_weak_count *)*((void *)&v149 + 1);
                  if (*((void *)&v149 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v149 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  v182[0] = *(_OWORD *)v229;
                  v182[1] = *(_OWORD *)&v229[16];
                  v181[2] = *(_OWORD *)v229;
                  v181[3] = *(_OWORD *)&v229[16];
                  RETypeInfoGetSize();
                  std::string::basic_string[abi:ne180100]<0>(&v227, "");
                  buildValueType(v185, &v166, v182, a4, &v227, a6, 0, 1);
                  if (SBYTE7(v228) < 0) {
                    break;
                  }
                  if (v150) {
                    goto LABEL_393;
                  }
LABEL_394:
                  if ((v185[24] & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v185[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185[16]);
                  if (*(void *)&v185[8]) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v185[8]);
                  }
                  ++v148;
                  v147 += 8;
                  if (v148 >= (v223[1] - v223[0]) >> 4) {
                    goto LABEL_421;
                  }
                }
                operator delete((void *)v227);
                if (!v150) {
                  goto LABEL_394;
                }
LABEL_393:
                std::__shared_weak_count::__release_shared[abi:ne180100](v150);
                goto LABEL_394;
              }
            }
LABEL_421:
            if (v233 < 0) {
              goto LABEL_422;
            }
          }
          else
          {
            long long v188 = *(_OWORD *)v229;
            long long v189 = *(_OWORD *)&v229[16];
            char IsArray = RETypeInfoIsArray();
            if (v125 == 3) {
              char v135 = IsArray;
            }
            else {
              char v135 = 0;
            }
            if ((v135 & 1) == 0) {
              goto LABEL_343;
            }
LABEL_311:
            MEMORY[0x2455CF810](v185, "counts");
            size_t v128 = (realityio *)pxrInternal__aapl__pxrReserved__::UsdPrim::HasAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v174, (const pxrInternal__aapl__pxrReserved__::TfToken *)v185);
            if ((v185[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v185 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v128)
            {
              if (v223[1] != v223[0])
              {
                uint64_t v129 = 0;
                unint64_t v130 = 0;
                do
                {
                  if (((uint64_t)(v169.__r_.__value_.__l.__size_ - v169.__r_.__value_.__r.__words[0]) >> 3) - 1 < v130) {
                    break;
                  }
                  std::string v131 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)*a6 + 1);
                  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath((uint64_t *)&v227, v131, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v169.__r_.__value_.__r.__words[0] + v129));
                  pxrInternal__aapl__pxrReserved__::UsdObject::As<pxrInternal__aapl__pxrReserved__::UsdAttribute>((uint64_t)&v227, (uint64_t)&v225);
                  long long v132 = *((_OWORD *)v223[0] + v130);
                  long long v161 = v132;
                  std::string v133 = (std::__shared_weak_count *)*((void *)v223[0] + 2 * v130 + 1);
                  if (*((void *)&v132 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v132 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  v180.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v225);
                  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v168, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v180);
                  long long v183 = *(_OWORD *)v229;
                  long long v184 = *(_OWORD *)&v229[16];
                  *(_OWORD *)v185 = v161;
                  if (v133) {
                    atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  *(void *)&v185[16] = v161;
                  *(void *)&v185[24] = v168;
                  uint64_t v168 = 0;
                  long long v186 = v183;
                  long long v187 = v184;
                  if ((v185[24] & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v185[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if (*(void *)&v185[8]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v185[8]);
                  }
                  if ((v168 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if (v133) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v133);
                  }
                  if ((v226 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v226 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v225.__r_.__value_.__r.__words[2]);
                  if (v225.__r_.__value_.__l.__size_) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v225.__r_.__value_.__l.__size_);
                  }
                  if ((BYTE8(v228) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v228 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v228);
                  if (*((void *)&v227 + 1)) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v227 + 1));
                  }
                  ++v130;
                  v129 += 8;
                }
                while (v130 < (v223[1] - v223[0]) >> 4);
              }
              goto LABEL_421;
            }
            std::string::size_type v137 = *(id *)(realityio::logObjects(v128) + 24);
            if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v174, &v227);
              uint64_t v138 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v227);
              *(_DWORD *)v185 = 136315138;
              *(void *)&v185[4] = v138;
              _os_log_impl(&dword_23F4EA000, v137, OS_LOG_TYPE_DEFAULT, "Missing \"counts\" at prim path: \"%s\"", v185, 0xCu);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v227);
            }

            if (v233 < 0) {
LABEL_422:
            }
              operator delete(__src[0]);
          }
        }
        if ((BYTE8(v231) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v231 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v231);
        if (*((void *)&v230 + 1)) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v230 + 1));
        }
        *(void *)v185 = &v169;
        std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)v185);
        *(void *)v185 = v223;
        std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)v185);
        goto LABEL_428;
      }
      int v101 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v174);
      if ((*(void *)v101 & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v102 = (*(void *)v101 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t v102 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v101);
      }
      if (*(char *)(v102 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)v102, *(void *)(v102 + 8));
      }
      else
      {
        long long v104 = *(_OWORD *)v102;
        *(void *)&uint8_t buf[16] = *(void *)(v102 + 16);
        *(_OWORD *)std::string buf = v104;
      }
      int v108 = (std::__shared_weak_count *)a2[1];
      v165[0] = *a2;
      v165[1] = v108;
      if (v108) {
        atomic_fetch_add_explicit(&v108->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v109 = a3[1];
      v181[0] = *a3;
      v181[1] = v109;
      buildValueType(&v174, v165, v181, a4, v185, a6, 0, 0);
      if (v108) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v108);
      }
      if ((v185[23] & 0x80000000) != 0) {
        operator delete(*(void **)v185);
      }
      if ((buf[23] & 0x80000000) != 0)
      {
        uint64_t v110 = *(void **)buf;
LABEL_436:
        operator delete(v110);
      }
LABEL_437:
      if ((v175 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v175 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v174.__r_.__value_.__r.__words[2]);
      if (v174.__r_.__value_.__l.__size_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v174.__r_.__value_.__l.__size_);
      }
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)v204);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v202[8]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204[8]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v209);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[8]);
  }
  else
  {
    size_t v60 = *(id *)(realityio::logObjects(IsValid) + 24);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v12, buf);
      uint64_t v61 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
      if (*((char *)a4 + 23) >= 0) {
        int v62 = a4;
      }
      else {
        int v62 = (uint64_t *)*a4;
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v61;
      *(_WORD *)&__p[12] = 2080;
      *(void *)&__p[14] = v62;
      _os_log_impl(&dword_23F4EA000, v60, OS_LOG_TYPE_DEFAULT, "Unknown Prim \"%s\" for \"%s\" from attribute: ", __p, 0x16u);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
    }
  }
}

void sub_23F732620()
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x690]);

  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x420]);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v2 - 256));
  STACK[0x420] = (unint64_t)&STACK[0x320];
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x420]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (*(char *)(v2 - 201) < 0) {
    operator delete(*(void **)(v2 - 224));
  }
  if ((STACK[0x4D8] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4D8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (STACK[0x4C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4C8]);
  }
  if (*(char *)(v2 - 169) < 0) {
    operator delete(*(void **)(v2 - 192));
  }
  STACK[0x4C0] = v2 - 160;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C0]);
  STACK[0x4C0] = (unint64_t)&STACK[0x460];
  std::vector<pxrInternal__aapl__pxrReserved__::UsdRelationship>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C0]);
  JUMPOUT(0x23F73307CLL);
}

void sub_23F7327A4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x23F73307CLL);
}

void sub_23F7327BC()
{
}

void sub_23F732800()
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x420]);

  JUMPOUT(0x23F73307CLL);
}

void sub_23F73281C()
{
}

void sub_23F732828()
{
  if ((STACK[0x420] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x420] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  JUMPOUT(0x23F732E5CLL);
}

void sub_23F73284C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  std::__tree<std::string>::destroy(v55 - 224, *(char **)(v55 - 216));
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (*(char *)(v55 - 105) < 0) {
    operator delete(*(void **)(v55 - 128));
  }
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v55 - 160));
  STACK[0x320] = (unint64_t)&a55;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x690];
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  JUMPOUT(0x23F732FF4);
}

void sub_23F732888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v56 - 128));

  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((void *)(v56 - 256));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v56 - 160));
  *(void *)(v56 - 192) = &STACK[0x250];
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 192));
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a55);
  JUMPOUT(0x23F732FF4);
}

void sub_23F7328C0()
{
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&STACK[0x320]);

  JUMPOUT(0x23F732C64);
}

void sub_23F7328E8()
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  JUMPOUT(0x23F732E4CLL);
}

void sub_23F7328F8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x23F73307CLL);
}

void sub_23F732910()
{
}

void sub_23F732920()
{
  if ((STACK[0x460] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x460] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SLOBYTE(STACK[0x4D7]) < 0) {
    operator delete((void *)STACK[0x4C0]);
  }
  if ((STACK[0x490] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x490] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((STACK[0x320] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((STACK[0x420] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x420] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  JUMPOUT(0x23F732C88);
}

void sub_23F732A14()
{
  if (STACK[0x328]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x328]);
  }
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((void *)(v0 - 256));
  JUMPOUT(0x23F732FD4);
}

void sub_23F732A2C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x23F73307CLL);
}

void sub_23F732A44()
{
  __cxa_end_catch();
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((void *)(v0 - 256));
  JUMPOUT(0x23F732FD4);
}

void sub_23F732AA0()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  JUMPOUT(0x23F732C64);
}

void sub_23F732AD0()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    operator delete((void *)STACK[0x420]);
  }
  JUMPOUT(0x23F732E5CLL);
}

void sub_23F732AF4()
{
}

void sub_23F732AFC()
{
}

void sub_23F732B18()
{
  if ((STACK[0x320] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  JUMPOUT(0x23F732DD4);
}

void sub_23F732B38()
{
}

void sub_23F732B40()
{
}

void sub_23F732B54()
{
}

void sub_23F732B60()
{
  if ((STACK[0x320] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  JUMPOUT(0x23F732FDCLL);
}

void sub_23F732BB4()
{
}

void sub_23F732BBC()
{
}

void sub_23F732BDC()
{
}

void sub_23F732BE4()
{
}

void sub_23F732BEC()
{
}

void sub_23F732BF4()
{
  pxrInternal__aapl__pxrReserved__::UsdObject::~UsdObject((pxrInternal__aapl__pxrReserved__::UsdObject *)(v0 - 224));
  JUMPOUT(0x23F732DBCLL);
}

void sub_23F732C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  if ((STACK[0x338] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x338] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (STACK[0x328]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x328]);
  }
  if ((a54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v55 - 256));
  JUMPOUT(0x23F732DB4);
}

void sub_23F732C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (*(char *)(v73 - 233) < 0) {
    operator delete(*(void **)(v73 - 256));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::TfToken,realityio::DetailedError>::~Result((uint64_t)&STACK[0x420]);
  if ((STACK[0x4D8] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4D8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (STACK[0x4C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x4C8]);
  }
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  STACK[0x4C0] = (unint64_t)&STACK[0x690];
  std::vector<pxrInternal__aapl__pxrReserved__::UsdAttribute>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x4C0]);
  JUMPOUT(0x23F73307CLL);
}

void sub_23F732CB0()
{
}

void sub_23F732CB8()
{
  if (*(char *)(v1 - 233) < 0) {
    operator delete(*(void **)(v1 - 256));
  }
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x320]);
  JUMPOUT(0x23F732CE8);
}

void sub_23F732CF0()
{
}

void sub_23F732CFC()
{
}

void sub_23F732D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v55 - 160));
  *(void *)(v55 - 192) = &STACK[0x250];
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](v55 - 192);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a55);
  JUMPOUT(0x23F732FF4);
}

void sub_23F732D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if ((STACK[0x320] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if ((STACK[0x438] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x438] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (STACK[0x428]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (a73 < 0) {
    operator delete(a68);
  }
  JUMPOUT(0x23F73305CLL);
}

void sub_23F732D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x320]);
  if (*(char *)(v56 - 105) < 0) {
    operator delete(*(void **)(v56 - 128));
  }
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v56 - 160));
  STACK[0x320] = (unint64_t)&a55;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x690];
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x320]);
  JUMPOUT(0x23F732FF4);
}

void sub_23F732D8C()
{
}

void sub_23F732D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (*(char *)(v55 - 105) < 0) {
    operator delete(*(void **)(v55 - 128));
  }
  pxrInternal__aapl__pxrReserved__::UsdRelationship::~UsdRelationship((pxrInternal__aapl__pxrReserved__::UsdRelationship *)(v55 - 160));
  STACK[0x320] = (unint64_t)&a55;
  std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>::__destroy_vector::operator()[abi:ne180100](&STACK[0x320]);
  STACK[0x320] = (unint64_t)&STACK[0x690];
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x320]);
  JUMPOUT(0x23F732FF4);
}

void sub_23F732DF8()
{
}

void sub_23F732E04()
{
}

void sub_23F732E10()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x490]);
  JUMPOUT(0x23F732E4CLL);
}

void sub_23F732E48()
{
}

void sub_23F732EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if ((STACK[0x438] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x438] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (STACK[0x428]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x428]);
  }
  if (a73 < 0) {
    operator delete(a68);
  }
  JUMPOUT(0x23F73305CLL);
}

void sub_23F732F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a67 < 0) {
    operator delete(a62);
  }
  if ((STACK[0x438] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x438] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (STACK[0x428]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  if (a73 < 0) {
    operator delete(a68);
  }
  JUMPOUT(0x23F73305CLL);
}

void sub_23F732F0C()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x437]) < 0) {
    JUMPOUT(0x23F733034);
  }
  JUMPOUT(0x23F73305CLL);
}

void sub_23F732F4C()
{
}

void sub_23F732F54()
{
  if ((STACK[0x420] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x420] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  JUMPOUT(0x23F73305CLL);
}

void sub_23F732F74()
{
  if ((STACK[0x320] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SLOBYTE(STACK[0x27F]) < 0) {
    operator delete((void *)STACK[0x268]);
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](v0 - 256);
  JUMPOUT(0x23F732FD4);
}

void sub_23F733040(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::scrubAttrName(std::string *a1, const void **a2, uint64_t a3)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v5)
  {
    uint64_t v7 = &v18;
    std::string::basic_string[abi:ne180100]((uint64_t)&v18, v5 + 1);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v7 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if (*((char *)a2 + 23) >= 0) {
      char v8 = a2;
    }
    else {
      char v8 = *a2;
    }
    memmove(v7, v8, v5);
    *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v5) = 58;
    int v9 = *(char *)(a3 + 23);
    if (v9 >= 0) {
      char v10 = (const std::string::value_type *)a3;
    }
    else {
      char v10 = *(const std::string::value_type **)a3;
    }
    if (v9 >= 0) {
      std::string::size_type v11 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      std::string::size_type v11 = *(void *)(a3 + 8);
    }
    uint64_t v12 = std::string::append(&v18, v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    std::string v19 = *(std::string *)a3;
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40D40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40D40))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_268C40DA0, "[^A-Za-z0-9_]", 0);
  }
  std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v15 = &v19;
  }
  else {
    int v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
  }
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char *>,std::regex_traits<char>,char>(a1, (char *)v15, (char *)v15 + size, (uint64_t)&unk_268C40DA0, "_", 0);
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v16 = a1;
  }
  else {
    long long v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  int v17 = v16->__r_.__value_.__s.__data_[0];
  if ((v17 & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x263EF8318] + 4 * v17 + 60) & 0x400) != 0)
  {
    std::operator+<char>();
    if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a1->__r_.__value_.__l.__data_);
    }
    *a1 = v18;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_23F733298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_guard_abort(&qword_268C40D40);
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::allocateAndFindMemberInfo(uint64_t a1, unsigned __int8 *a2, long long *a3, int a4, const void **a5, uint64_t *a6)
{
  uint64_t v126 = *MEMORY[0x263EF8340];
  long long v6 = a3[1];
  long long v93 = *a3;
  long long v94 = v6;
  ObjectMemberCFIndex Count = RETypeInfoGetObjectMemberCount();
  if (ObjectMemberCount)
  {
    uint64_t v7 = 0;
    int v62 = (long long *)(a1 + 32);
    BOOL v67 = 1;
    while (1)
    {
      uint64_t v92 = 0;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v8 = a3[1];
      long long v88 = *a3;
      long long v89 = v8;
      RETypeInfoGetObjectMemberByIndex();
      long long v85 = v90;
      long long v86 = v91;
      uint64_t v87 = v92;
      uint64_t Name = (char *)RETypeMemberInfoGetName();
      std::string::basic_string[abi:ne180100]<0>(v73, Name);
      long long v82 = v90;
      long long v83 = v91;
      uint64_t v84 = v92;
      int Offset = RETypeMemberInfoGetOffset();
      long long v79 = v90;
      long long v80 = v91;
      uint64_t v81 = v92;
      uint64_t v11 = *a6;
      uint64_t v12 = (std::__shared_weak_count *)a6[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v122 = 0u;
      long long v123 = 0u;
      uint64_t v121 = v81;
      long long v119 = v79;
      long long v120 = v80;
      RETypeMemberInfoGetMemberType();
      long long v117 = v122;
      long long v118 = v123;
      uint64_t v13 = (Offset + a4);
      if (RETypeInfoIsPointer())
      {
        long long v115 = v122;
        long long v116 = v123;
        uint64_t v14 = RETypeInfoDereferencePointer();
        long long v113 = v122;
        long long v114 = v123;
        RETypeInfoGetReferencedType();
        long long v122 = v124;
        long long v123 = v125;
        if (v14) {
          operator new();
        }
        long long v111 = v122;
        long long v112 = v123;
        RETypeInfoCreateInstance();
        long long v109 = v122;
        long long v110 = v123;
        operator new();
      }
      long long v124 = v122;
      long long v125 = v123;
      uint64_t v16 = qword_268C40CC8;
      if (qword_268C40CC8)
      {
        int v17 = &qword_268C40CC8;
        do
        {
          BOOL v18 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268C40CD0, (const void **)(v16 + 32), (const void **)&v78.__r_.__value_.__l.__data_);
          std::string v19 = (uint64_t *)(v16 + 8);
          if (!v18)
          {
            std::string v19 = (uint64_t *)v16;
            int v17 = (uint64_t *)v16;
          }
          uint64_t v16 = *v19;
        }
        while (*v19);
        if (v17 != &qword_268C40CC8
          && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268C40CD0, (const void **)&v78.__r_.__value_.__l.__data_, (const void **)v17 + 4))
        {
          break;
        }
      }
      long long v107 = v122;
      long long v108 = v123;
      int Category = RETypeInfoGetCategory();
      uint64_t v71 = v12;
      size_t v21 = a2[23];
      size_t v22 = *((void *)a2 + 1);
      std::string::size_type v23 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v72.__r_.__value_.__l.__size_;
      if (Category == 2)
      {
        uint64_t v25 = (v21 & 0x80u) == 0 ? a2[23] : *((void *)a2 + 1);
        std::string::size_type v26 = (v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v72.__r_.__value_.__r.__words[2])
            : v72.__r_.__value_.__l.__size_;
        if (v25 == v26)
        {
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v27 = &v72;
          }
          else {
            size_t v27 = (std::string *)v72.__r_.__value_.__r.__words[0];
          }
          if ((v21 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)a2, v27, *((void *)a2 + 1)))
            {
LABEL_82:
              uint64_t v12 = v71;
              if (v71) {
                atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MEMORY[0x2455CF830](&v101, &v78);
              long long v103 = v122;
              long long v104 = v123;
              if (v71) {
                atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v45 = v101;
              *(void *)&long long v101 = 0;
              long long v105 = v103;
              long long v106 = v104;
              long long v46 = *(std::__shared_weak_count **)(a1 + 8);
              *(void *)a1 = v11;
              *(void *)(a1 + 8) = v71;
              if (v46) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v46);
              }
              *(void *)(a1 + 16) = v11 + v13;
              uint64_t v47 = *(void *)(a1 + 24);
              if ((v47 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v45;
              long long v48 = v106;
              *int v62 = v105;
              *(_OWORD *)(a1 + 48) = v48;
              uint64_t v44 = v101;
              goto LABEL_121;
            }
          }
          else
          {
            if (!a2[23]) {
              goto LABEL_82;
            }
            uint64_t v28 = a2;
            uint64_t v29 = a2[23];
            while (*v28 == v27->__r_.__value_.__s.__data_[0])
            {
              ++v28;
              size_t v27 = (std::string *)((char *)v27 + 1);
              if (!--v29) {
                goto LABEL_82;
              }
            }
          }
        }
      }
      if ((v21 & 0x80u) == 0) {
        size_t v35 = v21;
      }
      else {
        size_t v35 = v22;
      }
      if ((v23 & 0x80u) == 0) {
        std::string::size_type v36 = v23;
      }
      else {
        std::string::size_type v36 = size;
      }
      if (v35 == v36)
      {
        if ((v23 & 0x80u) == 0) {
          BOOL v37 = &v72;
        }
        else {
          BOOL v37 = (std::string *)v72.__r_.__value_.__r.__words[0];
        }
        if ((v21 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a2, v37, v22))
          {
LABEL_71:
            long long v105 = v122;
            long long v106 = v123;
            uint64_t v12 = v71;
            if (RETypeInfoGetCategory() != 4
              || (long long v103 = v122, v104 = v123, (RETypeInfoIsFixedSizeArray() & 1) != 0))
            {
              if (v71) {
                atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              MEMORY[0x2455CF830](v98, &v78);
              long long v99 = v122;
              long long v100 = v123;
              if (v71) {
                atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v40 = *(void *)&v98[0];
              *(void *)&v98[0] = 0;
              long long v101 = v99;
              long long v102 = v100;
              uint64_t v41 = *(std::__shared_weak_count **)(a1 + 8);
              *(void *)a1 = v11;
              *(void *)(a1 + 8) = v71;
              if (v41) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              }
              *(void *)(a1 + 16) = v11 + v13;
              uint64_t v42 = *(void *)(a1 + 24);
              if ((v42 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v40;
              long long v43 = v102;
              *int v62 = v101;
              *(_OWORD *)(a1 + 48) = v43;
              uint64_t v44 = *(void *)&v98[0];
              goto LABEL_121;
            }
            long long v101 = 0u;
            long long v102 = 0u;
            long long v99 = v122;
            long long v100 = v123;
            RETypeInfoGetArrayElementType();
            v98[0] = v101;
            v98[1] = v102;
            uint64_t v49 = (char *)RETypeInfoGetName();
            std::string::basic_string[abi:ne180100]<0>(v97, v49);
            size_t v50 = std::string::append((std::string *)v97, "[]");
            long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            int64_t v77 = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            if ((v97[23] & 0x80000000) != 0) {
              operator delete(*(void **)v97);
            }
            if (v71) {
              atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v77 >= 0) {
              int v52 = __p;
            }
            else {
              int v52 = (void **)__p[0];
            }
            MEMORY[0x2455CF810](&v75, v52);
            long long v95 = v122;
            long long v96 = v123;
            if (v71) {
              atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v53 = v75;
            uint64_t v75 = 0;
            *(_OWORD *)uint64_t v97 = v95;
            *(_OWORD *)&v97[16] = v96;
            std::string::size_type v54 = *(std::__shared_weak_count **)(a1 + 8);
            *(void *)a1 = v11;
            *(void *)(a1 + 8) = v71;
            if (v54) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v54);
            }
            *(void *)(a1 + 16) = v11 + v13;
            uint64_t v55 = *(void *)(a1 + 24);
            if ((v55 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v53;
            long long v56 = *(_OWORD *)&v97[16];
            *int v62 = *(_OWORD *)v97;
            *(_OWORD *)(a1 + 48) = v56;
            if ((v75 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (v71) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v71);
            }
            if (SHIBYTE(v77) < 0) {
              operator delete(__p[0]);
            }
LABEL_125:
            char MemberInfo = 1;
            goto LABEL_126;
          }
        }
        else
        {
          if (!v21) {
            goto LABEL_71;
          }
          int v38 = a2;
          while (*v38 == v37->__r_.__value_.__s.__data_[0])
          {
            ++v38;
            BOOL v37 = (std::string *)((char *)v37 + 1);
            if (!--v21) {
              goto LABEL_71;
            }
          }
        }
      }
      long long v105 = v122;
      long long v106 = v123;
      uint64_t v12 = v71;
      if (RETypeInfoGetCategory() != 8) {
        goto LABEL_111;
      }
      long long v103 = v122;
      long long v104 = v123;
      *(void *)&long long v101 = v11;
      *((void *)&v101 + 1) = v71;
      if (v71) {
        atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v71) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v71);
      }
LABEL_126:
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v78.__r_.__value_.__l.__data_);
        if (!v12) {
          goto LABEL_129;
        }
LABEL_128:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        goto LABEL_129;
      }
      if (v12) {
        goto LABEL_128;
      }
LABEL_129:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v72.__r_.__value_.__l.__data_);
      }
      if (v74 < 0) {
        operator delete(v73[0]);
      }
      if ((MemberInfo & 1) == 0)
      {
        BOOL v67 = ++v7 < ObjectMemberCount;
        if (v7 != ObjectMemberCount) {
          continue;
        }
      }
      return v67;
    }
    uint64_t v30 = a2[23];
    if ((v30 & 0x80u) == 0) {
      uint64_t v31 = a2[23];
    }
    else {
      uint64_t v31 = *((void *)a2 + 1);
    }
    std::string::size_type v32 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v32 = v72.__r_.__value_.__l.__size_;
    }
    if (v31 != v32) {
      goto LABEL_111;
    }
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v33 = &v72;
    }
    else {
      long long v33 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    if ((v30 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v33, *((void *)a2 + 1))) {
        goto LABEL_111;
      }
    }
    else if (a2[23])
    {
      unint64_t v34 = a2;
      while (*v34 == v33->__r_.__value_.__s.__data_[0])
      {
        ++v34;
        long long v33 = (std::string *)((char *)v33 + 1);
        if (!--v30) {
          goto LABEL_112;
        }
      }
LABEL_111:
      char MemberInfo = 0;
      goto LABEL_126;
    }
LABEL_112:
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MEMORY[0x2455CF830](&v103, &v78);
    long long v105 = v122;
    long long v106 = v123;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v57 = v103;
    *(void *)&long long v103 = 0;
    long long v107 = v105;
    long long v108 = v106;
    std::string v58 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    if (v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
    }
    *(void *)(a1 + 16) = v11 + v13;
    uint64_t v59 = *(void *)(a1 + 24);
    if ((v59 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v57;
    long long v60 = v108;
    *int v62 = v107;
    *(_OWORD *)(a1 + 48) = v60;
    uint64_t v44 = v103;
LABEL_121:
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    goto LABEL_125;
  }
  return 0;
}

void sub_23F733C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::setComponentDataUsingInfo(_anonymous_namespace_ *a1, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  *(void *)&long long v32 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  uint64_t AsToken = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v32);
  uint64_t v5 = qword_268C40CE8;
  if (!qword_268C40CE8) {
    goto LABEL_8;
  }
  long long v6 = &qword_268C40CE8;
  do
  {
    uint64_t AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40CF0, (uint64_t *)(v5 + 32), (uint64_t *)buf);
    uint64_t v7 = (uint64_t *)(v5 + 8);
    if (!AsToken)
    {
      uint64_t v7 = (uint64_t *)v5;
      long long v6 = (uint64_t *)v5;
    }
    uint64_t v5 = *v7;
  }
  while (*v7);
  if (v6 == &qword_268C40CE8
    || (uint64_t AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40CF0, (uint64_t *)buf, v6 + 4), AsToken))
  {
LABEL_8:
    long long v6 = &qword_268C40CE8;
  }
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v6 != &qword_268C40CE8)
  {
    long long v8 = v6 + 6;
    int v9 = (void *)v6[6];
    if (v9)
    {
      uint64_t v10 = (uint64_t)(v6 + 7);
      uint64_t v11 = v8;
      do
      {
        uint64_t AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v10, v9 + 4, (uint64_t *)(a2 + 24));
        uint64_t v12 = v9 + 1;
        if (!AsToken)
        {
          uint64_t v12 = v9;
          uint64_t v11 = v9;
        }
        int v9 = (void *)*v12;
      }
      while (*v12);
      if (v11 != v8)
      {
        uint64_t AsToken = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v10, (uint64_t *)(a2 + 24), v11 + 4);
        if ((AsToken & 1) == 0)
        {
          uint64_t v13 = (void *)std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)(v11 + 5));
          if (!v38)
          {
LABEL_23:
            uint64_t AsToken = (uint64_t)std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v13);
            goto LABEL_24;
          }
          long long v14 = *(_OWORD *)(a2 + 48);
          long long v32 = *(_OWORD *)(a2 + 32);
          long long v33 = v14;
          long long v30 = v32;
          long long v31 = v14;
          if (RETypeInfoIsOptional())
          {
            memset(v29, 0, sizeof(v29));
            long long v15 = *(_OWORD *)(a2 + 48);
            long long v27 = *(_OWORD *)(a2 + 32);
            long long v28 = v15;
            RETypeInfoGetOptionalValueType();
            long long v25 = 0u;
            long long v26 = 0u;
            uint64_t Instance = RETypeInfoCreateInstance();
            long long v32 = 0u;
            long long v33 = 0u;
            if (!Instance)
            {
LABEL_22:
              uint64_t v13 = buf;
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t Instance = *(void *)(a2 + 16);
            if (!Instance) {
              goto LABEL_22;
            }
          }
          uint64_t v24 = Instance;
          operator new();
        }
      }
    }
  }
LABEL_24:
  int v17 = *(id *)(realityio::logObjects((realityio *)AsToken) + 24);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v29[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)&v32, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v29);
    unint64_t v18 = v32 & 0xFFFFFFFFFFFFFFF8;
    if ((v32 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      std::string v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0) {
        std::string v19 = *(const char **)v19;
      }
    }
    else
    {
      std::string v19 = "";
    }
    unint64_t v20 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v20)
    {
      size_t v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0) {
        size_t v21 = *(const char **)v21;
      }
    }
    else
    {
      size_t v21 = "";
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v23);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v19;
    __int16 v35 = 2080;
    std::string::size_type v36 = v21;
    __int16 v37 = 2080;
    uint64_t v38 = Text;
    _os_log_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_DEFAULT, "Unsupported type conversion USD (\"%s\") to RE (\"%s\") for \"%s\" ", buf, 0x20u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v23);
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_23F734194()
{
}

void sub_23F7341BC()
{
}

void sub_23F7341DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  JUMPOUT(0x23F7341D0);
}

void sub_23F7341F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_23F734204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  uint64_t v5 = *(void *)(v3 - 160);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  _Unwind_Resume(a1);
}

void sub_23F734240(_Unwind_Exception *a1)
{
}

void sub_23F734248(_Unwind_Exception *a1)
{
  uint64_t v2 = *(void *)(v1 - 128);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

double anonymous namespace'::getReArrayElementType(_OWORD *a1, long long *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v4 = a2[1];
  long long v19 = *a2;
  long long v20 = v4;
  if (RETypeInfoIsArray())
  {
    long long v5 = a2[1];
    long long v17 = *a2;
    long long v18 = v5;
    RETypeInfoGetArrayElementType();
  }
  else
  {
    long long v7 = a2[1];
    long long v15 = *a2;
    long long v16 = v7;
    IsList = (realityio *)RETypeInfoIsList();
    if (IsList)
    {
      long long v9 = a2[1];
      long long v13 = *a2;
      long long v14 = v9;
      RETypeInfoGetListElementType();
    }
    else
    {
      uint64_t v10 = *(id *)(realityio::logObjects(IsList) + 24);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        uint64_t Name = RETypeInfoGetName();
        _os_log_impl(&dword_23F4EA000, v10, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not an array.", buf, 0xCu);
      }

      double result = 0.0;
      *a1 = 0u;
      a1[1] = 0u;
    }
  }
  return result;
}

void sub_23F734390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::generateRe2DArray(uint64_t a1, uint64_t *a2, long long *a3)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v6 = a3[1];
  long long v52 = *a3;
  long long v53 = v6;
  if ((RETypeInfoIsList() & 1) != 0
    || (long long v7 = a3[1], v50 = *a3, v51 = v7, v8 = (realityio *)RETypeInfoIsArray(), v8))
  {
    long long v48 = 0u;
    long long v49 = 0u;
    v47[4] = v48;
    v47[5] = v49;
    if ((RETypeInfoIsList() & 1) != 0
      || (v47[2] = v48, v47[3] = v49, char IsArray = (realityio *)RETypeInfoIsArray(), IsArray))
    {
      memset(v47, 0, 32);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v38, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
      Namespace = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdProperty::GetNamespace((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdProperty *)a1);
      if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t EmptyString = (*(void *)buf & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else {
        unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Namespace);
      }
      if (*(char *)(EmptyString + 23) >= 0) {
        size_t v14 = *(unsigned __int8 *)(EmptyString + 23);
      }
      else {
        size_t v14 = *(void *)(EmptyString + 8);
      }
      long long v15 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 7);
      if (v37 < 0) {
        long long v15 = (void **)__p[0];
      }
      if (v14)
      {
        if (*(char *)(EmptyString + 23) >= 0) {
          long long v16 = (const void *)EmptyString;
        }
        else {
          long long v16 = *(const void **)EmptyString;
        }
        memmove(v15, v16, v14);
      }
      strcpy((char *)v15 + v14, ":counts");
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v32 = 0;
      long long v30 = 0u;
      long long v31 = 0u;
      MEMORY[0x2455CF830](&v42, __p);
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v42, (pxrInternal__aapl__pxrReserved__::UsdObject *)v38);
      if (buf[0])
      {
        long long v33 = *(_OWORD *)&buf[8];
        long long v34 = v55;
        uint64_t v17 = v56;
      }
      else
      {
        long long v33 = v30;
        long long v34 = v31;
        uint64_t v17 = v32;
      }
      uint64_t v35 = v17;
      if (v17)
      {
        long long v18 = (atomic_ullong *)(v17 - 16);
        if (*((void *)&v34 + 1)) {
          long long v18 = (atomic_ullong *)*((void *)&v34 + 1);
        }
        atomic_fetch_add_explicit(v18, 1uLL, memory_order_relaxed);
      }
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)buf);
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v30);
      long long v19 = (std::__shared_weak_count *)a2[1];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      memset(buf, 0, sizeof(buf));
      uint64_t v20 = *a2;
      uint64_t v21 = (std::__shared_weak_count *)a2[1];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if ((void)v33)
      {
        uint64_t v22 = 0;
        unint64_t v23 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v33);
          uint64_t v24 = *(void *)(v35 + 8 * v23);
          uint64_t v26 = *(void *)(*(void *)buf + v22);
          long long v25 = *(std::__shared_weak_count **)(*(void *)buf + v22 + 8);
          if (v25)
          {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v25)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v25)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
          }
          ++v23;
          v22 += 16;
        }
        while (v23 < (unint64_t)v33);
      }
      *(void *)&long long v30 = buf;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v33);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if ((v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v40);
      if (v39) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v39);
      }
    }
    else
    {
      long long v27 = *(id *)(realityio::logObjects(IsArray) + 24);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        long long v28 = a3[1];
        long long v45 = *a3;
        long long v46 = v28;
        uint64_t Name = RETypeInfoGetName();
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = Name;
        _os_log_impl(&dword_23F4EA000, v27, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not a 2D array.", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v12 = *(id *)(realityio::logObjects(v8) + 24);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      long long v13 = a3[1];
      long long v43 = *a3;
      long long v44 = v13;
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = RETypeInfoGetName();
      _os_log_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not a 2D array.", buf, 0xCu);
    }
  }
}

void sub_23F734830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::makeSharedNoDelete(_anonymous_namespace_ *this, void *a2)
{
  *(void *)this = a2;
  operator new();
}

void sub_23F7349B0(void *a1)
{
}

void sub_23F7349BC(_Unwind_Exception *a1)
{
}

void anonymous namespace'::resetReArray(long long *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  long long v2 = a1[1];
  long long v16 = *a1;
  long long v17 = v2;
  if (RETypeInfoIsArray())
  {
    long long v3 = a1[1];
    long long v14 = *a1;
    long long v15 = v3;
    REArrayAccessorReset();
  }
  else
  {
    long long v4 = a1[1];
    long long v12 = *a1;
    long long v13 = v4;
    IsList = (realityio *)RETypeInfoIsList();
    if (IsList)
    {
      long long v6 = a1[1];
      long long v10 = *a1;
      long long v11 = v6;
      REListAccessorReset();
    }
    else
    {
      long long v7 = *(id *)(realityio::logObjects(IsList) + 24);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        uint64_t Name = RETypeInfoGetName();
        _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not an array.", buf, 0xCu);
      }
    }
  }
}

void sub_23F734AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::appendReArrayElements(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (RETypeInfoIsArray())
  {
    if (a3)
    {
      REArrayAccessorGetElementAt();
      operator new();
    }
  }
  else
  {
    IsList = (realityio *)RETypeInfoIsList();
    if (IsList)
    {
      REListIteratorCreate();
      if (a3)
      {
        REListIteratorNextElement();
        operator new();
      }
      REListIteratorDestroy();
    }
    else
    {
      long long v5 = *(id *)(realityio::logObjects(IsList) + 24);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = RETypeInfoGetName();
        _os_log_impl(&dword_23F4EA000, v5, OS_LOG_TYPE_DEFAULT, "Component detail: \"%s\" is not an array.", buf, 0xCu);
      }
    }
  }
}

void sub_23F734EE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_23F734EEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_23F734F38(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_23F734F50(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildren(pxrInternal__aapl__pxrReserved__::UsdPrim *this, uint64_t a2)
{
  uint64_t UsdPrimDefaultPredicate = (uint64_t *)pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(this);
  uint64_t v6 = *UsdPrimDefaultPredicate;
  uint64_t v5 = UsdPrimDefaultPredicate[1];
  uint64_t v7 = UsdPrimDefaultPredicate[2];
  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
    && ((v6 & 0x2000) != 0 || (v5 & 0x2000) == 0))
  {
    v6 |= 0x2000uLL;
    v5 &= ~0x2000uLL;
  }
  v9[0] = v6;
  v9[1] = v5;
  v9[2] = v7;
  return pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange(a2, v9, (uint64_t)this);
}

void *anonymous namespace'::setComponentDataUsingInfoHashTableKeys(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2)
{
  v127[5] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40D48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40D48))
  {
    MEMORY[0x2455CF810](&v71, "uchar[]");
    MEMORY[0x2455CF810](&v69, "uint8_t");
    uint64_t v113 = v69;
    uint64_t v69 = 0;
    v114[0] = &unk_26F3498D8;
    v114[3] = v114;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v70, &v113, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(buf, v71, v70);
    MEMORY[0x2455CF810](&v68, "uint[]");
    MEMORY[0x2455CF810](&v66, "uint16_t");
    *(void *)&long long v108 = v66;
    uint64_t v66 = 0;
    *((void *)&v108 + 1) = &unk_26F3498D8;
    long long v110 = (char *)&v108 + 8;
    MEMORY[0x2455CF810](&v65, "uint32_t");
    uint64_t v111 = v65;
    uint64_t v65 = 0;
    v112[0] = &unk_26F3498D8;
    v112[3] = v112;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v67, (uint64_t *)&v108, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v120, v68, v67);
    MEMORY[0x2455CF810](&v64, "uint64[]");
    MEMORY[0x2455CF810](&v62, "uint64_t");
    uint64_t v102 = v62;
    uint64_t v62 = 0;
    v103[0] = &unk_26F3498D8;
    long long v105 = v103;
    MEMORY[0x2455CF810](&v61, "size_t");
    uint64_t v106 = v61;
    uint64_t v61 = 0;
    v107[0] = &unk_26F3498D8;
    v107[3] = v107;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v63, &v102, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v121, v64, v63);
    MEMORY[0x2455CF810](&v60, "int[]");
    MEMORY[0x2455CF810](&v58, "char");
    uint64_t v92 = v58;
    uint64_t v58 = 0;
    long long v93 = &unk_26F3498D8;
    long long v96 = &v93;
    MEMORY[0x2455CF810](&v57, "int8_t");
    uint64_t v97 = v57;
    uint64_t v57 = 0;
    v98[0] = &unk_26F3498D8;
    v98[3] = v98;
    MEMORY[0x2455CF810](&v56, "int16_t");
    v98[4] = v56;
    uint64_t v56 = 0;
    v99[0] = &unk_26F3498D8;
    v99[3] = v99;
    MEMORY[0x2455CF810](&v55, "int32_t");
    uint64_t v100 = v55;
    uint64_t v55 = 0;
    v101[0] = &unk_26F3498D8;
    v101[3] = v101;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v59, &v92, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v122, v60, v59);
    MEMORY[0x2455CF810](&v54, "int64[]");
    MEMORY[0x2455CF810](&v52, "int");
    uint64_t v88 = v52;
    uint64_t v52 = 0;
    v89[0] = &unk_26F3498D8;
    v89[3] = v89;
    MEMORY[0x2455CF810](&v51, "int64_t");
    uint64_t v90 = v51;
    uint64_t v51 = 0;
    v91[0] = &unk_26F3498D8;
    v91[3] = v91;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v53, &v88, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v123, v54, v53);
    MEMORY[0x2455CF810](&v50, "float[]");
    MEMORY[0x2455CF810](&v48, "float");
    uint64_t v86 = v48;
    uint64_t v48 = 0;
    v87[0] = &unk_26F3498D8;
    v87[3] = v87;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v49, &v86, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v124, v50, v49);
    MEMORY[0x2455CF810](&v47, "double[]");
    MEMORY[0x2455CF810](&v45, "double");
    uint64_t v84 = v45;
    uint64_t v45 = 0;
    v85[0] = &unk_26F3498D8;
    v85[3] = v85;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v46, &v84, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v125, v47, v46);
    MEMORY[0x2455CF810](&v44, "token[]");
    MEMORY[0x2455CF810](&v42, "DynamicString");
    Typeuint64_t Name = v42;
    uint64_t v42 = 0;
    v81[0] = &unk_26F3498D8;
    uint64_t v81[3] = v81;
    MEMORY[0x2455CF810](&v41, "StringID");
    uint64_t v82 = v41;
    uint64_t v41 = 0;
    v83[0] = &unk_26F3498D8;
    uint64_t v83[3] = v83;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v43, &TypeName, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v126, v44, v43);
    MEMORY[0x2455CF810](&v40, "string[]");
    MEMORY[0x2455CF810](&v38, "DynamicString");
    uint64_t v76 = v38;
    uint64_t v38 = 0;
    v77[0] = &unk_26F3498D8;
    v77[3] = v77;
    MEMORY[0x2455CF810](&v37, "StringID");
    uint64_t v78 = v37;
    uint64_t v37 = 0;
    v79[0] = &unk_26F3498D8;
    uint64_t v79[3] = v79;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v39, &v76, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v127, v40, v39);
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100]((uint64_t)buf, 9);
    uint64_t v24 = 36;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v114[v24 + 2]);
      uint64_t v25 = v114[v24];
      if ((v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v24 -= 4;
    }
    while (v24 * 8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v39[1]);
    do
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v79[v24]);
      uint64_t v26 = v79[v24 - 1];
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v24 -= 5;
    }
    while (v24 != -10);
    if ((v37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v38 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v43[1]);
    for (uint64_t i = 0; i != -10; i -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v83[i]);
      uint64_t v28 = v83[i - 1];
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v42 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v46[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](v85);
    if ((v84 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v47 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v49[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](v87);
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v48 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v53[1]);
    for (uint64_t j = 0; j != -10; j -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v91[j]);
      uint64_t v30 = v91[j - 1];
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v51 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v59[1]);
    for (uint64_t k = 0; k != -20; k -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v101[k]);
      uint64_t v32 = v101[k - 1];
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v56 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v60 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v63[1]);
    for (uint64_t m = 0; m != -10; m -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v107[m]);
      uint64_t v34 = v107[m - 1];
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v62 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v64 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v67[1]);
    for (uint64_t n = 0; n != -10; n -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v112[n]);
      uint64_t v36 = v112[n - 1];
      if ((v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v65 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v68 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v70[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](v114);
    if ((v113 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v69 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v71 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_guard_release(&qword_268C40D48);
  }
  MEMORY[0x2455CF810](buf, "keys");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v92, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)&long long v108 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v92);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v108);
  uint64_t v4 = qword_268C40D60;
  if (!qword_268C40D60) {
    goto LABEL_11;
  }
  uint64_t v5 = &qword_268C40D60;
  do
  {
    int v6 = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D68, (uint64_t *)(v4 + 32), (uint64_t *)buf);
    uint64_t v7 = (uint64_t *)(v4 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v4;
      uint64_t v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v7;
  }
  while (*v7);
  if (v5 == &qword_268C40D60
    || std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D68, (uint64_t *)buf, v5 + 4))
  {
LABEL_11:
    uint64_t v5 = &qword_268C40D60;
  }
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  long long v108 = 0u;
  long long v109 = 0u;
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v74 = *(_OWORD *)(a2 + 32);
  long long v75 = v8;
  DictionaryKeyCFStringRef Type = (realityio *)RETypeInfoGetDictionaryKeyType();
  long long v104 = 0;
  if (v5 != &qword_268C40D60)
  {
    long long v72 = v108;
    long long v73 = v109;
    uint64_t Name = RETypeInfoGetName();
    DictionaryKeyCFStringRef Type = (realityio *)MEMORY[0x2455CF810](buf, Name);
    long long v11 = v5 + 6;
    long long v12 = (void *)v5[6];
    if (!v12) {
      goto LABEL_22;
    }
    uint64_t v13 = (uint64_t)(v5 + 7);
    long long v14 = v5 + 6;
    do
    {
      DictionaryKeyCFStringRef Type = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v13, v12 + 4, (uint64_t *)buf);
      long long v15 = v12 + 1;
      if (!DictionaryKeyType)
      {
        long long v15 = v12;
        long long v14 = v12;
      }
      long long v12 = (void *)*v15;
    }
    while (*v15);
    if (v14 == v11
      || (DictionaryKeyCFStringRef Type = (realityio *)std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v13, (uint64_t *)buf, v14 + 4), DictionaryKeyType))
    {
LABEL_22:
      long long v14 = v11;
    }
    if ((buf[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11 != v14)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)(v14 + 5));
      long long v16 = v119;
      if (v119 == (uint64_t *)buf)
      {
        if (v104 == &v102)
        {
          (*(void (**)(unsigned char *, uint64_t *))(*(void *)buf + 24))(buf, &v88);
          (*(void (**)(uint64_t *))(*v119 + 32))(v119);
          long long v119 = 0;
          (*(void (**)(uint64_t *, unsigned char *))(*v104 + 24))(v104, buf);
          (*(void (**)(uint64_t *))(*v104 + 32))(v104);
          long long v104 = 0;
          long long v119 = (uint64_t *)buf;
          (*(void (**)(uint64_t *, uint64_t *))(v88 + 24))(&v88, &v102);
          (*(void (**)(uint64_t *))(v88 + 32))(&v88);
        }
        else
        {
          (*(void (**)(unsigned char *, uint64_t *))(*(void *)buf + 24))(buf, &v102);
          (*(void (**)(uint64_t *))(*v119 + 32))(v119);
          long long v119 = v104;
        }
        long long v104 = &v102;
      }
      else if (v104 == &v102)
      {
        (*(void (**)(uint64_t *, unsigned char *))(v102 + 24))(&v102, buf);
        (*(void (**)(uint64_t *))(*v104 + 32))(v104);
        long long v104 = v119;
        long long v119 = (uint64_t *)buf;
      }
      else
      {
        long long v119 = v104;
        long long v104 = v16;
      }
      DictionaryKeyCFStringRef Type = (realityio *)std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](buf);
    }
    if (v104) {
      operator new();
    }
  }
  long long v17 = *(id *)(realityio::logObjects(DictionaryKeyType) + 24);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v92);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(&v88, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    unint64_t v18 = v88 & 0xFFFFFFFFFFFFFFF8;
    if ((v88 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      long long v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0) {
        long long v19 = *(const char **)v19;
      }
    }
    else
    {
      long long v19 = "";
    }
    unint64_t v20 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v20)
    {
      uint64_t v21 = (const char *)(v20 + 16);
      if (*(char *)(v20 + 39) < 0) {
        uint64_t v21 = *(const char **)v21;
      }
    }
    else
    {
      uint64_t v21 = "";
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v92, &v76);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v19;
    __int16 v116 = 2080;
    long long v117 = v21;
    __int16 v118 = 2080;
    long long v119 = (uint64_t *)Text;
    _os_log_impl(&dword_23F4EA000, v17, OS_LOG_TYPE_DEFAULT, "Unsupported hashtable type conversion USD keys (\"%s\") to RE (\"%s\") for \"%s\" ", buf, 0x20u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
    if ((v88 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }

  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v102);
  if ((v95 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v94);
  double result = v93;
  if (v93) {
    return (void *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v93);
  }
  return result;
}

void sub_23F7362B0()
{
}

void sub_23F736BBC()
{
}

void sub_23F736BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  JUMPOUT(0x23F736C60);
}

void sub_23F736BF8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F736C0C(_Unwind_Exception *a1)
{
  if ((STACK[0x4D0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4D0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_23F736C2C()
{
}

void sub_23F736C34()
{
}

void sub_23F736C3C(_Unwind_Exception *a1)
{
}

void sub_23F736C6C()
{
  if ((STACK[0x4D0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4D0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&STACK[0x360]);
  JUMPOUT(0x23F736C90);
}

void *realityio::ArbitraryComponentBuilder::updateComponentOnEntityFromProtoPrim(uint64_t a1, realityio::Inputs *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this, std::string::size_type a4, uint64_t *a5)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  std::string::size_type v121 = a4;
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, buf);
  long long v8 = *(void **)(a1 + 288);
  if (!v8) {
    goto LABEL_8;
  }
  long long v9 = (void *)(a1 + 288);
  do
  {
    int v10 = pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v8 + 4, buf);
    long long v11 = v8 + 1;
    if (!v10)
    {
      long long v11 = v8;
      long long v9 = v8;
    }
    long long v8 = (void *)*v11;
  }
  while (*v11);
  if (v9 == (void *)(a1 + 288) || pxrInternal__aapl__pxrReserved__::SdfPath::operator<(buf, v9 + 4))
  {
LABEL_8:
    long long v120 = 0;
  }
  else
  {
    long long v120 = (void *)v9[5];
    if (v120) {
      RERetain();
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)buf);
  uint64_t v12 = REComponentClassFromName();
  uint64_t v119 = v12;
  if (!v12)
  {
    long long v15 = *(id *)(realityio::logObjects(0) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a5 + 23) >= 0) {
        long long v16 = a5;
      }
      else {
        long long v16 = (uint64_t *)*a5;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
      uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = Text;
      _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_DEFAULT, "Unknown component type for info:id \"%s\" from \"%s\"", buf, 0x16u);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      goto LABEL_30;
    }
LABEL_31:

    return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v120);
  }
  ComponentCFStringRef Type = (realityio *)REMeshComponentGetComponentType();
  if ((realityio *)v12 == ComponentType)
  {
    long long v15 = *(id *)(realityio::logObjects(ComponentType) + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
      uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl(&dword_23F4EA000, v15, OS_LOG_TYPE_DEFAULT, "Mesh components cannot be explicitly created at \"%s\"", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_30:
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      goto LABEL_31;
    }
    goto LABEL_31;
  }
  if (v12 == REImageBasedLightReceiverComponentGetComponentType()
    || v12 == REImageBasedLightComponentGetComponentType()
    || v12 == REVirtualEnvironmentProbeComponentGetComponentType()
    || v12 == REMeshSortingComponentGetComponentType()
    || v12 == RESpotLightComponentGetComponentType()
    || v12 == RESpotLightShadowMapComponentGetComponentType()
    || v12 == REDirectionalLightComponentGetComponentType()
    || v12 == REDirectionalLightShadowMapComponentGetComponentType()
    || v12 == REAnchoringComponentGetComponentType())
  {
    return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v120);
  }
  if (!v120)
  {
    *(void *)std::string buf = REComponentCreateByClass();
    realityio::WrappedRERef<REAsset *>::operator=(&v120, (uint64_t *)buf);
    RERelease();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
    *(void *)std::string buf = __p;
    unint64_t v20 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_DWORD **)buf);
    realityio::WrappedRERef<REAsset *>::operator=(v20 + 5, (uint64_t *)&v120);
    goto LABEL_36;
  }
  if (REComponentGetClass() != v12)
  {
    REComponentGetClass();
    REEntityRemoveComponentByClass();
    *(void *)std::string buf = REComponentCreateByClass();
    realityio::WrappedRERef<REAsset *>::operator=(&v120, (uint64_t *)buf);
    RERelease();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
    *(void *)std::string buf = __p;
    long long v14 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>((uint64_t **)(a1 + 280), __p, (_DWORD **)buf);
    realityio::WrappedRERef<REAsset *>::operator=(v14 + 5, (uint64_t *)&v120);
LABEL_36:
    pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    goto LABEL_38;
  }
  REEngineGetServiceLocator();
  uint64_t ECSService = REServiceLocatorGetECSService();
  reinitIntrospectableData(ECSService, (uint64_t *)&v120);
LABEL_38:
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  realityio::Inputs::assetManager(a2);
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "Collider"))
  {
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "RigidBody"))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v110);
      MEMORY[0x2455CF810](&v99, "material");
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)buf, v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      if ((v99.n128_u8[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v99.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)buf))
      {
        MEMORY[0x2455CF810](&v110, "restitution");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)__p, (pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v110);
        if ((v110.n128_u8[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v110.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v110.n128_u32[0] = 0;
        realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, (float *)&v110);
        MEMORY[0x2455CF810](&v99, "staticFriction");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v110, (pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
        if ((v99.n128_u8[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v99.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v99.n128_u32[0] = 0;
        realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v110, (float *)&v99);
        MEMORY[0x2455CF810](v96, "dynamicFriction");
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v99, (pxrInternal__aapl__pxrReserved__::UsdPrim *)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)v96);
        if ((v96[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v96[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        LODWORD(v96[0]) = 0;
        realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99, (float *)v96);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v99);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v110);
        pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)__p);
      }
      REAssetManagerPhysicsMaterialAssetCreate2();
      RERigidBodyComponentSetMaterial();
      RERelease();
      pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)buf);
      uint64_t v12 = v119;
    }
    memset(buf, 0, 32);
    MockREComponentClassGetComponentTypeInfo((uint64_t)buf, v12);
    v129[4] = *(_OWORD *)buf;
    v129[5] = *(_OWORD *)&buf[16];
    RETypeInfoGetSize();
    v110.n128_u8[0] = 0;
    std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "Anchoring");
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, &v110);
  MEMORY[0x2455CF810](&v99, "Shape");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)__p, v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  if ((v99.n128_u8[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v99.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
  MEMORY[0x2455CF810](buf, "shapeType");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v110, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v99.n128_u64[0] = 0;
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::TfToken>((atomic_uint **)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v110, (atomic_uint **)&v99);
  char v24 = buf[0];
  uint64_t v25 = (atomic_uint *)(*(void *)buf & 0xFFFFFFFFFFFFFFF8);
  if ((*(void *)buf & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t EmptyString = (uint64_t)(v25 + 4);
  }
  else {
    uint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v23);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v93, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v27 = *(_OWORD *)EmptyString;
    *(void *)&v93[16] = *(void *)(EmptyString + 16);
    *(_OWORD *)long long v93 = v27;
  }
  if ((v24 & 7) != 0)
  {
    atomic_fetch_add_explicit(v25, 0xFFFFFFFE, memory_order_release);
    unint64_t v28 = v99.n128_u64[0];
  }
  else
  {
    unint64_t v28 = 0;
  }
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)__p, v96);
  MEMORY[0x2455CF810](&v128, "pose");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::SdfPath *)v96, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v128);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)&v99, v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)buf);
  if ((v128.n128_u8[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v128.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v96);
  memset(v96, 0, sizeof(v96));
  REPoseIdentity();
  DWORD2(v96[0]) = v29;
  *(void *)&v96[0] = v30;
  v96[1] = v31;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v99))
  {
    MEMORY[0x2455CF810](buf, "position");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v128, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
    if ((buf[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    LODWORD(v103) = 0;
    std::string __s = 0;
    *(void *)std::string buf = 0;
    *(_DWORD *)&buf[8] = 0;
    LODWORD(__s) = realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v128, (float *)buf);
    HIDWORD(__s) = v32;
    LODWORD(v103) = v33;
    MEMORY[0x2455CF810](buf, "orientation");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v108, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
    if ((buf[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(_OWORD *)std::string buf = xmmword_23F7BDF00;
    LODWORD(v106.__r_.__value_.__l.__data_) = realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v108, (float *)buf);
    *(std::string::size_type *)((char *)v106.__r_.__value_.__r.__words + 4) = __PAIR64__(v35, v34);
    HIDWORD(v106.__r_.__value_.__r.__words[1]) = v36;
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)buf, 1.0);
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly();
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly();
    REMakePose();
    DWORD2(v96[0]) = v37;
    *(void *)&v96[0] = v38;
    v96[1] = v39;
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v108);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v128);
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "Box"))
  {
    MEMORY[0x2455CF810](&v128, "extent");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v128);
    if ((v128.n128_u8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v128.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v128.n128_u64[0] = 0;
    v128.n128_u32[2] = 0;
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfVec3f>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (float *)&v128);
    v128.n128_u64[0] = 0;
    v128.n128_u64[0] = REAssetManagerCollisionShapeAssetCreateBox();
    REAssetManagerCollisionShapeAssetCreateCompound();
    RERelease();
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "Capsule"))
  {
    MEMORY[0x2455CF810](&v128, "height");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v128);
    if ((v128.n128_u8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v128.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    MEMORY[0x2455CF810](&v108, "radius");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v128, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
    if ((v108.n128_u8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v108.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v108.n128_u32[0] = 0;
    realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (float *)&v108);
    v108.n128_u32[0] = 0;
    realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v128, (float *)&v108);
    v108.n128_u64[0] = 0;
    v108.n128_u64[0] = REAssetManagerCollisionShapeAssetCreateCapsule();
    REAssetManagerCollisionShapeAssetCreateCompound();
    RERelease();
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v128);
  }
  else
  {
    BOOL v40 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v93, "Sphere");
    if (!v40)
    {
      uint64_t v90 = *(id *)(realityio::logObjects((realityio *)v40) + 24);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      {
        long long v91 = v93;
        if (v93[23] < 0) {
          long long v91 = *(unsigned char **)v93;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v91;
        _os_log_impl(&dword_23F4EA000, v90, OS_LOG_TYPE_DEFAULT, "Shape type for \"%s\" does not exist. Creating an empty shape.", buf, 0xCu);
      }

      REAssetManagerCollisionShapeAssetCreateEmpty();
      goto LABEL_90;
    }
    MEMORY[0x2455CF810](&v128, "radius");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)buf, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v128);
    if ((v128.n128_u8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v128.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v128.n128_u32[0] = 0;
    realityio::getAttributeValueWithDefaultValue<float>((pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (float *)&v128);
    v128.n128_u64[0] = 0;
    v128.n128_u64[0] = REAssetManagerCollisionShapeAssetCreateSphere();
    REAssetManagerCollisionShapeAssetCreateCompound();
    RERelease();
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)buf);
LABEL_90:
  REColliderComponentSetShape();
  MEMORY[0x2455CF810](&v128, "interactionType");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)buf, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v128);
  if ((v128.n128_u8[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v128.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v108, "Default");
  realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::TfToken>((atomic_uint **)&v128, (pxrInternal__aapl__pxrReserved__::UsdObject *)buf, (atomic_uint **)&v108);
  unsigned __int8 v42 = v128.n128_u8[0];
  long long v43 = (atomic_uint *)(v128.n128_u64[0] & 0xFFFFFFFFFFFFFFF8);
  if ((v128.n128_u64[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v44 = (uint64_t)(v43 + 4);
  }
  else {
    uint64_t v44 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
  }
  if (*(char *)(v44 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v106, *(const std::string::value_type **)v44, *(void *)(v44 + 8));
  }
  else
  {
    long long v45 = *(_OWORD *)v44;
    v106.__r_.__value_.__r.__words[2] = *(void *)(v44 + 16);
    *(_OWORD *)&v106.__r_.__value_.__l.__data_ = v45;
  }
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit(v43, 0xFFFFFFFE, memory_order_release);
  }
  if ((v108.n128_u8[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v108.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, "Trigger"))
  {
    BOOL v46 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v106, "Default");
    if (v46)
    {
      uint64_t v47 = *(id *)(realityio::logObjects((realityio *)v46) + 24);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v48 = &v106;
        if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v48 = (std::string *)v106.__r_.__value_.__r.__words[0];
        }
        v128.n128_u32[0] = 136315138;
        *(unint64_t *)((char *)v128.n128_u64 + 4) = (unint64_t)v48;
        _os_log_impl(&dword_23F4EA000, v47, OS_LOG_TYPE_DEFAULT, "Interaction type for \"%s\" does not exist. Setting to \"Default\"", (uint8_t *)&v128, 0xCu);
      }
    }
  }
  REColliderComponentSetInteractionType();
  MEMORY[0x2455CF810](&v108, "mask");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v128, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
  if ((v108.n128_u8[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v108.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&__s, "group");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v108, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__s);
  if ((__s & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__s & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  LODWORD(__s) = 0;
  realityio::getAttributeValueWithDefaultValue<unsigned int>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v128, (unsigned int *)&__s);
  LODWORD(__s) = 0;
  realityio::getAttributeValueWithDefaultValue<unsigned int>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v108, (unsigned int *)&__s);
  REColliderComponentSetMask();
  REColliderComponentSetGroup();
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v108);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v128);
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v106.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)buf);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v99);
  if ((v93[23] & 0x80000000) != 0) {
    operator delete(*(void **)v93);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v110);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
  uint64_t Entity = REComponentGetEntity();
  if (Entity) {
    std::string::size_type v121 = Entity;
  }
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "GroundingShadow"))
  {
    uint64_t Name = (const char *)REEntityGetName();
    if (strncmp(Name, "usdPrimitiveAxis", 0x10uLL))
    {
      ChildCFIndex Count = REEntityGetChildCount();
      if (ChildCount)
      {
        uint64_t v52 = 0;
        while (1)
        {
          uint64_t Child = REEntityGetChild();
          uint64_t v54 = (const char *)REEntityGetName();
          if (!strncmp(v54, "usdPrimitiveAxis", 0x10uLL)) {
            break;
          }
          if (ChildCount == ++v52) {
            goto LABEL_127;
          }
        }
        std::string::size_type v121 = Child;
      }
    }
  }
LABEL_127:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "BlendShapeWeights"))
  {
    memset(buf, 0, sizeof(buf));
    MEMORY[0x2455CF810](__p, "blendWeights:keys");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)v96, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)__p, (pxrInternal__aapl__pxrReserved__::UsdObject *)v96, (uint64_t)buf);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(buf);
    *(_OWORD *)std::string buf = *(_OWORD *)__p;
    *(_OWORD *)&uint8_t buf[16] = v116;
    *(_OWORD *)std::string __p = 0u;
    long long v116 = 0u;
    *(void *)&unsigned char buf[32] = v117;
    std::string::size_type v117 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(__p);
    std::string::size_type v117 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v116 = 0u;
    MEMORY[0x2455CF810](&v110, "blendWeights:counts");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v128, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v110);
    if ((v110.n128_u8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v110.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)&v110, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v128, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
    *(__n128 *)std::string __p = v110;
    long long v116 = v111;
    __n128 v110 = 0u;
    long long v111 = 0u;
    std::string::size_type v117 = v112;
    std::string::size_type v112 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v110);
    std::string::size_type v112 = 0;
    __n128 v110 = 0u;
    long long v111 = 0u;
    MEMORY[0x2455CF810](&v99, "blendWeights:values");
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&v108, this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v99);
    if ((v99.n128_u8[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v99.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)&v99, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v108, (uint64_t)&v110);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v110);
    __n128 v110 = v99;
    long long v111 = v100;
    __n128 v99 = 0u;
    long long v100 = 0u;
    std::string::size_type v112 = v101.__r_.__value_.__r.__words[0];
    v101.__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v99);
    REBlendShapeWeightsComponentSetBlendShapeWeightsCount();
    if (__p[0])
    {
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)__p);
        uint64_t v57 = *(void *)(v117 + 8 * (void)v55);
        REBlendShapeWeightsComponentSetBlendWeightCount();
        if (v57)
        {
          for (uint64_t i = 0; i != v57; ++i)
          {
            pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v110);
            REBlendShapeWeightsComponentSetBlendWeight();
          }
          v56 += i;
        }
        uint64_t v55 = (char *)v55 + 1;
      }
      while (v55 < __p[0]);
    }
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v108);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v110);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v128);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)v96);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(buf);
  }
  BOOL v59 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "AnimationLibrary");
  if (v59)
  {
    if (*(unsigned char *)(*((void *)a2 + 5) + 272))
    {
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildren((pxrInternal__aapl__pxrReserved__::UsdPrim *)__p, (uint64_t)this);
      int64x2_t v113 = 0uLL;
      unint64_t v114 = 0;
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetChildren((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v110, (uint64_t)this);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::begin(&v110, &v128);
      pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::end((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v110, &v108);
      while (1)
      {
        if (*(_OWORD *)&v128 == *(_OWORD *)&v108
          && pxrInternal__aapl__pxrReserved__::operator==((uint64_t)v129, (uint64_t)&v109))
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v108);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::~UsdPrimSiblingIterator((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v128);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)&v110);
          if (v113.i64[1] != v113.i64[0])
          {
            uint64_t v84 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
            std::allocate_shared[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary,std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary>,pxrInternal__aapl__pxrReserved__::TfToken const&,REEntity *&,std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry> &,void>((std::string **)&v110, *v84, &v121, v113.i64);
            uint64_t v86 = *(void *)(a1 + 16);
            long long v85 = *(std::__shared_weak_count **)(a1 + 24);
            if (v85) {
              atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(buf, "arbitraryComponentAnimationLibrary");
            realityio::Outputs::storeValue<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary> &>(v86, (long long *)buf, (uint64_t *)&v110);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v85) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v85);
            }
            if (v110.n128_u64[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v110.n128_u64[1]);
            }
          }
          *(void *)std::string buf = &v113;
          std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange::~UsdPrimSiblingRange((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingRange *)__p);
          goto LABEL_297;
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v128, (uint64_t)&v106);
        if (!v106.__r_.__value_.__l.__size_ || (*(unsigned char *)(v106.__r_.__value_.__l.__size_ + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v106.__r_.__value_.__l.__size_, v60);
        }
        if (pxrInternal__aapl__pxrReserved__::TfToken::operator==()) {
          break;
        }
LABEL_211:
        if (!v106.__r_.__value_.__l.__size_ || (*(unsigned char *)(v106.__r_.__value_.__l.__size_ + 57) & 8) != 0) {
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError((pxrInternal__aapl__pxrReserved__ *)v106.__r_.__value_.__l.__size_, v61);
        }
        if (pxrInternal__aapl__pxrReserved__::TfToken::operator==())
        {
          MEMORY[0x2455CF810](v93, "clipNames");
          std::string::size_type v97 = 0;
          memset(v96, 0, sizeof(v96));
          realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)v93, (uint64_t)buf);
          if (buf[0])
          {
            __n128 v99 = *(__n128 *)&buf[8];
            long long v100 = *(_OWORD *)&buf[24];
            std::string::size_type v68 = v123;
          }
          else
          {
            __n128 v99 = (__n128)v96[0];
            long long v100 = v96[1];
            std::string::size_type v68 = v97;
          }
          v101.__r_.__value_.__r.__words[0] = v68;
          if (v68)
          {
            uint64_t v69 = (atomic_ullong *)(v68 - 16);
            if (*((void *)&v100 + 1)) {
              uint64_t v69 = (atomic_ullong *)*((void *)&v100 + 1);
            }
            atomic_fetch_add_explicit(v69, 1uLL, memory_order_relaxed);
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)buf);
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(v96);
          if ((v93[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x2455CF810](&__s, "startTimes");
          std::string::size_type v94 = 0;
          memset(v93, 0, sizeof(v93));
          realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((uint64_t)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__s, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v106);
          if (buf[0])
          {
            v96[0] = *(_OWORD *)&buf[8];
            v96[1] = *(_OWORD *)&buf[24];
            std::string::size_type v70 = v123;
          }
          else
          {
            v96[0] = *(_OWORD *)v93;
            v96[1] = *(_OWORD *)&v93[16];
            std::string::size_type v70 = v94;
          }
          std::string::size_type v97 = v70;
          if (v70)
          {
            uint64_t v71 = (atomic_ullong *)(v70 - 16);
            if (*((void *)&v96[1] + 1)) {
              uint64_t v71 = (atomic_ullong *)*((void *)&v96[1] + 1);
            }
            atomic_fetch_add_explicit(v71, 1uLL, memory_order_relaxed);
          }
          realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)buf);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v93);
          if ((__s & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__s & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          MEMORY[0x2455CF810](&v95, "sourceAnimationName");
          std::string::basic_string[abi:ne180100]<0>(&__s, "");
          realityio::getAttributeValue<std::string>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v95, (uint64_t)buf);
          if (buf[0])
          {
            p_s = (std::string::value_type **)&buf[8];
            if ((buf[31] & 0x80000000) != 0)
            {
              long long v73 = *(std::string::value_type **)&buf[8];
              long long v74 = (std::string::size_type *)&buf[16];
              goto LABEL_277;
            }
LABEL_238:
            *(_OWORD *)long long v93 = *(_OWORD *)p_s;
            *(void *)&v93[16] = p_s[2];
            if (buf[0]) {
              goto LABEL_239;
            }
LABEL_278:
            long long v75 = (void **)&buf[24];
            if (SHIBYTE(v123) < 0) {
              goto LABEL_240;
            }
          }
          else
          {
            if ((SHIBYTE(v104) & 0x80000000) == 0)
            {
              p_s = &__s;
              goto LABEL_238;
            }
            long long v73 = __s;
            long long v74 = (std::string::size_type *)&v103;
LABEL_277:
            std::string::__init_copy_ctor_external((std::string *)v93, v73, *v74);
            if (!buf[0]) {
              goto LABEL_278;
            }
LABEL_239:
            long long v75 = (void **)&buf[8];
            if ((buf[31] & 0x80000000) != 0) {
LABEL_240:
            }
              operator delete(*v75);
          }
          if (SHIBYTE(v104) < 0) {
            operator delete(__s);
          }
          if ((v95.__r_.__value_.__s.__data_[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v95.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
          std::string::size_type v76 = v101.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v99);
          std::string::size_type v77 = v101.__r_.__value_.__r.__words[0] + 24 * v99.n128_u64[0];
          if (v76 != v77)
          {
            unint64_t v78 = 0;
            do
            {
              if (*(void *)&v96[0] <= v78) {
                break;
              }
              pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v96);
              double v79 = *(double *)(v97 + 8 * v78);
              double v80 = 0.0;
              if (*(void *)&v96[0] > v78 + 1)
              {
                pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v96);
                double v80 = *(double *)(v97 + 8 * v78 + 8);
              }
              if (*(char *)(v76 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)buf, *(const std::string::value_type **)v76, *(void *)(v76 + 8));
              }
              else
              {
                long long v81 = *(_OWORD *)v76;
                *(void *)&uint8_t buf[16] = *(void *)(v76 + 16);
                *(_OWORD *)std::string buf = v81;
              }
              if ((v93[23] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&buf[24], *(const std::string::value_type **)v93, *(std::string::size_type *)&v93[8]);
              }
              else
              {
                *(_OWORD *)&uint8_t buf[24] = *(_OWORD *)v93;
                std::string::size_type v123 = *(void *)&v93[16];
              }
              std::string::basic_string[abi:ne180100]<0>(&v124, "");
              double v125 = v79;
              double v126 = v80;
              char v127 = 1;
              uint64_t v82 = v113.i64[1];
              if (v113.i64[1] >= v114)
              {
                uint64_t v83 = std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__push_back_slow_path<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(&v113, (long long *)buf);
              }
              else
              {
                std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>((std::string *)v113.i64[1], (long long *)buf);
                uint64_t v83 = v82 + 96;
              }
              v113.i64[1] = v83;
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v124.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v123) < 0) {
                operator delete(*(void **)&buf[24]);
              }
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              v76 += 24;
              ++v78;
            }
            while (v76 != v77);
          }
          if ((v93[23] & 0x80000000) != 0) {
            operator delete(*(void **)v93);
          }
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)v96);
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v99);
        }
        if ((v107 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106.__r_.__value_.__r.__words[2]);
        if (v106.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v106.__r_.__value_.__l.__size_);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v128);
      }
      MEMORY[0x2455CF810](buf, "file");
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)v93, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](buf, "name");
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__s, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
      if ((buf[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__s))
      {
LABEL_203:
        if ((v105 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104);
        if (v103) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v103);
        }
        if ((v93[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v93[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v93[16]);
        if (*(void *)&v93[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v93[8]);
        }
        goto LABEL_211;
      }
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>((pxrInternal__aapl__pxrReserved__::UsdObject *)v93, (uint64_t)&v99);
      realityio::getAttributeValue<std::string>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__s, (uint64_t)v96);
      MEMORY[0x2455CF810](&v95, "startTime");
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v95, (uint64_t)buf);
      if (buf[0])
      {
        double v62 = *(double *)&buf[8];
      }
      else
      {
        double v62 = -1.0;
        if (SHIBYTE(v123) < 0) {
          operator delete(*(void **)&buf[24]);
        }
      }
      if ((v95.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v95.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v95, "endTime");
      realityio::getAttributeValue<double>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v95, (uint64_t)buf);
      if (buf[0])
      {
        double v63 = *(double *)&buf[8];
      }
      else
      {
        double v63 = -1.0;
        if (SHIBYTE(v123) < 0) {
          operator delete(*(void **)&buf[24]);
        }
      }
      if ((v95.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v95.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      MEMORY[0x2455CF810](&v95, "looping");
      realityio::getAttributeValue<BOOL>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v106, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v95, (uint64_t)buf);
      if (buf[0])
      {
        char v64 = buf[8];
      }
      else
      {
        if (SHIBYTE(v123) < 0) {
          operator delete(*(void **)&buf[24]);
        }
        char v64 = 0;
      }
      if ((v95.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v95.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v99.n128_u8[0])
      {
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v95, v101.__r_.__value_.__l.__data_, v101.__r_.__value_.__l.__size_);
        }
        else {
          std::string v95 = v101;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v95, "");
      }
      if (!LOBYTE(v96[0]))
      {
LABEL_197:
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v95.__r_.__value_.__l.__data_);
        }
        if (LOBYTE(v96[0]))
        {
          BOOL v67 = (void **)v96 + 1;
          if ((SHIBYTE(v96[1]) & 0x80000000) == 0)
          {
LABEL_202:
            realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&v99);
            goto LABEL_203;
          }
        }
        else
        {
          BOOL v67 = (void **)&v96[1] + 1;
          if ((v98 & 0x80000000) == 0) {
            goto LABEL_202;
          }
        }
        operator delete(*v67);
        goto LABEL_202;
      }
      if (SHIBYTE(v96[1]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)&v96[0] + 1), *(std::string::size_type *)&v96[1]);
        if (SHIBYTE(v96[1]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&buf[24], *((const std::string::value_type **)&v96[0] + 1), *(std::string::size_type *)&v96[1]);
          goto LABEL_185;
        }
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)((char *)v96 + 8);
        *(void *)&uint8_t buf[16] = *((void *)&v96[1] + 1);
      }
      *(_OWORD *)&uint8_t buf[24] = *(_OWORD *)((char *)v96 + 8);
      std::string::size_type v123 = *((void *)&v96[1] + 1);
LABEL_185:
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v124, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
      }
      else {
        std::string v124 = v95;
      }
      double v125 = v62;
      double v126 = v63;
      char v127 = v64;
      uint64_t v65 = v113.i64[1];
      if (v113.i64[1] >= v114)
      {
        uint64_t v66 = std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__push_back_slow_path<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(&v113, (long long *)buf);
      }
      else
      {
        std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>((std::string *)v113.i64[1], (long long *)buf);
        uint64_t v66 = v65 + 96;
      }
      v113.i64[1] = v66;
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v124.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v123) < 0) {
        operator delete(*(void **)&buf[24]);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_197;
    }
    uint64_t v87 = *(id *)(realityio::logObjects((realityio *)v59) + 24);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(this, __p);
      uint64_t v88 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      if (*(char *)(v88 + 23) >= 0) {
        uint64_t v89 = v88;
      }
      else {
        uint64_t v89 = *(void *)v88;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v89;
      _os_log_impl(&dword_23F4EA000, v87, OS_LOG_TYPE_DEFAULT, "Recursive realitykit animation library components are disallowed. Ignoring one at: \"%s\".", buf, 0xCu);
      pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
    }
  }
LABEL_297:
  if ((void *)REEntityGetComponentByClass() != v120
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, "CharacterController"))
  {
    REEntityRemoveComponentByClass();
    REEntityAddExistingComponent();
  }
  MEMORY[0x2455CCE60](v120);
  return realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v120);
}

void sub_23F73889C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&STACK[0x2A0]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a44);
  if (a30 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&a66);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&STACK[0x220]);
  realityio::WrappedRERef<REComponent *>::~WrappedRERef(&STACK[0x290]);
  _Unwind_Resume(a1);
}

uint64_t reinitIntrospectableData(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2)
  {
    REComponentGetClass();
    REComponentCreateByClass();
    REECSOPACKSerializerCreate();
    uint64_t result = REComponentSerializeCopyToOPACKData();
    if (result)
    {
      long long v3 = (const void *)result;
      REECSOPACKDeserializerCreate();
      REComponentDeserializeFromOPACKData();
      RERelease();
      CFRelease(v3);
      RERelease();
      return RERelease();
    }
  }
  return result;
}

void realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::TfToken>(atomic_uint **a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, atomic_uint **a3)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(a2, (uint64_t)v7);
  if (v7[0]) {
    uint64_t v5 = v8;
  }
  else {
    uint64_t v5 = *a3;
  }
  *a1 = v5;
  if ((v5 & 7) != 0)
  {
    int v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      *a1 = v6;
    }
  }
  if (v7[0])
  {
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (v10 < 0)
  {
    operator delete(__p);
  }
}

float realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, float *a2)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (uint64_t)v5);
  if (v5[0]) {
    return v6;
  }
  float v3 = *a2;
  if (v8 < 0) {
    operator delete(__p);
  }
  return v3;
}

float realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdObject *this, float *a2)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfQuatf>((uint64_t)v5, this);
  if (v5[0]) {
    return v6;
  }
  float v3 = *a2;
  if (v8 < 0) {
    operator delete(__p);
  }
  return v3;
}

float realityio::getAttributeValueWithDefaultValue<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, float *a2)
{
  realityio::getAttributeValue<float>(a1, (uint64_t)v5);
  if (v5[0]) {
    return v6;
  }
  float v3 = *a2;
  if (v8 < 0) {
    operator delete(__p);
  }
  return v3;
}

uint64_t realityio::getAttributeValueWithDefaultValue<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, unsigned int *a2)
{
  realityio::getAttributeValue<unsigned int>(a1, (uint64_t)v5);
  if (v5[0]) {
    return v6;
  }
  uint64_t v3 = *a2;
  if (v8 < 0) {
    operator delete(__p);
  }
  return v3;
}

void realityio::Outputs::storeValue<REComponentClass *&>(uint64_t a1, long long *a2, uint64_t *a3)
{
  unsigned int v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v7 = operator new(0x28uLL);
  v7[1] = 0;
  std::string v7[2] = 0;
  *uint64_t v7 = &unk_26F349B08;
  uint64_t v8 = *a3;
  void v7[3] = &unk_26F349B58;
  _OWORD v7[4] = v8;
  long long v11 = a2;
  long long v9 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v11);
  char v10 = (std::__shared_weak_count *)v9[8];
  v9[7] = (uint64_t)(v7 + 3);
  unsigned char v9[8] = (uint64_t)v7;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F7395D0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v10, a2);
  if (v10[0])
  {
    long long v5 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v5;
    uint64_t v6 = v13;
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v7;
    uint64_t v6 = *(void *)(a3 + 32);
  }
  *(void *)(a1 + 32) = v6;
  if (v6)
  {
    uint64_t v8 = (atomic_ullong *)(v6 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v8 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result((uint64_t)v10);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v10, a2);
  if (v10[0])
  {
    long long v5 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v5;
    uint64_t v6 = v13;
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v7;
    uint64_t v6 = *(void *)(a3 + 32);
  }
  *(void *)(a1 + 32) = v6;
  if (v6)
  {
    uint64_t v8 = (atomic_ullong *)(v6 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v8 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v10);
}

uint64_t realityio::getAttributeValueWithDefaultValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(a2, (uint64_t)v10);
  if (v10[0])
  {
    long long v5 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v5;
    uint64_t v6 = v13;
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v7;
    uint64_t v6 = *(void *)(a3 + 32);
  }
  *(void *)(a1 + 32) = v6;
  if (v6)
  {
    uint64_t v8 = (atomic_ullong *)(v6 - 16);
    if (*(void *)(a1 + 24)) {
      uint64_t v8 = *(atomic_ullong **)(a1 + 24);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v10);
}

void realityio::Outputs::storeValue<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary> &>(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  uint64_t v8 = *a3;
  long long v7 = (std::__shared_weak_count *)a3[1];
  long long v9 = operator new(0x30uLL);
  char v10 = v9;
  v9[1] = 0;
  v9[2] = 0;
  void *v9 = &unk_26F349BD8;
  long long v11 = v9 + 3;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9[3] = &unk_26F349C28;
    void v9[4] = v8;
    void v9[5] = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    uint64_t v9[3] = &unk_26F349C28;
    void v9[4] = v8;
    void v9[5] = 0;
  }
  long long v14 = a2;
  long long v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 40), (const void **)a2, (uint64_t)&std::piecewise_construct, &v14);
  uint64_t v13 = (std::__shared_weak_count *)v12[8];
  v12[7] = (uint64_t)v11;
  v12[8] = (uint64_t)v10;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)a2, (uint64_t)a2);
  std::mutex::unlock(v6);
}

void sub_23F7398BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *realityio::ArbitraryComponentBuilder::run(realityio::ArbitraryComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v4 = (realityio::Inputs *)((char *)a2 + 32);
  long long v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)(*(void *)a2 + 8));
  PrimAtPath = (realityio::EntityBuilder *)pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v24, v5, v4);
  uint64_t v7 = realityio::EntityBuilder::kInputName(PrimAtPath);
  realityio::Inputs::_getValue<realityio::WrappedRERef<REEntity *>>((uint64_t)a2, v7, (uint64_t)v22);
  if (v22[0])
  {
    uint64_t v21 = v23;
    if (v23) {
      RERetain();
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24, (uint64_t)v17);
  if (v21)
  {
    long long v9 = v25;
    if (!v25 || (uint64_t v10 = *((void *)v25 + 7), (v10 & 0x800) != 0))
    {
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v25, v8);
      uint64_t v10 = *((void *)v9 + 7);
    }
    if (v10)
    {
      uint64_t v29 = v21;
      uint64_t v30 = a2;
      LODWORD(v35) = 3;
      int v36 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      unint64_t v39 = 0;
      unint64_t v12 = atomic_load(&realityio::tokens::ArbitraryComponentBuilderTokens);
      if (!v12) {
        pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType>>::_TryToCreateData();
      }
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v31, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v24, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v12 + 16));
      LODWORD(v35) = v31;
      uint64_t v13 = v32;
      int v32 = 0;
      long long v14 = v36;
      int v36 = v13;
      if (v14) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v14);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v37, &v33);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v38);
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v39 = v34;
      unint64_t v34 = 0;
      int IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v35);
      if ((v34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
      if (v32) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v32);
      }
      if (IsValid)
      {
        uint64_t v28 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      }
      if ((v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v37);
      if (v36) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v36);
      }
    }
    else
    {
      uint64_t v11 = *((void *)a2 + 6);
      unsigned int v35 = &unk_26F349CD8;
      int v36 = this;
      unint64_t v39 = (unint64_t)&v35;
      (*(void (**)(uint64_t, void **))(*(void *)v11 + 16))(v11, &v35);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v35);
    }
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v19);
  if (v18) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v18);
  }
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&v21);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)v22);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
  uint64_t result = v25;
  if (v25) {
    return (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v25);
  }
  return result;
}

void sub_23F739CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v25 - 136));
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)(v25 - 104));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a10);
  realityio::WrappedRERef<REEntity *>::~WrappedRERef(&a14);
  realityio::Result<realityio::WrappedRERef<REEntity *>,realityio::DetailedError>::~Result((uint64_t)&a15);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a21);
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentBuilder::removeComponentFromEntity(realityio::ArbitraryComponentBuilder *this)
{
  long long v2 = (char *)*((void *)this + 35);
  uint64_t v3 = (char *)this + 288;
  if (v2 != (char *)this + 288)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v7, (_DWORD *)v2 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v8, (_DWORD *)v2 + 9);
      uint64_t v9 = *((void *)v2 + 5);
      if (v9) {
        RERetain();
      }
      if (REComponentGetEntity())
      {
        REComponentGetClass();
        REEntityRemoveComponentByClass();
      }
      realityio::WrappedRERef<REComponent *>::~WrappedRERef(&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v7);
      uint64_t v4 = (char *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          long long v5 = v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          long long v5 = (char *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          long long v2 = v5;
        }
        while (!v6);
      }
      long long v2 = v5;
    }
    while (v5 != v3);
  }
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(*((void **)this + 36));
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = v3;
}

void sub_23F739E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REComponent *>>::~pair(uint64_t a1)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef((void *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void realityio::ArbitraryComponentBuilder::clear(realityio::ArbitraryComponentBuilder *this, realityio::Inputs *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a2 + 6);
  __p[0] = &unk_26F349D58;
  __p[1] = this;
  long long v16 = __p;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 16))(v3, __p);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
  long long v5 = (std::mutex *)*((void *)this + 2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClass");
  std::mutex::lock(v5 + 1);
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v5->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v5 + 1);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (&v5->__m_.__opaque[40] != (char *)v6)
  {
    uint64_t v8 = *((void *)this + 2);
    int v7 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentClass");
    std::mutex::lock((std::mutex *)(v8 + 64));
    if (v8 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v8 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v8 + 40), (const void **)__p); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v8, (unsigned __int8 *)__p);
    }
    std::mutex::unlock((std::mutex *)(v8 + 64));
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v10 = (std::mutex *)*((void *)this + 2);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationLibrary");
  std::mutex::lock(v10 + 1);
  uint64_t v11 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&v10->__m_.__opaque[32], (const void **)__p);
  std::mutex::unlock(v10 + 1);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (&v10->__m_.__opaque[40] != (char *)v11)
  {
    uint64_t v13 = *((void *)this + 2);
    unint64_t v12 = (std::__shared_weak_count *)*((void *)this + 3);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "arbitraryComponentAnimationLibrary");
    std::mutex::lock((std::mutex *)(v13 + 64));
    if (v13 + 48 != std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>(v13 + 40, (const void **)__p))std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::__erase_unique<std::string>((uint64_t **)(v13 + 40), (const void **)__p); {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>((void *)v13, (unsigned __int8 *)__p);
    }
    std::mutex::unlock((std::mutex *)(v13 + 64));
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_23F73A1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex::unlock(v16);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

void realityio::ArbitraryComponentBuilder::~ArbitraryComponentBuilder(realityio::ArbitraryComponentBuilder *this)
{
  realityio::ArbitraryComponentBuilder::~ArbitraryComponentBuilder(this);

  JUMPOUT(0x2455D2BD0);
}

{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t vars8;

  *(void *)this = &unk_26F349610;
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(*((void **)this + 36));
  *(void *)this = &unk_26F32F8B0;
  std::__function::__value_func<std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 31);
  std::__function::__value_func<std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__value_func[abi:ne180100]((void *)this + 27);
  long long v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 23);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  realityio::Builder::~Builder(this);
}

void anonymous namespace'::getArrayName(std::string *a1, long long *a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&__p, "[]");
  long long v4 = a2[1];
  long long v50 = *a2;
  long long v51 = v4;
  uint64_t Name = (char *)RETypeInfoGetName();
  std::string::basic_string[abi:ne180100]<0>(&__str, Name);
  long long v6 = a2[1];
  long long v48 = *a2;
  long long v49 = v6;
  if ((RETypeInfoIsArray() & 1) == 0)
  {
    long long v7 = a2[1];
    long long v46 = *a2;
    long long v47 = v7;
    if (!RETypeInfoIsList())
    {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (size >= 9) {
        std::string::size_type size = 9;
      }
      if (size)
      {
        long long v14 = (std::string *)((char *)p_str + size);
        char v15 = p_str;
        long long v16 = v14;
        do
        {
          if (v15->__r_.__value_.__s.__data_[0] == 79)
          {
            uint64_t v17 = 1u;
            while (v17 != 9)
            {
              if ((std::string *)((char *)v15 + v17) == v14) {
                goto LABEL_30;
              }
              int v18 = v15->__r_.__value_.__s.__data_[v17];
              int v19 = aOptional[v17++];
              if (v18 != v19) {
                goto LABEL_14;
              }
            }
            long long v16 = v15;
          }
LABEL_14:
          char v15 = (std::string *)((char *)v15 + 1);
        }
        while (v15 != v14);
LABEL_30:
        if (v16 != v14 && v16 == p_str)
        {
          std::string::size_type v24 = std::string::find(&__str, 60, 0) + 1;
          std::string::size_type v25 = std::string::find(&__str, 62, 0);
          std::string::basic_string(a1, &__str, v24, v25 - v24, (std::allocator<char> *)&v44);
          goto LABEL_43;
        }
      }
      goto LABEL_33;
    }
  }
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = v44;
  long long v43 = v45;
  if ((RETypeInfoIsArray() & 1) != 0 || (long long v40 = v44, v41 = v45, RETypeInfoIsList()))
  {
    memset(v39, 0, sizeof(v39));
    long long v37 = *(_OWORD *)v39;
    long long v38 = *(_OWORD *)&v39[16];
    uint64_t v8 = (char *)RETypeInfoGetName();
    std::string::basic_string[abi:ne180100]<0>(&v30, v8);
    uint64_t v9 = std::string::append(&v30, "[]");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    a1->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_43;
    }
    uint64_t v11 = (void *)v30.__r_.__value_.__r.__words[0];
    goto LABEL_42;
  }
  long long v20 = a2[1];
  long long v35 = *a2;
  long long v36 = v20;
  if (!RETypeInfoIsArray())
  {
    std::string::size_type v26 = std::string::find(&__str, 60, 0) + 1;
    std::string::size_type v27 = std::string::find(&__str, 62, 0);
    std::string::basic_string((std::string *)v39, &__str, v26, v27 - v26, (std::allocator<char> *)&v30);
    if ((v34 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v34 & 0x80u) == 0) {
      std::string::size_type v23 = v34;
    }
    else {
      std::string::size_type v23 = v33;
    }
    goto LABEL_40;
  }
  std::string::size_type v21 = std::string::find(&__str, 91, 0);
  if (v21 == -1)
  {
LABEL_33:
    *a1 = __str;
    memset(&__str, 0, sizeof(__str));
    goto LABEL_43;
  }
  std::string::basic_string((std::string *)v39, &__str, 0, v21, (std::allocator<char> *)&v30);
  if ((v34 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v34 & 0x80u) == 0) {
    std::string::size_type v23 = v34;
  }
  else {
    std::string::size_type v23 = v33;
  }
LABEL_40:
  uint64_t v28 = std::string::append((std::string *)v39, p_p, v23);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((v39[23] & 0x80000000) == 0) {
    goto LABEL_43;
  }
  uint64_t v11 = *(void **)v39;
LABEL_42:
  operator delete(v11);
LABEL_43:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((char)v34 < 0) {
    operator delete(__p);
  }
}

void sub_23F73A5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::getTypeMap(_anonymous_namespace_ *this)
{
  uint64_t v199 = *MEMORY[0x263EF8340];
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, "Vector2F");
    uint64_t v1 = (unint64_t *)MEMORY[0x263F90560];
    Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!Data) {
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v101, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      std::string v101 = __s;
    }
    uint64_t v102 = *((void *)Data + 19);
    std::string::basic_string[abi:ne180100]<0>(&v99, "Vector3F");
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v3) {
      uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v103, v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
    }
    else {
      std::string v103 = v99;
    }
    uint64_t v104 = *((void *)v3 + 20);
    std::string::basic_string[abi:ne180100]<0>(&v98, "Vector4F");
    long long v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v4) {
      long long v4 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v105, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
    }
    else {
      std::string v105 = v98;
    }
    uint64_t v106 = *((void *)v4 + 21);
    std::string::basic_string[abi:ne180100]<0>(&v97, "float[2]");
    long long v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v5) {
      long long v5 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v107, v97.__r_.__value_.__l.__data_, v97.__r_.__value_.__l.__size_);
    }
    else {
      std::string v107 = v97;
    }
    uint64_t v108 = *((void *)v5 + 19);
    std::string::basic_string[abi:ne180100]<0>(&v96, "float[3]");
    long long v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v6) {
      long long v6 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v109, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
    }
    else {
      std::string v109 = v96;
    }
    uint64_t v110 = *((void *)v6 + 20);
    std::string::basic_string[abi:ne180100]<0>(&v95, "float[4]");
    long long v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v7) {
      long long v7 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v111, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
    }
    else {
      std::string v111 = v95;
    }
    uint64_t v112 = *((void *)v7 + 21);
    std::string::basic_string[abi:ne180100]<0>(&v94, "QuaternionF");
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v8) {
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v113, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
    }
    else {
      std::string v113 = v94;
    }
    uint64_t v114 = *((void *)v8 + 41);
    std::string::basic_string[abi:ne180100]<0>(&v93, "Matrix2x2F");
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v9) {
      uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v115, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
    }
    else {
      std::string v115 = v93;
    }
    uint64_t v116 = *((void *)v9 + 43);
    std::string::basic_string[abi:ne180100]<0>(&v92, "Matrix3x3F");
    long long v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v10) {
      long long v10 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v117, v92.__r_.__value_.__l.__data_, v92.__r_.__value_.__l.__size_);
    }
    else {
      std::string v117 = v92;
    }
    uint64_t v118 = *((void *)v10 + 44);
    std::string::basic_string[abi:ne180100]<0>(&v91, "Matrix4x4F");
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v11) {
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v119, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
    }
    else {
      std::string v119 = v91;
    }
    uint64_t v120 = *((void *)v11 + 45);
    std::string::basic_string[abi:ne180100]<0>(&v90, "uint8_t");
    unint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v12) {
      unint64_t v12 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v121, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
    }
    else {
      std::string v121 = v90;
    }
    uint64_t v122 = *((void *)v12 + 1);
    std::string::basic_string[abi:ne180100]<0>(&v89, "uint16_t");
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v13) {
      uint64_t v13 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v123, v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
    }
    else {
      std::string v123 = v89;
    }
    uint64_t v124 = *((void *)v13 + 3);
    std::string::basic_string[abi:ne180100]<0>(&v88, "uint32_t");
    long long v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v14) {
      long long v14 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v125, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
    }
    else {
      std::string v125 = v88;
    }
    uint64_t v126 = *((void *)v14 + 3);
    std::string::basic_string[abi:ne180100]<0>(&v87, "uint64_t");
    char v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v15) {
      char v15 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v127, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    }
    else {
      std::string v127 = v87;
    }
    uint64_t v128 = *((void *)v15 + 5);
    std::string::basic_string[abi:ne180100]<0>(&v86, "size_t");
    long long v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v16) {
      long long v16 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v129, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
    }
    else {
      std::string v129 = v86;
    }
    uint64_t v130 = *((void *)v16 + 5);
    std::string::basic_string[abi:ne180100]<0>(&v85, "char");
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v17) {
      uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v131, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
    }
    else {
      std::string v131 = v85;
    }
    uint64_t v132 = *((void *)v17 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v84, "int8_t");
    int v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v18) {
      int v18 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v133, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
    }
    else {
      std::string v133 = v84;
    }
    uint64_t v134 = *((void *)v18 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v83, "int16_t");
    int v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v19) {
      int v19 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v135, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
    }
    else {
      std::string v135 = v83;
    }
    uint64_t v136 = *((void *)v19 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v82, "int32_t");
    long long v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v20) {
      long long v20 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v137, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
    }
    else {
      std::string v137 = v82;
    }
    uint64_t v138 = *((void *)v20 + 2);
    std::string::basic_string[abi:ne180100]<0>(&v81, "int");
    std::string::size_type v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v21) {
      std::string::size_type v21 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v139, v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
    }
    else {
      std::string v139 = v81;
    }
    uint64_t v140 = *((void *)v21 + 4);
    std::string::basic_string[abi:ne180100]<0>(&v80, "int64_t");
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v22) {
      uint64_t v22 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v141, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
    }
    else {
      std::string v141 = v80;
    }
    uint64_t v142 = *((void *)v22 + 4);
    std::string::basic_string[abi:ne180100]<0>(&v79, "BOOL");
    std::string::size_type v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v23) {
      std::string::size_type v23 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v143, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    }
    else {
      std::string v143 = v79;
    }
    uint64_t v144 = *(void *)v23;
    std::string::basic_string[abi:ne180100]<0>(&v78, "double");
    std::string::size_type v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v24) {
      std::string::size_type v24 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v145, v78.__r_.__value_.__l.__data_, v78.__r_.__value_.__l.__size_);
    }
    else {
      std::string v145 = v78;
    }
    uint64_t v146 = *((void *)v24 + 8);
    std::string::basic_string[abi:ne180100]<0>(&v77, "float");
    std::string::size_type v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v25) {
      std::string::size_type v25 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v147, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
    }
    else {
      std::string v147 = v77;
    }
    uint64_t v148 = *((void *)v25 + 7);
    std::string::basic_string[abi:ne180100]<0>(&v76, "Vector2F[]");
    std::string::size_type v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v26) {
      std::string::size_type v26 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v149, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    }
    else {
      std::string v149 = v76;
    }
    uint64_t v150 = *((void *)v26 + 76);
    std::string::basic_string[abi:ne180100]<0>(&v75, "Vector3F[]");
    std::string::size_type v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v27) {
      std::string::size_type v27 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v151, v75.__r_.__value_.__l.__data_, v75.__r_.__value_.__l.__size_);
    }
    else {
      std::string v151 = v75;
    }
    uint64_t v152 = *((void *)v27 + 77);
    std::string::basic_string[abi:ne180100]<0>(&v74, "Vector4F[]");
    uint64_t v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v28) {
      uint64_t v28 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v153, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
    }
    else {
      std::string v153 = v74;
    }
    uint64_t v154 = *((void *)v28 + 78);
    std::string::basic_string[abi:ne180100]<0>(&v73, "QuaternionF[]");
    long long v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v29) {
      long long v29 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v155, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
    }
    else {
      std::string v155 = v73;
    }
    uint64_t v156 = *((void *)v29 + 98);
    std::string::basic_string[abi:ne180100]<0>(&v72, "Matrix4x4F[]");
    std::string v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v30) {
      std::string v30 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v157, v72.__r_.__value_.__l.__data_, v72.__r_.__value_.__l.__size_);
    }
    else {
      std::string v157 = v72;
    }
    uint64_t v158 = *((void *)v30 + 102);
    std::string::basic_string[abi:ne180100]<0>(&v71, "uint8_t[]");
    uint64_t v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v31) {
      uint64_t v31 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v159, v71.__r_.__value_.__l.__data_, v71.__r_.__value_.__l.__size_);
    }
    else {
      std::string v159 = v71;
    }
    uint64_t v160 = *((void *)v31 + 57);
    std::string::basic_string[abi:ne180100]<0>(&v70, "uint16_t[]");
    int v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v32) {
      int v32 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v161, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
    }
    else {
      std::string v161 = v70;
    }
    uint64_t v162 = *((void *)v32 + 60);
    std::string::basic_string[abi:ne180100]<0>(&v69, "uint32_t[]");
    std::string::size_type v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v33) {
      std::string::size_type v33 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v163, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
    }
    else {
      std::string v163 = v69;
    }
    uint64_t v164 = *((void *)v33 + 60);
    std::string::basic_string[abi:ne180100]<0>(&v68, "uint64_t[]");
    unsigned __int8 v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v34) {
      unsigned __int8 v34 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v165, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
    }
    else {
      std::string v165 = v68;
    }
    uint64_t v166 = *((void *)v34 + 62);
    std::string::basic_string[abi:ne180100]<0>(&v67, "size_t[]");
    long long v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v35) {
      long long v35 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v167, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
    }
    else {
      std::string v167 = v67;
    }
    uint64_t v168 = *((void *)v35 + 62);
    std::string::basic_string[abi:ne180100]<0>(&v66, "char[]");
    long long v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v36) {
      long long v36 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v169, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
    }
    else {
      std::string v169 = v66;
    }
    uint64_t v170 = *((void *)v36 + 58);
    std::string::basic_string[abi:ne180100]<0>(&v65, "int[]");
    long long v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v37) {
      long long v37 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v171, v65.__r_.__value_.__l.__data_, v65.__r_.__value_.__l.__size_);
    }
    else {
      std::string v171 = v65;
    }
    uint64_t v172 = *((void *)v37 + 58);
    std::string::basic_string[abi:ne180100]<0>(&v64, "int32_t[]");
    long long v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v38) {
      long long v38 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v173, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    }
    else {
      std::string v173 = v64;
    }
    uint64_t v174 = *((void *)v38 + 58);
    std::string::basic_string[abi:ne180100]<0>(&v63, "int64_t[]");
    unint64_t v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v39) {
      unint64_t v39 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v175, v63.__r_.__value_.__l.__data_, v63.__r_.__value_.__l.__size_);
    }
    else {
      std::string v175 = v63;
    }
    uint64_t v176 = *((void *)v39 + 61);
    std::string::basic_string[abi:ne180100]<0>(&v62, "BOOL[]");
    long long v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v40) {
      long long v40 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v177, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    }
    else {
      std::string v177 = v62;
    }
    uint64_t v178 = *((void *)v40 + 56);
    std::string::basic_string[abi:ne180100]<0>(&v61, "double[]");
    long long v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v41) {
      long long v41 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v179, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    }
    else {
      std::string v179 = v61;
    }
    uint64_t v180 = *((void *)v41 + 65);
    std::string::basic_string[abi:ne180100]<0>(&v60, "float[]");
    long long v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v42) {
      long long v42 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v181, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
    }
    else {
      std::string v181 = v60;
    }
    uint64_t v182 = *((void *)v42 + 64);
    std::string::basic_string[abi:ne180100]<0>(&v59, "AssetLoadDescriptor[]");
    long long v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v43) {
      long long v43 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v183, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
    }
    else {
      std::string v183 = v59;
    }
    uint64_t v184 = *((void *)v43 + 69);
    std::string::basic_string[abi:ne180100]<0>(&v58, "char*");
    long long v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v44) {
      long long v44 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v185, v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
    }
    else {
      std::string v185 = v58;
    }
    uint64_t v186 = *((void *)v44 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v57, "DynamicString");
    long long v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v45) {
      long long v45 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v187, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    }
    else {
      std::string v187 = v57;
    }
    uint64_t v188 = *((void *)v45 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v56, "StringID");
    long long v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v46) {
      long long v46 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v189, v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
    }
    else {
      std::string v189 = v56;
    }
    uint64_t v190 = *((void *)v46 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v55, "DynamicString[]");
    long long v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v47) {
      long long v47 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v191, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
    }
    else {
      std::string v191 = v55;
    }
    uint64_t v192 = *((void *)v47 + 67);
    std::string::basic_string[abi:ne180100]<0>(&v54, "StringID[]");
    long long v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v48) {
      long long v48 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v193, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
    }
    else {
      std::string v193 = v54;
    }
    uint64_t v194 = *((void *)v48 + 67);
    std::string::basic_string[abi:ne180100]<0>(&v53, "AssetHandle");
    long long v49 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v49) {
      long long v49 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v195, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
    }
    else {
      std::string v195 = v53;
    }
    uint64_t v196 = *((void *)v49 + 12);
    std::string::basic_string[abi:ne180100]<0>(&__p, "AssetHandle[]");
    long long v50 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v1);
    if (!v50) {
      long long v50 = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v197, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v197 = __p;
    }
    uint64_t v198 = *((void *)v50 + 69);
    std::map<std::string,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>::map[abi:ne180100]((uint64_t *)&v101, 49);
    uint64_t v51 = 196;
    do
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[v51 + 1]) < 0) {
        operator delete((void *)v99.__r_.__value_.__r.__words[v51 + 2]);
      }
      v51 -= 4;
    }
    while (v51 * 8);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v65.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v70.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v73.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v80.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v81.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v90.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v92.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v94.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v95.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v96.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v97.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v98.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v99.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
  }
}

void sub_23F73BE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a86 < 0) {
    operator delete(a85);
  }
  if (a88 < 0) {
    operator delete(a87);
  }
  if (a90 < 0) {
    operator delete(a89);
  }
  if (a92 < 0) {
    operator delete(a91);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x28F]) < 0) {
    operator delete((void *)STACK[0x278]);
  }
  if (SLOBYTE(STACK[0x2A7]) < 0) {
    operator delete((void *)STACK[0x290]);
  }
  if (SLOBYTE(STACK[0x2BF]) < 0) {
    operator delete((void *)STACK[0x2A8]);
  }
  if (SLOBYTE(STACK[0x2D7]) < 0) {
    operator delete((void *)STACK[0x2C0]);
  }
  if (SLOBYTE(STACK[0x2EF]) < 0) {
    operator delete((void *)STACK[0x2D8]);
  }
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  if (SLOBYTE(STACK[0x31F]) < 0) {
    operator delete((void *)STACK[0x308]);
  }
  if (SLOBYTE(STACK[0x337]) < 0) {
    operator delete((void *)STACK[0x320]);
  }
  if (SLOBYTE(STACK[0x34F]) < 0) {
    operator delete((void *)STACK[0x338]);
  }
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  if (SLOBYTE(STACK[0x37F]) < 0) {
    operator delete((void *)STACK[0x368]);
  }
  if (SLOBYTE(STACK[0x397]) < 0) {
    operator delete((void *)STACK[0x380]);
  }
  if (SLOBYTE(STACK[0x3AF]) < 0) {
    operator delete((void *)STACK[0x398]);
  }
  if (SLOBYTE(STACK[0x3C7]) < 0) {
    operator delete((void *)STACK[0x3B0]);
  }
  if (SLOBYTE(STACK[0x3DF]) < 0) {
    operator delete((void *)STACK[0x3C8]);
  }
  if (SLOBYTE(STACK[0x3F7]) < 0) {
    operator delete((void *)STACK[0x3E0]);
  }
  if (SLOBYTE(STACK[0x40F]) < 0) {
    operator delete((void *)STACK[0x3F8]);
  }
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  if (SLOBYTE(STACK[0x457]) < 0) {
    operator delete((void *)STACK[0x440]);
  }
  if (SLOBYTE(STACK[0x46F]) < 0) {
    operator delete((void *)STACK[0x458]);
  }
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  if (SLOBYTE(STACK[0x49F]) < 0) {
    operator delete((void *)STACK[0x488]);
  }
  for (; v92 != &STACK[0x4A0]; v92 -= 4)
  {
    if (*((char *)v92 - 9) < 0) {
      operator delete((void *)*(v92 - 4));
    }
  }
  _Unwind_Resume(a1);
}

void sub_23F73C490()
{
}

void sub_23F73C49C()
{
}

void std::__shared_ptr_pointer<unsigned char *,anonymous namespace'::buildInfoForComponent(anonymous namespace'::MemberInfo &,std::string const&,unsigned int,std::string const&,RETypeMemberInfo,std::shared_ptr<unsigned char>)::$_0,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,anonymous namespace'::buildInfoForComponent(anonymous namespace'::MemberInfo &,std::string const&,unsigned int,std::string const&,RETypeMemberInfo,std::shared_ptr<unsigned char>)::$_0,std::allocator<unsigned char>>::__on_zero_shared()
{
  return RETypeInfoDestroyInstance();
}

void sub_23F73C544(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,anonymous namespace'::buildInfoForComponent(anonymous namespace'::MemberInfo &,std::string const&,unsigned int,std::string const&,RETypeMemberInfo,std::shared_ptr<unsigned char>)::$_0,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::map<std::string,pxrInternal__aapl__pxrReserved__::SdfValueTypeName>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_268C40CD0 = 0;
  qword_268C40CC8 = 0;
  if (a2)
  {
    long long v2 = result;
    uint64_t v3 = 0;
    long long v4 = &result[4 * a2];
    long long v5 = &qword_268C40CC8;
    while (v5 != &qword_268C40CC8)
    {
      if (v3)
      {
        do
        {
          long long v6 = (uint64_t *)v3;
          uint64_t v3 = *(void *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        long long v7 = &qword_268C40CC8;
        do
        {
          long long v6 = (uint64_t *)v7[2];
          BOOL v8 = *v6 == (void)v7;
          long long v7 = v6;
        }
        while (v8);
      }
      uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268C40CD0, (const void **)v6 + 4, (const void **)v2);
      uint64_t v3 = qword_268C40CC8;
      if (result) {
        goto LABEL_11;
      }
      if (qword_268C40CC8)
      {
        uint64_t v9 = &qword_268C40CC8;
        while (1)
        {
          while (1)
          {
            long long v6 = (uint64_t *)v3;
            long long v10 = (const void **)(v3 + 32);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268C40CD0, (const void **)v2, (const void **)(v3 + 32)))break; {
            uint64_t v3 = *v6;
            }
            uint64_t v9 = v6;
            if (!*v6) {
              goto LABEL_24;
            }
          }
          uint64_t result = (uint64_t *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_268C40CD0, v10, (const void **)v2);
          if (!result) {
            break;
          }
          uint64_t v9 = v6 + 1;
          uint64_t v3 = v6[1];
          if (!v3) {
            goto LABEL_24;
          }
        }
LABEL_13:
        if (*v9) {
          goto LABEL_30;
        }
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v9 = &qword_268C40CC8;
      long long v6 = &qword_268C40CC8;
LABEL_24:
      uint64_t v11 = (uint64_t *)operator new(0x40uLL);
      unint64_t v12 = (std::string *)(v11 + 4);
      if (*((char *)v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)*v2, v2[1]);
      }
      else
      {
        long long v13 = *(_OWORD *)v2;
        v11[6] = v2[2];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v11[7] = v2[3];
      *uint64_t v11 = 0;
      v11[1] = 0;
      v11[2] = (uint64_t)v6;
      uint64_t *v9 = (uint64_t)v11;
      {
        uint64_t v11 = (uint64_t *)*v9;
      }
      uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_268C40CC8, v11);
      ++qword_268C40CD0;
LABEL_30:
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
      uint64_t v3 = qword_268C40CC8;
    }
    long long v6 = &qword_268C40CC8;
LABEL_11:
    if (v3)
    {
      uint64_t v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_23F73C760(_Unwind_Exception *a1)
{
  operator delete(v1);
  std::__tree<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::TextureBuilder::TextureDataT const*>>>::destroy((char *)qword_268C40CC8);
  _Unwind_Resume(a1);
}

void anonymous namespace'::getFuncTable(_anonymous_namespace_ *this, uint64_t a2)
{
  MEMORY[0x270FA5388](this, a2);
  v292[4] = *MEMORY[0x263EF8340];
  {
    MEMORY[0x2455CF810](&v155, "uchar");
    MEMORY[0x2455CF810](&v153, "uint8_t");
    uint64_t v258 = v153;
    uint64_t v153 = 0;
    v259[0] = &unk_26F349718;
    v259[3] = v259;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v154, &v258, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v260, v155, v154);
    MEMORY[0x2455CF810](&v152, "uint");
    MEMORY[0x2455CF810](&v150, "uint16_t");
    uint64_t v254 = v150;
    uint64_t v150 = 0;
    v255[0] = &unk_26F349718;
    v255[3] = v255;
    MEMORY[0x2455CF810](&v149, "uint32_t");
    uint64_t v256 = v149;
    uint64_t v149 = 0;
    v257[0] = &unk_26F349718;
    v257[3] = v257;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v151, &v254, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v261, v152, v151);
    MEMORY[0x2455CF810](&v148, "uint64");
    MEMORY[0x2455CF810](&v146, "uint64_t");
    uint64_t v250 = v146;
    uint64_t v146 = 0;
    v251[0] = &unk_26F349718;
    v251[3] = v251;
    MEMORY[0x2455CF810](&v145, "size_t");
    uint64_t v252 = v145;
    uint64_t v145 = 0;
    v253[0] = &unk_26F349718;
    v253[3] = v253;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v147, &v250, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v262, v148, v147);
    MEMORY[0x2455CF810](&v144, "int");
    MEMORY[0x2455CF810](&v142, "char");
    uint64_t v244 = v142;
    uint64_t v142 = 0;
    v245[0] = &unk_26F349718;
    v245[3] = v245;
    MEMORY[0x2455CF810](&v141, "int8_t");
    v245[4] = v141;
    uint64_t v141 = 0;
    v246[0] = &unk_26F349718;
    v246[3] = v246;
    MEMORY[0x2455CF810](&v140, "int16_t");
    v246[4] = v140;
    uint64_t v140 = 0;
    v247[0] = &unk_26F349718;
    v247[3] = v247;
    MEMORY[0x2455CF810](&v139, "int32_t");
    uint64_t v248 = v139;
    uint64_t v139 = 0;
    v249[0] = &unk_26F349718;
    v249[3] = v249;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v143, &v244, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v263, v144, v143);
    MEMORY[0x2455CF810](&v138, "int64");
    MEMORY[0x2455CF810](&v136, "int");
    uint64_t v240 = v136;
    uint64_t v136 = 0;
    v241[0] = &unk_26F349718;
    v241[3] = v241;
    MEMORY[0x2455CF810](&v135, "int64_t");
    uint64_t v242 = v135;
    uint64_t v135 = 0;
    v243[0] = &unk_26F349718;
    v243[3] = v243;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v137, &v240, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v264, v138, v137);
    MEMORY[0x2455CF810](&v134, "float");
    MEMORY[0x2455CF810](&v132, "float");
    uint64_t v238 = v132;
    uint64_t v132 = 0;
    v239[0] = &unk_26F349718;
    void v239[3] = v239;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v133, &v238, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v265, v134, v133);
    MEMORY[0x2455CF810](&v131, "float2");
    MEMORY[0x2455CF810](&v129, "float[]");
    uint64_t v234 = v129;
    uint64_t v129 = 0;
    v235[0] = &unk_26F349718;
    v235[3] = v235;
    MEMORY[0x2455CF810](&v128, "Vector2F");
    uint64_t v236 = v128;
    uint64_t v128 = 0;
    v237[0] = &unk_26F349718;
    v237[3] = v237;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v130, &v234, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v266, v131, v130);
    MEMORY[0x2455CF810](&v127, "float3");
    MEMORY[0x2455CF810](&v125, "float[]");
    uint64_t v230 = v125;
    uint64_t v125 = 0;
    v231[0] = &unk_26F349718;
    v231[3] = v231;
    MEMORY[0x2455CF810](&v124, "Vector3F");
    uint64_t v232 = v124;
    uint64_t v124 = 0;
    v233[0] = &unk_26F349718;
    v233[3] = v233;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v126, &v230, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v267, v127, v126);
    MEMORY[0x2455CF810](&v123, "float4");
    MEMORY[0x2455CF810](&v121, "float[]");
    uint64_t v226 = v121;
    uint64_t v121 = 0;
    v227[0] = &unk_26F349718;
    v227[3] = v227;
    MEMORY[0x2455CF810](&v120, "Vector4F");
    uint64_t v228 = v120;
    uint64_t v120 = 0;
    v229[0] = &unk_26F349718;
    v229[3] = v229;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v122, &v226, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v268, v123, v122);
    MEMORY[0x2455CF810](&v119, "quatf");
    MEMORY[0x2455CF810](&v117, "QuaternionF");
    uint64_t v224 = v117;
    uint64_t v117 = 0;
    v225[0] = &unk_26F349718;
    v225[3] = v225;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v118, &v224, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v269, v119, v118);
    MEMORY[0x2455CF810](&v116, "double");
    MEMORY[0x2455CF810](&v114, "double");
    uint64_t v222 = v114;
    uint64_t v114 = 0;
    v223[0] = &unk_26F349718;
    v223[3] = v223;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v115, &v222, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v270, v116, v115);
    MEMORY[0x2455CF810](&v113, "BOOL");
    MEMORY[0x2455CF810](&v111, "BOOL");
    uint64_t v220 = v111;
    uint64_t v111 = 0;
    v221[0] = &unk_26F349718;
    v221[3] = v221;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v112, &v220, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v271, v113, v112);
    MEMORY[0x2455CF810](&v110, "matrix2d");
    MEMORY[0x2455CF810](&v108, "Matrix2x2F");
    uint64_t v218 = v108;
    uint64_t v108 = 0;
    v219[0] = &unk_26F349718;
    v219[1] = _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix2dENS1_7GfVec2dE13simd_float2x2Dv2_fLm2EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo;
    v219[3] = v219;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v109, &v218, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v272, v110, v109);
    MEMORY[0x2455CF810](&v107, "matrix3d");
    MEMORY[0x2455CF810](&v105, "Matrix3x3F");
    uint64_t v216 = v105;
    uint64_t v105 = 0;
    v217[0] = &unk_26F349718;
    v217[1] = _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix3dENS1_7GfVec3dE13simd_float3x3Dv3_fLm3EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo;
    v217[3] = v217;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v106, &v216, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v273, v107, v106);
    MEMORY[0x2455CF810](&v104, "matrix4d");
    MEMORY[0x2455CF810](&v102, "Matrix4x4F");
    uint64_t v214 = v102;
    uint64_t v102 = 0;
    v215[0] = &unk_26F349718;
    v215[1] = _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix4dENS1_7GfVec4dE13simd_float4x4Dv4_fLm4EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo;
    v215[3] = v215;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v103, &v214, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v274, v104, v103);
    MEMORY[0x2455CF810](&v101, "token");
    MEMORY[0x2455CF810](&v99, "char*");
    uint64_t v209 = v99;
    uint64_t v99 = 0;
    v210[0] = &unk_26F349718;
    v210[3] = v210;
    MEMORY[0x2455CF810](&v98, "DynamicString");
    v210[4] = v98;
    uint64_t v98 = 0;
    v211[0] = &unk_26F349718;
    v211[3] = v211;
    MEMORY[0x2455CF810](&v97, "StringID");
    uint64_t v212 = v97;
    uint64_t v97 = 0;
    v213[0] = &unk_26F349718;
    v213[3] = v213;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v100, &v209, 3);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v275, v101, v100);
    MEMORY[0x2455CF810](&v96, "string");
    MEMORY[0x2455CF810](&v94, "char*");
    uint64_t v204 = v94;
    uint64_t v94 = 0;
    v205[0] = &unk_26F349718;
    v205[3] = v205;
    MEMORY[0x2455CF810](&v93, "DynamicString");
    v205[4] = v93;
    uint64_t v93 = 0;
    v206[0] = &unk_26F349718;
    v206[3] = v206;
    MEMORY[0x2455CF810](&v92, "StringID");
    uint64_t v207 = v92;
    uint64_t v92 = 0;
    v208[0] = &unk_26F349718;
    v208[3] = v208;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v95, &v204, 3);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v276, v96, v95);
    MEMORY[0x2455CF810](&v91, "asset");
    MEMORY[0x2455CF810](&v89, "AssetHandle");
    uint64_t v202 = v89;
    uint64_t v89 = 0;
    v203[0] = &unk_26F349718;
    v203[3] = v203;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v90, &v202, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v277, v91, v90);
    MEMORY[0x2455CF810](&v88, "uchar[]");
    MEMORY[0x2455CF810](&v86, "uint8_t[]");
    uint64_t v200 = v86;
    uint64_t v86 = 0;
    v201[0] = &unk_26F349718;
    v201[3] = v201;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v87, &v200, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v278, v88, v87);
    MEMORY[0x2455CF810](&v85, "uint[]");
    MEMORY[0x2455CF810](&v83, "uint16_t[]");
    uint64_t v196 = v83;
    uint64_t v83 = 0;
    v197[0] = &unk_26F349718;
    v197[3] = v197;
    MEMORY[0x2455CF810](&v82, "uint32_t[]");
    uint64_t v198 = v82;
    uint64_t v82 = 0;
    v199[0] = &unk_26F349718;
    v199[3] = v199;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v84, &v196, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v279, v85, v84);
    MEMORY[0x2455CF810](&v81, "uint64[]");
    MEMORY[0x2455CF810](&v79, "uint64_t[]");
    uint64_t v192 = v79;
    uint64_t v79 = 0;
    v193[0] = &unk_26F349718;
    v193[3] = v193;
    MEMORY[0x2455CF810](&v78, "size_t[]");
    uint64_t v194 = v78;
    uint64_t v78 = 0;
    v195[0] = &unk_26F349718;
    v195[3] = v195;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v80, &v192, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v280, v81, v80);
    MEMORY[0x2455CF810](&v77, "int[]");
    MEMORY[0x2455CF810](&v75, "char[]");
    uint64_t v186 = v75;
    uint64_t v75 = 0;
    v187[0] = &unk_26F349718;
    v187[3] = v187;
    MEMORY[0x2455CF810](&v74, "int8_t[]");
    v187[4] = v74;
    uint64_t v74 = 0;
    v188[0] = &unk_26F349718;
    v188[3] = v188;
    MEMORY[0x2455CF810](&v73, "int16_t[]");
    v188[4] = v73;
    uint64_t v73 = 0;
    v189[0] = &unk_26F349718;
    v189[3] = v189;
    MEMORY[0x2455CF810](&v72, "int32_t[]");
    uint64_t v190 = v72;
    uint64_t v72 = 0;
    v191[0] = &unk_26F349718;
    v191[3] = v191;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v76, &v186, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v281, v77, v76);
    MEMORY[0x2455CF810](&v71, "int64[]");
    MEMORY[0x2455CF810](&v69, "int[]");
    uint64_t v182 = v69;
    uint64_t v69 = 0;
    v183[0] = &unk_26F349718;
    v183[3] = v183;
    MEMORY[0x2455CF810](&v68, "int64_t[]");
    uint64_t v184 = v68;
    uint64_t v68 = 0;
    v185[0] = &unk_26F349718;
    v185[3] = v185;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v70, &v182, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v282, v71, v70);
    MEMORY[0x2455CF810](&v67, "float[]");
    MEMORY[0x2455CF810](&v65, "float[]");
    uint64_t v180 = v65;
    uint64_t v65 = 0;
    v181[0] = &unk_26F349718;
    v181[3] = v181;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v66, &v180, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v283, v67, v66);
    MEMORY[0x2455CF810](&v64, "float2[]");
    MEMORY[0x2455CF810](&v62, "Vector2F[]");
    uint64_t v178 = v62;
    uint64_t v62 = 0;
    v179[0] = &unk_26F349718;
    void v179[3] = v179;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v63, &v178, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v284, v64, v63);
    MEMORY[0x2455CF810](&v61, "float3[]");
    MEMORY[0x2455CF810](&v59, "Vector3F[]");
    uint64_t v176 = v59;
    uint64_t v59 = 0;
    v177[0] = &unk_26F349718;
    v177[3] = v177;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v60, &v176, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v285, v61, v60);
    MEMORY[0x2455CF810](&v58, "float4[]");
    MEMORY[0x2455CF810](&v56, "Vector4F[]");
    uint64_t v174 = v56;
    uint64_t v56 = 0;
    v175[0] = &unk_26F349718;
    v175[3] = v175;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v57, &v174, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v286, v58, v57);
    MEMORY[0x2455CF810](&v55, "quatf[]");
    MEMORY[0x2455CF810](&v53, "QuaternionF[]");
    uint64_t v172 = v53;
    uint64_t v53 = 0;
    v173[0] = &unk_26F349718;
    v173[3] = v173;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v54, &v172, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v287, v55, v54);
    MEMORY[0x2455CF810](&v52, "double[]");
    MEMORY[0x2455CF810](&v50, "double[]");
    uint64_t v170 = v50;
    uint64_t v50 = 0;
    v171[0] = &unk_26F349718;
    v171[3] = v171;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v51, &v170, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v288, v52, v51);
    MEMORY[0x2455CF810](&v49, "BOOL[]");
    MEMORY[0x2455CF810](&v47, "BOOL[]");
    uint64_t v168 = v47;
    uint64_t v47 = 0;
    v169[0] = &unk_26F349718;
    v169[3] = v169;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v48, &v168, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v289, v49, v48);
    MEMORY[0x2455CF810](&v46, "token[]");
    MEMORY[0x2455CF810](&v44, "char*[]");
    uint64_t v163 = v44;
    uint64_t v44 = 0;
    v164[0] = &unk_26F349718;
    v164[3] = v164;
    MEMORY[0x2455CF810](&v43, "DynamicString[]");
    v164[4] = v43;
    uint64_t v43 = 0;
    v165[0] = &unk_26F349718;
    v165[3] = v165;
    MEMORY[0x2455CF810](&v42, "StringID[]");
    uint64_t v166 = v42;
    uint64_t v42 = 0;
    v167[0] = &unk_26F349718;
    v167[3] = v167;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v45, &v163, 3);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v290, v46, v45);
    MEMORY[0x2455CF810](&v41, "string[]");
    MEMORY[0x2455CF810](&v39, "char*[]");
    uint64_t v158 = v39;
    uint64_t v39 = 0;
    v159[0] = &unk_26F349718;
    void v159[3] = v159;
    MEMORY[0x2455CF810](&v38, "DynamicString[]");
    v159[4] = v38;
    uint64_t v38 = 0;
    v160[0] = &unk_26F349718;
    v160[3] = v160;
    MEMORY[0x2455CF810](&v37, "StringID[]");
    uint64_t v161 = v37;
    uint64_t v37 = 0;
    v162[0] = &unk_26F349718;
    v162[3] = v162;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v40, &v158, 3);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v291, v41, v40);
    MEMORY[0x2455CF810](&v36, "asset[]");
    MEMORY[0x2455CF810](&v34, "AssetHandle[]");
    uint64_t v156 = v34;
    uint64_t v34 = 0;
    v157[0] = &unk_26F349718;
    void v157[3] = v157;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v35, &v156, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(v292, v36, v35);
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::map[abi:ne180100]((uint64_t)v260, 33);
    uint64_t v2 = 132;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v259[v2 + 2]);
      uint64_t v3 = v259[v2];
      if ((v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v2 -= 4;
    }
    while (v2 * 8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v35[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v157);
    if ((v156 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v156 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v40[1]);
    for (uint64_t i = 0; i != -15; i -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v162[i]);
      uint64_t v5 = v162[i - 1];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v38 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v45[1]);
    for (uint64_t j = 0; j != -15; j -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v167[j]);
      uint64_t v7 = v167[j - 1];
      if ((v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v42 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v48[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v169);
    if ((v168 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v168 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v47 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v49 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v51[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v171);
    if ((v170 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v52 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v54[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v173);
    if ((v172 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v172 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v53 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v57[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v175);
    if ((v174 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v174 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v56 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v60[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v177);
    if ((v176 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v176 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v59 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v63[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v179);
    if ((v178 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v178 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v62 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v64 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v66[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v181);
    if ((v180 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v180 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v65 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v70[1]);
    for (uint64_t k = 0; k != -10; k -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v185[k]);
      uint64_t v9 = v185[k - 1];
      if ((v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v68 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v69 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v71 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v76[1]);
    for (uint64_t m = 0; m != -20; m -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v191[m]);
      uint64_t v11 = v191[m - 1];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v72 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v73 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v74 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v75 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v77 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v80[1]);
    for (uint64_t n = 0; n != -10; n -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v195[n]);
      uint64_t v13 = v195[n - 1];
      if ((v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v78 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v79 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v81 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v84[1]);
    for (iuint64_t i = 0; ii != -10; ii -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v199[ii]);
      uint64_t v15 = v199[ii - 1];
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v82 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v83 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v85 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v87[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v201);
    if ((v200 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v200 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v88 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v90[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v203);
    if ((v202 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v202 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v89 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v91 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v95[1]);
    for (juint64_t j = 0; jj != -15; jj -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v208[jj]);
      uint64_t v17 = v208[jj - 1];
      if ((v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v92 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v94 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v96 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v100[1]);
    for (kuint64_t k = 0; kk != -15; kk -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v213[kk]);
      uint64_t v19 = v213[kk - 1];
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v97 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v98 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v99 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v103[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v215);
    if ((v214 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v102 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v104 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v104 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v106[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v217);
    if ((v216 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v216 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v105 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v107 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v107 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v109[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v219);
    if ((v218 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v108 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v110 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v112[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v221);
    if ((v220 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v220 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v111 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v111 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v113 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v115[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v223);
    if ((v222 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v222 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v114 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v116 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v116 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v118[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v225);
    if ((v224 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v224 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v117 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v117 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v119 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v122[1]);
    for (muint64_t m = 0; mm != -10; mm -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v229[mm]);
      uint64_t v21 = v229[mm - 1];
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v120 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v121 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v121 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v123 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v126[1]);
    for (nuint64_t n = 0; nn != -10; nn -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v233[nn]);
      uint64_t v23 = v233[nn - 1];
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v124 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v124 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v125 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v125 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v127 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v127 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v130[1]);
    for (uint64_t i1 = 0; i1 != -10; i1 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v237[i1]);
      uint64_t v25 = v237[i1 - 1];
      if ((v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v128 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v128 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v129 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v129 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v131 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v133[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v239);
    if ((v238 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v238 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v132 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v132 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v134 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v134 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v137[1]);
    for (uint64_t i2 = 0; i2 != -10; i2 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v243[i2]);
      uint64_t v27 = v243[i2 - 1];
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v135 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v135 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v136 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v136 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v138 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v138 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v143[1]);
    for (uint64_t i3 = 0; i3 != -20; i3 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v249[i3]);
      uint64_t v29 = v249[i3 - 1];
      if ((v29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v139 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v140 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v140 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v141 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v141 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v142 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v142 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v144 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v144 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v147[1]);
    for (uint64_t i4 = 0; i4 != -10; i4 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v253[i4]);
      uint64_t v31 = v253[i4 - 1];
      if ((v31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v145 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v145 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v146 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v146 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v148 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v151[1]);
    for (uint64_t i5 = 0; i5 != -10; i5 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](&v257[i5]);
      uint64_t v33 = v257[i5 - 1];
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v149 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v150 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v150 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v152 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v152 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)v154[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v259);
    if ((v258 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v258 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v153 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v153 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v155 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v155 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_23F73F148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  uint64_t v75 = 1056;
  while (1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*(void **)(v73 + v75 - 16));
    uint64_t v76 = *(void *)(v73 + v75 - 32);
    if ((v76 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v75 -= 32;
    if (!v75)
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a37);
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v74);
      if ((STACK[0x6B0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x6B0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a44);
      uint64_t v77 = 0;
      while (1)
      {
        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x6D8] + v77 + 88));
        uint64_t v78 = *(unint64_t *)((char *)&STACK[0x6D8] + v77 + 80);
        if ((v78 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v77 -= 40;
        if (v77 == -120)
        {
          if ((a40 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((a41 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((a42 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((a46 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a51);
          uint64_t v79 = 0;
          while (1)
          {
            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x750] + v79 + 88));
            uint64_t v80 = *(unint64_t *)((char *)&STACK[0x750] + v79 + 80);
            if ((v80 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            v79 -= 40;
            if (v79 == -120)
            {
              if ((a47 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a48 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a49 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a53 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a56);
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v72);
              if ((STACK[0x7C8] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x7C8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a54 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a58 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a61);
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](v71);
              if ((STACK[0x7F0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x7F0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a59 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a63 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a66);
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a20);
              if ((STACK[0x818] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x818] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a64 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a68 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a71);
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a21);
              if ((STACK[0x840] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x840] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a69 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((STACK[0x200] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x200] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x218]);
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a22);
              if ((STACK[0x868] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x868] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((STACK[0x208] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x208] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((STACK[0x228] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x228] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x240]);
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a23);
              if ((STACK[0x890] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x890] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((STACK[0x230] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x230] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((STACK[0x250] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x250] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x268]);
              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a24);
              if ((STACK[0x8B8] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x8B8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((STACK[0x258] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x258] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((STACK[0x278] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x278] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x298]);
              uint64_t v81 = 0;
              while (1)
              {
                std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x8E0] + v81 + 48));
                uint64_t v82 = *(unint64_t *)((char *)&STACK[0x8E0] + v81 + 40);
                if ((v82 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                v81 -= 40;
                if (v81 == -80)
                {
                  if ((STACK[0x280] & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x280] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if ((STACK[0x288] & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x288] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if ((STACK[0x2A8] & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2A8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x2D8]);
                  uint64_t v83 = 0;
                  while (1)
                  {
                    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x930] + v83 + 128));
                    uint64_t v84 = *(unint64_t *)((char *)&STACK[0x930] + v83 + 120);
                    if ((v84 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    v83 -= 40;
                    if (v83 == -160)
                    {
                      if ((STACK[0x2B0] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2B0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((STACK[0x2B8] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2B8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((STACK[0x2C0] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2C0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((STACK[0x2C8] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2C8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((STACK[0x2E8] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2E8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x308]);
                      uint64_t v85 = 0;
                      while (1)
                      {
                        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x9D0] + v85 + 48));
                        uint64_t v86 = *(unint64_t *)((char *)&STACK[0x9D0] + v85 + 40);
                        if ((v86 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        v85 -= 40;
                        if (v85 == -80)
                        {
                          if ((STACK[0x2F0] & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2F0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          if ((STACK[0x2F8] & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2F8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          if ((STACK[0x318] & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x318] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x338]);
                          uint64_t v87 = 0;
                          while (1)
                          {
                            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xA20] + v87 + 48));
                            uint64_t v88 = *(unint64_t *)((char *)&STACK[0xA20] + v87 + 40);
                            if ((v88 & 7) != 0) {
                              atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                            }
                            v87 -= 40;
                            if (v87 == -80)
                            {
                              if ((STACK[0x320] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((STACK[0x328] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x328] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((STACK[0x348] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x348] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x360]);
                              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a25);
                              if ((STACK[0xA70] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xA70] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((STACK[0x350] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x350] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((STACK[0x370] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x370] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x388]);
                              std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a26);
                              if ((STACK[0xA98] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xA98] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((STACK[0x378] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x378] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((STACK[0x398] & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x398] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x3C0]);
                              uint64_t v89 = 0;
                              while (1)
                              {
                                std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xAC0] + v89 + 88));
                                uint64_t v90 = *(unint64_t *)((char *)&STACK[0xAC0] + v89 + 80);
                                if ((v90 & 7) != 0) {
                                  atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                }
                                v89 -= 40;
                                if (v89 == -120)
                                {
                                  if ((STACK[0x3A0] & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3A0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  if ((STACK[0x3A8] & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3A8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  if ((STACK[0x3B0] & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3B0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  if ((STACK[0x3D0] & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3D0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x3F8]);
                                  uint64_t v91 = 0;
                                  while (1)
                                  {
                                    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xB38] + v91 + 88));
                                    uint64_t v92 = *(unint64_t *)((char *)&STACK[0xB38] + v91 + 80);
                                    if ((v92 & 7) != 0) {
                                      atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                    }
                                    v91 -= 40;
                                    if (v91 == -120)
                                    {
                                      if ((STACK[0x3D8] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3D8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x3E0] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3E0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x3E8] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x3E8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x408] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x408] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x420]);
                                      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a27);
                                      if ((STACK[0xBB0] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xBB0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x410] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x410] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x430] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x430] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x448]);
                                      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a28);
                                      if ((STACK[0xBD8] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xBD8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x438] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x438] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x458] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x458] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x470]);
                                      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a29);
                                      if ((STACK[0xC00] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xC00] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x460] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x460] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x480] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x480] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x498]);
                                      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a30);
                                      if ((STACK[0xC28] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xC28] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x488] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x488] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x4A8] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4A8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x4C0]);
                                      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a31);
                                      if ((STACK[0xC50] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xC50] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x4B0] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4B0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x4D0] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4D0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x4E8]);
                                      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a32);
                                      if ((STACK[0xC78] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xC78] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x4D8] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4D8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x4F8] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x4F8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x518]);
                                      uint64_t v93 = 0;
                                      while (1)
                                      {
                                        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xCA0] + v93 + 48));
                                        uint64_t v94 = *(unint64_t *)((char *)&STACK[0xCA0] + v93 + 40);
                                        if ((v94 & 7) != 0) {
                                          atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                        }
                                        v93 -= 40;
                                        if (v93 == -80)
                                        {
                                          if ((STACK[0x500] & 7) != 0) {
                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x500] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                          }
                                          if ((STACK[0x508] & 7) != 0) {
                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x508] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                          }
                                          if ((STACK[0x528] & 7) != 0) {
                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x528] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                          }
                                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x548]);
                                          uint64_t v95 = 0;
                                          while (1)
                                          {
                                            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xCF0] + v95 + 48));
                                            uint64_t v96 = *(unint64_t *)((char *)&STACK[0xCF0] + v95 + 40);
                                            if ((v96 & 7) != 0) {
                                              atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                            }
                                            v95 -= 40;
                                            if (v95 == -80)
                                            {
                                              if ((STACK[0x530] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x530] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              if ((STACK[0x538] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x538] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              if ((STACK[0x558] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x558] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x578]);
                                              uint64_t v97 = 0;
                                              while (1)
                                              {
                                                std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xD40] + v97 + 48));
                                                uint64_t v98 = *(unint64_t *)((char *)&STACK[0xD40] + v97 + 40);
                                                if ((v98 & 7) != 0) {
                                                  atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                }
                                                v97 -= 40;
                                                if (v97 == -80)
                                                {
                                                  if ((STACK[0x560] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x560] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x568] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x568] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x588] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x588] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x5A0]);
                                                  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a33);
                                                  if ((STACK[0xD90] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xD90] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x590] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x590] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x5B0] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x5B0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x5D0]);
                                                  uint64_t v99 = 0;
                                                  while (1)
                                                  {
                                                    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xDB8] + v99 + 48));
                                                    uint64_t v100 = *(unint64_t *)((char *)&STACK[0xDB8] + v99 + 40);
                                                    if ((v100 & 7) != 0) {
                                                      atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                    }
                                                    v99 -= 40;
                                                    if (v99 == -80)
                                                    {
                                                      if ((STACK[0x5B8] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x5B8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      if ((STACK[0x5C0] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x5C0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      if ((STACK[0x5E0] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x5E0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x610]);
                                                      uint64_t v101 = 0;
                                                      while (1)
                                                      {
                                                        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xE08] + v101 + 128));
                                                        uint64_t v102 = *(unint64_t *)((char *)&STACK[0xE08] + v101 + 120);
                                                        if ((v102 & 7) != 0) {
                                                          atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                        }
                                                        v101 -= 40;
                                                        if (v101 == -160)
                                                        {
                                                          if ((STACK[0x5E8] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x5E8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x5F0] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x5F0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x5F8] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x5F8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x600] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x600] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x620] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x620] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x640]);
                                                          uint64_t v103 = 0;
                                                          while (1)
                                                          {
                                                            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xEA8] + v103 + 48));
                                                            uint64_t v104 = *(unint64_t *)((char *)&STACK[0xEA8]
                                                                                       + v103
                                                                                       + 40);
                                                            if ((v104 & 7) != 0) {
                                                              atomic_fetch_add_explicit((atomic_uint *volatile)(v104 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                            }
                                                            v103 -= 40;
                                                            if (v103 == -80)
                                                            {
                                                              if ((STACK[0x628] & 7) != 0) {
                                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x628] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                              }
                                                              if ((STACK[0x630] & 7) != 0) {
                                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x630] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                              }
                                                              if ((STACK[0x650] & 7) != 0) {
                                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x650] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                              }
                                                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x670]);
                                                              uint64_t v105 = 0;
                                                              while (1)
                                                              {
                                                                std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xEF8] + v105 + 48));
                                                                uint64_t v106 = *(unint64_t *)((char *)&STACK[0xEF8]
                                                                                           + v105
                                                                                           + 40);
                                                                if ((v106 & 7) != 0) {
                                                                  atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                                }
                                                                v105 -= 40;
                                                                if (v105 == -80)
                                                                {
                                                                  if ((STACK[0x658] & 7) != 0) {
                                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x658] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                                  }
                                                                  if ((STACK[0x660] & 7) != 0) {
                                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x660] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                                  }
                                                                  if ((STACK[0x680] & 7) != 0) {
                                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x680] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                                  }
                                                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)STACK[0x698]);
                                                                  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a34);
                                                                  if ((STACK[0xF48] & 7) != 0) {
                                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0xF48] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                                  }
                                                                  if ((STACK[0x688] & 7) != 0) {
                                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x688] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                                  }
                                                                  if ((STACK[0x6A8] & 7) != 0) {
                                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x6A8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                                  }
                                                                  _Unwind_Resume(a1);
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_23F7404BC()
{
}

void sub_23F7404C8()
{
}

void sub_23F7404D4()
{
}

void sub_23F7404E4()
{
}

void sub_23F7404F0()
{
}

void sub_23F7404FC()
{
}

void sub_23F74050C()
{
}

void sub_23F740518()
{
}

void sub_23F740524()
{
}

void sub_23F740534()
{
}

void sub_23F740540()
{
}

void sub_23F74054C()
{
}

void sub_23F74055C()
{
}

void sub_23F740568()
{
}

void sub_23F740574()
{
}

void sub_23F740584()
{
}

void sub_23F740590()
{
}

void sub_23F74059C()
{
}

void sub_23F7405AC()
{
}

void sub_23F7405B8()
{
}

void sub_23F7405C4()
{
}

void sub_23F7405D4()
{
}

void sub_23F7405E0()
{
}

void sub_23F7405F0()
{
}

void sub_23F7405FC()
{
}

void sub_23F74060C()
{
}

void sub_23F740618()
{
}

void sub_23F740628()
{
}

void sub_23F740638()
{
}

void sub_23F740648()
{
}

void sub_23F740654()
{
}

void sub_23F740664()
{
}

void sub_23F740670()
{
}

void sub_23F740680()
{
}

void sub_23F74068C()
{
}

void sub_23F74069C()
{
}

void sub_23F7406A8()
{
}

void sub_23F7406B8()
{
}

void sub_23F7406C4()
{
}

void sub_23F7406D4()
{
}

void sub_23F7406E0()
{
}

void sub_23F7406EC()
{
}

void sub_23F7406FC()
{
}

void sub_23F740708()
{
}

void sub_23F740714()
{
}

void sub_23F740724()
{
}

void sub_23F740730()
{
}

void sub_23F740740()
{
}

void sub_23F740750()
{
}

void sub_23F74075C()
{
}

void sub_23F74076C()
{
}

void sub_23F740778()
{
}

void sub_23F740788()
{
}

void sub_23F740798()
{
}

void sub_23F7407A4()
{
}

void sub_23F7407B4()
{
}

void sub_23F7407C0()
{
}

void sub_23F7407CC()
{
}

void sub_23F7407DC()
{
}

void sub_23F7407E8()
{
}

void sub_23F7407F4()
{
}

void sub_23F740804()
{
}

void sub_23F740810()
{
}

void sub_23F74081C()
{
}

void sub_23F74082C()
{
}

void sub_23F740838()
{
}

void sub_23F740844()
{
}

void sub_23F740854()
{
}

void sub_23F740860()
{
}

void sub_23F74086C()
{
}

void sub_23F74087C()
{
}

void sub_23F740888()
{
}

void sub_23F740894()
{
}

void sub_23F7408A4()
{
}

void sub_23F7408B0()
{
}

void sub_23F7408C0()
{
}

void sub_23F7408CC()
{
}

void sub_23F7408DC()
{
}

void sub_23F7408E8()
{
}

void sub_23F7408F8()
{
}

void sub_23F740904()
{
}

void sub_23F740914()
{
}

void sub_23F740920()
{
}

void sub_23F740930()
{
}

void sub_23F74093C()
{
}

void sub_23F74094C()
{
}

void sub_23F740958()
{
}

void sub_23F740964()
{
}

void sub_23F740974()
{
}

void sub_23F740980()
{
}

void sub_23F740990()
{
}

void sub_23F74099C()
{
}

void sub_23F7409AC()
{
}

void sub_23F7409B8()
{
}

void sub_23F7409C8()
{
}

void sub_23F7409D8()
{
}

void sub_23F7409E8()
{
}

void sub_23F7409F4()
{
}

void sub_23F740A04()
{
}

void sub_23F740A10()
{
}

void sub_23F740A20()
{
}

void sub_23F740A2C()
{
}

void sub_23F740A3C()
{
}

void sub_23F740A48()
{
}

void sub_23F740A58()
{
}

void sub_23F740A64()
{
}

void sub_23F740A70()
{
}

void sub_23F740A80()
{
}

void sub_23F740A90()
{
}

void sub_23F740AA0()
{
}

void anonymous namespace'::usdToRe_scalar<unsigned char,unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, unsigned char **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<unsigned char>(a1, (uint64_t)v4);
  if (v4[0])
  {
    char v3 = v4[8];
  }
  else
  {
    if (v6 < 0) {
      operator delete(__p);
    }
    char v3 = 0;
  }
  unsigned char *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<unsigned int,unsigned short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _WORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<unsigned int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    __int16 v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    __int16 v3 = 0;
  }
  _WORD *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<unsigned int,unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<unsigned int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    int v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    int v3 = 0;
  }
  _DWORD *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<unsigned long long,unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, void **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<unsigned long long>((uint64_t)v4, this);
  if (v4[0])
  {
    uint64_t v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    uint64_t v3 = 0;
  }
  void *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<unsigned long long,unsigned long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, void **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<unsigned long long>((uint64_t)v4, this);
  if (v4[0])
  {
    uint64_t v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    uint64_t v3 = 0;
  }
  void *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<int,char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, unsigned char **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    char v3 = v4[8];
  }
  else
  {
    if (v6 < 0) {
      operator delete(__p);
    }
    char v3 = 0;
  }
  unsigned char *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<int,signed char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, unsigned char **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    char v3 = v4[8];
  }
  else
  {
    if (v6 < 0) {
      operator delete(__p);
    }
    char v3 = 0;
  }
  unsigned char *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<int,short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _WORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    __int16 v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    __int16 v3 = 0;
  }
  _WORD *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<int,int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<int>(a1, (uint64_t)v4);
  if (v4[0])
  {
    int v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    int v3 = 0;
  }
  _DWORD *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<long long,int>(pxrInternal__aapl__pxrReserved__::UsdObject *this, _DWORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<long long>((uint64_t)v4, this);
  if (v4[0])
  {
    int v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    int v3 = 0;
  }
  _DWORD *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<long long,long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, void **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<long long>((uint64_t)v4, this);
  if (v4[0])
  {
    uint64_t v3 = v5;
  }
  else
  {
    if (v7 < 0) {
      operator delete(__p);
    }
    uint64_t v3 = 0;
  }
  void *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<float,float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _DWORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<float>(a1, (uint64_t)v4);
  if (v4[0])
  {
    int v3 = v5;
  }
  else
  {
    int v3 = 0;
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  _DWORD *v2 = v3;
}

void anonymous namespace'::usdToRe_vector<pxrInternal__aapl__pxrReserved__::GfVec2f,float,2>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, void **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(a1, (uint64_t)v4);
  if (v4[0])
  {
    uint64_t v3 = v5;
  }
  else
  {
    uint64_t v3 = 0;
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  void *v2 = v3;
}

void anonymous namespace'::usdToRe_vector<pxrInternal__aapl__pxrReserved__::GfVec3f,float,3>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(a1, (uint64_t)v5);
  if (v5[0])
  {
    int v3 = v7;
    uint64_t v4 = v6;
  }
  else
  {
    uint64_t v4 = 0;
    int v3 = 0;
    if (v9 < 0) {
      operator delete(__p);
    }
  }
  *(void *)uint64_t v2 = v4;
  *(_DWORD *)(v2 + 8) = v3;
}

void anonymous namespace'::usdToRe_vector<pxrInternal__aapl__pxrReserved__::GfVec4f,float,4>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, _OWORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(a1, (uint64_t)v4);
  if (v4[0])
  {
    long long v3 = v5;
  }
  else
  {
    long long v3 = 0uLL;
    if (v7 < 0)
    {
      operator delete(__p);
      long long v3 = 0uLL;
    }
  }
  _OWORD *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<pxrInternal__aapl__pxrReserved__::GfQuatf,pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdObject *this, _OWORD **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfQuatf>((uint64_t)v4, this);
  if (v4[0])
  {
    long long v3 = v5;
  }
  else if (v7 < 0)
  {
    operator delete(__p);
  }
  _OWORD *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<double,double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, void **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<double>(a1, (uint64_t)v4);
  if (v4[0])
  {
    uint64_t v3 = v5;
  }
  else
  {
    uint64_t v3 = 0;
    if (v7 < 0) {
      operator delete(__p);
    }
  }
  void *v2 = v3;
}

void anonymous namespace'::usdToRe_scalar<BOOL,BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, BOOL **a2)
{
  uint64_t v2 = *a2;
  realityio::getAttributeValue<BOOL>(a1, (uint64_t)v4);
  if (v4[0])
  {
    BOOL v3 = v4[8] != 0;
  }
  else
  {
    if (v6 < 0) {
      operator delete(__p);
    }
    BOOL v3 = 0;
  }
  BOOL *v2 = v3;
}

void _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix2dENS1_7GfVec2dE13simd_float2x2Dv2_fLm2EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo(pxrInternal__aapl__pxrReserved__::UsdObject *a1, void **a2)
{
  uint64_t v2 = a1;
  uint64_t v55 = *MEMORY[0x263EF8340];
  BOOL v3 = *a2;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) == 0)
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
    long long v14 = v49;
    LOBYTE(v2) = HIBYTE(v51);
    uint64_t v49 = 0;
    double v50 = 0.0;
    uint64_t v51 = 0;
    uint64_t v39 = v14;
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_50;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v41, v2);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v41);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
  {
    char v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v41);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v41);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
  double v40 = v8;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(v2))
  {
    uint64_t v54 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v53))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        double v10 = *(double *)v9;
        double v11 = *(double *)(v9 + 8);
        float64_t v38 = *(double *)(v9 + 24);
        uint64_t v39 = *(void **)(v9 + 16);
        int v12 = 1;
LABEL_44:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        goto LABEL_45;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
      {
        uint64_t v19 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix2d>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        long long v20 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v52, (const pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if (v52.__r_.__value_.__l.__size_)
        {
          uint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(v20);
          double v10 = *(double *)v21;
          double v11 = *(double *)(v21 + 8);
          float64_t v38 = *(double *)(v21 + 24);
          uint64_t v39 = *(void **)(v21 + 16);
          int v12 = 1;
        }
        else
        {
          uint64_t v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
          if ((*(void *)v36 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          double v10 = v47;
          double v11 = v48;
          uint64_t v37 = v49;
          float64_t v38 = v50;
          LOBYTE(v2) = HIBYTE(v51);
          double v50 = 0.0;
          uint64_t v51 = 0;
          uint64_t v49 = 0;
          uint64_t v39 = v37;
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
          int v12 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v52);
        goto LABEL_44;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      double v10 = v47;
      double v11 = v48;
      std::string v30 = v49;
      float64_t v38 = v50;
      LOBYTE(v2) = HIBYTE(v51);
      double v50 = 0.0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      uint64_t v39 = v30;
      if ((SHIBYTE(v46) & 0x80000000) == 0)
      {
LABEL_43:
        int v12 = 0;
        goto LABEL_44;
      }
      uint64_t v29 = __p[0];
    }
    else
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      }
      std::operator+<char>();
      uint64_t v22 = std::string::append(&v44, ") at the given time: ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v43, v40);
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = &v43;
      }
      else {
        std::string::size_type v24 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v43.__r_.__value_.__l.__size_;
      }
      std::string::size_type v26 = std::string::append(&v52, (const std::string::value_type *)v24, size);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      std::string::size_type v46 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      double v10 = v47;
      double v11 = v48;
      uint64_t v28 = v49;
      float64_t v38 = v50;
      LOBYTE(v2) = HIBYTE(v51);
      double v50 = 0.0;
      uint64_t v51 = 0;
      uint64_t v49 = 0;
      uint64_t v39 = v28;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      uint64_t v29 = (void *)v44.__r_.__value_.__r.__words[0];
    }
    operator delete(v29);
    goto LABEL_43;
  }
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(v2);
  if ((*(void *)v13 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  double v10 = v47;
  double v11 = v48;
  long long v16 = v49;
  float64_t v38 = v50;
  LOBYTE(v2) = HIBYTE(v51);
  double v50 = 0.0;
  uint64_t v51 = 0;
  uint64_t v49 = 0;
  uint64_t v39 = v16;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  int v12 = 0;
LABEL_45:
  uint64_t v31 = v42;
  if (v42 && atomic_fetch_add_explicit((atomic_uint *volatile)(v42 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  if (v12)
  {
    *(void *)&v32.f64[0] = v39;
    *(float *)&uint64_t v33 = v10;
    float v34 = v11;
    v32.f64[1] = v38;
    float32x2_t v35 = vcvt_f32_f64(v32);
    goto LABEL_53;
  }
LABEL_50:
  float32x2_t v35 = 0;
  float v34 = 0.0;
  if ((v2 & 0x80) != 0)
  {
    operator delete(v39);
    float v34 = 0.0;
  }
  LODWORD(v33) = 0;
LABEL_53:
  *((float *)&v33 + 1) = v34;
  *BOOL v3 = v33;
  v3[1] = v35;
}

void sub_23F741664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14)
  {
    if (atomic_fetch_add_explicit(a14 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a14 + 8))(a14);
    }
  }
  _Unwind_Resume(exception_object);
}

void _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix3dENS1_7GfVec3dE13simd_float3x3Dv3_fLm3EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo(pxrInternal__aapl__pxrReserved__::UsdObject *a1, int8x16_t **a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  BOOL v3 = *a2;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v49, a1);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v49);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      char v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v49);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v49);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v48 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v55, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      double v10 = v55;
      long long v16 = v57;
      float64_t v44 = v58;
      float64_t v45 = v56;
      float64_t v46 = v59;
      double v58 = 0.0;
      double v59 = 0.0;
      std::string v57 = 0;
      double v47 = v16;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      int v11 = 0;
LABEL_45:
      uint64_t v31 = v50;
      if (v50 && atomic_fetch_add_explicit((atomic_uint *volatile)(v50 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
      if (v11)
      {
        float v32 = v10;
        float64x2_t v33 = (float64x2_t)vdupq_lane_s64(v43.i64[0], 0);
        *(void *)&v34.f64[0] = vdupq_laneq_s64(v42, 1).u64[0];
        v35.f64[0] = v45;
        v34.f64[1] = v44;
        v33.f64[0] = v46;
        *(void *)&v35.f64[1] = v47;
        int8x16_t v36 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v33), v35);
        int8x16_t v37 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)vextq_s8(v43, (int8x16_t)v42, 8uLL)), v34);
        goto LABEL_54;
      }
      goto LABEL_50;
    }
    uint64_t v62 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v61))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v61);
        double v10 = *(double *)v9;
        float64_t v44 = *(double *)(v9 + 24);
        float64_t v45 = *(double *)(v9 + 8);
        double v47 = *(void **)(v9 + 16);
        float64_t v46 = *(double *)(v9 + 32);
        int64x2_t v42 = *(int64x2_t *)(v9 + 56);
        int8x16_t v43 = *(int8x16_t *)(v9 + 40);
        int v11 = 1;
LABEL_44:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v61);
        goto LABEL_45;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v61);
      {
        uint64_t v19 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix3d>((pxrInternal__aapl__pxrReserved__::VtValue *)v61);
        long long v20 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v60, (const pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if (v60.__r_.__value_.__l.__size_)
        {
          uint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(v20);
          double v10 = *(double *)v21;
          float64_t v44 = *(double *)(v21 + 24);
          float64_t v45 = *(double *)(v21 + 8);
          double v47 = *(void **)(v21 + 16);
          float64_t v46 = *(double *)(v21 + 32);
          int64x2_t v42 = *(int64x2_t *)(v21 + 56);
          int8x16_t v43 = *(int8x16_t *)(v21 + 40);
          int v11 = 1;
        }
        else
        {
          double v40 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)v40 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v40);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v55, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          double v10 = v55;
          uint64_t v41 = v57;
          float64_t v44 = v58;
          float64_t v45 = v56;
          float64_t v46 = v59;
          double v58 = 0.0;
          double v59 = 0.0;
          std::string v57 = 0;
          double v47 = v41;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
          int v11 = 0;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v60);
        goto LABEL_44;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v55, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      double v10 = v55;
      std::string v30 = v57;
      float64_t v44 = v58;
      float64_t v45 = v56;
      float64_t v46 = v59;
      double v58 = 0.0;
      double v59 = 0.0;
      std::string v57 = 0;
      double v47 = v30;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_43:
        int v11 = 0;
        goto LABEL_44;
      }
      uint64_t v29 = __p[0];
    }
    else
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      }
      std::operator+<char>();
      uint64_t v22 = std::string::append(&v52, ") at the given time: ");
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v51, v48);
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = &v51;
      }
      else {
        std::string::size_type v24 = (std::string *)v51.__r_.__value_.__r.__words[0];
      }
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v51.__r_.__value_.__l.__size_;
      }
      std::string::size_type v26 = std::string::append(&v60, (const std::string::value_type *)v24, size);
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v55, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      double v10 = v55;
      uint64_t v28 = v57;
      float64_t v44 = v58;
      float64_t v45 = v56;
      float64_t v46 = v59;
      double v58 = 0.0;
      double v59 = 0.0;
      std::string v57 = 0;
      double v47 = v28;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v60.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      uint64_t v29 = (void *)v52.__r_.__value_.__r.__words[0];
    }
    operator delete(v29);
    goto LABEL_43;
  }
  char v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v55, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  uint64_t v13 = v57;
  std::string v57 = 0;
  double v58 = 0.0;
  double v14 = v59;
  double v59 = 0.0;
  double v47 = v13;
  if ((SHIBYTE(v54) & 0x80000000) == 0) {
    goto LABEL_51;
  }
  float64_t v46 = v14;
  operator delete(__p[0]);
LABEL_50:
  double v14 = v46;
LABEL_51:
  double v38 = v14;
  int8x16_t v37 = 0uLL;
  float v32 = 0.0;
  if ((*(void *)&v38 & 0x8000000000000000) != 0)
  {
    operator delete(v47);
    float v32 = 0.0;
    int8x16_t v37 = 0uLL;
  }
  int8x16_t v36 = 0uLL;
LABEL_54:
  int8x16_t v39 = vextq_s8(v36, v37, 4uLL);
  *(float *)v39.i32 = v32;
  *BOOL v3 = v39;
  v3[1] = vextq_s8(v37, v36, 0xCuLL);
  v3[2] = v37;
}

void sub_23F741CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,atomic_uint *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a22)
  {
    if (atomic_fetch_add_explicit(a22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a22 + 8))(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

void _ZN12_GLOBAL__N_114usdToRe_matrixIN32pxrInternal__aapl__pxrReserved__10GfMatrix4dENS1_7GfVec4dE13simd_float4x4Dv4_fLm4EfEEvRKNS1_12UsdAttributeENSt3__110shared_ptrIhEEPN9realityio6InputsE10RETypeInfo(pxrInternal__aapl__pxrReserved__::UsdObject *a1, float32x4_t **a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  BOOL v3 = *a2;
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1) & 1) == 0)
  {
    uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
    if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
    }
    std::operator+<char>();
    realityio::DetailedError::DetailedError(&v63, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v61);
    int v12 = v65;
    double v13 = v67;
    uint64_t v65 = 0;
    double v66 = 0.0;
    double v67 = 0.0;
    std::string __p = v12;
    if (SHIBYTE(v62) < 0) {
      operator delete((void *)v61);
    }
    if ((*(void *)&v13 & 0x8000000000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v57, a1);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v57);
  if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
  {
    char v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v57);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v57);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
  double v56 = v8;
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    uint64_t v70 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v69))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v69);
        float64_t v52 = *(double *)v9;
        float64_t v51 = *(double *)(v9 + 8);
        std::string __p = *(void **)(v9 + 16);
        float64x2_t v53 = *(float64x2_t *)(v9 + 32);
        float64x2_t v49 = *(float64x2_t *)(v9 + 112);
        float64_t v50 = *(double *)(v9 + 24);
        int v10 = 1;
        float64x2_t v45 = *(float64x2_t *)(v9 + 48);
        float64x2_t v46 = *(float64x2_t *)(v9 + 80);
        float64x2_t v47 = *(float64x2_t *)(v9 + 64);
        float64x2_t v48 = *(float64x2_t *)(v9 + 96);
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v69);
        float64x2_t v19 = v53;
        goto LABEL_48;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v69);
      {
        std::string::size_type v24 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfMatrix4d>((pxrInternal__aapl__pxrReserved__::VtValue *)v69);
        uint64_t v25 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v68, (const pxrInternal__aapl__pxrReserved__::VtValue *)v24);
        if (v68.__r_.__value_.__l.__size_)
        {
          uint64_t v26 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(v25);
          float64_t v52 = *(double *)v26;
          float64_t v51 = *(double *)(v26 + 8);
          std::string __p = *(void **)(v26 + 16);
          float64x2_t v53 = *(float64x2_t *)(v26 + 32);
          float64x2_t v49 = *(float64x2_t *)(v26 + 112);
          float64_t v50 = *(double *)(v26 + 24);
          int v10 = 1;
          float64x2_t v45 = *(float64x2_t *)(v26 + 48);
          float64x2_t v46 = *(float64x2_t *)(v26 + 80);
          float64x2_t v47 = *(float64x2_t *)(v26 + 64);
          float64x2_t v48 = *(float64x2_t *)(v26 + 96);
        }
        else
        {
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
          if ((*(void *)v41 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v41);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v63, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v61);
          float64_t v52 = v63;
          float64_t v51 = v64;
          int8x16_t v43 = v65;
          float64_t v50 = v66;
          double v44 = v67;
          double v66 = 0.0;
          double v67 = 0.0;
          uint64_t v65 = 0;
          std::string __p = v43;
          if (SHIBYTE(v62) < 0) {
            operator delete((void *)v61);
          }
          int v10 = 0;
          v42.f64[0] = v44;
          float64x2_t v53 = v42;
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v68);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(&v61, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v63, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v61);
      float64_t v52 = v63;
      float64_t v51 = v64;
      int8x16_t v37 = v65;
      float64_t v50 = v66;
      double v35 = v67;
      double v66 = 0.0;
      double v67 = 0.0;
      uint64_t v65 = 0;
      std::string __p = v37;
      if ((SHIBYTE(v62) & 0x80000000) == 0)
      {
LABEL_46:
        int v10 = 0;
        v33.f64[0] = v35;
        float64x2_t v53 = v33;
        goto LABEL_47;
      }
      int8x16_t v36 = (void *)v61;
    }
    else
    {
      int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v27 = std::string::append(&v60, ") at the given time: ");
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v59, v56);
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &v59;
      }
      else {
        uint64_t v29 = (std::string *)v59.__r_.__value_.__r.__words[0];
      }
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v59.__r_.__value_.__l.__size_;
      }
      uint64_t v31 = std::string::append(&v68, (const std::string::value_type *)v29, size);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      std::string::size_type v62 = v31->__r_.__value_.__r.__words[2];
      long long v61 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v63, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v61);
      float64_t v52 = v63;
      float64_t v51 = v64;
      float64x2_t v34 = v65;
      float64_t v50 = v66;
      double v35 = v67;
      double v66 = 0.0;
      double v67 = 0.0;
      uint64_t v65 = 0;
      std::string __p = v34;
      if (SHIBYTE(v62) < 0) {
        operator delete((void *)v61);
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v59.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_46;
      }
      int8x16_t v36 = (void *)v60.__r_.__value_.__r.__words[0];
    }
    operator delete(v36);
    goto LABEL_46;
  }
  int v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(a1);
  if ((*(void *)v11 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v63, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &v61);
  float64_t v52 = v63;
  float64_t v51 = v64;
  long long v20 = v65;
  float64_t v50 = v66;
  float64_t v21 = v67;
  double v66 = 0.0;
  double v67 = 0.0;
  uint64_t v65 = 0;
  std::string __p = v20;
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  int v10 = 0;
  v19.f64[0] = v21;
LABEL_48:
  uint64_t v38 = v58;
  if (v58 && atomic_fetch_add_explicit((atomic_uint *volatile)(v58 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    float64x2_t v54 = v19;
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
    float64x2_t v19 = v54;
  }
  if (v10)
  {
    *(void *)&v39.f64[0] = __p;
    v40.f64[0] = v52;
    v40.f64[1] = v51;
    v39.f64[1] = v50;
    float32x4_t v17 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v40), v39);
    float32x4_t v16 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v45);
    float32x4_t v15 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v47), v46);
    float32x4_t v14 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v48), v49);
    goto LABEL_53;
  }
  if ((*(void *)&v19.f64[0] & 0x8000000000000000) != 0) {
LABEL_17:
  }
    operator delete(__p);
LABEL_18:
  float32x4_t v14 = 0uLL;
  float32x4_t v15 = 0uLL;
  float32x4_t v16 = 0uLL;
  float32x4_t v17 = 0uLL;
LABEL_53:
  *BOOL v3 = v17;
  v3[1] = v16;
  v3[2] = v15;
  v3[3] = v14;
}

void sub_23F7423D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,atomic_uint *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30)
  {
    if (atomic_fetch_add_explicit(a30 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a30 + 8))(a30);
    }
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::usdToRe_String(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  memset(&__p, 0, sizeof(__p));
  *(void *)std::string buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(a1);
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::TfToken>(a1, (uint64_t)buf);
    if (buf[0])
    {
      unint64_t v9 = *(void *)&buf[8];
      if ((buf[8] & 7) == 0)
      {
        unint64_t v10 = *(void *)&buf[8];
LABEL_28:
        if ((v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
LABEL_30:
        double v13 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
        if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t EmptyString = (const std::string *)(v13 + 4);
        }
        else {
          uint64_t EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
        }
        std::string::operator=(&__p, EmptyString);
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_35;
      }
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&buf[8] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed))unint64_t v10 = v9; {
      else
      }
        unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if (buf[0])
      {
        unint64_t v9 = *(void *)&buf[8];
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v10 = 0;
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    goto LABEL_30;
  }
  memset(v24, 0, sizeof(v24));
  realityio::getAttributeValue<std::string>(a1, (uint64_t)buf);
  if (buf[0])
  {
    int v11 = (std::string *)&buf[8];
    if (SHIBYTE(v31) < 0)
    {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)&buf[8], *(std::string::size_type *)&buf[16]);
      if (!buf[0]) {
        goto LABEL_14;
      }
      goto LABEL_21;
    }
  }
  else
  {
    int v11 = (std::string *)v24;
  }
  std::string v25 = *v11;
  if (!buf[0])
  {
LABEL_14:
    if (v32 < 0)
    {
      int v12 = &v31;
LABEL_23:
      operator delete(*v12);
      goto LABEL_24;
    }
    goto LABEL_24;
  }
LABEL_21:
  if (SHIBYTE(v31) < 0)
  {
    int v12 = (void **)&buf[8];
    goto LABEL_23;
  }
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v25;
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v23, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v23 = __p;
  }
  uint64_t v15 = *a2;
  long long v16 = a4[1];
  v29[0] = *a4;
  v29[1] = v16;
  char v18 = v17;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_45;
    }
  }
  else if (v17)
  {
    goto LABEL_45;
  }
  float64x2_t v19 = *(id *)(realityio::logObjects((realityio *)v17) + 24);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    long long v20 = a4[1];
    long long v27 = *a4;
    long long v28 = v20;
    uint64_t Name = RETypeInfoGetName();
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, &v25);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25);
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = Name;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = Text;
    _os_log_impl(&dword_23F4EA000, v19, OS_LOG_TYPE_DEFAULT, "Unsupported string format for (\"%s\") at (\"%s\")", buf, 0x16u);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v25);
  }

LABEL_45:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F7427BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(unsigned char *)(v28 - 112))
  {
    if ((*(char *)(v28 - 81) & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else
  {
    if ((*(char *)(v28 - 65) & 0x80000000) == 0) {
      goto LABEL_6;
    }
    long long v27 = (void **)(v28 - 88);
  }
  operator delete(*v27);
LABEL_6:
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_AssetHandle(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *a3)
{
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(a1, (uint64_t)v8);
  if (v8[0])
  {
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v6, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
    }
    else {
      std::string v6 = v9;
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v10;
    }
    REAssetHandleSet();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v6.__r_.__value_.__l.__data_);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)v8);
}

void sub_23F742970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::SdfAssetPath,realityio::DetailedError>::~Result((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<unsigned char,unsigned char>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(unsigned char **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(unsigned char *)(v40 + v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(unsigned char **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(unsigned char *)(v40 + i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F742D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<unsigned int,unsigned short>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(_WORD **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(_DWORD *)(v40 + 4 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(_WORD **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(_DWORD *)(v40 + 4 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7430F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<unsigned int,unsigned int>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(_DWORD **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(_DWORD *)(v40 + 4 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(_DWORD **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(_DWORD *)(v40 + 4 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7434F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<unsigned long long,unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v44, this);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(void **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(void *)(v40 + 8 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)this;
    uint64_t v20 = *((void *)this + 1);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)this + 5);
    uint64_t v21 = *((void *)this + 3);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(void **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(void *)(v40 + 8 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7438EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<unsigned long long,unsigned long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v44, this);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(void **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(void *)(v40 + 8 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)this;
    uint64_t v20 = *((void *)this + 1);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)this + 5);
    uint64_t v21 = *((void *)this + 3);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(void **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(void *)(v40 + 8 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F743CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<int,char>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(unsigned char **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(_DWORD *)(v40 + 4 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(unsigned char **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(_DWORD *)(v40 + 4 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7440E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<int,signed char>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(unsigned char **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(_DWORD *)(v40 + 4 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(unsigned char **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(_DWORD *)(v40 + 4 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7444D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<int,short>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(_WORD **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(_DWORD *)(v40 + 4 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(_WORD **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(_DWORD *)(v40 + 4 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7448D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<int,int>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(_DWORD **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(_DWORD *)(v40 + 4 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(_DWORD **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(_DWORD *)(v40 + 4 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F744CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<long long,int>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v44, this);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(_DWORD **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(void *)(v40 + 8 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)this;
    uint64_t v20 = *((void *)this + 1);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)this + 5);
    uint64_t v21 = *((void *)this + 3);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(_DWORD **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(void *)(v40 + 8 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7450C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<long long,long long>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v44, this);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(void **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(void *)(v40 + 8 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)this;
    uint64_t v20 = *((void *)this + 1);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)this + 5);
    uint64_t v21 = *((void *)this + 3);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(void **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(void *)(v40 + 8 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7454C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<float,float>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          char v18 = *(_DWORD **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *char v18 = *(_DWORD *)(v40 + 4 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      uint64_t v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      std::string v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      std::string v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          uint64_t v28 = *(_DWORD **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *uint64_t v28 = *(_DWORD *)(v40 + 4 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7458B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_ArrayOfArrays<pxrInternal__aapl__pxrReserved__::GfVec2f,float,2>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v42);
  if (v42[0])
  {
    long long v36 = *(_OWORD *)&v42[8];
    long long v37 = *(_OWORD *)&v42[24];
    uint64_t v7 = v43;
  }
  else
  {
    long long v36 = v33;
    long long v37 = v34;
    uint64_t v7 = v35;
  }
  uint64_t v38 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v37 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v37 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)v42);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v33);
  uint64_t v9 = v36;
  long long v10 = a4[1];
  unsigned char v41[8] = *a4;
  v41[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v41[6] = *a4, v41[7] = v11, RETypeInfoIsArray()))
  {
    memset(v42, 0, 32);
    v41[4] = *(_OWORD *)v42;
    v41[5] = *(_OWORD *)&v42[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v41[2] = *(_OWORD *)v42, void v41[3] = *(_OWORD *)&v42[16], RETypeInfoIsArray()))
    {
      long long v33 = 0uLL;
      *(void *)&long long v34 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v32[0] = v12;
      v32[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v41[0] = *a4;
      v41[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (*((void *)&v33 + 1) != (void)v33)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36);
          uint64_t v17 = v33;
          **(void **)(v33 + v15) = *(void *)(v38 + 8 * v16++);
          v15 += 16;
        }
        while (v16 < (*((void *)&v33 + 1) - v17) >> 4);
      }
LABEL_19:
      long long v39 = (void **)&v33;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v39);
      goto LABEL_20;
    }
    long long v18 = a4[1];
    v40[0] = *a4;
    v40[1] = v18;
    int v27 = *(_DWORD *)a1;
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v28 = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, (_DWORD *)(a1 + 20));
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v31 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v29);
    if (v28) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v28);
    }
    if (v21)
    {
      char v22 = (std::__shared_weak_count *)a2[1];
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      long long v33 = 0uLL;
      *(void *)&long long v34 = 0;
      uint64_t v23 = *a2;
      uint64_t v24 = (std::__shared_weak_count *)a2[1];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v9)
      {
        uint64_t v25 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36);
          **(void **)(v33 + v25) = *(void *)(v38 + 8 * i);
          v25 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v36);
}

void sub_23F745CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_ArrayOfArrays<pxrInternal__aapl__pxrReserved__::GfVec3f,float,3>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v47);
  if (v47[0])
  {
    long long v41 = *(_OWORD *)&v47[8];
    long long v42 = *(_OWORD *)&v47[24];
    uint64_t v7 = v48;
  }
  else
  {
    long long v41 = v38;
    long long v42 = v39;
    uint64_t v7 = v40;
  }
  uint64_t v43 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v42 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v42 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v47);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
  uint64_t v9 = v41;
  long long v10 = a4[1];
  v46[8] = *a4;
  v46[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v46[6] = *a4, v46[7] = v11, RETypeInfoIsArray()))
  {
    memset(v47, 0, 32);
    v46[4] = *(_OWORD *)v47;
    v46[5] = *(_OWORD *)&v47[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v46[2] = *(_OWORD *)v47, void v46[3] = *(_OWORD *)&v47[16], RETypeInfoIsArray()))
    {
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v37[0] = v12;
      v37[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v46[0] = *a4;
      v46[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (*((void *)&v38 + 1) != (void)v38)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41);
          uint64_t v18 = v38;
          uint64_t v19 = *(void *)(v38 + v16);
          uint64_t v20 = *(void *)(v43 + v15);
          *(_DWORD *)(v19 + 8) = *(_DWORD *)(v43 + v15 + 8);
          *(void *)uint64_t v19 = v20;
          ++v17;
          v16 += 16;
          v15 += 12;
        }
        while (v17 < (*((void *)&v38 + 1) - v18) >> 4);
      }
LABEL_19:
      uint64_t v44 = (void **)&v38;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v44);
      goto LABEL_20;
    }
    long long v21 = a4[1];
    v45[0] = *a4;
    v45[1] = v21;
    int v32 = *(_DWORD *)a1;
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v33 = v22;
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v34, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v35, (_DWORD *)(a1 + 20));
    uint64_t v23 = *(void *)(a1 + 24);
    uint64_t v36 = v23;
    if ((v23 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v34);
    if (v33) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v33);
    }
    if (v24)
    {
      uint64_t v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      long long v38 = 0uLL;
      *(void *)&long long v39 = 0;
      uint64_t v26 = *a2;
      int v27 = (std::__shared_weak_count *)a2[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      if (v9)
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v41);
          uint64_t v30 = *(void *)(v38 + v29);
          uint64_t v31 = *(void *)(v43 + v28);
          *(_DWORD *)(v30 + 8) = *(_DWORD *)(v43 + v28 + 8);
          *(void *)uint64_t v30 = v31;
          v29 += 16;
          v28 += 12;
          --v9;
        }
        while (v9);
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v41);
}

void sub_23F7460D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_ArrayOfArrays<pxrInternal__aapl__pxrReserved__::GfVec4f,float,4>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v41);
  if (v41[0])
  {
    long long v35 = *(_OWORD *)&v41[8];
    long long v36 = *(_OWORD *)&v41[24];
    uint64_t v7 = v42;
  }
  else
  {
    long long v35 = v32;
    long long v36 = v33;
    uint64_t v7 = v34;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)v41);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v32);
  uint64_t v9 = v35;
  long long v10 = a4[1];
  v40[8] = *a4;
  v40[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v40[6] = *a4, v40[7] = v11, RETypeInfoIsArray()))
  {
    memset(v41, 0, 32);
    void v40[4] = *(_OWORD *)v41;
    v40[5] = *(_OWORD *)&v41[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v40[2] = *(_OWORD *)v41, void v40[3] = *(_OWORD *)&v41[16], RETypeInfoIsArray()))
    {
      long long v32 = 0uLL;
      *(void *)&long long v33 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v31[0] = v12;
      v31[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v40[0] = *a4;
      v40[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (*((void *)&v32 + 1) != (void)v32)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          uint64_t v17 = v32;
          *(_OWORD *)*(void *)(v32 + v15) = *(_OWORD *)(v37 + v15);
          ++v16;
          v15 += 16;
        }
        while (v16 < (*((void *)&v32 + 1) - v17) >> 4);
      }
LABEL_19:
      long long v38 = (void **)&v32;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v38);
      goto LABEL_20;
    }
    long long v18 = a4[1];
    v39[0] = *a4;
    v39[1] = v18;
    int v26 = *(_DWORD *)a1;
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v27 = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v28, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v29, (_DWORD *)(a1 + 20));
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v30 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v30 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v28);
    if (v27) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v27);
    }
    if (v21)
    {
      uint64_t v22 = (std::__shared_weak_count *)a2[1];
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      long long v32 = 0uLL;
      *(void *)&long long v33 = 0;
      uint64_t v23 = *a2;
      char v24 = (std::__shared_weak_count *)a2[1];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v9)
      {
        uint64_t v25 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          *(_OWORD *)*(void *)(v32 + v25) = *(_OWORD *)(v37 + v25);
          v25 += 16;
          --v9;
        }
        while (v9);
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F7464C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<pxrInternal__aapl__pxrReserved__::GfQuatf,pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v36 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((uint64_t)v43, this);
  if (v43[0])
  {
    long long v37 = *(_OWORD *)&v43[8];
    long long v38 = *(_OWORD *)&v43[24];
    uint64_t v7 = v44;
  }
  else
  {
    long long v37 = v34;
    long long v38 = v35;
    uint64_t v7 = v36;
  }
  uint64_t v39 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v38 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v38 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result((uint64_t)v43);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v34);
  uint64_t v9 = v37;
  long long v10 = a4[1];
  v42[8] = *a4;
  v42[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v42[6] = *a4, v42[7] = v11, RETypeInfoIsArray()))
  {
    memset(v43, 0, 32);
    v42[4] = *(_OWORD *)v43;
    v42[5] = *(_OWORD *)&v43[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (long long v42[2] = *(_OWORD *)v43, v42[3] = *(_OWORD *)&v43[16], RETypeInfoIsArray()))
    {
      long long v34 = 0uLL;
      *(void *)&long long v35 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v33[0] = v12;
      v33[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v42[0] = *a4;
      v42[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v34;
      if (*((void *)&v34 + 1) != (void)v34)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          long long v18 = *(_OWORD **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37);
          *long long v18 = *(_OWORD *)(v39 + v16);
          ++v17;
          uint64_t v15 = v34;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v34 + 1) - v34) >> 4);
      }
LABEL_19:
      uint64_t v40 = (void **)&v34;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v40);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v41[0] = *a4;
    v41[1] = v19;
    int v28 = *(_DWORD *)this;
    uint64_t v20 = *((void *)this + 1);
    uint64_t v29 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v30, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)this + 5);
    uint64_t v21 = *((void *)this + 3);
    uint64_t v32 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v32 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v30);
    if (v29) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v29);
    }
    if (v22)
    {
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v34 = 0uLL;
      *(void *)&long long v35 = 0;
      uint64_t v24 = *a2;
      uint64_t v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        do
        {
          uint64_t v27 = *(_OWORD **)(v34 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37);
          *uint64_t v27 = *(_OWORD *)(v39 + v26);
          v26 += 16;
          --v9;
        }
        while (v9);
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v37);
}

void sub_23F7468B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<double,double>(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v44);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          long long v18 = *(void **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *long long v18 = *(void *)(v40 + 8 * v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      long long v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)a1;
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)(a1 + 20));
    uint64_t v21 = *(void *)(a1 + 24);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      uint64_t v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          int v28 = *(void **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *int v28 = *(void *)(v40 + 8 * i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F746CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_Array<BOOL,BOOL>(pxrInternal__aapl__pxrReserved__::UsdObject *this, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((uint64_t)v44, this);
  if (v44[0])
  {
    long long v38 = *(_OWORD *)&v44[8];
    long long v39 = *(_OWORD *)&v44[24];
    uint64_t v7 = v45;
  }
  else
  {
    long long v38 = v35;
    long long v39 = v36;
    uint64_t v7 = v37;
  }
  uint64_t v40 = v7;
  if (v7)
  {
    double v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v39 + 1)) {
      double v8 = (atomic_ullong *)*((void *)&v39 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result((uint64_t)v44);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
  uint64_t v9 = v38;
  long long v10 = a4[1];
  v43[8] = *a4;
  v43[9] = v10;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v11 = a4[1], v43[6] = *a4, v43[7] = v11, RETypeInfoIsArray()))
  {
    memset(v44, 0, 32);
    v43[4] = *(_OWORD *)v44;
    v43[5] = *(_OWORD *)&v44[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v43[2] = *(_OWORD *)v44, void v43[3] = *(_OWORD *)&v44[16], RETypeInfoIsArray()))
    {
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v12 = *a2;
      double v13 = (std::__shared_weak_count *)a2[1];
      v34[0] = v12;
      v34[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v14 = a4[1];
      v43[0] = *a4;
      v43[1] = v14;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v15 = v35;
      if (*((void *)&v35 + 1) != (void)v35)
      {
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        do
        {
          long long v18 = *(unsigned char **)(v15 + v16);
          pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *long long v18 = *(unsigned char *)(v40 + v17++);
          uint64_t v15 = v35;
          v16 += 16;
        }
        while (v17 < (uint64_t)(*((void *)&v35 + 1) - v35) >> 4);
      }
LABEL_19:
      long long v41 = (void **)&v35;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&v41);
      goto LABEL_20;
    }
    long long v19 = a4[1];
    v42[0] = *a4;
    v42[1] = v19;
    int v29 = *(_DWORD *)this;
    uint64_t v20 = *((void *)this + 1);
    uint64_t v30 = v20;
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v31, (_DWORD *)this + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v32, (_DWORD *)this + 5);
    uint64_t v21 = *((void *)this + 3);
    uint64_t v33 = v21;
    if ((v21 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v31);
    if (v30) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v30);
    }
    if (v22)
    {
      uint64_t v23 = (std::__shared_weak_count *)a2[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v35 = 0uLL;
      *(void *)&long long v36 = 0;
      uint64_t v24 = *a2;
      uint64_t v25 = (std::__shared_weak_count *)a2[1];
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      if (v9)
      {
        uint64_t v26 = 0;
        for (uint64_t i = 0; i != v9; ++i)
        {
          int v28 = *(unsigned char **)(v35 + v26);
          pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v38);
          *int v28 = *(unsigned char *)(v40 + i);
          v26 += 16;
        }
      }
      goto LABEL_19;
    }
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v38);
}

void sub_23F7470AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  a26 = (void **)&a15;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](&a26);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_StringArray(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  uint64_t v52 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  *(void *)std::string v60 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)v60, (pxrInternal__aapl__pxrReserved__::UsdObject *)a1);
    long long v57 = *(_OWORD *)&v60[8];
    long long v58 = *(_OWORD *)&v60[24];
    uint64_t v59 = v61;
    if (v61)
    {
      double v8 = (atomic_ullong *)(v61 - 16);
      if (*((void *)&v58 + 1)) {
        double v8 = (atomic_ullong *)*((void *)&v58 + 1);
      }
      atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result((uint64_t)v60);
    if ((void)v57)
    {
      unint64_t v9 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v57);
        if ((*(void *)(v59 + 8 * v9) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t EmptyString = (long long *)((*(void *)(v59 + 8 * v9) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t EmptyString = (long long *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back<std::string const&>((uint64_t)&v50, EmptyString);
        ++v9;
      }
      while (v9 < (unint64_t)v57);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v57);
  }
  else
  {
    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)a1, (uint64_t)v60);
    if (v60[0])
    {
      long long v57 = *(_OWORD *)&v60[8];
      long long v58 = *(_OWORD *)&v60[24];
      uint64_t v12 = v61;
    }
    else
    {
      long long v57 = v47;
      long long v58 = v48;
      uint64_t v12 = v49;
    }
    uint64_t v59 = v12;
    if (v12)
    {
      double v13 = (atomic_ullong *)(v12 - 16);
      if (*((void *)&v58 + 1)) {
        double v13 = (atomic_ullong *)*((void *)&v58 + 1);
      }
      atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)v60);
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v50);
    long long v50 = v57;
    long long v51 = v58;
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v52 = v59;
    uint64_t v59 = 0;
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v57);
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v47);
  }
  uint64_t v14 = v50;
  long long v15 = a4[1];
  v56[8] = *a4;
  v56[9] = v15;
  if ((RETypeInfoIsList() & 1) != 0 || (long long v16 = a4[1], v56[6] = *a4, v56[7] = v16, RETypeInfoIsArray()))
  {
    memset(v60, 0, 32);
    v56[4] = *(_OWORD *)v60;
    v56[5] = *(_OWORD *)&v60[16];
    if ((RETypeInfoIsList() & 1) != 0
      || (v56[2] = *(_OWORD *)v60, v56[3] = *(_OWORD *)&v60[16], RETypeInfoIsArray()))
    {
      long long v47 = 0uLL;
      *(void *)&long long v48 = 0;
      uint64_t v17 = *a2;
      long long v18 = (std::__shared_weak_count *)a2[1];
      v46[0] = v17;
      v46[1] = (uint64_t)v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v19 = a4[1];
      v56[0] = *a4;
      v56[1] = v19;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      long long v57 = 0u;
      long long v58 = 0u;
      if (*((void *)&v47 + 1) != (void)v47)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        unint64_t v22 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v50);
          uint64_t v23 = (long long *)(v52 + v20);
          if (*(char *)(v52 + v20 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)v23, *((void *)v23 + 1));
          }
          else
          {
            long long v24 = *v23;
            v45.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
            *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
          }
          uint64_t v25 = *(void *)(v47 + v21);
          v55[0] = v57;
          v55[1] = v58;
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v45.__r_.__value_.__l.__data_);
          }
          ++v22;
          v21 += 16;
          v20 += 24;
        }
        while (v22 < (uint64_t)(*((void *)&v47 + 1) - v47) >> 4);
      }
      *(void *)&long long v57 = &v47;
      uint64_t v26 = (void ***)&v57;
LABEL_40:
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100](v26);
      goto LABEL_41;
    }
    long long v27 = a4[1];
    v54[0] = *a4;
    v54[1] = v27;
    int v40 = *(_DWORD *)a1;
    uint64_t v28 = *(void *)(a1 + 8);
    uint64_t v41 = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v42, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v43, (_DWORD *)(a1 + 20));
    uint64_t v29 = *(void *)(a1 + 24);
    uint64_t v44 = v29;
    if ((v29 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v42);
    if (v41) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v41);
    }
    if (v30)
    {
      int v31 = (std::__shared_weak_count *)a2[1];
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      long long v57 = 0uLL;
      *(void *)&long long v58 = 0;
      uint64_t v32 = *a2;
      uint64_t v33 = (std::__shared_weak_count *)a2[1];
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if (v14)
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v50);
          long long v36 = (long long *)(v52 + v34);
          if (*(char *)(v52 + v34 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v36, *((void *)v36 + 1));
          }
          else
          {
            long long v37 = *v36;
            __p.__r_.__value_.__r.__words[2] = *((void *)v36 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v37;
          }
          uint64_t v38 = *(void *)(v57 + v35);
          v53[0] = *(_OWORD *)v60;
          v53[1] = *(_OWORD *)&v60[16];
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          v35 += 16;
          v34 += 24;
          --v14;
        }
        while (v14);
      }
      *(void *)&long long v47 = &v57;
      uint64_t v26 = (void ***)&v47;
      goto LABEL_40;
    }
  }
LABEL_41:
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v50);
}

void sub_23F747670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  a29 = v36 - 176;
  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&a35);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_AssetHandleArray(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *a3, long long *a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  Typeuint64_t Name = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((uint64_t)&TypeName, (pxrInternal__aapl__pxrReserved__::UsdObject *)a1);
    if ((_BYTE)TypeName)
    {
      long long v32 = v36;
      long long v33 = v37;
      uint64_t v8 = v38;
    }
    else
    {
      long long v32 = v29;
      long long v33 = v30;
      uint64_t v8 = v31;
    }
    uint64_t v34 = v8;
    if (v8)
    {
      unint64_t v9 = (atomic_ullong *)(v8 - 16);
      if (*((void *)&v33 + 1)) {
        unint64_t v9 = (atomic_ullong *)*((void *)&v33 + 1);
      }
      atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,realityio::DetailedError>::~Result((uint64_t)&TypeName);
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v29);
    uint64_t v10 = v32;
    long long v11 = a4[1];
    v39[0] = *a4;
    v39[1] = v11;
    int v24 = *(_DWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 8);
    uint64_t v25 = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 48), 1uLL, memory_order_relaxed);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v26, (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v27, (_DWORD *)(a1 + 20));
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v28 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v26);
    if (v25) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v25);
    }
    if (v14)
    {
      REAssetHandleArrayClear();
      if ((void)v32)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v32);
          uint64_t v17 = v34;
          long long v18 = (long long *)(v34 + v15);
          if (*(char *)(v34 + v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v18, *((void *)v18 + 1));
          }
          else
          {
            long long v19 = *v18;
            v22.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
            *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v19;
          }
          uint64_t v20 = (const std::string::value_type **)(v17 + v15 + 24);
          if (*(char *)(v17 + v15 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *v20, *(void *)(v17 + v15 + 32));
          }
          else
          {
            long long v21 = *(_OWORD *)v20;
            __p.__r_.__value_.__r.__words[2] = *(void *)(v17 + v15 + 40);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
          }
          REAssetHandleArrayAdd();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
          ++v16;
          v15 += 48;
        }
        while ((unint64_t)v32 > v16);
      }
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v32);
  }
}

void sub_23F747A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__func()
{
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F349718;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F349718;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::operator()(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, long long *a5)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void (**)(uint64_t, long long *, uint64_t, _OWORD *))(a1 + 8);
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v7 = *a4;
  long long v8 = *a5;
  long long v9 = a5[1];
  long long v10 = v6;
  v11[0] = v8;
  v11[1] = v9;
  v5(a2, &v10, v7, v11);
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
}

void sub_23F747C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo)>,void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::target_type()
{
}

void *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>> const&>((uint64_t)a1, v4, a2, a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_23F747CF0(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>> const&>(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  long long v8 = (void *)(result + 8);
  if ((void *)(result + 8) != a2)
  {
    uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](result + 16, a3, a2 + 4);
    if (!result)
    {
      uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a2 + 4, a3);
      if (!result)
      {
        uint64_t v23 = a2;
        int v24 = a2;
        uint64_t v12 = &v23;
        if (a2) {
          return result;
        }
        goto LABEL_31;
      }
      uint64_t v12 = (uint64_t **)(a2 + 1);
      long long v11 = (uint64_t *)a2[1];
      if (v11)
      {
        uint64_t v13 = (void *)a2[1];
        do
        {
          char v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        uint64_t v17 = a2;
        do
        {
          char v14 = (void *)v17[2];
          BOOL v16 = *v14 == (void)v17;
          uint64_t v17 = v14;
        }
        while (!v16);
      }
      if (v14 != v8)
      {
        uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a3, v14 + 4);
        if (!result)
        {
LABEL_29:
          uint64_t result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(v7, &v24, a3);
          uint64_t v12 = (uint64_t **)result;
          goto LABEL_30;
        }
        long long v11 = *v12;
      }
      if (v11)
      {
        int v24 = v14;
        uint64_t v12 = (uint64_t **)v14;
      }
      else
      {
        int v24 = a2;
      }
LABEL_30:
      if (*v12) {
        return result;
      }
      goto LABEL_31;
    }
  }
  if (*(void **)v7 != a2)
  {
    long long v9 = (void *)*a2;
    if (*a2)
    {
      do
      {
        long long v10 = v9;
        long long v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        long long v10 = (void *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }
      while (v16);
    }
    uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, v10 + 4, a3);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  long long v10 = a2;
LABEL_16:
  if (*a2)
  {
    int v24 = v10;
    uint64_t v12 = (uint64_t **)(v10 + 1);
    goto LABEL_30;
  }
  int v24 = a2;
  uint64_t v12 = (uint64_t **)a2;
LABEL_31:
  long long v18 = (uint64_t *)operator new(0x48uLL);
  long long v19 = v18;
  uint64_t v20 = *a4;
  v18[4] = *a4;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::__value_func[abi:ne180100]((uint64_t)(v18 + 5), (uint64_t)(a4 + 1));
  uint64_t v21 = (uint64_t)v24;
  uint64_t *v19 = 0;
  v19[1] = 0;
  _DWORD v19[2] = v21;
  *uint64_t v12 = v19;
  uint64_t v22 = **(void **)v7;
  if (v22)
  {
    *(void *)uint64_t v7 = v22;
    long long v19 = *v12;
  }
  uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v19);
  ++*(void *)(v7 + 16);
  return result;
}

void sub_23F747F20(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[4];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(a1[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](a1 + 5);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::pair[abi:ne180100]<true,0>(void *a1, uint64_t a2, void *a3)
{
  *a1 = a2;
  if ((a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](a1 + 1, a3);
  return a1;
}

void *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](void *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>> const&>((uint64_t)a1, v3, v5 + 4, v5 + 4);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23F7480C4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<unsigned long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v42, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v41 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v15 = v48;
      v51.__r_.__value_.__r.__words[0] = v49;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
      char v16 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
      std::string::size_type v17 = v51.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
      *(void *)(a1 + 32) = v17;
      *(unsigned char *)(a1 + 47) = v16;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_48;
    }
    uint64_t v54 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v53))
      {
        uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 8) = v9;
        goto LABEL_47;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C298], v19))
      {
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<unsigned long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        uint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v51, (const pxrInternal__aapl__pxrReserved__::VtValue *)v20);
        if (v51.__r_.__value_.__l.__size_)
        {
          uint64_t v22 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<unsigned long long>(v21);
          *(unsigned char *)a1 = 1;
          *(void *)(a1 + 8) = v22;
        }
        else
        {
          long long v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v36 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v47;
          uint64_t v37 = v48;
          v50.__r_.__value_.__r.__words[0] = v49;
          *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
          char v38 = HIBYTE(v49);
          long long v49 = 0uLL;
          uint64_t v48 = 0;
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7);
          std::string::size_type v39 = v50.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v37;
          *(void *)(a1 + 32) = v39;
          *(unsigned char *)(a1 + 47) = v38;
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v51);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v33 = v48;
      v51.__r_.__value_.__r.__words[0] = v49;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
      char v34 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
      std::string::size_type v35 = v51.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v33;
      *(void *)(a1 + 32) = v35;
      *(unsigned char *)(a1 + 47) = v34;
      if ((SHIBYTE(v46) & 0x80000000) == 0)
      {
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
LABEL_48:
        uint64_t v40 = v43;
        if (v43)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
          }
        }
        return;
      }
      long long v32 = __p[0];
    }
    else
    {
      char v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v50, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, v41);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v44;
      }
      else {
        uint64_t v25 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      int v27 = std::string::append(&v51, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v46 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v29 = v48;
      v52[0] = v49;
      *(void *)((char *)v52 + 7) = *(void *)((char *)&v49 + 7);
      char v30 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v52 + 7);
      uint64_t v31 = v52[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v29;
      *(void *)(a1 + 32) = v31;
      *(unsigned char *)(a1 + 47) = v30;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_47;
      }
      long long v32 = (void *)v50.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_47;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v47;
  uint64_t v11 = v48;
  v51.__r_.__value_.__r.__words[0] = v49;
  *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
  char v12 = HIBYTE(v49);
  long long v49 = 0uLL;
  uint64_t v48 = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
  std::string::size_type v13 = v51.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v11;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 47) = v12;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F748648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<long long>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v42, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v41 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v15 = v48;
      v51.__r_.__value_.__r.__words[0] = v49;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
      char v16 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
      std::string::size_type v17 = v51.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
      *(void *)(a1 + 32) = v17;
      *(unsigned char *)(a1 + 47) = v16;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_48;
    }
    uint64_t v54 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v53))
      {
        uint64_t v9 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        *(unsigned char *)a1 = 1;
        *(void *)(a1 + 8) = v9;
        goto LABEL_47;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x263F8C290], v19))
      {
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<long long>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        uint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v51, (const pxrInternal__aapl__pxrReserved__::VtValue *)v20);
        if (v51.__r_.__value_.__l.__size_)
        {
          uint64_t v22 = *(void *)pxrInternal__aapl__pxrReserved__::VtValue::Get<long long>(v21);
          *(unsigned char *)a1 = 1;
          *(void *)(a1 + 8) = v22;
        }
        else
        {
          long long v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v36 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v47;
          uint64_t v37 = v48;
          v50.__r_.__value_.__r.__words[0] = v49;
          *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
          char v38 = HIBYTE(v49);
          long long v49 = 0uLL;
          uint64_t v48 = 0;
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7);
          std::string::size_type v39 = v50.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v37;
          *(void *)(a1 + 32) = v39;
          *(unsigned char *)(a1 + 47) = v38;
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v51);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v33 = v48;
      v51.__r_.__value_.__r.__words[0] = v49;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
      char v34 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
      std::string::size_type v35 = v51.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v33;
      *(void *)(a1 + 32) = v35;
      *(unsigned char *)(a1 + 47) = v34;
      if ((SHIBYTE(v46) & 0x80000000) == 0)
      {
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
LABEL_48:
        uint64_t v40 = v43;
        if (v43)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
          }
        }
        return;
      }
      long long v32 = __p[0];
    }
    else
    {
      char v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v50, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, v41);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v44;
      }
      else {
        uint64_t v25 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      int v27 = std::string::append(&v51, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v46 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v29 = v48;
      v52[0] = v49;
      *(void *)((char *)v52 + 7) = *(void *)((char *)&v49 + 7);
      char v30 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v52 + 7);
      uint64_t v31 = v52[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v29;
      *(void *)(a1 + 32) = v31;
      *(unsigned char *)(a1 + 47) = v30;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_47;
      }
      long long v32 = (void *)v50.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_47;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v47;
  uint64_t v11 = v48;
  v51.__r_.__value_.__r.__words[0] = v49;
  *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
  char v12 = HIBYTE(v49);
  long long v49 = 0uLL;
  uint64_t v48 = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
  std::string::size_type v13 = v51.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v11;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 47) = v12;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F748C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::setReString(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v3 = a3[1];
  long long v14 = *a3;
  long long v15 = v3;
  uint64_t Name = (char *)RETypeInfoGetName();
  std::string::basic_string[abi:ne180100]<0>(&__p, Name);
  if ((v13 & 0x80000000) == 0)
  {
    if (v13 != 5)
    {
      if (v13 != 8)
      {
        if (v13 != 13) {
          return 0;
        }
        if ((void)__p != 0x5363696D616E7944 || *(void *)((char *)&__p + 5) != 0x676E697274536369) {
          goto LABEL_35;
        }
        goto LABEL_19;
      }
      p_p = &__p;
      goto LABEL_29;
    }
    if (__p != 1918986339 || BYTE4(__p) != 42) {
      goto LABEL_35;
    }
LABEL_37:
    RENullTerminatedStringSet();
    goto LABEL_38;
  }
  if (*((void *)&__p + 1) == 5)
  {
    if (*(_DWORD *)__p != 1918986339 || *(unsigned char *)(__p + 4) != 42) {
      goto LABEL_35;
    }
    goto LABEL_37;
  }
  if (*((void *)&__p + 1) == 8)
  {
    p_p = (long long *)__p;
LABEL_29:
    if (*(void *)p_p == 0x4449676E69727453)
    {
      REStringIDSet();
      goto LABEL_38;
    }
LABEL_35:
    uint64_t v9 = 0;
    goto LABEL_39;
  }
  if (*((void *)&__p + 1) != 13)
  {
    uint64_t v9 = 0;
LABEL_40:
    operator delete((void *)__p);
    return v9;
  }
  if (*(void *)__p != 0x5363696D616E7944 || *(void *)(__p + 5) != 0x676E697274536369) {
    goto LABEL_35;
  }
LABEL_19:
  REDynamicStringSet();
LABEL_38:
  uint64_t v9 = 1;
LABEL_39:
  if (v13 < 0) {
    goto LABEL_40;
  }
  return v9;
}

void sub_23F748F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::generateAsset(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (_OWORD *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *v5;
    v26.__r_.__value_.__r.__words[2] = *(void *)(a3 + 40);
  }
  pxrInternal__aapl__pxrReserved__::ArGetResolver(a1);
  pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension();
  uint64_t v6 = 0;
  while (1)
  {
    size_t v8 = (size_t)v7;
    if ((char)v25 < 0) {
      break;
    }
    if (v7 == (void *)v25)
    {
      uint64_t v9 = v24;
      goto LABEL_11;
    }
LABEL_32:
    if (++v6 == 10)
    {
      realityio::Inputs::assetManager(a1);
      uint64_t AssetHandle = REAssetManagerCreateAssetHandle();
      goto LABEL_34;
    }
  }
  if (v7 != v24[1]) {
    goto LABEL_32;
  }
  if (v7 == (void *)-1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v9 = (void **)v24[0];
LABEL_11:
  {
    goto LABEL_32;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v21 = *(std::string *)a3;
  }
  if (*(char *)(a3 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
  }
  else {
    std::string v22 = *(std::string *)v5;
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)char v13 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v13);
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  DWORD2(v17) = 0;
  HIDWORD(v17) = realityio::TextureSwizzleChannels::kDefault;
  LOBYTE(v18) = 2;
  DWORD1(v18) = 0;
  WORD4(v18) = 512;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  realityio::TextureBuilder::createStandardTextureAsset((std::string::size_type)a1, a2, (uint64_t)&v21, (uint64_t)v13, (std::string::size_type *)&v23);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v17) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v14[0]) < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  uint64_t AssetHandle = v23;
  if (!v23)
  {
    realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v23);
    goto LABEL_32;
  }
  uint64_t v23 = 0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v23);
LABEL_34:
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return AssetHandle;
}

void sub_23F749264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 113) < 0) {
    operator delete(*(void **)(v41 - 136));
  }
  if (*(char *)(v41 - 89) < 0) {
    operator delete(*(void **)(v41 - 112));
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::validateArraySize(long long *a1, pxrInternal__aapl__pxrReserved__::UsdObject *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  long long v6 = a1[1];
  long long v25 = *a1;
  long long v26 = v6;
  if (!RETypeInfoIsArray()) {
    return 1;
  }
  long long v7 = a1[1];
  long long v23 = *a1;
  long long v24 = v7;
  if (!RETypeInfoIsFixedSizeArray()) {
    return 1;
  }
  long long v8 = a1[1];
  long long v21 = *a1;
  long long v22 = v8;
  size_t Size = (realityio *)REArrayAccessorGetSize();
  int v10 = (int)Size;
  if (a3 == (int)Size) {
    return 1;
  }
  char v12 = *(id *)(realityio::logObjects(Size) + 24);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v14);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14);
    *(_DWORD *)std::string buf = 134218498;
    uint64_t v16 = a3;
    __int16 v17 = 1024;
    int v18 = v10;
    __int16 v19 = 2080;
    uint64_t v20 = Text;
    _os_log_impl(&dword_23F4EA000, v12, OS_LOG_TYPE_DEFAULT, "Property size, %zu, does not match expected size, %d, for (\"%s\")", buf, 0x1Cu);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
  }

  return 0;
}

void sub_23F749464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)std::string v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          char v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            char v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)std::string v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&unsigned char v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          long long v25 = &v58;
        }
        else
        {
          long long v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)std::string v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)std::string v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&unsigned char v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        }
        else
        {
          std::string v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string::size_type v35 = __p[0];
    }
    else
    {
      int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v52;
      }
      else {
        long long v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      char v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string::size_type v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  long long v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F749AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)std::string v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          char v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            char v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)std::string v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&unsigned char v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          long long v25 = &v58;
        }
        else
        {
          long long v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)std::string v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)std::string v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&unsigned char v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        }
        else
        {
          std::string v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string::size_type v35 = __p[0];
    }
    else
    {
      int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v52;
      }
      else {
        long long v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      char v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string::size_type v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  long long v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F74A3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)std::string v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          char v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            char v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)std::string v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&unsigned char v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          long long v25 = &v58;
        }
        else
        {
          long long v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)std::string v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)std::string v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&unsigned char v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        }
        else
        {
          std::string v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string::size_type v35 = __p[0];
    }
    else
    {
      int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v52;
      }
      else {
        long long v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      char v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string::size_type v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  long long v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F74AC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)std::string v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          char v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            char v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)std::string v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&unsigned char v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          long long v25 = &v58;
        }
        else
        {
          long long v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)std::string v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)std::string v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&unsigned char v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v59);
        }
        else
        {
          std::string v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string::size_type v35 = __p[0];
    }
    else
    {
      int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v52;
      }
      else {
        long long v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      char v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string::size_type v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  long long v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F74B548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef((void *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back<std::string const&>(uint64_t a1, long long *a2)
{
  if (!*(_DWORD *)(a1 + 8))
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)(a1 + 24)) {
      goto LABEL_16;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_10;
    }
    unint64_t v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1) {
      goto LABEL_16;
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5)
    {
      if (*(void *)(a1 + 24)) {
        long long v7 = (uint64_t *)a1;
      }
      else {
        long long v7 = (uint64_t *)(v5 - 8);
      }
      uint64_t v8 = *v7;
    }
    else
    {
LABEL_10:
      uint64_t v8 = 0;
    }
    if (v4 != v8)
    {
      uint64_t v9 = (std::string *)(v5 + 24 * v4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v10 = *a2;
        v9->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      }
LABEL_15:
      ++*(void *)a1;
      return;
    }
LABEL_16:
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = 1;
    do
    {
      unint64_t v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    New = pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew(a1, v13);
    uint64_t v15 = 3 * v4;
    std::uninitialized_copy[abi:ne180100]<std::string *,std::string *>(v11, v11 + 8 * v15, (uint64_t)New);
    char v16 = (std::string *)&New[v15];
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v17 = *a2;
      v16->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
    }
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef((void *)a1);
    *(void *)(a1 + 32) = New;
    goto LABEL_15;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)std::string v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          uint64_t v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            uint64_t v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)std::string v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&unsigned char v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          long long v25 = &v58;
        }
        else
        {
          long long v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)std::string v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)std::string v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&unsigned char v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(&v59);
        }
        else
        {
          std::string v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string::size_type v35 = __p[0];
    }
    else
    {
      int v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v52;
      }
      else {
        long long v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      char v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string::size_type v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F74BE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::Invoke()
{
}

void *pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(void *result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DecRef((void *)(a1 + 8));
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  qword_268C40CF0 = 0;
  qword_268C40CE8 = 0;
  if (a2)
  {
    uint64_t v2 = (uint64_t *)result;
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(result + 32 * a2);
    uint64_t v5 = &qword_268C40CE8;
    while (v5 != &qword_268C40CE8)
    {
      if (v3)
      {
        do
        {
          unint64_t v6 = (uint64_t *)v3;
          uint64_t v3 = *(void *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        long long v7 = &qword_268C40CE8;
        do
        {
          unint64_t v6 = (uint64_t *)v7[2];
          BOOL v8 = *v6 == (void)v7;
          long long v7 = v6;
        }
        while (v8);
      }
      uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40CF0, v6 + 4, v2);
      uint64_t v3 = qword_268C40CE8;
      if (result) {
        goto LABEL_11;
      }
      if (qword_268C40CE8)
      {
        uint64_t v9 = &qword_268C40CE8;
        while (1)
        {
          while (1)
          {
            unint64_t v6 = (uint64_t *)v3;
            long long v10 = (uint64_t *)(v3 + 32);
            if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40CF0, v2, (uint64_t *)(v3 + 32)))break; {
            uint64_t v3 = *v6;
            }
            uint64_t v9 = v6;
            if (!*v6) {
              goto LABEL_24;
            }
          }
          uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40CF0, v10, v2);
          if (!result) {
            break;
          }
          uint64_t v9 = v6 + 1;
          uint64_t v3 = v6[1];
          if (!v3) {
            goto LABEL_24;
          }
        }
LABEL_13:
        if (*v9) {
          goto LABEL_30;
        }
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v9 = &qword_268C40CE8;
      unint64_t v6 = &qword_268C40CE8;
LABEL_24:
      uint64_t v11 = (uint64_t *)operator new(0x40uLL);
      uint64_t v12 = v11;
      uint64_t v13 = *v2;
      void v11[4] = *v2;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v11[4] &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>::map[abi:ne180100](v11 + 5, v2 + 1);
      *uint64_t v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v6;
      uint64_t *v9 = (uint64_t)v12;
      {
        uint64_t v12 = (uint64_t *)*v9;
      }
      uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_268C40CE8, v12);
      ++qword_268C40CF0;
LABEL_30:
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
      uint64_t v3 = qword_268C40CE8;
    }
    unint64_t v6 = &qword_268C40CE8;
LABEL_11:
    if (v3)
    {
      uint64_t v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_23F74C2D8(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[4];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v1);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(*(void **)(v2 + 3304));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>>>>::destroy((void *)a1[6]);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

uint64_t std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdAttribute const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(a1, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!*(unsigned char *)a1)
      {
        long long v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v18 = *(void *)(a1 + 24);
          uint64_t v17 = a1 + 24;
          uint64_t v16 = v18;
          if (*(char *)(v17 + 23) >= 0) {
            uint64_t v16 = v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v16;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v22);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      uint64_t v13 = *(void *)&buf[16];
      v24[0] = v26;
      *(void *)((char *)v24 + 7) = *(void *)((char *)&v26 + 7);
      char v14 = HIBYTE(v26);
      long long v26 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v24 + 7);
      uint64_t v15 = v24[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 47) = v14;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    uint64_t v10 = *(void *)&buf[16];
    v22[0] = (void *)v26;
    *(void **)((char *)v22 + 7) = *(void **)((char *)&v26 + 7);
    char v11 = HIBYTE(v26);
    long long v26 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v22 + 7);
    uint64_t v12 = v22[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 47) = v11;
    if ((v20[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F74C704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v50, this);
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      long long v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v50);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v49 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v19 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v20 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v21 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v19;
      *(void *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 47) = v20;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_59;
    }
    v58.__std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
      {
        uint64_t v9 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
        long long v10 = *(_OWORD *)(v9 + 16);
        long long v59 = *(_OWORD *)v9;
        *(_OWORD *)std::string v60 = v10;
        uint64_t v11 = *(void *)(v9 + 32);
        if (v11)
        {
          uint64_t v12 = *(atomic_ullong **)&v60[8];
          if (!*(void *)&v60[8]) {
            uint64_t v12 = (atomic_ullong *)(v11 - 16);
          }
          atomic_fetch_add_explicit(v12, 1uLL, memory_order_relaxed);
        }
        *(unsigned char *)a1 = 1;
        long long v13 = *(_OWORD *)v60;
        *(_OWORD *)(a1 + 8) = v59;
        *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
        long long v59 = 0u;
        *(_OWORD *)std::string v60 = 0u;
        *(void *)(a1 + 40) = v11;
        *(void *)&unsigned char v60[16] = 0;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        goto LABEL_58;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
      {
        if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
        {
          long long v25 = &v58;
        }
        else
        {
          long long v25 = (std::type_info *)pxrInternal__aapl__pxrReserved__::VtValue::operator=(&v58, &v59);
          pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v59);
        }
        pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        if (v56.__r_.__value_.__l.__size_)
        {
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
          long long v40 = *(_OWORD *)(v39 + 16);
          long long v59 = *(_OWORD *)v39;
          *(_OWORD *)std::string v60 = v40;
          uint64_t v41 = *(void *)(v39 + 32);
          if (v41)
          {
            uint64_t v42 = *(atomic_ullong **)&v60[8];
            if (!*(void *)&v60[8]) {
              uint64_t v42 = (atomic_ullong *)(v41 - 16);
            }
            atomic_fetch_add_explicit(v42, 1uLL, memory_order_relaxed);
          }
          *(unsigned char *)a1 = 1;
          long long v43 = *(_OWORD *)v60;
          *(_OWORD *)(a1 + 8) = v59;
          *(_OWORD *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v43;
          long long v59 = 0u;
          *(_OWORD *)std::string v60 = 0u;
          *(void *)(a1 + 40) = v41;
          *(void *)&unsigned char v60[16] = 0;
          pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v59);
        }
        else
        {
          std::string v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v44 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v59;
          v55.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
          uint64_t v45 = *(void *)v60;
          *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
          char v46 = v60[23];
          memset(v60, 0, sizeof(v60));
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 7);
          std::string::size_type v47 = v55.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v45;
          *(void *)(a1 + 32) = v47;
          *(unsigned char *)(a1 + 47) = v46;
          if (SHIBYTE(v54) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        goto LABEL_58;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
      uint64_t v36 = *(void *)v60;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
      char v37 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
      std::string::size_type v38 = v56.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v36;
      *(void *)(a1 + 32) = v38;
      *(unsigned char *)(a1 + 47) = v37;
      if ((SHIBYTE(v54) & 0x80000000) == 0)
      {
LABEL_58:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v58);
LABEL_59:
        uint64_t v48 = v51;
        if (v51)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
          }
        }
        return;
      }
      std::string::size_type v35 = __p[0];
    }
    else
    {
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      std::operator+<char>();
      long long v26 = std::string::append(&v55, ") at the given time: ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v52, v49);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v28 = &v52;
      }
      else {
        long long v28 = (std::string *)v52.__r_.__value_.__r.__words[0];
      }
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v52.__r_.__value_.__l.__size_;
      }
      char v30 = std::string::append(&v56, (const std::string::value_type *)v28, size);
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      std::string::size_type v54 = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v59;
      v57[0] = *(void *)&v60[8];
      uint64_t v32 = *(void *)v60;
      *(void *)((char *)v57 + 7) = *(void *)&v60[15];
      char v33 = v60[23];
      memset(v60, 0, sizeof(v60));
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v57 + 7);
      uint64_t v34 = v57[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v32;
      *(void *)(a1 + 32) = v34;
      *(unsigned char *)(a1 + 47) = v33;
      if (SHIBYTE(v54) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v52.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_58;
      }
      std::string::size_type v35 = (void *)v55.__r_.__value_.__r.__words[0];
    }
    operator delete(v35);
    goto LABEL_58;
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v59, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v59;
  v56.__r_.__value_.__r.__words[0] = *(void *)&v60[8];
  uint64_t v15 = *(void *)v60;
  *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7) = *(void *)&v60[15];
  char v16 = v60[23];
  memset(v60, 0, sizeof(v60));
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 7);
  std::string::size_type v17 = v56.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
  *(void *)(a1 + 32) = v17;
  *(unsigned char *)(a1 + 47) = v16;
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F74CD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_DefaultValueFactory<pxrInternal__aapl__pxrReserved__::VtArray<long long>>::Invoke()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyUniquePtr::_Delete<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t result)
{
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(result);
    JUMPOUT(0x2455D2BD0);
  }
  return result;
}

uint64_t realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef(a1 + 8);
  }
  else if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void std::__shared_ptr_pointer<unsigned char *,anonymous namespace'::makeSharedNoDelete(void *)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,anonymous namespace'::makeSharedNoDelete(void *)::{lambda(unsigned char *)#1},std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN12_GLOBAL__N_118makeSharedNoDeleteEPvEUlT_E_)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void anonymous namespace'::getHashTableFuncTable(_anonymous_namespace_ *this)
{
  void v193[4] = *MEMORY[0x263EF8340];
  {
    MEMORY[0x2455CF810](&v105, "uchar[]");
    MEMORY[0x2455CF810](&v103, "uint8_t");
    uint64_t v175 = v103;
    uint64_t v103 = 0;
    v176[0] = &unk_26F349828;
    v176[3] = v176;
    MEMORY[0x2455CF810](&v102, "uint8_t[]");
    uint64_t v177 = v102;
    uint64_t v102 = 0;
    v178[0] = &unk_26F349828;
    v178[3] = v178;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v104, &v175, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v179, v105, v104);
    MEMORY[0x2455CF810](&v101, "uint[]");
    MEMORY[0x2455CF810](&v99, "uint16_t");
    uint64_t v169 = v99;
    uint64_t v99 = 0;
    v170[0] = &unk_26F349828;
    v170[3] = v170;
    MEMORY[0x2455CF810](&v98, "uint32_t");
    v170[4] = v98;
    uint64_t v98 = 0;
    v171[0] = &unk_26F349828;
    v171[3] = v171;
    MEMORY[0x2455CF810](&v97, "uint16_t[]");
    void v171[4] = v97;
    uint64_t v97 = 0;
    v172[0] = &unk_26F349828;
    v172[3] = v172;
    MEMORY[0x2455CF810](&v96, "uint32_t[]");
    uint64_t v173 = v96;
    uint64_t v96 = 0;
    v174[0] = &unk_26F349828;
    v174[3] = v174;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v100, &v169, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v180, v101, v100);
    MEMORY[0x2455CF810](&v95, "uint64[]");
    MEMORY[0x2455CF810](&v93, "uint64_t");
    uint64_t v163 = v93;
    uint64_t v93 = 0;
    v164[0] = &unk_26F349828;
    v164[3] = v164;
    MEMORY[0x2455CF810](&v92, "size_t");
    v164[4] = v92;
    uint64_t v92 = 0;
    v165[0] = &unk_26F349828;
    v165[3] = v165;
    MEMORY[0x2455CF810](&v91, "uint64_t[]");
    void v165[4] = v91;
    uint64_t v91 = 0;
    v166[0] = &unk_26F349828;
    v166[3] = v166;
    MEMORY[0x2455CF810](&v90, "size_t[]");
    uint64_t v167 = v90;
    uint64_t v90 = 0;
    v168[0] = &unk_26F349828;
    v168[3] = v168;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v94, &v163, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v181, v95, v94);
    MEMORY[0x2455CF810](&v89, "int[]");
    MEMORY[0x2455CF810](&v87, "char");
    uint64_t v154 = v87;
    uint64_t v87 = 0;
    v155[0] = &unk_26F349828;
    void v155[3] = v155;
    MEMORY[0x2455CF810](&v86, "int8_t");
    v155[4] = v86;
    uint64_t v86 = 0;
    v156[0] = &unk_26F349828;
    v156[3] = v156;
    MEMORY[0x2455CF810](&v85, "int16_t");
    v156[4] = v85;
    uint64_t v85 = 0;
    v157[0] = &unk_26F349828;
    void v157[3] = v157;
    MEMORY[0x2455CF810](&v84, "int32_t");
    void v157[4] = v84;
    uint64_t v84 = 0;
    v158[0] = &unk_26F349828;
    v158[3] = v158;
    MEMORY[0x2455CF810](&v83, "char[]");
    v158[4] = v83;
    uint64_t v83 = 0;
    v159[0] = &unk_26F349828;
    void v159[3] = v159;
    MEMORY[0x2455CF810](&v82, "int8_t[]");
    v159[4] = v82;
    uint64_t v82 = 0;
    v160[0] = &unk_26F349828;
    v160[3] = v160;
    MEMORY[0x2455CF810](&v81, "int16_t[]");
    void v160[4] = v81;
    uint64_t v81 = 0;
    v161[0] = &unk_26F349828;
    v161[3] = v161;
    MEMORY[0x2455CF810](&v80, "int32_t[]");
    v161[4] = v80;
    uint64_t v80 = 0;
    v162[0] = &unk_26F349828;
    v162[3] = v162;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v88, &v154, 8);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v182, v89, v88);
    MEMORY[0x2455CF810](&v79, "int64[]");
    MEMORY[0x2455CF810](&v77, "int");
    uint64_t v148 = v77;
    uint64_t v77 = 0;
    v149[0] = &unk_26F349828;
    v149[3] = v149;
    MEMORY[0x2455CF810](&v76, "int64_t");
    v149[4] = v76;
    uint64_t v76 = 0;
    v150[0] = &unk_26F349828;
    v150[3] = v150;
    MEMORY[0x2455CF810](&v75, "int[]");
    v150[4] = v75;
    uint64_t v75 = 0;
    v151[0] = &unk_26F349828;
    void v151[3] = v151;
    MEMORY[0x2455CF810](&v74, "int64_t[]");
    uint64_t v152 = v74;
    uint64_t v74 = 0;
    v153[0] = &unk_26F349828;
    v153[3] = v153;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v78, &v148, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v183, v79, v78);
    MEMORY[0x2455CF810](&v73, "float[]");
    MEMORY[0x2455CF810](&v71, "float");
    uint64_t v144 = v71;
    uint64_t v71 = 0;
    v145[0] = &unk_26F349828;
    v145[3] = v145;
    MEMORY[0x2455CF810](&v70, "float[]");
    uint64_t v146 = v70;
    uint64_t v70 = 0;
    v147[0] = &unk_26F349828;
    void v147[3] = v147;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v72, &v144, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v184, v73, v72);
    MEMORY[0x2455CF810](&v69, "float2[]");
    MEMORY[0x2455CF810](&v67, "Vector2F");
    uint64_t v140 = v67;
    uint64_t v67 = 0;
    v141[0] = &unk_26F349828;
    v141[3] = v141;
    MEMORY[0x2455CF810](&v66, "Vector2F[]");
    uint64_t v142 = v66;
    uint64_t v66 = 0;
    v143[0] = &unk_26F349828;
    void v143[3] = v143;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v68, &v140, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v185, v69, v68);
    MEMORY[0x2455CF810](&v65, "float3[]");
    MEMORY[0x2455CF810](&v63, "Vector3F");
    uint64_t v136 = v63;
    uint64_t v63 = 0;
    v137[0] = &unk_26F349828;
    void v137[3] = v137;
    MEMORY[0x2455CF810](&v62, "Vector3F[]");
    uint64_t v138 = v62;
    uint64_t v62 = 0;
    v139[0] = &unk_26F349828;
    v139[3] = v139;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v64, &v136, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v186, v65, v64);
    MEMORY[0x2455CF810](&v61, "float4[]");
    MEMORY[0x2455CF810](&v59, "Vector4F");
    uint64_t v132 = v59;
    uint64_t v59 = 0;
    v133[0] = &unk_26F349828;
    void v133[3] = v133;
    MEMORY[0x2455CF810](&v58, "Vector4F[]");
    uint64_t v134 = v58;
    uint64_t v58 = 0;
    v135[0] = &unk_26F349828;
    v135[3] = v135;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v60, &v132, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v187, v61, v60);
    MEMORY[0x2455CF810](&v57, "quatf[]");
    MEMORY[0x2455CF810](&v55, "QuaternionF");
    uint64_t v128 = v55;
    uint64_t v55 = 0;
    v129[0] = &unk_26F349828;
    v129[3] = v129;
    MEMORY[0x2455CF810](&v54, "QuaternionF[]");
    uint64_t v130 = v54;
    uint64_t v54 = 0;
    v131[0] = &unk_26F349828;
    v131[3] = v131;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v56, &v128, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v188, v57, v56);
    MEMORY[0x2455CF810](&v53, "double[]");
    MEMORY[0x2455CF810](&v51, "double");
    uint64_t v124 = v51;
    uint64_t v51 = 0;
    v125[0] = &unk_26F349828;
    v125[3] = v125;
    MEMORY[0x2455CF810](&v50, "double[]");
    uint64_t v126 = v50;
    uint64_t v50 = 0;
    v127[0] = &unk_26F349828;
    v127[3] = v127;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v52, &v124, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v189, v53, v52);
    MEMORY[0x2455CF810](&v49, "BOOL[]");
    MEMORY[0x2455CF810](&v47, "BOOL");
    uint64_t v120 = v47;
    uint64_t v47 = 0;
    v121[0] = &unk_26F349828;
    v121[3] = v121;
    MEMORY[0x2455CF810](&v46, "BOOL[]");
    uint64_t v122 = v46;
    uint64_t v46 = 0;
    v123[0] = &unk_26F349828;
    v123[3] = v123;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v48, &v120, 2);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v190, v49, v48);
    MEMORY[0x2455CF810](&v45, "token[]");
    MEMORY[0x2455CF810](&v43, "DynamicString");
    uint64_t v114 = v43;
    uint64_t v43 = 0;
    v115[0] = &unk_26F349828;
    void v115[3] = v115;
    MEMORY[0x2455CF810](&v42, "StringID");
    v115[4] = v42;
    uint64_t v42 = 0;
    v116[0] = &unk_26F349828;
    v116[3] = v116;
    MEMORY[0x2455CF810](&v41, "DynamicString[]");
    v116[4] = v41;
    uint64_t v41 = 0;
    v117[0] = &unk_26F349828;
    v117[3] = v117;
    MEMORY[0x2455CF810](&v40, "StringID[]");
    uint64_t v118 = v40;
    uint64_t v40 = 0;
    v119[0] = &unk_26F349828;
    v119[3] = v119;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v44, &v114, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v191, v45, v44);
    MEMORY[0x2455CF810](&v39, "string[]");
    MEMORY[0x2455CF810](&v37, "DynamicString");
    uint64_t v108 = v37;
    uint64_t v37 = 0;
    v109[0] = &unk_26F349828;
    void v109[3] = v109;
    MEMORY[0x2455CF810](&v36, "StringID");
    v109[4] = v36;
    uint64_t v36 = 0;
    v110[0] = &unk_26F349828;
    v110[3] = v110;
    MEMORY[0x2455CF810](&v35, "DynamicString[]");
    v110[4] = v35;
    uint64_t v35 = 0;
    v111[0] = &unk_26F349828;
    v111[3] = v111;
    MEMORY[0x2455CF810](&v34, "StringID[]");
    uint64_t v112 = v34;
    uint64_t v34 = 0;
    v113[0] = &unk_26F349828;
    v113[3] = v113;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v38, &v108, 4);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v192, v39, v38);
    MEMORY[0x2455CF810](&v33, "asset[]");
    MEMORY[0x2455CF810](&v31, "AssetHandle[]");
    uint64_t v106 = v31;
    uint64_t v31 = 0;
    v107[0] = &unk_26F349828;
    v107[3] = v107;
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v32, &v106, 1);
    std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(v193, v33, v32);
    std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100]((uint64_t)v179, 15);
    uint64_t v1 = 60;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v178[v1 + 2]);
      uint64_t v2 = v178[v1];
      if ((v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v1 -= 4;
    }
    while (v1 * 8);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v32[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](v107);
    if ((v106 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v31 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v33 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v38[1]);
    for (uint64_t i = 0; i != -20; i -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v113[i]);
      uint64_t v4 = v113[i - 1];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v35 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v37 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v44[1]);
    for (uint64_t j = 0; j != -20; j -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v119[j]);
      uint64_t v6 = v119[j - 1];
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v41 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v42 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v43 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v45 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v48[1]);
    for (uint64_t k = 0; k != -10; k -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v123[k]);
      uint64_t v8 = v123[k - 1];
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v47 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v49 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v52[1]);
    for (uint64_t m = 0; m != -10; m -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v127[m]);
      uint64_t v10 = v127[m - 1];
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v50 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v51 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v53 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v56[1]);
    for (uint64_t n = 0; n != -10; n -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v131[n]);
      uint64_t v12 = v131[n - 1];
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v55 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v60[1]);
    for (iuint64_t i = 0; ii != -10; ii -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v135[ii]);
      uint64_t v14 = v135[ii - 1];
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v58 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v59 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v61 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v64[1]);
    for (juint64_t j = 0; jj != -10; jj -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v139[jj]);
      uint64_t v16 = v139[jj - 1];
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v62 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v63 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v65 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v68[1]);
    for (kuint64_t k = 0; kk != -10; kk -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v143[kk]);
      uint64_t v18 = v143[kk - 1];
      if ((v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v69 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v72[1]);
    for (muint64_t m = 0; mm != -10; mm -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v147[mm]);
      uint64_t v20 = v147[mm - 1];
      if ((v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v70 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v71 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v73 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v78[1]);
    for (nuint64_t n = 0; nn != -20; nn -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v153[nn]);
      uint64_t v22 = v153[nn - 1];
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v74 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v75 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v76 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v77 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v79 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v88[1]);
    uint64_t v23 = 40;
    do
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v153[v23]);
      uint64_t v24 = v153[v23 - 1];
      if ((v24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v23 -= 5;
    }
    while (v23 * 8);
    if ((v80 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v81 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v82 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v83 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v84 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v85 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v86 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v87 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v89 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v94[1]);
    for (uint64_t i1 = 0; i1 != -20; i1 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v168[i1]);
      uint64_t v26 = v168[i1 - 1];
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v90 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v91 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v92 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v93 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v95 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v100[1]);
    for (uint64_t i2 = 0; i2 != -20; i2 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v174[i2]);
      uint64_t v28 = v174[i2 - 1];
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v96 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v97 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v98 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v99 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v101 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)v104[1]);
    for (uint64_t i3 = 0; i3 != -10; i3 -= 5)
    {
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](&v178[i3]);
      uint64_t v30 = v178[i3 - 1];
      if ((v30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if ((v102 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v103 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v103 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v105 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_23F74ECD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v73 = 480;
  while (1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(*(void **)(v72 + v73 - 16));
    uint64_t v74 = *(void *)(v72 + v73 - 32);
    if ((v74 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v73 -= 32;
    if (!v73)
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a19);
      std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](v71);
      if ((STACK[0x388] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x388] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a27);
      uint64_t v75 = 0;
      while (1)
      {
        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x3B0] + v75 + 128));
        uint64_t v76 = *(unint64_t *)((char *)&STACK[0x3B0] + v75 + 120);
        if ((v76 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v75 -= 40;
        if (v75 == -160)
        {
          if ((a22 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((a23 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((a24 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((a25 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((a29 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a35);
          uint64_t v77 = 0;
          while (1)
          {
            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x450] + v77 + 128));
            uint64_t v78 = *(unint64_t *)((char *)&STACK[0x450] + v77 + 120);
            if ((v78 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            v77 -= 40;
            if (v77 == -160)
            {
              if ((a30 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a31 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a32 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a33 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if ((a37 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a41);
              uint64_t v79 = 0;
              while (1)
              {
                std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x4F0] + v79 + 48));
                uint64_t v80 = *(unint64_t *)((char *)&STACK[0x4F0] + v79 + 40);
                if ((v80 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                v79 -= 40;
                if (v79 == -80)
                {
                  if ((a38 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if ((a39 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  if ((a43 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a47);
                  uint64_t v81 = 0;
                  while (1)
                  {
                    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x540] + v81 + 48));
                    uint64_t v82 = *(unint64_t *)((char *)&STACK[0x540] + v81 + 40);
                    if ((v82 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    v81 -= 40;
                    if (v81 == -80)
                    {
                      if ((a44 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((a45 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      if ((a49 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a53);
                      uint64_t v83 = 0;
                      while (1)
                      {
                        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x590] + v83 + 48));
                        uint64_t v84 = *(unint64_t *)((char *)&STACK[0x590] + v83 + 40);
                        if ((v84 & 7) != 0) {
                          atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                        }
                        v83 -= 40;
                        if (v83 == -80)
                        {
                          if ((a50 & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          if ((a51 & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          if ((a55 & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(a55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a59);
                          uint64_t v85 = 0;
                          while (1)
                          {
                            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x5E0] + v85 + 48));
                            uint64_t v86 = *(unint64_t *)((char *)&STACK[0x5E0] + v85 + 40);
                            if ((v86 & 7) != 0) {
                              atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                            }
                            v85 -= 40;
                            if (v85 == -80)
                            {
                              if ((a56 & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(a56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((a57 & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              if ((a61 & 7) != 0) {
                                atomic_fetch_add_explicit((atomic_uint *volatile)(a61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                              }
                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a65);
                              uint64_t v87 = 0;
                              while (1)
                              {
                                std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x630] + v87 + 48));
                                uint64_t v88 = *(unint64_t *)((char *)&STACK[0x630] + v87 + 40);
                                if ((v88 & 7) != 0) {
                                  atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                }
                                v87 -= 40;
                                if (v87 == -80)
                                {
                                  if ((a62 & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)(a62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  if ((a63 & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)(a63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  if ((a67 & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)(a67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a71);
                                  uint64_t v89 = 0;
                                  while (1)
                                  {
                                    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x680] + v89 + 48));
                                    uint64_t v90 = *(unint64_t *)((char *)&STACK[0x680] + v89 + 40);
                                    if ((v90 & 7) != 0) {
                                      atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                    }
                                    v89 -= 40;
                                    if (v89 == -80)
                                    {
                                      if ((a68 & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(a68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((a69 & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(a69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      if ((STACK[0x200] & 7) != 0) {
                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x200] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                      }
                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)STACK[0x220]);
                                      uint64_t v91 = 0;
                                      while (1)
                                      {
                                        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x6D0] + v91 + 48));
                                        uint64_t v92 = *(unint64_t *)((char *)&STACK[0x6D0] + v91 + 40);
                                        if ((v92 & 7) != 0) {
                                          atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                        }
                                        v91 -= 40;
                                        if (v91 == -80)
                                        {
                                          if ((STACK[0x208] & 7) != 0) {
                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x208] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                          }
                                          if ((STACK[0x210] & 7) != 0) {
                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x210] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                          }
                                          if ((STACK[0x230] & 7) != 0) {
                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x230] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                          }
                                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)STACK[0x260]);
                                          uint64_t v93 = 0;
                                          while (1)
                                          {
                                            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x720] + v93 + 128));
                                            uint64_t v94 = *(unint64_t *)((char *)&STACK[0x720] + v93 + 120);
                                            if ((v94 & 7) != 0) {
                                              atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                            }
                                            v93 -= 40;
                                            if (v93 == -160)
                                            {
                                              if ((STACK[0x238] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x238] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              if ((STACK[0x240] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x240] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              if ((STACK[0x248] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x248] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              if ((STACK[0x250] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x250] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              if ((STACK[0x270] & 7) != 0) {
                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x270] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                              }
                                              std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)STACK[0x2C0]);
                                              uint64_t v95 = 320;
                                              while (1)
                                              {
                                                std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x7C0] + v95 - 32));
                                                uint64_t v96 = *(unint64_t *)((char *)&STACK[0x7C0] + v95 - 40);
                                                if ((v96 & 7) != 0) {
                                                  atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                }
                                                v95 -= 40;
                                                if (!v95)
                                                {
                                                  if ((STACK[0x278] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x278] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x280] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x280] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x288] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x288] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x290] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x290] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x298] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x298] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x2A0] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2A0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x2A8] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2A8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x2B0] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2B0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  if ((STACK[0x2D0] & 7) != 0) {
                                                    atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2D0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                  }
                                                  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)STACK[0x300]);
                                                  uint64_t v97 = 0;
                                                  while (1)
                                                  {
                                                    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x900] + v97 + 128));
                                                    uint64_t v98 = *(unint64_t *)((char *)&STACK[0x900] + v97 + 120);
                                                    if ((v98 & 7) != 0) {
                                                      atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                    }
                                                    v97 -= 40;
                                                    if (v97 == -160)
                                                    {
                                                      if ((STACK[0x2D8] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2D8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      if ((STACK[0x2E0] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2E0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      if ((STACK[0x2E8] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2E8] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      if ((STACK[0x2F0] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x2F0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      if ((STACK[0x310] & 7) != 0) {
                                                        atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x310] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                      }
                                                      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)STACK[0x340]);
                                                      uint64_t v99 = 0;
                                                      while (1)
                                                      {
                                                        std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0x9A0] + v99 + 128));
                                                        uint64_t v100 = *(unint64_t *)((char *)&STACK[0x9A0] + v99 + 120);
                                                        if ((v100 & 7) != 0) {
                                                          atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                        }
                                                        v99 -= 40;
                                                        if (v99 == -160)
                                                        {
                                                          if ((STACK[0x318] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x318] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x320] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x320] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x328] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x328] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x330] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x330] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          if ((STACK[0x350] & 7) != 0) {
                                                            atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x350] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                          }
                                                          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)STACK[0x370]);
                                                          uint64_t v101 = 0;
                                                          while (1)
                                                          {
                                                            std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100]((unint64_t *)((char *)&STACK[0xA40] + v101 + 48));
                                                            uint64_t v102 = *(unint64_t *)((char *)&STACK[0xA40]
                                                                                       + v101
                                                                                       + 40);
                                                            if ((v102 & 7) != 0) {
                                                              atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                            }
                                                            v101 -= 40;
                                                            if (v101 == -80)
                                                            {
                                                              if ((STACK[0x358] & 7) != 0) {
                                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x358] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                              }
                                                              if ((STACK[0x360] & 7) != 0) {
                                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x360] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                              }
                                                              if ((STACK[0x380] & 7) != 0) {
                                                                atomic_fetch_add_explicit((atomic_uint *volatile)(STACK[0x380] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                                              }
                                                              _Unwind_Resume(a1);
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_23F74FA44()
{
}

void sub_23F74FA50()
{
}

void sub_23F74FA60()
{
}

void sub_23F74FA70()
{
}

void sub_23F74FA80()
{
}

void sub_23F74FA8C()
{
}

void sub_23F74FA9C()
{
}

void sub_23F74FAA8()
{
}

void sub_23F74FAB8()
{
}

void sub_23F74FAC4()
{
}

void sub_23F74FAD4()
{
}

void sub_23F74FAE0()
{
}

void sub_23F74FAF0()
{
}

void sub_23F74FAFC()
{
}

void sub_23F74FB0C()
{
}

void sub_23F74FB18()
{
}

void sub_23F74FB28()
{
}

void sub_23F74FB34()
{
}

void sub_23F74FB44()
{
}

void sub_23F74FB50()
{
}

void sub_23F74FB60()
{
}

void sub_23F74FB6C()
{
}

void sub_23F74FB7C()
{
}

void sub_23F74FB88()
{
}

void sub_23F74FB98()
{
}

void sub_23F74FBA4()
{
}

void sub_23F74FBB4()
{
}

void sub_23F74FBC0()
{
}

void sub_23F74FBD0()
{
}

void sub_23F74FBDC()
{
}

void sub_23F74FBEC()
{
}

void sub_23F74FBF8()
{
}

void sub_23F74FC08()
{
}

void sub_23F74FC14()
{
}

void sub_23F74FC24()
{
}

void sub_23F74FC30()
{
}

void sub_23F74FC40()
{
}

void sub_23F74FC50()
{
}

void sub_23F74FC60()
{
}

void sub_23F74FC6C()
{
}

void sub_23F74FC7C()
{
}

void sub_23F74FC88()
{
}

void sub_23F74FC98()
{
}

void sub_23F74FCA8()
{
}

void sub_23F74FCB8()
{
}

void sub_23F74FCC8()
{
}

void sub_23F74FCD8()
{
}

void sub_23F74FCE8()
{
}

void sub_23F74FCF8()
{
}

void sub_23F74FD04()
{
}

void sub_23F74FD14()
{
}

void sub_23F74FD20()
{
}

void sub_23F74FD30()
{
}

void sub_23F74FD40()
{
}

void sub_23F74FD50()
{
}

void sub_23F74FD5C()
{
}

void sub_23F74FD6C()
{
}

void sub_23F74FD78()
{
}

void sub_23F74FD88()
{
}

void sub_23F74FD98()
{
}

void sub_23F74FDA8()
{
}

void sub_23F74FDB4()
{
}

void sub_23F74FDC0()
{
}

void sub_23F74FDD0()
{
}

void sub_23F74FDE0()
{
}

void sub_23F74FDF4()
{
}

void sub_23F74FE04()
{
}

uint64_t anonymous namespace'::usdToRe_HashTable<unsigned char,unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(unsigned char **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(unsigned char *)(v14[4] + v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F74FED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<unsigned int,unsigned short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(_WORD **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(_DWORD *)(v14[4] + 4 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F74FFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<unsigned int,unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(_DWORD **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(_DWORD *)(v14[4] + 4 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7500CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<unsigned long long,unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(void *)(v14[4] + 8 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7501C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<unsigned long long,unsigned long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(void *)(v14[4] + 8 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7502C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<int,char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(unsigned char **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(_DWORD *)(v14[4] + 4 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7503C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<int,signed char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(unsigned char **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(_DWORD *)(v14[4] + 4 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7504BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<int,short>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(_WORD **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(_DWORD *)(v14[4] + 4 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7505B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<int,int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(_DWORD **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(_DWORD *)(v14[4] + 4 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7506B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<long long,int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(_DWORD **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(void *)(v14[4] + 8 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7507B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<long long,long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(void *)(v14[4] + 8 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7508AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<float,float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(_DWORD **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(_DWORD *)(v14[4] + 4 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7509A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTableVector<pxrInternal__aapl__pxrReserved__::GfVec2f,float,2>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v19, "values");
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (uint64_t)v20);
      if (!v20[0])
      {
        uint64_t v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v9 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0) {
              uint64_t v10 = *(const char **)v10;
            }
          }
          else
          {
            uint64_t v10 = "";
          }
          uint64_t v18 = &v22;
          if (v23 < 0) {
            uint64_t v18 = v22;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v18;
          _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v24);
      long long v21 = *(_OWORD *)buf;
      uint64_t v22 = *(void **)&buf[16];
      *(void *)&long long v23 = v30;
      *(void *)((char *)&v23 + 7) = *(void *)((char *)&v30 + 7);
      char v12 = HIBYTE(v30);
      long long v30 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      v20[0] = 0;
      HIBYTE(v23) = v12;
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v27);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    long long v21 = *(_OWORD *)buf;
    uint64_t v22 = *(void **)&buf[16];
    *(void *)&long long v23 = v30;
    *(void *)((char *)&v23 + 7) = *(void *)((char *)&v30 + 7);
    char v11 = HIBYTE(v30);
    long long v30 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    v20[0] = 0;
    HIBYTE(v23) = v11;
    if ((v27[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v20[0])
  {
    uint64_t v13 = v21;
    if ((void)v21)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void **)(*a5 + v14);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v21);
        *uint64_t v16 = *(void *)(*((void *)&v23 + 1) + 8 * v15++);
        v14 += 16;
      }
      while (v13 != v15);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)v20);
}

void sub_23F750CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::usdToRe_HashTableVector<pxrInternal__aapl__pxrReserved__::GfVec3f,float,3>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v20, "values");
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (uint64_t)v21);
      if (!v21[0])
      {
        uint64_t v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v9 = v20 & 0xFFFFFFFFFFFFFFF8;
          if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0) {
              uint64_t v10 = *(const char **)v10;
            }
          }
          else
          {
            uint64_t v10 = "";
          }
          uint64_t v19 = &v23;
          if (v24 < 0) {
            uint64_t v19 = v23;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v19;
          _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v25);
      long long v22 = *(_OWORD *)buf;
      long long v23 = *(void **)&buf[16];
      *(void *)&long long v24 = v31;
      *(void *)((char *)&v24 + 7) = *(void *)((char *)&v31 + 7);
      char v12 = HIBYTE(v31);
      long long v31 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      v21[0] = 0;
      HIBYTE(vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v12;
      if (v26 < 0) {
        operator delete(v25[0]);
      }
    }
    if ((v29 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v28);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    long long v22 = *(_OWORD *)buf;
    long long v23 = *(void **)&buf[16];
    *(void *)&long long v24 = v31;
    *(void *)((char *)&v24 + 7) = *(void *)((char *)&v31 + 7);
    char v11 = HIBYTE(v31);
    long long v31 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    v21[0] = 0;
    HIBYTE(vpxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v11;
    if ((v28[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v21[0])
  {
    uint64_t v13 = v22;
    if ((void)v22)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(void *)(*a5 + v14);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v22);
        uint64_t v17 = *(void *)(*((void *)&v24 + 1) + v15);
        *(_DWORD *)(v16 + 8) = *(_DWORD *)(*((void *)&v24 + 1) + v15 + 8);
        *(void *)uint64_t v16 = v17;
        v15 += 12;
        v14 += 16;
        --v13;
      }
      while (v13);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)v21);
}

void sub_23F750FF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::usdToRe_HashTableVector<pxrInternal__aapl__pxrReserved__::GfVec4f,float,4>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v18, "values");
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, (uint64_t)v19);
      if (!v19[0])
      {
        uint64_t v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v9 = v18 & 0xFFFFFFFFFFFFFFF8;
          if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0) {
              uint64_t v10 = *(const char **)v10;
            }
          }
          else
          {
            uint64_t v10 = "";
          }
          uint64_t v17 = &v21;
          if (v22 < 0) {
            uint64_t v17 = v21;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v17;
          _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v23);
      long long v20 = *(_OWORD *)buf;
      long long v21 = *(void **)&buf[16];
      *(void *)&long long v22 = v29;
      *(void *)((char *)&v22 + 7) = *(void *)((char *)&v29 + 7);
      char v12 = HIBYTE(v29);
      long long v29 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      v19[0] = 0;
      HIBYTE(v22) = v12;
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v26);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    long long v20 = *(_OWORD *)buf;
    long long v21 = *(void **)&buf[16];
    *(void *)&long long v22 = v29;
    *(void *)((char *)&v22 + 7) = *(void *)((char *)&v29 + 7);
    char v11 = HIBYTE(v29);
    long long v29 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    v19[0] = 0;
    HIBYTE(v22) = v11;
    if ((v26[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v19[0])
  {
    uint64_t v13 = v20;
    if ((void)v20)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = *(_OWORD **)(*a5 + v14);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
        *uint64_t v15 = *(_OWORD *)(*((void *)&v22 + 1) + v14);
        v14 += 16;
        --v13;
      }
      while (v13);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)v19);
}

void sub_23F751330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::usdToRe_HashTable<pxrInternal__aapl__pxrReserved__::GfQuatf,pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v18, "values");
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v18);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>((uint64_t)v19, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!v19[0])
      {
        uint64_t v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v9 = v18 & 0xFFFFFFFFFFFFFFF8;
          if ((v18 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0) {
              uint64_t v10 = *(const char **)v10;
            }
          }
          else
          {
            uint64_t v10 = "";
          }
          uint64_t v17 = &v21;
          if (v22 < 0) {
            uint64_t v17 = v21;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v17;
          _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v23);
      long long v20 = *(_OWORD *)buf;
      long long v21 = *(void **)&buf[16];
      *(void *)&long long v22 = v29;
      *(void *)((char *)&v22 + 7) = *(void *)((char *)&v29 + 7);
      char v12 = HIBYTE(v29);
      long long v29 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      v19[0] = 0;
      HIBYTE(v22) = v12;
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }
    if ((v27 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v26);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    long long v20 = *(_OWORD *)buf;
    long long v21 = *(void **)&buf[16];
    *(void *)&long long v22 = v29;
    *(void *)((char *)&v22 + 7) = *(void *)((char *)&v29 + 7);
    char v11 = HIBYTE(v29);
    long long v29 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    v19[0] = 0;
    HIBYTE(v22) = v11;
    if ((v26[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v19[0])
  {
    uint64_t v13 = v20;
    if ((void)v20)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = *(_OWORD **)(*a5 + v14);
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v20);
        *uint64_t v15 = *(_OWORD *)(*((void *)&v22 + 1) + v14);
        v14 += 16;
        --v13;
      }
      while (v13);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result((uint64_t)v19);
}

void sub_23F751668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::usdToRe_HashTable<double,double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  MEMORY[0x2455CF810](&v12, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a1);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v13[0])
  {
    uint64_t v7 = v14[0];
    if (v14[0])
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = *(void **)(*a5 + v8);
        pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14);
        *uint64_t v10 = *(void *)(v14[4] + 8 * v9++);
        v8 += 16;
      }
      while (v7 != v9);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)v13);
}

void sub_23F7517A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTable<BOOL,BOOL>(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v19, "values");
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a1))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>((uint64_t)v20, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!v20[0])
      {
        uint64_t v8 = *(NSObject **)realityio::logObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v9 = v19 & 0xFFFFFFFFFFFFFFF8;
          if ((v19 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v10 = (const char *)(v9 + 16);
            if (*(char *)(v9 + 39) < 0) {
              uint64_t v10 = *(const char **)v10;
            }
          }
          else
          {
            uint64_t v10 = "";
          }
          uint64_t v18 = &v22;
          if (v23 < 0) {
            uint64_t v18 = v22;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v10;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v18;
          _os_log_error_impl(&dword_23F4EA000, v8, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v24);
      long long v21 = *(_OWORD *)buf;
      long long v22 = *(void **)&buf[16];
      *(void *)&long long v23 = v30;
      *(void *)((char *)&v23 + 7) = *(void *)((char *)&v30 + 7);
      char v12 = HIBYTE(v30);
      long long v30 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      v20[0] = 0;
      HIBYTE(v23) = v12;
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v27);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    long long v21 = *(_OWORD *)buf;
    long long v22 = *(void **)&buf[16];
    *(void *)&long long v23 = v30;
    *(void *)((char *)&v23 + 7) = *(void *)((char *)&v30 + 7);
    char v11 = HIBYTE(v30);
    long long v30 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    v20[0] = 0;
    HIBYTE(v23) = v11;
    if ((v27[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v20[0])
  {
    uint64_t v13 = v21;
    if ((void)v21)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      do
      {
        uint64_t v16 = *(unsigned char **)(*a5 + v14);
        pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v21);
        *uint64_t v16 = *(unsigned char *)(*((void *)&v23 + 1) + v15++);
        v14 += 16;
      }
      while (v13 != v15);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result((uint64_t)v20);
}

void sub_23F751AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>,realityio::DetailedError>::~Result((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va1);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::usdToRe_HashTableString(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](&v17, "values");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v17, (uint64_t)v18);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v18[0])
  {
    uint64_t v8 = v19[0];
    if (v19[0])
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
        uint64_t v11 = (long long *)(v20 + v9);
        if (*(char *)(v20 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *((void *)v11 + 1));
        }
        else
        {
          long long v12 = *v11;
          __p.__r_.__value_.__r.__words[2] = *((void *)v11 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
        }
        uint64_t v13 = *(void *)(*a5 + v10);
        long long v14 = a4[1];
        long long v21 = *a4;
        long long v22 = v14;
        RETypeInfoGetDictionaryValueType();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        v10 += 16;
        v9 += 24;
        --v8;
      }
      while (v8);
    }
  }
  return realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)v18);
}

void sub_23F751C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::usdToRe_HashTableAssetHandle(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *a3)
{
  MEMORY[0x2455CF810](&v16, "values");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v19, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>((uint64_t)&v16, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v19);
  if ((_BYTE)v16)
  {
    uint64_t v5 = v17[0];
    if (v17[0])
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v17);
        uint64_t v8 = v18;
        uint64_t v9 = (long long *)(v18 + v7);
        if (*(char *)(v18 + v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v10 = *v9;
          v14.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
          *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
        }
        uint64_t v11 = (const std::string::value_type **)(v8 + v7 + 24);
        if (*(char *)(v8 + v7 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *v11, *(void *)(v8 + v7 + 32));
        }
        else
        {
          long long v12 = *(_OWORD *)v11;
          __p.__r_.__value_.__r.__words[2] = *(void *)(v8 + v7 + 40);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
        }
        REAssetHandleSet();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        v7 += 48;
        v6 += 16;
        --v5;
      }
      while (v5);
    }
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>,realityio::DetailedError>::~Result((uint64_t)&v16);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v21);
  uint64_t result = v20;
  if (v20) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v20);
  }
  return result;
}

void sub_23F751E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(unsigned char *)a1)
      {
        uint64_t v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v18 = *(void *)(a1 + 24);
          uint64_t v17 = a1 + 24;
          uint64_t v16 = v18;
          if (*(char *)(v17 + 23) >= 0) {
            uint64_t v16 = v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v16;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v22);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      uint64_t v13 = *(void *)&buf[16];
      v24[0] = v26;
      *(void *)((char *)v24 + 7) = *(void *)((char *)&v26 + 7);
      char v14 = HIBYTE(v26);
      long long v26 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v24 + 7);
      uint64_t v15 = v24[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 47) = v14;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    uint64_t v10 = *(void *)&buf[16];
    v22[0] = (void *)v26;
    *(void **)((char *)v22 + 7) = *(void **)((char *)&v26 + 7);
    char v11 = HIBYTE(v26);
    long long v26 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v22 + 7);
    long long v12 = v22[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 47) = v11;
    if ((v20[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F752150(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__func()
{
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F349828;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F349828;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::operator()(uint64_t a1, uint64_t a2, long long *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void (**)(uint64_t, long long *, void, uint64_t, uint64_t))(a1 + 8);
  long long v7 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v6(a2, &v7, *a4, a5, a6);
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_23F752278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target_type()
{
}

void *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v4, a2, a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_23F752348(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  unint64_t v8 = (void *)(result + 8);
  if ((void *)(result + 8) != a2)
  {
    uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](result + 16, a3, a2 + 4);
    if (!result)
    {
      uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a2 + 4, a3);
      if (!result)
      {
        char v23 = a2;
        uint64_t v24 = a2;
        long long v12 = &v23;
        if (a2) {
          return result;
        }
        goto LABEL_31;
      }
      long long v12 = (uint64_t **)(a2 + 1);
      char v11 = (uint64_t *)a2[1];
      if (v11)
      {
        uint64_t v13 = (void *)a2[1];
        do
        {
          char v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        uint64_t v17 = a2;
        do
        {
          char v14 = (void *)v17[2];
          BOOL v16 = *v14 == (void)v17;
          uint64_t v17 = v14;
        }
        while (!v16);
      }
      if (v14 != v8)
      {
        uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a3, v14 + 4);
        if (!result)
        {
LABEL_29:
          uint64_t result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(v7, &v24, a3);
          long long v12 = (uint64_t **)result;
          goto LABEL_30;
        }
        char v11 = *v12;
      }
      if (v11)
      {
        uint64_t v24 = v14;
        long long v12 = (uint64_t **)v14;
      }
      else
      {
        uint64_t v24 = a2;
      }
LABEL_30:
      if (*v12) {
        return result;
      }
      goto LABEL_31;
    }
  }
  if (*(void **)v7 != a2)
  {
    uint64_t v9 = (void *)*a2;
    if (*a2)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        uint64_t v10 = (void *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }
      while (v16);
    }
    uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, v10 + 4, a3);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  uint64_t v10 = a2;
LABEL_16:
  if (*a2)
  {
    uint64_t v24 = v10;
    long long v12 = (uint64_t **)(v10 + 1);
    goto LABEL_30;
  }
  uint64_t v24 = a2;
  long long v12 = (uint64_t **)a2;
LABEL_31:
  uint64_t v18 = (uint64_t *)operator new(0x48uLL);
  uint64_t v19 = v18;
  uint64_t v20 = *a4;
  v18[4] = *a4;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(v18 + 5), (uint64_t)(a4 + 1));
  uint64_t v21 = (uint64_t)v24;
  uint64_t *v19 = 0;
  v19[1] = 0;
  _DWORD v19[2] = v21;
  *long long v12 = v19;
  uint64_t v22 = **(void **)v7;
  if (v22)
  {
    *(void *)uint64_t v7 = v22;
    uint64_t v19 = *v12;
  }
  uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v19);
  ++*(void *)(v7 + 16);
  return result;
}

void sub_23F752578(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[4];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a1[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](a1 + 5);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(void *a1, uint64_t a2, void *a3)
{
  *a1 = a2;
  if ((a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](a1 + 1, a3);
  return a1;
}

void *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](void *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v3, v5 + 4, v5 + 4);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23F7527B4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(unsigned char *)a1)
      {
        uint64_t v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v18 = *(void *)(a1 + 24);
          uint64_t v17 = a1 + 24;
          uint64_t v16 = v18;
          if (*(char *)(v17 + 23) >= 0) {
            uint64_t v16 = v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v16;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v22);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      uint64_t v13 = *(void *)&buf[16];
      v24[0] = v26;
      *(void *)((char *)v24 + 7) = *(void *)((char *)&v26 + 7);
      char v14 = HIBYTE(v26);
      long long v26 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v24 + 7);
      uint64_t v15 = v24[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 47) = v14;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    uint64_t v10 = *(void *)&buf[16];
    v22[0] = (void *)v26;
    *(void **)((char *)v22 + 7) = *(void **)((char *)&v26 + 7);
    char v11 = HIBYTE(v26);
    long long v26 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v22 + 7);
    long long v12 = v22[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 47) = v11;
    if ((v20[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F752A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(a1, (pxrInternal__aapl__pxrReserved__::UsdObject *)&__p);
      if (!*(unsigned char *)a1)
      {
        uint64_t v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v18 = *(void *)(a1 + 24);
          uint64_t v17 = a1 + 24;
          uint64_t v16 = v18;
          if (*(char *)(v17 + 23) >= 0) {
            uint64_t v16 = v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v16;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v22);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      uint64_t v13 = *(void *)&buf[16];
      v24[0] = v26;
      *(void *)((char *)v24 + 7) = *(void *)((char *)&v26 + 7);
      char v14 = HIBYTE(v26);
      long long v26 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v24 + 7);
      uint64_t v15 = v24[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 47) = v14;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    uint64_t v10 = *(void *)&buf[16];
    v22[0] = (void *)v26;
    *(void **)((char *)v22 + 7) = *(void **)((char *)&v26 + 7);
    char v11 = HIBYTE(v26);
    long long v26 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v22 + 7);
    long long v12 = v22[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 47) = v11;
    if ((v20[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F752CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(unsigned char *)a1)
      {
        uint64_t v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v18 = *(void *)(a1 + 24);
          uint64_t v17 = a1 + 24;
          uint64_t v16 = v18;
          if (*(char *)(v17 + 23) >= 0) {
            uint64_t v16 = v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v16;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v22);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      uint64_t v13 = *(void *)&buf[16];
      v24[0] = v26;
      *(void *)((char *)v24 + 7) = *(void *)((char *)&v26 + 7);
      char v14 = HIBYTE(v26);
      long long v26 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v24 + 7);
      uint64_t v15 = v24[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 47) = v14;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    uint64_t v10 = *(void *)&buf[16];
    v22[0] = (void *)v26;
    *(void **)((char *)v22 + 7) = *(void **)((char *)&v26 + 7);
    char v11 = HIBYTE(v26);
    long long v26 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v22 + 7);
    long long v12 = v22[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 47) = v11;
    if ((v20[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F752F74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(unsigned char *)a1)
      {
        uint64_t v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v18 = *(void *)(a1 + 24);
          uint64_t v17 = a1 + 24;
          uint64_t v16 = v18;
          if (*(char *)(v17 + 23) >= 0) {
            uint64_t v16 = v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v16;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v22);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      uint64_t v13 = *(void *)&buf[16];
      v24[0] = v26;
      *(void *)((char *)v24 + 7) = *(void *)((char *)&v26 + 7);
      char v14 = HIBYTE(v26);
      long long v26 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v24 + 7);
      uint64_t v15 = v24[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 47) = v14;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    uint64_t v10 = *(void *)&buf[16];
    v22[0] = (void *)v26;
    *(void **)((char *)v22 + 7) = *(void **)((char *)&v26 + 7);
    char v11 = HIBYTE(v26);
    long long v26 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v22 + 7);
    long long v12 = v22[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 47) = v11;
    if ((v20[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F753218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((uint64_t *)&__p, this, a2);
    if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p)
      && (pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&__p) & 1) != 0)
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&__p, a1);
      if (!*(unsigned char *)a1)
      {
        uint64_t v7 = *(NSObject **)realityio::logObjects(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
          if (v8)
          {
            uint64_t v9 = (const char *)(v8 + 16);
            if (*(char *)(v8 + 39) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
          }
          else
          {
            uint64_t v9 = "";
          }
          uint64_t v18 = *(void *)(a1 + 24);
          uint64_t v17 = a1 + 24;
          uint64_t v16 = v18;
          if (*(char *)(v17 + 23) >= 0) {
            uint64_t v16 = v17;
          }
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v16;
          _os_log_error_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_ERROR, "Unable to fetch attribute named \"%s\": %s", buf, 0x16u);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "Attribute does not hold a value");
      realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)v22);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
      uint64_t v13 = *(void *)&buf[16];
      v24[0] = v26;
      *(void *)((char *)v24 + 7) = *(void *)((char *)&v26 + 7);
      char v14 = HIBYTE(v26);
      long long v26 = 0uLL;
      *(void *)&uint8_t buf[16] = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v24 + 7);
      uint64_t v15 = v24[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v13;
      *(void *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 47) = v14;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v20);
    if (*((void *)&__p + 1)) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&__p + 1));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Prim is invalid");
    realityio::DetailedError::DetailedError(buf, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, &__p);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)buf;
    uint64_t v10 = *(void *)&buf[16];
    v22[0] = (void *)v26;
    *(void **)((char *)v22 + 7) = *(void **)((char *)&v26 + 7);
    char v11 = HIBYTE(v26);
    long long v26 = 0uLL;
    *(void *)&uint8_t buf[16] = 0;
    *(unsigned char *)a1 = 0;
    *(void **)(a1 + 39) = *(void **)((char *)v22 + 7);
    long long v12 = v22[0];
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v10;
    *(void *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 47) = v11;
    if ((v20[7] & 0x80000000) != 0) {
      operator delete((void *)__p);
    }
  }
}

void sub_23F7534BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result(v2);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::~UsdAttribute((pxrInternal__aapl__pxrReserved__::UsdAttribute *)va);
  _Unwind_Resume(a1);
}

uint64_t std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  qword_268C40D10 = 0;
  qword_268C40D08 = 0;
  if (a2)
  {
    uint64_t v2 = (uint64_t *)result;
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(result + 32 * a2);
    uint64_t v5 = &qword_268C40D08;
    while (v5 != &qword_268C40D08)
    {
      if (v3)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v3;
          uint64_t v3 = *(void *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        uint64_t v7 = &qword_268C40D08;
        do
        {
          uint64_t v6 = (uint64_t *)v7[2];
          BOOL v8 = *v6 == (void)v7;
          uint64_t v7 = v6;
        }
        while (v8);
      }
      uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D10, v6 + 4, v2);
      uint64_t v3 = qword_268C40D08;
      if (result) {
        goto LABEL_11;
      }
      if (qword_268C40D08)
      {
        uint64_t v9 = &qword_268C40D08;
        while (1)
        {
          while (1)
          {
            uint64_t v6 = (uint64_t *)v3;
            uint64_t v10 = (uint64_t *)(v3 + 32);
            if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D10, v2, (uint64_t *)(v3 + 32)))break; {
            uint64_t v3 = *v6;
            }
            uint64_t v9 = v6;
            if (!*v6) {
              goto LABEL_24;
            }
          }
          uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D10, v10, v2);
          if (!result) {
            break;
          }
          uint64_t v9 = v6 + 1;
          uint64_t v3 = v6[1];
          if (!v3) {
            goto LABEL_24;
          }
        }
LABEL_13:
        if (*v9) {
          goto LABEL_30;
        }
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v9 = &qword_268C40D08;
      uint64_t v6 = &qword_268C40D08;
LABEL_24:
      char v11 = (uint64_t *)operator new(0x40uLL);
      long long v12 = v11;
      uint64_t v13 = *v2;
      void v11[4] = *v2;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v11[4] &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v11 + 5, v2 + 1);
      *long long v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v6;
      uint64_t *v9 = (uint64_t)v12;
      {
        long long v12 = (uint64_t *)*v9;
      }
      uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_268C40D08, v12);
      ++qword_268C40D10;
LABEL_30:
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
      uint64_t v3 = qword_268C40D08;
    }
    uint64_t v6 = &qword_268C40D08;
LABEL_11:
    if (v3)
    {
      uint64_t v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_23F7536D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[4];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v1);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(*(void **)(v2 + 3336));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)a1[6]);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void *std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,realityio::Inputs *,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void anonymous namespace'::usdToRe_HashTableEntries<unsigned char>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](v34, "keys");
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, a1);
  if (v38[0])
  {
    long long v35 = v39[0];
    long long v36 = v39[1];
    uint64_t v7 = v40;
  }
  else
  {
    long long v35 = v57;
    long long v36 = v58;
    uint64_t v7 = v59;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    BOOL v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      BOOL v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v57);
  if ((v34[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v57, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57, a1);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v38[0])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v9 = a3[1];
    long long v55 = *a3;
    long long v56 = v9;
    RETypeInfoGetDictionaryValueType();
    if (*(void *)&v39[0])
    {
      long long v10 = a3[1];
      long long v53 = *a3;
      long long v54 = v10;
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      REDictionaryAddEntry();
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
      operator new();
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v35);
    *((void *)&v57 + 1) = 0;
    *(void *)&long long v58 = 0;
    *(void *)&long long v57 = (char *)&v57 + 8;
    if ((void)v35)
    {
      unint64_t v11 = 0;
      do
      {
        long long v12 = a3[1];
        long long v51 = *a3;
        long long v52 = v12;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        unint64_t v13 = v37 + v11;
        char v14 = (uint64_t *)*((void *)&v57 + 1);
        uint64_t v15 = (uint64_t **)&v57 + 1;
        uint64_t v16 = (uint64_t **)&v57 + 1;
        if (*((void *)&v57 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v17 <= v13) {
                break;
              }
              char v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_24;
              }
            }
            if (v17 >= v13) {
              break;
            }
            char v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_24;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_24:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v13;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          int v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*(void *)v57)
          {
            *(void *)&long long v57 = *(void *)v57;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v57 + 1), v19);
          *(void *)&long long v58 = v58 + 1;
        }
        v18[5] = v11++;
      }
      while (v11 < (unint64_t)v35);
    }
    long long v20 = a3[1];
    long long v49 = *a3;
    long long v50 = v20;
    REDictionaryIteratorCreate();
    while (1)
    {
      long long v21 = a3[1];
      long long v47 = *a3;
      long long v48 = v21;
      if (!REDictionaryIteratorMoveNext()) {
        break;
      }
      long long v22 = a3[1];
      long long v45 = *a3;
      long long v46 = v22;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      uint64_t v24 = (void *)*((void *)&v57 + 1);
      if (*((void *)&v57 + 1))
      {
        char v25 = (long long *)((char *)&v57 + 8);
        do
        {
          long long v26 = v24;
          uint64_t v27 = v25;
          unint64_t v28 = v24[4];
          long long v29 = v24 + 1;
          if (v28 >= (unint64_t)CurrentKey)
          {
            long long v29 = v26;
            char v25 = v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 != (long long *)((char *)&v57 + 8))
        {
          long long v30 = v28 >= (unint64_t)CurrentKey ? v26 : v27;
          if ((unint64_t)CurrentKey >= v30[4])
          {
            long long v32 = a3[1];
            long long v43 = *a3;
            long long v44 = v32;
            REDictionaryIteratorGetCurrentValue();
            operator new();
          }
        }
      }
      uint64_t v31 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", v34, 2u);
      }
    }
    long long v33 = a3[1];
    long long v41 = *a3;
    long long v42 = v33;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v57 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F753D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_HashTableEntries<unsigned int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](v34, "keys");
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, a1);
  if (v38[0])
  {
    long long v35 = v39[0];
    long long v36 = v39[1];
    uint64_t v7 = v40;
  }
  else
  {
    long long v35 = v57;
    long long v36 = v58;
    uint64_t v7 = v59;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      uint64_t v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v57);
  if ((v34[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v57, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57, a1);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v38[0])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v9 = a3[1];
    long long v55 = *a3;
    long long v56 = v9;
    RETypeInfoGetDictionaryValueType();
    if (*(void *)&v39[0])
    {
      long long v10 = a3[1];
      long long v53 = *a3;
      long long v54 = v10;
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      REDictionaryAddEntry();
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
      operator new();
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v35);
    *((void *)&v57 + 1) = 0;
    *(void *)&long long v58 = 0;
    *(void *)&long long v57 = (char *)&v57 + 8;
    if ((void)v35)
    {
      unint64_t v11 = 0;
      do
      {
        long long v12 = a3[1];
        long long v51 = *a3;
        long long v52 = v12;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        unint64_t v13 = v37 + 4 * v11;
        char v14 = (uint64_t *)*((void *)&v57 + 1);
        uint64_t v15 = (uint64_t **)&v57 + 1;
        uint64_t v16 = (uint64_t **)&v57 + 1;
        if (*((void *)&v57 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v17 <= v13) {
                break;
              }
              char v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_24;
              }
            }
            if (v17 >= v13) {
              break;
            }
            char v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_24;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_24:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v13;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          int v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*(void *)v57)
          {
            *(void *)&long long v57 = *(void *)v57;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v57 + 1), v19);
          *(void *)&long long v58 = v58 + 1;
        }
        v18[5] = v11++;
      }
      while (v11 < (unint64_t)v35);
    }
    long long v20 = a3[1];
    long long v49 = *a3;
    long long v50 = v20;
    REDictionaryIteratorCreate();
    while (1)
    {
      long long v21 = a3[1];
      long long v47 = *a3;
      long long v48 = v21;
      if (!REDictionaryIteratorMoveNext()) {
        break;
      }
      long long v22 = a3[1];
      long long v45 = *a3;
      long long v46 = v22;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      uint64_t v24 = (void *)*((void *)&v57 + 1);
      if (*((void *)&v57 + 1))
      {
        char v25 = (long long *)((char *)&v57 + 8);
        do
        {
          long long v26 = v24;
          uint64_t v27 = v25;
          unint64_t v28 = v24[4];
          long long v29 = v24 + 1;
          if (v28 >= (unint64_t)CurrentKey)
          {
            long long v29 = v26;
            char v25 = v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 != (long long *)((char *)&v57 + 8))
        {
          long long v30 = v28 >= (unint64_t)CurrentKey ? v26 : v27;
          if ((unint64_t)CurrentKey >= v30[4])
          {
            long long v32 = a3[1];
            long long v43 = *a3;
            long long v44 = v32;
            REDictionaryIteratorGetCurrentValue();
            operator new();
          }
        }
      }
      uint64_t v31 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", v34, 2u);
      }
    }
    long long v33 = a3[1];
    long long v41 = *a3;
    long long v42 = v33;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v57 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F754380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_HashTableEntries<unsigned long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](v34, "keys");
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, a1);
  if (v38[0])
  {
    long long v35 = v39[0];
    long long v36 = v39[1];
    uint64_t v7 = v40;
  }
  else
  {
    long long v35 = v57;
    long long v36 = v58;
    uint64_t v7 = v59;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      uint64_t v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v57);
  if ((v34[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v57, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57, a1);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v38[0])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v9 = a3[1];
    long long v55 = *a3;
    long long v56 = v9;
    RETypeInfoGetDictionaryValueType();
    if (*(void *)&v39[0])
    {
      long long v10 = a3[1];
      long long v53 = *a3;
      long long v54 = v10;
      pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      REDictionaryAddEntry();
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
      operator new();
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v35);
    *((void *)&v57 + 1) = 0;
    *(void *)&long long v58 = 0;
    *(void *)&long long v57 = (char *)&v57 + 8;
    if ((void)v35)
    {
      unint64_t v11 = 0;
      do
      {
        long long v12 = a3[1];
        long long v51 = *a3;
        long long v52 = v12;
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        unint64_t v13 = v37 + 8 * v11;
        char v14 = (uint64_t *)*((void *)&v57 + 1);
        uint64_t v15 = (uint64_t **)&v57 + 1;
        uint64_t v16 = (uint64_t **)&v57 + 1;
        if (*((void *)&v57 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v17 <= v13) {
                break;
              }
              char v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_24;
              }
            }
            if (v17 >= v13) {
              break;
            }
            char v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_24;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_24:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v13;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          int v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*(void *)v57)
          {
            *(void *)&long long v57 = *(void *)v57;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v57 + 1), v19);
          *(void *)&long long v58 = v58 + 1;
        }
        v18[5] = v11++;
      }
      while (v11 < (unint64_t)v35);
    }
    long long v20 = a3[1];
    long long v49 = *a3;
    long long v50 = v20;
    REDictionaryIteratorCreate();
    while (1)
    {
      long long v21 = a3[1];
      long long v47 = *a3;
      long long v48 = v21;
      if (!REDictionaryIteratorMoveNext()) {
        break;
      }
      long long v22 = a3[1];
      long long v45 = *a3;
      long long v46 = v22;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      uint64_t v24 = (void *)*((void *)&v57 + 1);
      if (*((void *)&v57 + 1))
      {
        char v25 = (long long *)((char *)&v57 + 8);
        do
        {
          long long v26 = v24;
          uint64_t v27 = v25;
          unint64_t v28 = v24[4];
          long long v29 = v24 + 1;
          if (v28 >= (unint64_t)CurrentKey)
          {
            long long v29 = v26;
            char v25 = v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 != (long long *)((char *)&v57 + 8))
        {
          long long v30 = v28 >= (unint64_t)CurrentKey ? v26 : v27;
          if ((unint64_t)CurrentKey >= v30[4])
          {
            long long v32 = a3[1];
            long long v43 = *a3;
            long long v44 = v32;
            REDictionaryIteratorGetCurrentValue();
            operator new();
          }
        }
      }
      uint64_t v31 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", v34, 2u);
      }
    }
    long long v33 = a3[1];
    long long v41 = *a3;
    long long v42 = v33;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v57 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F7549EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_HashTableEntries<int>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](v34, "keys");
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, a1);
  if (v38[0])
  {
    long long v35 = v39[0];
    long long v36 = v39[1];
    uint64_t v7 = v40;
  }
  else
  {
    long long v35 = v57;
    long long v36 = v58;
    uint64_t v7 = v59;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      uint64_t v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<int>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v57);
  if ((v34[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v57, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57, a1);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v38[0])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v9 = a3[1];
    long long v55 = *a3;
    long long v56 = v9;
    RETypeInfoGetDictionaryValueType();
    if (*(void *)&v39[0])
    {
      long long v10 = a3[1];
      long long v53 = *a3;
      long long v54 = v10;
      pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      REDictionaryAddEntry();
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
      operator new();
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v35);
    *((void *)&v57 + 1) = 0;
    *(void *)&long long v58 = 0;
    *(void *)&long long v57 = (char *)&v57 + 8;
    if ((void)v35)
    {
      unint64_t v11 = 0;
      do
      {
        long long v12 = a3[1];
        long long v51 = *a3;
        long long v52 = v12;
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        unint64_t v13 = v37 + 4 * v11;
        char v14 = (uint64_t *)*((void *)&v57 + 1);
        uint64_t v15 = (uint64_t **)&v57 + 1;
        uint64_t v16 = (uint64_t **)&v57 + 1;
        if (*((void *)&v57 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v17 <= v13) {
                break;
              }
              char v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_24;
              }
            }
            if (v17 >= v13) {
              break;
            }
            char v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_24;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_24:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v13;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          int v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*(void *)v57)
          {
            *(void *)&long long v57 = *(void *)v57;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v57 + 1), v19);
          *(void *)&long long v58 = v58 + 1;
        }
        v18[5] = v11++;
      }
      while (v11 < (unint64_t)v35);
    }
    long long v20 = a3[1];
    long long v49 = *a3;
    long long v50 = v20;
    REDictionaryIteratorCreate();
    while (1)
    {
      long long v21 = a3[1];
      long long v47 = *a3;
      long long v48 = v21;
      if (!REDictionaryIteratorMoveNext()) {
        break;
      }
      long long v22 = a3[1];
      long long v45 = *a3;
      long long v46 = v22;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      uint64_t v24 = (void *)*((void *)&v57 + 1);
      if (*((void *)&v57 + 1))
      {
        char v25 = (long long *)((char *)&v57 + 8);
        do
        {
          long long v26 = v24;
          uint64_t v27 = v25;
          unint64_t v28 = v24[4];
          long long v29 = v24 + 1;
          if (v28 >= (unint64_t)CurrentKey)
          {
            long long v29 = v26;
            char v25 = v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 != (long long *)((char *)&v57 + 8))
        {
          long long v30 = v28 >= (unint64_t)CurrentKey ? v26 : v27;
          if ((unint64_t)CurrentKey >= v30[4])
          {
            long long v32 = a3[1];
            long long v43 = *a3;
            long long v44 = v32;
            REDictionaryIteratorGetCurrentValue();
            operator new();
          }
        }
      }
      uint64_t v31 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", v34, 2u);
      }
    }
    long long v33 = a3[1];
    long long v41 = *a3;
    long long v42 = v33;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v57 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F755058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_HashTableEntries<long long>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](v34, "keys");
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, a1);
  if (v38[0])
  {
    long long v35 = v39[0];
    long long v36 = v39[1];
    uint64_t v7 = v40;
  }
  else
  {
    long long v35 = v57;
    long long v36 = v58;
    uint64_t v7 = v59;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      uint64_t v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v57);
  if ((v34[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v57, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57, a1);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v38[0])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v9 = a3[1];
    long long v55 = *a3;
    long long v56 = v9;
    RETypeInfoGetDictionaryValueType();
    if (*(void *)&v39[0])
    {
      long long v10 = a3[1];
      long long v53 = *a3;
      long long v54 = v10;
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      REDictionaryAddEntry();
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
      operator new();
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v35);
    *((void *)&v57 + 1) = 0;
    *(void *)&long long v58 = 0;
    *(void *)&long long v57 = (char *)&v57 + 8;
    if ((void)v35)
    {
      unint64_t v11 = 0;
      do
      {
        long long v12 = a3[1];
        long long v51 = *a3;
        long long v52 = v12;
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        unint64_t v13 = v37 + 8 * v11;
        char v14 = (uint64_t *)*((void *)&v57 + 1);
        uint64_t v15 = (uint64_t **)&v57 + 1;
        uint64_t v16 = (uint64_t **)&v57 + 1;
        if (*((void *)&v57 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v17 <= v13) {
                break;
              }
              char v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_24;
              }
            }
            if (v17 >= v13) {
              break;
            }
            char v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_24;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_24:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v13;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          int v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*(void *)v57)
          {
            *(void *)&long long v57 = *(void *)v57;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v57 + 1), v19);
          *(void *)&long long v58 = v58 + 1;
        }
        v18[5] = v11++;
      }
      while (v11 < (unint64_t)v35);
    }
    long long v20 = a3[1];
    long long v49 = *a3;
    long long v50 = v20;
    REDictionaryIteratorCreate();
    while (1)
    {
      long long v21 = a3[1];
      long long v47 = *a3;
      long long v48 = v21;
      if (!REDictionaryIteratorMoveNext()) {
        break;
      }
      long long v22 = a3[1];
      long long v45 = *a3;
      long long v46 = v22;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      uint64_t v24 = (void *)*((void *)&v57 + 1);
      if (*((void *)&v57 + 1))
      {
        char v25 = (long long *)((char *)&v57 + 8);
        do
        {
          long long v26 = v24;
          uint64_t v27 = v25;
          unint64_t v28 = v24[4];
          long long v29 = v24 + 1;
          if (v28 >= (unint64_t)CurrentKey)
          {
            long long v29 = v26;
            char v25 = v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 != (long long *)((char *)&v57 + 8))
        {
          long long v30 = v28 >= (unint64_t)CurrentKey ? v26 : v27;
          if ((unint64_t)CurrentKey >= v30[4])
          {
            long long v32 = a3[1];
            long long v43 = *a3;
            long long v44 = v32;
            REDictionaryIteratorGetCurrentValue();
            operator new();
          }
        }
      }
      uint64_t v31 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", v34, 2u);
      }
    }
    long long v33 = a3[1];
    long long v41 = *a3;
    long long v42 = v33;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v57 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F7556C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_HashTableEntries<float>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](v34, "keys");
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, a1);
  if (v38[0])
  {
    long long v35 = v39[0];
    long long v36 = v39[1];
    uint64_t v7 = v40;
  }
  else
  {
    long long v35 = v57;
    long long v36 = v58;
    uint64_t v7 = v59;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      uint64_t v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<float>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v57);
  if ((v34[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v57, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57, a1);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v38[0])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v9 = a3[1];
    long long v55 = *a3;
    long long v56 = v9;
    RETypeInfoGetDictionaryValueType();
    if (*(void *)&v39[0])
    {
      long long v10 = a3[1];
      long long v53 = *a3;
      long long v54 = v10;
      pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      REDictionaryAddEntry();
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
      operator new();
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v35);
    *((void *)&v57 + 1) = 0;
    *(void *)&long long v58 = 0;
    *(void *)&long long v57 = (char *)&v57 + 8;
    if ((void)v35)
    {
      unint64_t v11 = 0;
      do
      {
        long long v12 = a3[1];
        long long v51 = *a3;
        long long v52 = v12;
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        unint64_t v13 = v37 + 4 * v11;
        char v14 = (uint64_t *)*((void *)&v57 + 1);
        uint64_t v15 = (uint64_t **)&v57 + 1;
        uint64_t v16 = (uint64_t **)&v57 + 1;
        if (*((void *)&v57 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v17 <= v13) {
                break;
              }
              char v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_24;
              }
            }
            if (v17 >= v13) {
              break;
            }
            char v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_24;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_24:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v13;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          int v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*(void *)v57)
          {
            *(void *)&long long v57 = *(void *)v57;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v57 + 1), v19);
          *(void *)&long long v58 = v58 + 1;
        }
        v18[5] = v11++;
      }
      while (v11 < (unint64_t)v35);
    }
    long long v20 = a3[1];
    long long v49 = *a3;
    long long v50 = v20;
    REDictionaryIteratorCreate();
    while (1)
    {
      long long v21 = a3[1];
      long long v47 = *a3;
      long long v48 = v21;
      if (!REDictionaryIteratorMoveNext()) {
        break;
      }
      long long v22 = a3[1];
      long long v45 = *a3;
      long long v46 = v22;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      uint64_t v24 = (void *)*((void *)&v57 + 1);
      if (*((void *)&v57 + 1))
      {
        char v25 = (long long *)((char *)&v57 + 8);
        do
        {
          long long v26 = v24;
          uint64_t v27 = v25;
          unint64_t v28 = v24[4];
          long long v29 = v24 + 1;
          if (v28 >= (unint64_t)CurrentKey)
          {
            long long v29 = v26;
            char v25 = v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 != (long long *)((char *)&v57 + 8))
        {
          long long v30 = v28 >= (unint64_t)CurrentKey ? v26 : v27;
          if ((unint64_t)CurrentKey >= v30[4])
          {
            long long v32 = a3[1];
            long long v43 = *a3;
            long long v44 = v32;
            REDictionaryIteratorGetCurrentValue();
            operator new();
          }
        }
      }
      uint64_t v31 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", v34, 2u);
      }
    }
    long long v33 = a3[1];
    long long v41 = *a3;
    long long v42 = v33;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v57 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F755D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::usdToRe_HashTableEntries<double>(pxrInternal__aapl__pxrReserved__::UsdObject *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](v34, "keys");
  uint64_t v59 = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)v34, a1);
  if (v38[0])
  {
    long long v35 = v39[0];
    long long v36 = v39[1];
    uint64_t v7 = v40;
  }
  else
  {
    long long v35 = v57;
    long long v36 = v58;
    uint64_t v7 = v59;
  }
  uint64_t v37 = v7;
  if (v7)
  {
    uint64_t v8 = (atomic_ullong *)(v7 - 16);
    if (*((void *)&v36 + 1)) {
      uint64_t v8 = (atomic_ullong *)*((void *)&v36 + 1);
    }
    atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<double>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v57);
  if ((v34[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](&v57, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)v38, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v57, a1);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v38[0])
  {
    long long v57 = 0u;
    long long v58 = 0u;
    long long v9 = a3[1];
    long long v55 = *a3;
    long long v56 = v9;
    RETypeInfoGetDictionaryValueType();
    if (*(void *)&v39[0])
    {
      long long v10 = a3[1];
      long long v53 = *a3;
      long long v54 = v10;
      pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
      REDictionaryAddEntry();
      pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
      operator new();
    }
  }
  else
  {
    std::vector<std::shared_ptr<unsigned char>>::resize(a4, v35);
    *((void *)&v57 + 1) = 0;
    *(void *)&long long v58 = 0;
    *(void *)&long long v57 = (char *)&v57 + 8;
    if ((void)v35)
    {
      unint64_t v11 = 0;
      do
      {
        long long v12 = a3[1];
        long long v51 = *a3;
        long long v52 = v12;
        pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        REDictionaryAddEntry();
        pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
        unint64_t v13 = v37 + 8 * v11;
        char v14 = (uint64_t *)*((void *)&v57 + 1);
        uint64_t v15 = (uint64_t **)&v57 + 1;
        uint64_t v16 = (uint64_t **)&v57 + 1;
        if (*((void *)&v57 + 1))
        {
          while (1)
          {
            while (1)
            {
              uint64_t v16 = (uint64_t **)v14;
              unint64_t v17 = v14[4];
              if (v17 <= v13) {
                break;
              }
              char v14 = *v16;
              uint64_t v15 = v16;
              if (!*v16) {
                goto LABEL_24;
              }
            }
            if (v17 >= v13) {
              break;
            }
            char v14 = v16[1];
            if (!v14)
            {
              uint64_t v15 = v16 + 1;
              goto LABEL_24;
            }
          }
          uint64_t v18 = (uint64_t *)v16;
        }
        else
        {
LABEL_24:
          uint64_t v18 = (uint64_t *)operator new(0x30uLL);
          v18[4] = v13;
          v18[5] = 0;
          *uint64_t v18 = 0;
          v18[1] = 0;
          int v18[2] = (uint64_t)v16;
          *uint64_t v15 = v18;
          uint64_t v19 = v18;
          if (*(void *)v57)
          {
            *(void *)&long long v57 = *(void *)v57;
            uint64_t v19 = *v15;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v57 + 1), v19);
          *(void *)&long long v58 = v58 + 1;
        }
        v18[5] = v11++;
      }
      while (v11 < (unint64_t)v35);
    }
    long long v20 = a3[1];
    long long v49 = *a3;
    long long v50 = v20;
    REDictionaryIteratorCreate();
    while (1)
    {
      long long v21 = a3[1];
      long long v47 = *a3;
      long long v48 = v21;
      if (!REDictionaryIteratorMoveNext()) {
        break;
      }
      long long v22 = a3[1];
      long long v45 = *a3;
      long long v46 = v22;
      CurrentKey = (realityio *)REDictionaryIteratorGetCurrentKey();
      uint64_t v24 = (void *)*((void *)&v57 + 1);
      if (*((void *)&v57 + 1))
      {
        char v25 = (long long *)((char *)&v57 + 8);
        do
        {
          long long v26 = v24;
          uint64_t v27 = v25;
          unint64_t v28 = v24[4];
          long long v29 = v24 + 1;
          if (v28 >= (unint64_t)CurrentKey)
          {
            long long v29 = v26;
            char v25 = v26;
          }
          uint64_t v24 = (void *)*v29;
        }
        while (v24);
        if (v25 != (long long *)((char *)&v57 + 8))
        {
          long long v30 = v28 >= (unint64_t)CurrentKey ? v26 : v27;
          if ((unint64_t)CurrentKey >= v30[4])
          {
            long long v32 = a3[1];
            long long v43 = *a3;
            long long v44 = v32;
            REDictionaryIteratorGetCurrentValue();
            operator new();
          }
        }
      }
      uint64_t v31 = *(NSObject **)(realityio::logObjects(CurrentKey) + 24);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_23F4EA000, v31, OS_LOG_TYPE_DEFAULT, "Expected to find key in key cache", v34, 2u);
      }
    }
    long long v33 = a3[1];
    long long v41 = *a3;
    long long v42 = v33;
    REDictionaryIteratorDestroy();
    std::__tree<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,realityio::Graph<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath>::NodeStorage *>>>::destroy(*((void **)&v57 + 1));
  }
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)v38);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)&v35);
}

void sub_23F75639C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)va1);
  pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DecRef((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::usdToRe_HashTableStringEntries(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  MEMORY[0x2455CF810](buf, "keys");
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(&v72, a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)buf);
  if ((buf[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)buf & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)std::string buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v72);
  uint64_t v6 = (unint64_t *)MEMORY[0x263F90560];
  if (!atomic_load(MEMORY[0x263F90560])) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
  {
    *(void *)uint64_t v108 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v72);
    if (!atomic_load(v6)) {
      pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==();
    if ((v9 & 1) == 0)
    {
      long long v54 = *(id *)(realityio::logObjects((realityio *)v9) + 24);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a1, v108);
        uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v108);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v72, &v113);
        uint64_t v56 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v113);
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = Text;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v56;
        _os_log_impl(&dword_23F4EA000, v54, OS_LOG_TYPE_DEFAULT, "Unsupported keys format for (\"%s\") at (\"%s\")", buf, 0x16u);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v113);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v108);
      }

      goto LABEL_148;
    }
  }
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  *(void *)std::string buf = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v72);
  if (!atomic_load(v6)) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)buf, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v72);
    *(_OWORD *)uint64_t v108 = *(_OWORD *)&buf[8];
    *(_OWORD *)&v108[16] = v111;
    *(void *)&v108[32] = v112;
    if (v112)
    {
      unint64_t v11 = (atomic_ullong *)(v112 - 16);
      if (*(void *)&v108[24]) {
        unint64_t v11 = *(atomic_ullong **)&v108[24];
      }
      atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>,realityio::DetailedError>::~Result((uint64_t)buf);
    if (*(void *)v108)
    {
      unint64_t v12 = 0;
      do
      {
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v108);
        if ((*(void *)(*(void *)&v108[32] + 8 * v12) & 0xFFFFFFFFFFFFFFF8) != 0) {
          uint64_t EmptyString = (long long *)((*(void *)(*(void *)&v108[32] + 8 * v12) & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          uint64_t EmptyString = (long long *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
        }
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::emplace_back<std::string const&>((uint64_t)&v69, EmptyString);
        ++v12;
      }
      while (v12 < *(void *)v108);
    }
    pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(v108);
  }
  else
  {
    realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v72, (uint64_t)buf);
    if (buf[0])
    {
      realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>((pxrInternal__aapl__pxrReserved__::UsdObject *)&v72, (uint64_t)v108);
      long long v113 = *(_OWORD *)&v108[8];
      long long v114 = *(_OWORD *)&v108[24];
      uint64_t v115 = v109;
      if (v109)
      {
        uint64_t v15 = (atomic_ullong *)(v109 - 16);
        if (*((void *)&v114 + 1)) {
          uint64_t v15 = (atomic_ullong *)*((void *)&v114 + 1);
        }
        atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v69);
      long long v69 = v113;
      long long v70 = v114;
      long long v113 = 0u;
      long long v114 = 0u;
      uint64_t v71 = v115;
      uint64_t v115 = 0;
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v113);
      realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)v108);
    }
    realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<std::string>,realityio::DetailedError>::~Result((uint64_t)buf);
  }
  memset(v108, 0, 32);
  long long v16 = a3[1];
  long long v106 = *a3;
  long long v107 = v16;
  RETypeInfoGetDictionaryKeyType();
  long long v104 = *(_OWORD *)v108;
  long long v105 = *(_OWORD *)&v108[16];
  uint64_t Name = (char *)RETypeInfoGetName();
  std::string::basic_string[abi:ne180100]<0>(&v67, Name);
  MEMORY[0x2455CF810](&v113, "counts");
  realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>((uint64_t)buf, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v113, a1);
  if ((v113 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v113 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (buf[0])
  {
    long long v113 = 0u;
    long long v114 = 0u;
    long long v18 = a3[1];
    long long v102 = *a3;
    long long v103 = v18;
    DictionaryValueCFStringRef Type = (realityio *)RETypeInfoGetDictionaryValueType();
    if (!*(void *)&buf[8]) {
      goto LABEL_145;
    }
    if (v68 < 0)
    {
      if (*((void *)&v67 + 1) != 8)
      {
        if (*((void *)&v67 + 1) != 13) {
          goto LABEL_129;
        }
        if (*(void *)v67 != 0x5363696D616E7944 || *(void *)(v67 + 5) != 0x676E697274536369) {
          goto LABEL_129;
        }
LABEL_49:
        long long v100 = *(_OWORD *)v108;
        long long v101 = *(_OWORD *)&v108[16];
        RETypeInfoCreateInstance();
        pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
        REDynamicStringSet();
        goto LABEL_54;
      }
      long long v22 = (long long *)v67;
    }
    else
    {
      if (v68 != 8)
      {
        if (v68 != 13) {
          goto LABEL_129;
        }
        if ((void)v67 != 0x5363696D616E7944 || *(void *)((char *)&v67 + 5) != 0x676E697274536369) {
          goto LABEL_129;
        }
        goto LABEL_49;
      }
      long long v22 = &v67;
    }
    if (*(void *)v22 != 0x4449676E69727453)
    {
LABEL_129:
      long long v57 = *(id *)(realityio::logObjects(DictionaryValueType) + 24);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        if (v68 >= 0) {
          long long v58 = &v67;
        }
        else {
          long long v58 = (long long *)v67;
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v72, &v76);
        uint64_t v59 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76);
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v58;
        WORD2(__p[1]) = 2080;
        *(void **)((char *)&__p[1] + 6) = v59;
        _os_log_impl(&dword_23F4EA000, v57, OS_LOG_TYPE_DEFAULT, "Unsupported string format for (\"%s\") at (\"%s\")", (uint8_t *)__p, 0x16u);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
      }

      goto LABEL_145;
    }
    long long v98 = *(_OWORD *)v108;
    long long v99 = *(_OWORD *)&v108[16];
    RETypeInfoCreateInstance();
    pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
    REStringIDSet();
LABEL_54:
    long long v23 = a3[1];
    long long v96 = *a3;
    long long v97 = v23;
    REDictionaryAddEntry();
    pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&buf[8]);
    operator new();
  }
  std::vector<std::shared_ptr<unsigned char>>::resize(a4, v69);
  *((void *)&v113 + 1) = 0;
  *(void *)&long long v114 = 0;
  *(void *)&long long v113 = (char *)&v113 + 8;
  if ((void)v69)
  {
    uint64_t v24 = 0;
    for (unint64_t i = 0; i < (unint64_t)v69; ++i)
    {
      pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v69);
      uint64_t v27 = (char *)(v71 + v24);
      if (*(char *)(v71 + v24 + 23) < 0) {
        uint64_t v27 = *(char **)v27;
      }
      if (v68 < 0)
      {
        if (*((void *)&v67 + 1) == 8)
        {
          long long v30 = (long long *)v67;
          goto LABEL_77;
        }
        if (*((void *)&v67 + 1) != 13
          || (*(void *)v67 == 0x5363696D616E7944 ? (BOOL v29 = *(void *)(v67 + 5) == 0x676E697274536369) : (BOOL v29 = 0),
              !v29))
        {
LABEL_137:
          uint64_t v61 = *(id *)(realityio::logObjects(v26) + 24);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            if (v68 >= 0) {
              uint64_t v62 = &v67;
            }
            else {
              uint64_t v62 = (long long *)v67;
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v72, &v76);
            uint64_t v63 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v76);
            LODWORD(__p[0]) = 136315394;
            *(void **)((char *)__p + 4) = v62;
            WORD2(__p[1]) = 2080;
            *(void **)((char *)&__p[1] + 6) = v63;
            _os_log_impl(&dword_23F4EA000, v61, OS_LOG_TYPE_DEFAULT, "Unsupported string format for (\"%s\") at (\"%s\")", (uint8_t *)__p, 0x16u);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v76);
          }

          goto LABEL_144;
        }
      }
      else
      {
        if (v68 == 8)
        {
          long long v30 = &v67;
LABEL_77:
          if (*(void *)v30 != 0x4449676E69727453) {
            goto LABEL_137;
          }
          long long v92 = *(_OWORD *)v108;
          long long v93 = *(_OWORD *)&v108[16];
          RETypeInfoCreateInstance();
          REStringIDSet();
          goto LABEL_79;
        }
        if (v68 != 13) {
          goto LABEL_137;
        }
        if ((void)v67 != 0x5363696D616E7944 || *(void *)((char *)&v67 + 5) != 0x676E697274536369) {
          goto LABEL_137;
        }
      }
      long long v94 = *(_OWORD *)v108;
      long long v95 = *(_OWORD *)&v108[16];
      RETypeInfoCreateInstance();
      REDynamicStringSet();
LABEL_79:
      std::string::basic_string[abi:ne180100]<0>(__p, v27);
      uint64_t v31 = (void **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)&v113, &v76, (const void **)__p);
      long long v32 = *v31;
      if (!*v31)
      {
        long long v32 = operator new(0x40uLL);
        uint64_t v32[2] = *(_OWORD *)__p;
        long long v33 = __p[2];
        memset(__p, 0, 24);
        *((void *)v32 + 6) = v33;
        *((void *)v32 + 7) = 0;
        uint64_t v34 = v76;
        *(void *)long long v32 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = v34;
        *uint64_t v31 = v32;
        long long v35 = (uint64_t *)v32;
        if (*(void *)v113)
        {
          *(void *)&long long v113 = *(void *)v113;
          long long v35 = (uint64_t *)*v31;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)&v113 + 1), v35);
        *(void *)&long long v114 = v114 + 1;
      }
      *((void *)v32 + 7) = i;
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      long long v36 = a3[1];
      long long v89 = *a3;
      long long v90 = v36;
      REDictionaryAddEntry();
      long long v87 = *(_OWORD *)v108;
      long long v88 = *(_OWORD *)&v108[16];
      RETypeInfoDestroyInstance();
      v24 += 24;
    }
  }
  long long v37 = a3[1];
  long long v85 = *a3;
  long long v86 = v37;
  REDictionaryIteratorCreate();
  while (1)
  {
    long long v38 = a3[1];
    long long v83 = *a3;
    long long v84 = v38;
    if (!REDictionaryIteratorMoveNext())
    {
      long long v64 = a3[1];
      long long v77 = *a3;
      long long v78 = v64;
      REDictionaryIteratorDestroy();
      goto LABEL_144;
    }
    long long v39 = a3[1];
    long long v81 = *a3;
    long long v82 = v39;
    CurrentKey = (char *)REDictionaryIteratorGetCurrentKey();
    if (v68 < 0) {
      break;
    }
    if (v68 != 8)
    {
      if (v68 != 13) {
        goto LABEL_135;
      }
      if ((void)v67 != 0x5363696D616E7944 || *(void *)((char *)&v67 + 5) != 0x676E697274536369) {
        goto LABEL_135;
      }
      goto LABEL_103;
    }
    long long v43 = &v67;
LABEL_106:
    if (*(void *)v43 != 0x4449676E69727453) {
      goto LABEL_135;
    }
    CurrentKey = (char *)REStringIDGet();
LABEL_108:
    long long v44 = CurrentKey;
    if (!CurrentKey) {
      goto LABEL_135;
    }
    long long v45 = (realityio *)std::string::basic_string[abi:ne180100]<0>(__p, CurrentKey);
    uint64_t v46 = *((void *)&v113 + 1);
    if (!*((void *)&v113 + 1)) {
      goto LABEL_119;
    }
    long long v47 = (long long *)((char *)&v113 + 8);
    do
    {
      long long v48 = v47;
      long long v49 = (const void **)(v46 + 32);
      long long v45 = (realityio *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v114, (const void **)(v46 + 32), (const void **)__p);
      long long v50 = (uint64_t *)(v46 + 8);
      if (!v45)
      {
        long long v50 = (uint64_t *)v46;
        long long v47 = (_OWORD *)v46;
      }
      uint64_t v46 = *v50;
    }
    while (*v50);
    if (v47 == (long long *)((char *)&v113 + 8)
      || (!v45 ? (long long v51 = v49) : (long long v51 = (const void **)(v48 + 2)),
          long long v45 = (realityio *)std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v114, (const void **)__p, v51),
          v45))
    {
LABEL_119:
      long long v47 = (long long *)((char *)&v113 + 8);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if ((long long *)((char *)&v113 + 8) != v47)
    {
      long long v52 = a3[1];
      long long v79 = *a3;
      long long v80 = v52;
      REDictionaryIteratorGetCurrentValue();
      operator new();
    }
    long long v53 = *(NSObject **)(realityio::logObjects(v45) + 24);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v44;
      _os_log_impl(&dword_23F4EA000, v53, OS_LOG_TYPE_DEFAULT, "Expected to find \"%s\" in key cache.", (uint8_t *)__p, 0xCu);
    }
  }
  if (*((void *)&v67 + 1) == 8)
  {
    long long v43 = (long long *)v67;
    goto LABEL_106;
  }
  if (*((void *)&v67 + 1) == 13
    && *(void *)v67 == 0x5363696D616E7944
    && *(void *)(v67 + 5) == 0x676E697274536369)
  {
LABEL_103:
    CurrentKey = (char *)REDynamicStringGetValue();
    goto LABEL_108;
  }
LABEL_135:
  uint64_t v60 = *(NSObject **)(realityio::logObjects((realityio *)CurrentKey) + 24);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_23F4EA000, v60, OS_LOG_TYPE_DEFAULT, "Unexpected non-string key in HashTable.", (uint8_t *)__p, 2u);
  }
LABEL_144:
  std::__tree<std::string>::destroy((uint64_t)&v113, *((char **)&v113 + 1));
LABEL_145:
  realityio::Result<pxrInternal__aapl__pxrReserved__::VtArray<long long>,realityio::DetailedError>::~Result((uint64_t)buf);
  if (v68 < 0) {
    operator delete((void *)v67);
  }
  pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DecRef(&v69);
LABEL_148:
  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v74);
  uint64_t result = v73;
  if (v73) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v73);
  }
  return result;
}

void sub_23F757218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::vector<std::shared_ptr<unsigned char>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  unint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      long long v20 = &v3[2 * a2];
      while (v4 != v20)
      {
        long long v21 = (std::__shared_weak_count *)*(v4 - 1);
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        v4 -= 2;
      }
      *(void *)(a1 + 8) = v20;
    }
  }
  else
  {
    unint64_t v6 = a2 - v5;
    uint64_t v7 = *(void *)(a1 + 16);
    if (a2 - v5 <= (v7 - (uint64_t)v4) >> 4)
    {
      bzero(*(void **)(a1 + 8), 16 * v6);
      *(void *)(a1 + 8) = &v4[2 * v6];
    }
    else
    {
      if (a2 >> 60) {
        std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = v7 - (void)v3;
      uint64_t v9 = v8 >> 3;
      if (v8 >> 3 <= a2) {
        uint64_t v9 = a2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t v26 = a1 + 16;
      unint64_t v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>>(v10);
      unint64_t v12 = &v11[16 * v5];
      char v14 = &v11[16 * v13];
      bzero(v12, 16 * v6);
      uint64_t v15 = &v12[16 * v6];
      unint64_t v17 = *(void **)a1;
      long long v16 = *(void **)(a1 + 8);
      if (v16 == *(void **)a1)
      {
        int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
      }
      else
      {
        do
        {
          long long v18 = *((_OWORD *)v16 - 1);
          v16 -= 2;
          *((_OWORD *)v12 - 1) = v18;
          v12 -= 16;
          *long long v16 = 0;
          v16[1] = 0;
        }
        while (v16 != v17);
        int64x2_t v19 = *(int64x2_t *)a1;
      }
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v15;
      int64x2_t v24 = v19;
      uint64_t v22 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v14;
      uint64_t v25 = v22;
      uint64_t v23 = v19.i64[0];
      std::__split_buffer<std::shared_ptr<realityio::PrimitiveDirtyPropertyDescriptor const>>::~__split_buffer((uint64_t)&v23);
    }
  }
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__func()
{
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F3498D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F3498D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::operator()(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = *(void (**)(uint64_t, long long *, uint64_t, uint64_t))(a1 + 8);
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  v5(a2, &v6, a4, a5);
  if (*((void *)&v6 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
  }
}

void sub_23F7576B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &),std::allocator<void (*)(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>,void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::target_type()
{
}

void *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  if (a3)
  {
    uint64_t v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v4, a2, a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_23F757788(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>(uint64_t result, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = (void *)(result + 8);
  if ((void *)(result + 8) != a2)
  {
    uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](result + 16, a3, a2 + 4);
    if (!result)
    {
      uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a2 + 4, a3);
      if (!result)
      {
        uint64_t v23 = a2;
        int64x2_t v24 = a2;
        unint64_t v12 = &v23;
        if (a2) {
          return result;
        }
        goto LABEL_31;
      }
      unint64_t v12 = (uint64_t **)(a2 + 1);
      unint64_t v11 = (uint64_t *)a2[1];
      if (v11)
      {
        uint64_t v13 = (void *)a2[1];
        do
        {
          char v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        unint64_t v17 = a2;
        do
        {
          char v14 = (void *)v17[2];
          BOOL v16 = *v14 == (void)v17;
          unint64_t v17 = v14;
        }
        while (!v16);
      }
      if (v14 != v8)
      {
        uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, a3, v14 + 4);
        if (!result)
        {
LABEL_29:
          uint64_t result = (uint64_t)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>(v7, &v24, a3);
          unint64_t v12 = (uint64_t **)result;
          goto LABEL_30;
        }
        unint64_t v11 = *v12;
      }
      if (v11)
      {
        int64x2_t v24 = v14;
        unint64_t v12 = (uint64_t **)v14;
      }
      else
      {
        int64x2_t v24 = a2;
      }
LABEL_30:
      if (*v12) {
        return result;
      }
      goto LABEL_31;
    }
  }
  if (*(void **)v7 != a2)
  {
    uint64_t v9 = (void *)*a2;
    if (*a2)
    {
      do
      {
        unint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v15 = a2;
      do
      {
        unint64_t v10 = (void *)v15[2];
        BOOL v16 = *v10 == (void)v15;
        uint64_t v15 = v10;
      }
      while (v16);
    }
    uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100](v7 + 16, v10 + 4, a3);
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_29;
  }
  unint64_t v10 = a2;
LABEL_16:
  if (*a2)
  {
    int64x2_t v24 = v10;
    unint64_t v12 = (uint64_t **)(v10 + 1);
    goto LABEL_30;
  }
  int64x2_t v24 = a2;
  unint64_t v12 = (uint64_t **)a2;
LABEL_31:
  long long v18 = (uint64_t *)operator new(0x48uLL);
  int64x2_t v19 = v18;
  uint64_t v20 = *a4;
  v18[4] = *a4;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__value_func[abi:ne180100]((uint64_t)(v18 + 5), (uint64_t)(a4 + 1));
  uint64_t v21 = (uint64_t)v24;
  uint64_t *v19 = 0;
  v19[1] = 0;
  _DWORD v19[2] = v21;
  *unint64_t v12 = v19;
  uint64_t v22 = **(void **)v7;
  if (v22)
  {
    *(void *)uint64_t v7 = v22;
    int64x2_t v19 = *v12;
  }
  uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v19);
  ++*(void *)(v7 + 16);
  return result;
}

void sub_23F7579B8(_Unwind_Exception *a1)
{
  uint64_t v3 = v1[4];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(a1[1]);
    std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](a1 + 5);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::pair[abi:ne180100]<true,0>(void *a1, uint64_t a2, void *a3)
{
  *a1 = a2;
  if ((a2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](a1 + 1, a3);
  return a1;
}

void *std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](void *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::__emplace_hint_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::pair<pxrInternal__aapl__pxrReserved__::TfToken const,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>> const&>((uint64_t)a1, v3, v5 + 4, v5 + 4);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          unint64_t v5 = v7;
        }
        while (!v8);
      }
      unint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_23F757BF4(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>::map[abi:ne180100](uint64_t result, uint64_t a2)
{
  qword_268C40D68 = 0;
  qword_268C40D60 = 0;
  qword_268C40D58 = (uint64_t)&qword_268C40D60;
  if (a2)
  {
    uint64_t v2 = (uint64_t *)result;
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(result + 32 * a2);
    unint64_t v5 = &qword_268C40D60;
    while (v5 != &qword_268C40D60)
    {
      if (v3)
      {
        do
        {
          uint64_t v6 = (uint64_t *)v3;
          uint64_t v3 = *(void *)(v3 + 8);
        }
        while (v3);
      }
      else
      {
        uint64_t v7 = &qword_268C40D60;
        do
        {
          uint64_t v6 = (uint64_t *)v7[2];
          BOOL v8 = *v6 == (void)v7;
          uint64_t v7 = v6;
        }
        while (v8);
      }
      uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D68, v6 + 4, v2);
      uint64_t v3 = qword_268C40D60;
      if (result) {
        goto LABEL_11;
      }
      if (qword_268C40D60)
      {
        uint64_t v9 = &qword_268C40D60;
        while (1)
        {
          while (1)
          {
            uint64_t v6 = (uint64_t *)v3;
            unint64_t v10 = (uint64_t *)(v3 + 32);
            if (!std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D68, v2, (uint64_t *)(v3 + 32)))break; {
            uint64_t v3 = *v6;
            }
            uint64_t v9 = v6;
            if (!*v6) {
              goto LABEL_24;
            }
          }
          uint64_t result = std::less<pxrInternal__aapl__pxrReserved__::TfToken>::operator()[abi:ne180100]((uint64_t)&qword_268C40D68, v10, v2);
          if (!result) {
            break;
          }
          uint64_t v9 = v6 + 1;
          uint64_t v3 = v6[1];
          if (!v3) {
            goto LABEL_24;
          }
        }
LABEL_13:
        if (*v9) {
          goto LABEL_30;
        }
        goto LABEL_24;
      }
LABEL_23:
      uint64_t v9 = &qword_268C40D60;
      uint64_t v6 = &qword_268C40D60;
LABEL_24:
      unint64_t v11 = (uint64_t *)operator new(0x40uLL);
      unint64_t v12 = v11;
      uint64_t v13 = *v2;
      void v11[4] = *v2;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v11[4] &= 0xFFFFFFFFFFFFFFF8;
      }
      std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>::map[abi:ne180100](v11 + 5, v2 + 1);
      *unint64_t v12 = 0;
      v12[1] = 0;
      v12[2] = (uint64_t)v6;
      uint64_t *v9 = (uint64_t)v12;
      if (*(void *)qword_268C40D58)
      {
        qword_268C40D58 = *(void *)qword_268C40D58;
        unint64_t v12 = (uint64_t *)*v9;
      }
      uint64_t result = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_268C40D60, v12);
      ++qword_268C40D68;
LABEL_30:
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
      unint64_t v5 = (uint64_t *)qword_268C40D58;
      uint64_t v3 = qword_268C40D60;
    }
    uint64_t v6 = &qword_268C40D60;
LABEL_11:
    if (v3)
    {
      uint64_t v9 = v6 + 1;
      goto LABEL_13;
    }
    goto LABEL_23;
  }
  return result;
}

void sub_23F757DE0(_Unwind_Exception *a1)
{
  uint64_t v4 = v1[4];
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v1);
  std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(*(void **)(v2 + 3424));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::map<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,std::function<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>>>>::destroy((void *)a1[6]);
    uint64_t v2 = a1[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a1);
  }
}

void *std::__function::__value_func<void ()(pxrInternal__aapl__pxrReserved__::UsdPrim const&,std::shared_ptr<unsigned char>,RETypeInfo const&,std::vector<std::shared_ptr<unsigned char>> &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(*a1);
    std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REComponent *>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath const,realityio::WrappedRERef<REComponent *>>,0>(uint64_t a1)
{
  realityio::WrappedRERef<REComponent *>::~WrappedRERef((void *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1);
}

void std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::ArbitraryComponentBuilderTokens_StaticTokenType>>::_TryToCreateData()
{
}

void sub_23F7581D4(_Unwind_Exception *a1)
{
  MEMORY[0x2455D2BD0](v1, 0x60C40FC86440BLL);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F349988;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F349988;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  v42[1] = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FA40;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  uint64_t v4 = realityio::EntityBuilder::kInputName((realityio::EntityBuilder *)v2);
  unint64_t v5 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v5) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(__p[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v4, (uint64_t *)(v5 + 64), (int *)__p, &v39);
  uint64_t v6 = v40;
  long long v35 = v39;
  long long v36 = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int64x2_t v24 = v6;
  realityio::InputsDescriptor::addInputDescriptor(v3, &v35);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  unint64_t v7 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  BOOL v8 = (std::__shared_weak_count *)operator new(0x68uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F332568;
  std::string::basic_string[abi:ne180100]<0>(__p, "connectedEntityHandles");
  long long v39 = &unk_26F3499F8;
  v42[0] = &v39;
  realityio::CustomInputDescriptor::CustomInputDescriptor(&v8[1].__vftable, (uint64_t)__p, (uint64_t *)(v7 + 64), (uint64_t)&v39, 1);
  std::__function::__value_func<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>> ()(pxrInternal__aapl__pxrReserved__::UsdStage const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,realityio::internal::PrimToEntityMap const&)>::~__value_func[abi:ne180100](&v39);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  long long v33 = v8 + 1;
  uint64_t v34 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, &v33);
  uint64_t v9 = (realityio::EntityBuilder *)v34;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v10 = realityio::EntityBuilder::kPrimPathOutputName(v9);
  unint64_t v11 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(__p[0]) = 0;
  std::allocate_shared[abi:ne180100]<realityio::EntityGeneratingOwningPrimInputDescriptor,std::allocator<realityio::EntityGeneratingOwningPrimInputDescriptor>,std::string const&,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::InputDescriptor::Optionality,void>(v10, (uint64_t *)(v11 + 160), (int *)__p, &v39);
  unint64_t v12 = v40;
  uint64_t v31 = v39;
  long long v32 = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "structOrDictPrimPaths");
  unint64_t v13 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v13) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  char v14 = a1;
  MEMORY[0x2455CF810](&v39, "RealityKitStruct");
  MEMORY[0x2455CF810](&v40, "RealityKitDict");
  MEMORY[0x2455CF810](&v41, "Struct");
  MEMORY[0x2455CF810](v42, "Dict");
  std::set<pxrInternal__aapl__pxrReserved__::TfToken,pxrInternal__aapl__pxrReserved__::TfTokenFastArbitraryLessThan,std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>::set[abi:ne180100]((uint64_t)&v27, (uint64_t *)&v39, 4);
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x60uLL);
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F3326A8;
  *(_OWORD *)long long __p = *(_OWORD *)v29;
  uint64_t v38 = v30;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  realityio::DescendantPrimInputDescriptor::DescendantPrimInputDescriptor(&v15[1].__vftable, (uint64_t)__p, (uint64_t *)(v13 + 8), (uint64_t)&v27, 1);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::destroy((uint64_t)&v27, v28);
  for (uint64_t i = 24; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v39 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  __p[0] = &v15[1];
  __p[1] = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::InputsDescriptor::addInputDescriptor(v3, __p);
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "arbitraryComponentAnimationFilePrimPath");
  unint64_t v18 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v18) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  MEMORY[0x2455CF810](&v27, "RealityKitAnimationFile");
  LODWORD(v26) = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>((uint64_t)&v39, (uint64_t *)(v18 + 8), (uint64_t *)&v27, (int *)&v26, v29);
  int64x2_t v19 = v29[0];
  uint64_t v20 = (std::__shared_weak_count *)v29[1];
  v29[0] = 0;
  v29[1] = 0;
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v39);
  }
  v29[0] = v19;
  v29[1] = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, v29);
  if (v29[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29[1]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v39, "arbitraryComponentClipDefinitionPrimPath");
  unint64_t v21 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v21) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  MEMORY[0x2455CF810](&v26, "RealityKitClipDefinition");
  int v25 = 1;
  std::allocate_shared[abi:ne180100]<realityio::ChildPrimInputDescriptor,std::allocator<realityio::ChildPrimInputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,pxrInternal__aapl__pxrReserved__::TfToken,realityio::InputDescriptor::Optionality,void>((uint64_t)&v39, (uint64_t *)(v21 + 8), &v26, &v25, &v27);
  uint64_t v22 = (void *)v27;
  uint64_t v23 = v28;
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v39);
  }
  long long v39 = v22;
  uint64_t v40 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::InputsDescriptor::addInputDescriptor(v3, &v39);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  *char v14 = v3;
  v14[1] = (uint64_t)v2;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_23F758818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v39 - 113) < 0) {
    operator delete(*(void **)(v38 + 24));
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_0>,std::shared_ptr<realityio::InputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

void sub_23F758CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if ((a19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&a18);
  if (a17) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(a17);
  }
  std::__hash_table<pxrInternal__aapl__pxrReserved__::SdfPath,pxrInternal__aapl__pxrReserved__::SdfPath::Hash,std::equal_to<pxrInternal__aapl__pxrReserved__::SdfPath>,std::allocator<pxrInternal__aapl__pxrReserved__::SdfPath>>::~__hash_table(v19);
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::~__func()
{
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26F349A88;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F349A88;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::operator()(uint64_t *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x68uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26F32FB20;
  *(_OWORD *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0u;
  uint64_t v3 = (uint64_t)(v2 + 24);
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_DWORD *)v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentClass");
  unint64_t v4 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  LODWORD(v11) = 0;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)(v4 + 16), (int *)&v11, &v16);
  std::string::size_type v6 = v16;
  unint64_t v5 = v17;
  std::string::size_type v16 = 0;
  uint64_t v17 = 0;
  if (v15 < 0) {
    operator delete(__p);
  }
  std::string::size_type v16 = v6;
  uint64_t v17 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, &v16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "arbitraryComponentAnimationLibrary");
  unint64_t v7 = atomic_load(&realityio::tokens::OutputIdentifiers);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfStaticData<realityio::tokens::OutputIdentifiers_StaticTokenType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<realityio::tokens::OutputIdentifiers_StaticTokenType>>::_TryToCreateData();
  }
  int v10 = 1;
  std::allocate_shared[abi:ne180100]<realityio::OutputDescriptor,std::allocator<realityio::OutputDescriptor>,std::string,pxrInternal__aapl__pxrReserved__::TfToken &,realityio::OutputDescriptor::Optionality,void>((uint64_t)&__p, (std::string::size_type *)(v7 + 24), &v10, &v11);
  uint64_t v9 = v11;
  BOOL v8 = v12;
  unint64_t v11 = 0;
  unint64_t v12 = 0;
  if (v15 < 0) {
    operator delete(__p);
  }
  long long __p = v9;
  char v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::OutputsDescriptor::addOutputDescriptor(v3, (std::string::size_type *)&__p);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *a1 = v3;
  a1[1] = (uint64_t)v2;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_23F758FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1,std::allocator<realityio::ArbitraryComponentBuilder::ArbitraryComponentBuilder(pxrInternal__aapl__pxrReserved__::SdfPath const&)::$_1>,std::shared_ptr<realityio::OutputsDescriptor const> ()(pxrInternal__aapl__pxrReserved__::SdfPath const&)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,realityio::WrappedRERef<REComponent *>>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::SdfPath,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::SdfPath&&>,std::tuple<>>(uint64_t **a1, void *a2, _DWORD **a3)
{
  std::string::size_type v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (!v5)
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x30uLL);
    unint64_t v11 = *a3;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 8, v11);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)v10 + 9, v11 + 1);
    void v10[5] = 0;
    *int v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    std::__shared_weak_count *v6 = v10;
    unint64_t v12 = (uint64_t *)**a1;
    unint64_t v13 = v10;
    if (v12)
    {
      *a1 = v12;
      unint64_t v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      BOOL v8 = (uint64_t **)v5;
      uint64_t v9 = v5 + 4;
      if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(a2, v5 + 4)) {
        break;
      }
      unint64_t v5 = *v8;
      std::string::size_type v6 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::operator<(v9, a2)) {
      break;
    }
    std::string::size_type v6 = v8 + 1;
    unint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  int v10 = *v6;
  if (!*v6) {
    goto LABEL_10;
  }
  return v10;
}

void realityio::getAttributeValue<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v42, this);
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
    if (!pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredTimeCodeRange(v4))
    {
      unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v7);
    }
    unint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v42);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetStartTimeCode(v5);
    double v41 = v8;
    if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(this) & 1) == 0)
    {
      uint64_t Name = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)Name & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Name);
      }
      std::operator+<char>();
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v15 = v48;
      v51.__r_.__value_.__r.__words[0] = v49;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
      char v16 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
      std::string::size_type v17 = v51.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v15;
      *(void *)(a1 + 32) = v17;
      *(unsigned char *)(a1 + 47) = v16;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_48;
    }
    uint64_t v54 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (pxrInternal__aapl__pxrReserved__::VtValue::IsHolding<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v53))
      {
        uint64_t v9 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        *(unsigned char *)a1 = 1;
        *(_OWORD *)(a1 + 8) = *v9;
        goto LABEL_47;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
      {
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::VtValue::Cast<pxrInternal__aapl__pxrReserved__::GfQuatf>((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
        unint64_t v21 = pxrInternal__aapl__pxrReserved__::VtValue::VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v51, (const pxrInternal__aapl__pxrReserved__::VtValue *)v20);
        if (v51.__r_.__value_.__l.__size_)
        {
          uint64_t v22 = (_OWORD *)pxrInternal__aapl__pxrReserved__::VtValue::Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(v21);
          *(unsigned char *)a1 = 1;
          *(_OWORD *)(a1 + 8) = *v22;
        }
        else
        {
          long long v36 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
          if ((*(void *)v36 & 0xFFFFFFFFFFFFFFF8) == 0) {
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
          }
          std::operator+<char>();
          realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
          *(_OWORD *)(a1 + 8) = v47;
          uint64_t v37 = v48;
          v50.__r_.__value_.__r.__words[0] = v49;
          *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
          char v38 = HIBYTE(v49);
          long long v49 = 0uLL;
          uint64_t v48 = 0;
          *(unsigned char *)a1 = 0;
          *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v50.__r_.__value_.__r.__words + 7);
          std::string::size_type v39 = v50.__r_.__value_.__r.__words[0];
          *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v37;
          *(void *)(a1 + 32) = v39;
          *(unsigned char *)(a1 + 47) = v38;
          if (SHIBYTE(v46) < 0) {
            operator delete(__p[0]);
          }
        }
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v51);
        goto LABEL_47;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Value is not of the given type");
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v33 = v48;
      v51.__r_.__value_.__r.__words[0] = v49;
      *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
      char v34 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
      std::string::size_type v35 = v51.__r_.__value_.__r.__words[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v33;
      *(void *)(a1 + 32) = v35;
      *(unsigned char *)(a1 + 47) = v34;
      if ((SHIBYTE(v46) & 0x80000000) == 0)
      {
LABEL_47:
        pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v53);
LABEL_48:
        uint64_t v40 = v43;
        if (v43)
        {
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
          }
        }
        return;
      }
      long long v32 = __p[0];
    }
    else
    {
      char v14 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
      if ((*(void *)v14 & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      std::operator+<char>();
      uint64_t v23 = std::string::append(&v50, ") at the given time: ");
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v44, v41);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v25 = &v44;
      }
      else {
        int v25 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v44.__r_.__value_.__l.__size_;
      }
      unint64_t v27 = std::string::append(&v51, (const std::string::value_type *)v25, size);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      std::string::size_type v46 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
      *(_OWORD *)(a1 + 8) = v47;
      uint64_t v29 = v48;
      v52[0] = v49;
      *(void *)((char *)v52 + 7) = *(void *)((char *)&v49 + 7);
      char v30 = HIBYTE(v49);
      long long v49 = 0uLL;
      uint64_t v48 = 0;
      *(unsigned char *)a1 = 0;
      *(void *)(a1 + 39) = *(void *)((char *)v52 + 7);
      uint64_t v31 = v52[0];
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v29;
      *(void *)(a1 + 32) = v31;
      *(unsigned char *)(a1 + 47) = v30;
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v51.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_47;
      }
      long long v32 = (void *)v50.__r_.__value_.__r.__words[0];
    }
    operator delete(v32);
    goto LABEL_47;
  }
  std::string::size_type v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName(this);
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  }
  std::operator+<char>();
  realityio::DetailedError::DetailedError(&v47, 200, (uint64_t)&realityio::FoundationErrorCategory(void)::instance, (long long *)__p);
  *(_OWORD *)(a1 + 8) = v47;
  uint64_t v11 = v48;
  v51.__r_.__value_.__r.__words[0] = v49;
  *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v49 + 7);
  char v12 = HIBYTE(v49);
  long long v49 = 0uLL;
  uint64_t v48 = 0;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 39) = *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 7);
  std::string::size_type v13 = v51.__r_.__value_.__r.__words[0];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v11;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 47) = v12;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F759748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a11)
  {
    if (atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponentClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<REComponentClass *>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349B08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::InputOutputWrapperObject<REComponentClass *>::getRawValue(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__push_back_slow_path<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(int64x2_t *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v6 = a1 + 1;
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555) {
    unint64_t v7 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  long long v24 = (uint64_t *)v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v21 = v7;
  v22.i64[0] = v7 + 96 * v2;
  v22.i64[1] = v22.i64[0];
  unint64_t v23 = v7 + 96 * v8;
  std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>((std::string *)v22.i64[0], a2);
  uint64_t v9 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  uint64_t v11 = v22.i64[0];
  uint64_t v12 = v22.i64[0];
  if (v10 == a1->i64[0])
  {
    int64x2_t v17 = vdupq_n_s64(v10);
  }
  else
  {
    do
    {
      long long v13 = *(_OWORD *)(v10 - 96);
      *(void *)(v12 - 80) = *(void *)(v10 - 80);
      *(_OWORD *)(v12 - 96) = v13;
      *(void *)(v10 - 88) = 0;
      *(void *)(v10 - 80) = 0;
      *(void *)(v10 - 96) = 0;
      long long v14 = *(_OWORD *)(v10 - 72);
      *(void *)(v12 - 56) = *(void *)(v10 - 56);
      *(_OWORD *)(v12 - 72) = v14;
      *(void *)(v10 - 64) = 0;
      *(void *)(v10 - 56) = 0;
      *(void *)(v10 - 72) = 0;
      long long v15 = *(_OWORD *)(v10 - 48);
      *(void *)(v12 - 32) = *(void *)(v10 - 32);
      *(_OWORD *)(v12 - 48) = v15;
      *(void *)(v10 - 40) = 0;
      *(void *)(v10 - 32) = 0;
      *(void *)(v10 - 48) = 0;
      long long v16 = *(_OWORD *)(v10 - 24);
      *(unsigned char *)(v12 - 8) = *(unsigned char *)(v10 - 8);
      *(_OWORD *)(v12 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v16;
      v12 -= 96;
      v10 -= 96;
    }
    while (v10 != v9);
    int64x2_t v17 = *a1;
  }
  uint64_t v18 = v11 + 96;
  a1->i64[0] = v12;
  a1->i64[1] = v11 + 96;
  int64x2_t v22 = v17;
  unint64_t v19 = a1[1].u64[0];
  a1[1].i64[0] = v23;
  unint64_t v23 = v19;
  unint64_t v21 = v17.i64[0];
  std::__split_buffer<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::~__split_buffer((uint64_t)&v21);
  return v18;
}

void sub_23F759A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::construct[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry,realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = this + 2;
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  __n128 result = *(__n128 *)((char *)a2 + 72);
  this[3].__r_.__value_.__s.__data_[16] = *((unsigned char *)a2 + 88);
  *(__n128 *)&this[3].__r_.__value_.__l.__data_ = result;
  return result;
}

void sub_23F759B00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a1);
}

uint64_t std::__split_buffer<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::destroy[abi:ne180100](i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<realityio::ArbitraryComponentBuilder::AnimationLibrary,std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary>,pxrInternal__aapl__pxrReserved__::TfToken const&,REEntity *&,std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry> &,void>(std::string **a1, uint64_t a2, std::string::size_type *a3, uint64_t *a4)
{
  uint64_t v8 = (std::string *)operator new(0x50uLL);
  uint64_t v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26F349B88;
  if ((a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)EmptyString;
    v37.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v11;
  }
  std::string::size_type v12 = *a3;
  std::string::size_type v35 = 0;
  long long v36 = 0;
  char v34 = 0;
  uint64_t v13 = *a4;
  uint64_t v14 = a4[1];
  char v38 = &v34;
  char v39 = 0;
  uint64_t v15 = v14 - v13;
  if (v14 != v13)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 5);
    if (v16 >= 0x2AAAAAAAAAAAAABLL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    int64x2_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>>(v16);
    uint64_t v18 = 0;
    char v34 = v17;
    std::string::size_type v35 = v17;
    long long v36 = &v17[96 * v19];
    do
    {
      uint64_t v20 = (std::string *)&v17[v18];
      unint64_t v21 = (long long *)(v13 + v18);
      if (*(char *)(v13 + v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v21, *((void *)v21 + 1));
      }
      else
      {
        long long v22 = *v21;
        v20->__r_.__value_.__r.__words[2] = *((void *)v21 + 2);
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v22;
      }
      unint64_t v23 = (std::string *)&v17[v18 + 24];
      long long v24 = (const std::string::value_type **)(v13 + v18 + 24);
      if (*(char *)(v13 + v18 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v23, *v24, *(void *)(v13 + v18 + 32));
      }
      else
      {
        long long v25 = *(_OWORD *)v24;
        *(void *)&v17[v18 + 40] = *(void *)(v13 + v18 + 40);
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v25;
      }
      uint64_t v26 = (std::string *)&v17[v18 + 48];
      unint64_t v27 = (const std::string::value_type **)(v13 + v18 + 48);
      if (*(char *)(v13 + v18 + 71) < 0)
      {
        std::string::__init_copy_ctor_external(v26, *v27, *(void *)(v13 + v18 + 56));
      }
      else
      {
        long long v28 = *(_OWORD *)v27;
        *(void *)&v17[v18 + 64] = *(void *)(v13 + v18 + 64);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v28;
      }
      uint64_t v29 = &v17[v18];
      long long v30 = *(_OWORD *)(v13 + v18 + 72);
      v29[88] = *(unsigned char *)(v13 + v18 + 88);
      *(_OWORD *)(v29 + 72) = v30;
      v18 += 96;
    }
    while (v13 + v18 != v14);
    uint64_t v15 = (uint64_t)&v17[v18];
    std::string::size_type v35 = &v17[v18];
  }
  uint64_t v31 = v9 + 1;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9 + 1, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    uint64_t v15 = (uint64_t)v35;
  }
  else
  {
    *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    v9[1].__r_.__value_.__r.__words[2] = v37.__r_.__value_.__r.__words[2];
  }
  std::string::size_type v32 = (std::string::size_type)v34;
  std::string::size_type v33 = (std::string::size_type)v36;
  v9[2].__r_.__value_.__r.__words[0] = v12;
  v9[2].__r_.__value_.__l.__size_ = v32;
  v9[2].__r_.__value_.__r.__words[2] = v15;
  v9[3].__r_.__value_.__r.__words[0] = v33;
  std::string::size_type v35 = 0;
  long long v36 = 0;
  char v34 = 0;
  char v38 = &v34;
  std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  *a1 = v31;
  a1[1] = v9;
}

void sub_23F759E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20)
{
  a20 = &a10;
  std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder::AnimationLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder::AnimationLibrary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349B88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::ArbitraryComponentBuilder::AnimationLibrary>::__on_zero_shared(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<realityio::ArbitraryComponentBuilder::AnimationLibrary::Entry>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0)
  {
    unint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

void std::__shared_ptr_emplace<realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>>::__on_zero_shared(uint64_t a1)
{
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = &unk_26F349C28;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t realityio::InputOutputWrapperObject<std::shared_ptr<realityio::ArbitraryComponentBuilder::AnimationLibrary>>::getRawValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_26F349C58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26F349C58;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if ((**(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) != 0) {
    unint64_t EmptyString = (**(void **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else {
    unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  }
  if (*(char *)(EmptyString + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)EmptyString, *(void *)(EmptyString + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)EmptyString;
    __str.__r_.__value_.__r.__words[2] = *(void *)(EmptyString + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v4;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  long long v7 = (char *)p_str + size;
  if (size >= 1)
  {
    uint64_t v8 = p_str;
    do
    {
      uint64_t v9 = memchr(v8, 46, size);
      if (!v9) {
        break;
      }
      if (*v9 == 46) {
        goto LABEL_19;
      }
      uint64_t v8 = (std::string *)(v9 + 1);
      int64_t size = v7 - (unsigned char *)v8;
    }
    while (v7 - (unsigned char *)v8 > 0);
  }
  uint64_t v9 = v7;
LABEL_19:
  if (v9 == v7) {
    std::string::size_type v10 = -1;
  }
  else {
    std::string::size_type v10 = v9 - (unsigned char *)p_str;
  }
  std::string::basic_string(&v28, &__str, 0, v10, (std::allocator<char> *)&v30);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40D50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_268C40D50))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_268C40D70, "RealityKit");
    __cxa_guard_release(&qword_268C40D50);
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v28.__r_.__value_.__l.__size_;
  }
  uint64_t v12 = qword_268C40D78;
  if (byte_268C40D87 >= 0) {
    uint64_t v12 = byte_268C40D87;
  }
  if (v11 != v12)
  {
    if ((*((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x80) == 0) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (byte_268C40D87 >= 0) {
    uint64_t v13 = &qword_268C40D70;
  }
  else {
    uint64_t v13 = (uint64_t *)qword_268C40D70;
  }
  if ((*((unsigned char *)&v28.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v18 = (void *)v28.__r_.__value_.__r.__words[0];
    int v19 = memcmp(v28.__r_.__value_.__l.__data_, v13, v28.__r_.__value_.__l.__size_);
    operator delete(v18);
    if (v19) {
      goto LABEL_64;
    }
  }
  else if (*((unsigned char *)&v28.__r_.__value_.__s + 23))
  {
    uint64_t v14 = 0;
    do
    {
      int v15 = v28.__r_.__value_.__s.__data_[v14];
      int v16 = *((unsigned __int8 *)v13 + v14);
    }
    while (v15 == v16 && HIBYTE(v28.__r_.__value_.__r.__words[2]) - 1 != v14++);
    if (v15 != v16) {
      goto LABEL_64;
    }
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int64_t v20 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t v20 = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v21 = &__str;
  }
  else {
    unint64_t v21 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  long long v22 = (char *)v21 + v20;
  if (v20 >= 1)
  {
    unint64_t v23 = v21;
    do
    {
      long long v24 = memchr(v23, 46, v20);
      if (!v24) {
        break;
      }
      if (*v24 == 46) {
        goto LABEL_57;
      }
      unint64_t v23 = (std::string *)(v24 + 1);
      int64_t v20 = v22 - (unsigned char *)v23;
    }
    while (v22 - (unsigned char *)v23 > 0);
  }
  long long v24 = v22;
LABEL_57:
  if (v24 == v22) {
    std::string::size_type v25 = 0;
  }
  else {
    std::string::size_type v25 = v24 - (unsigned char *)v21 + 1;
  }
  uint64_t v26 = std::string::basic_string(&v28, &__str, v25, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v30);
  uint64_t v27 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)&qword_268C40D88, (const void **)&v28.__r_.__value_.__l.__data_);
  if ((uint64_t *)v27 != &qword_268C40D90) {
    std::string::operator=(&v28, (const std::string *)(v27 + 56));
  }
  realityio::ArbitraryComponentBuilder::updateComponentOnEntityFromProtoPrim(v2, **(realityio::Inputs ***)(a1 + 24), *(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 32), **(void **)(a1 + 40), (uint64_t *)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
LABEL_63:
  }
    operator delete(v28.__r_.__value_.__l.__data_);
LABEL_64:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_23F75A3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::updateComponentOnEntity(realityio::Inputs *,pxrInternal__aapl__pxrReserved__::UsdPrim const&,REEntity *)::$_0>,void ()(void)>::target_type()
{
}

void anonymous namespace'::getSwiftToREMap(_anonymous_namespace_ *this)
{
  uint64_t v9[6] = *MEMORY[0x263EF8340];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v2);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[26],0>(v3);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v4);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(v5);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v6);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v7);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[19],0>(v8);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v9);
    std::map<std::string,std::string>::map[abi:ne180100](v2, 8);
    for (uint64_t i = 42; i != -6; i -= 6)
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&v2[i]);
  }
}

void sub_23F75A5B4(_Unwind_Exception *a1)
{
  for (uint64_t i = 336; i != -48; i -= 48)
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)(v1 + i));
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "Collision");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "Collider");
  return a1;
}

void sub_23F75A64C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[26],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "DirectionalLightShadow");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "DirectionalLightShadowMap");
  return a1;
}

void sub_23F75A6A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "Model");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "Mesh");
  return a1;
}

void sub_23F75A704(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[10],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "ModelDebugOptions");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "DebugMesh");
  return a1;
}

void sub_23F75A760(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "PhysicsBody");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "RigidBody");
  return a1;
}

void sub_23F75A7BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "PhysicsMotion");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "MotionState");
  return a1;
}

void sub_23F75A818(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[19],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "SpotLightShadow");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "SpotLightShadowMap");
  return a1;
}

void sub_23F75A874(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(void *a1)
{
  uint64_t v2 = std::string::basic_string[abi:ne180100]<0>(a1, "Synchronization");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "Network");
  return a1;
}

void sub_23F75A8D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,std::string>::map[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_268C40D98 = 0;
  qword_268C40D90 = 0;
  qword_268C40D88 = (uint64_t)&qword_268C40D90;
  if (a2)
  {
    uint64_t v2 = (const void **)result;
    uint64_t v3 = 48 * a2;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)&qword_268C40D88, &qword_268C40D90, v2, (long long *)v2);
      v2 += 6;
      v3 -= 48;
    }
    while (v3);
  }
  return result;
}

void sub_23F75A958(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F349CD8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F349CD8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::run(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26F349D58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26F349D58;
  a2[1] = v2;
  return result;
}

void std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0,std::allocator<realityio::ArbitraryComponentBuilder::clear(realityio::Inputs *)::$_0>,void ()(void)>::target_type()
{
}

long long *RIO_MTLX::NULL_EDGE(RIO_MTLX *this)
{
  {
    xmmword_268C3FD60 = 0u;
    *(_OWORD *)&qword_268C3FD70 = 0u;
    RIO_MTLX::NULL_EDGE(void)::v = 0u;
  }
  return &RIO_MTLX::NULL_EDGE(void)::v;
}

long long *RIO_MTLX::NULL_TREE_ITERATOR(RIO_MTLX *this)
{
  {
    *((void *)&xmmword_268C3FDB0 + 1) = 0;
    RIO_MTLX::NULL_TREE_ITERATOR(void)::v = 0u;
    *(_OWORD *)&qword_268C3FD98 = 0u;
    unk_268C3FDA1 = 0u;
  }
  return &RIO_MTLX::NULL_TREE_ITERATOR(void)::v;
}

uint64_t *RIO_MTLX::NULL_GRAPH_ITERATOR(RIO_MTLX *this)
{
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    RIO_MTLX::GraphIterator::GraphIterator((uint64_t)&RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v, &v2);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  return &RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v;
}

void sub_23F75AC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::NULL_INHERITANCE_ITERATOR(RIO_MTLX *this)
{
  {
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    RIO_MTLX::InheritanceIterator::InheritanceIterator((uint64_t)&RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v, &v2);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  return &RIO_MTLX::NULL_INHERITANCE_ITERATOR(void)::v;
}

void sub_23F75AD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t *RIO_MTLX::TreeIterator::operator++(uint64_t *a1)
{
  uint64_t v2 = a1[6];
  if (v2)
  {
    a1[6] = v2 - 1;
    return a1;
  }
  if (!*((unsigned char *)a1 + 40))
  {
    uint64_t v12 = *a1;
    if (*a1)
    {
      if (*(void *)(v12 + 136) != *(void *)(v12 + 144))
      {
        uint64_t v13 = (uint64_t)(a1 + 4);
        unint64_t v14 = a1[4];
        int v15 = (void *)a1[3];
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v20 = a1[2];
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - v20) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v20) >> 3);
          if (2 * v23 > v22) {
            unint64_t v22 = 2 * v23;
          }
          if (v23 >= 0x555555555555555) {
            unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v24 = v22;
          }
          v31[4] = a1 + 4;
          if (v24)
          {
            std::string::size_type v25 = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(v13, v24);
            uint64_t v12 = *a1;
          }
          else
          {
            std::string::size_type v25 = 0;
          }
          uint64_t v26 = &v25[3 * v21];
          v31[0] = v25;
          v31[1] = v26;
          int v31[3] = &v25[3 * v24];
          *uint64_t v26 = v12;
          uint64_t v27 = a1[1];
          v26[1] = v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
          }
          v25[3 * v21 + 2] = 0;
          uint64_t v31[2] = v26 + 3;
          std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__swap_out_circular_buffer(a1 + 2, v31);
          int64x2_t v17 = (void *)a1[3];
          std::__split_buffer<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::~__split_buffer((uint64_t)v31);
        }
        else
        {
          *int v15 = v12;
          uint64_t v16 = a1[1];
          v15[1] = v16;
          if (v16) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
          }
          void v15[2] = 0;
          int64x2_t v17 = v15 + 3;
        }
        a1[3] = (uint64_t)v17;
        std::string v28 = *(uint64_t **)(*a1 + 136);
        uint64_t v30 = *v28;
        uint64_t v29 = v28[1];
        if (v29) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::size_type v10 = (std::__shared_weak_count *)a1[1];
        *a1 = v30;
        a1[1] = v29;
        if (!v10) {
          return a1;
        }
LABEL_12:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        return a1;
      }
    }
  }
  *((unsigned char *)a1 + 40) = 0;
  uint64_t v3 = (void *)a1[2];
  long long v4 = (void *)a1[3];
  if (v3 == v4)
  {
LABEL_11:
    std::string::size_type v10 = (std::__shared_weak_count *)a1[1];
    *a1 = 0;
    a1[1] = 0;
    if (!v10) {
      return a1;
    }
    goto LABEL_12;
  }
  long long v5 = v4 - 3;
  while (1)
  {
    unint64_t v6 = v5[2] + 1;
    uint64_t v7 = *(void *)(*v5 + 136);
    if (v6 < (*(void *)(*v5 + 144) - v7) >> 4) {
      break;
    }
    uint64_t v8 = (std::__shared_weak_count *)v5[1];
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v3 = (void *)a1[2];
    }
    a1[3] = (uint64_t)v5;
    BOOL v9 = v5 == v3;
    v5 -= 3;
    if (v9) {
      goto LABEL_11;
    }
  }
  v5[2] = v6;
  long long v18 = *(_OWORD *)(v7 + 16 * v6);
  uint64_t v19 = *(void *)(v7 + 16 * v6 + 8);
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v10 = (std::__shared_weak_count *)a1[1];
  *(_OWORD *)a1 = v18;
  if (v10) {
    goto LABEL_12;
  }
  return a1;
}

uint64_t RIO_MTLX::GraphIterator::operator++(std::__shared_weak_count *a1)
{
  uint64_t v1 = (uint64_t)a1;
  uint64_t shared_weak_owners = a1[3].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    a1[3].__shared_weak_owners_ = shared_weak_owners - 1;
    return v1;
  }
  p_uint64_t shared_owners = &a1[3].__shared_owners_;
  if (!LOBYTE(a1[3].__shared_owners_))
  {
    a1 = (std::__shared_weak_count *)a1->__vftable;
    if (*(void *)v1)
    {
      a1 = (std::__shared_weak_count *)((uint64_t (*)(std::__shared_weak_count *))a1->__get_deleter)(a1);
      if (a1)
      {
        unint64_t v42 = *(void *)(v1 + 72);
        uint64_t v43 = *(void **)(v1 + 64);
        if ((unint64_t)v43 >= v42)
        {
          uint64_t v46 = *(void *)(v1 + 56);
          unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v43 - v46) >> 3);
          unint64_t v48 = v47 + 1;
          if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - v46) >> 3);
          if (2 * v49 > v48) {
            unint64_t v48 = 2 * v49;
          }
          if (v49 >= 0x555555555555555) {
            unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v50 = v48;
          }
          unint64_t v91 = v1 + 72;
          if (v50) {
            std::string v51 = std::__allocate_at_least[abi:ne180100]<std::allocator<realityio::mtlx::NeoShadeInput>>(v1 + 72, v50);
          }
          else {
            std::string v51 = 0;
          }
          uint64_t v76 = &v51[3 * v47];
          v88[0] = v51;
          v88[1] = v76;
          uint64_t v90 = (uint64_t)&v51[3 * v50];
          *uint64_t v76 = *(void *)v1;
          uint64_t v77 = *(void *)(v1 + 8);
          v76[1] = v77;
          if (v77) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
          }
          v51[3 * v47 + 2] = 0;
          uint64_t v89 = (uint64_t)(v76 + 3);
          std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__swap_out_circular_buffer((void *)(v1 + 56), v88);
          long long v45 = *(void **)(v1 + 64);
          std::__split_buffer<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::~__split_buffer((uint64_t)v88);
        }
        else
        {
          void *v43 = *(void *)v1;
          uint64_t v44 = *(void *)(v1 + 8);
          v43[1] = v44;
          if (v44) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
          }
          v43[2] = 0;
          long long v45 = v43 + 3;
        }
        *(void *)(v1 + 64) = v45;
        long long v78 = (RIO_MTLX *)(*(void *(**)(void *__return_ptr))(**(void **)v1 + 16))(v88);
        RIO_MTLX::NULL_EDGE(v78);
        if (v88[0] != (void)RIO_MTLX::NULL_EDGE(void)::v
          || v89 != (void)xmmword_268C3FD60
          || v91 != qword_268C3FD70)
        {
          unint64_t v80 = v91;
          long long v79 = v92;
          if (v92)
          {
            atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
            if (v80)
            {
              unint64_t v86 = v91;
              long long v87 = v92;
              if (v92) {
                atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              goto LABEL_147;
            }
          }
          else if (v91)
          {
            unint64_t v86 = v91;
            long long v87 = 0;
LABEL_147:
            long long v81 = (std::__shared_weak_count *)v90;
            v85[0] = v89;
            v85[1] = v90;
            if (v90) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
            }
            RIO_MTLX::GraphIterator::extendPathUpstream(v1, &v86, v85);
            if (v81) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v81);
            }
            if (v87) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v87);
            }
            RIO_MTLX::Edge::~Edge((RIO_MTLX::Edge *)v88);
            return v1;
          }
        }
        RIO_MTLX::Edge::~Edge((RIO_MTLX::Edge *)v88);
      }
    }
  }
  *(unsigned char *)(v1 + 80) = 0;
  uint64_t i = (uint64_t *)(v1 + 56);
  while (1)
  {
    unint64_t v5 = *(void *)v1;
    if (*(void *)v1)
    {
      unint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        RIO_MTLX::GraphIterator::returnPathDownstream((void *)v1, v5);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      else
      {
        RIO_MTLX::GraphIterator::returnPathDownstream((void *)v1, v5);
      }
    }
    uint64_t v7 = *(void *)(v1 + 64);
    if (*(void *)(v1 + 56) == v7) {
      break;
    }
    unint64_t v8 = *(void *)(v7 - 8) + 1;
    if (v8 >= (*(uint64_t (**)(void))(**(void **)(v7 - 24) + 24))(*(void *)(v7 - 24)))
    {
      unint64_t v13 = *(void *)(v7 - 24);
      unint64_t v14 = *(std::__shared_weak_count **)(v7 - 16);
      if (v14)
      {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        RIO_MTLX::GraphIterator::returnPathDownstream((void *)v1, v13);
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      else
      {
        RIO_MTLX::GraphIterator::returnPathDownstream((void *)v1, v13);
      }
      uint64_t v15 = *(void *)(v1 + 64);
      a1 = *(std::__shared_weak_count **)(v15 - 16);
      if (a1) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a1);
      }
      int v16 = 0;
      *(void *)(v1 + 64) = v15 - 24;
      goto LABEL_37;
    }
    uint64_t v9 = *(void *)(v7 - 24);
    ++*(void *)(v7 - 8);
    std::string::size_type v10 = (RIO_MTLX *)(*(void *(**)(void *__return_ptr))(*(void *)v9 + 16))(v88);
    RIO_MTLX::NULL_EDGE(v10);
    if (v88[0] == (void)RIO_MTLX::NULL_EDGE(void)::v)
    {
      unint64_t v11 = v91;
      if (v89 == (void)xmmword_268C3FD60 && v91 == qword_268C3FD70) {
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v11 = v91;
    }
    uint64_t v12 = v92;
    if (v92)
    {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (v11)
      {
        unint64_t v83 = v91;
        long long v84 = v92;
        if (v92) {
          atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_28;
      }
    }
    else if (v11)
    {
      unint64_t v83 = v11;
      long long v84 = 0;
LABEL_28:
      int64x2_t v17 = (std::__shared_weak_count *)v90;
      v82[0] = v89;
      v82[1] = v90;
      if (v90) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 8), 1uLL, memory_order_relaxed);
      }
      RIO_MTLX::GraphIterator::extendPathUpstream(v1, &v83, v82);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v84) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v84);
      }
      int v16 = 1;
      goto LABEL_36;
    }
LABEL_35:
    int v16 = 2;
LABEL_36:
    RIO_MTLX::Edge::~Edge((RIO_MTLX::Edge *)v88);
LABEL_37:
    if (v16 == 1) {
      return v1;
    }
  }
  RIO_MTLX::NULL_GRAPH_ITERATOR((RIO_MTLX *)a1);
  uint64_t v19 = RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v;
  uint64_t v18 = unk_268C3FDD0;
  if (unk_268C3FDD0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C3FDD0 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v1 + 8);
  *(void *)uint64_t v1 = v19;
  *(void *)(v1 + 8) = v18;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v22 = qword_268C3FDD8;
  uint64_t v21 = unk_268C3FDE0;
  if (unk_268C3FDE0) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(unk_268C3FDE0 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v23 = *(std::__shared_weak_count **)(v1 + 24);
  *(void *)(v1 + 16) = v22;
  *(void *)(v1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v21;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if ((uint64_t *)v1 == &RIO_MTLX::NULL_GRAPH_ITERATOR(void)::v) {
    goto LABEL_127;
  }
  unint64_t v24 = (void *)qword_268C3FDE8;
  if (!*(void *)(v1 + 48)) {
    goto LABEL_97;
  }
  uint64_t v26 = (uint64_t **)(v1 + 40);
  uint64_t v25 = *(void *)(v1 + 40);
  uint64_t v27 = *(uint64_t **)(v1 + 32);
  *(void *)(v1 + 32) = v1 + 40;
  *(void *)(v25 + 16) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  if (v27[1]) {
    std::string v28 = (uint64_t *)v27[1];
  }
  else {
    std::string v28 = v27;
  }
  if (!v28)
  {
    std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v1 + 32, 0);
LABEL_96:
    uint64_t i = (uint64_t *)(v1 + 56);
    goto LABEL_97;
  }
  uint64_t v29 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v28);
  uint64_t v30 = v29;
  if (v24 == (void *)&unk_268C3FDF0)
  {
    unint64_t v24 = &unk_268C3FDF0;
  }
  else
  {
    uint64_t v31 = v29;
    std::string::size_type v32 = v28;
    std::string::size_type v33 = v24;
    do
    {
      std::string v28 = v31;
      uint64_t v35 = v33[4];
      uint64_t v34 = v33[5];
      if (v34) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      }
      long long v36 = (std::__shared_weak_count *)v32[5];
      v32[4] = v35;
      void v32[5] = v34;
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      std::string v37 = *v26;
      char v38 = (uint64_t **)(v1 + 40);
      char v39 = (uint64_t **)(v1 + 40);
      if (*v26)
      {
        do
        {
          while (1)
          {
            char v38 = (uint64_t **)v37;
            if (v32[4] >= (unint64_t)v37[4]) {
              break;
            }
            std::string v37 = (uint64_t *)*v37;
            char v39 = v38;
            if (!*v38) {
              goto LABEL_65;
            }
          }
          std::string v37 = (uint64_t *)v37[1];
        }
        while (v37);
        char v39 = v38 + 1;
      }
LABEL_65:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(v1 + 32), (uint64_t)v38, v39, v32);
      if (v28)
      {
        uint64_t v30 = std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachedTreeCache::__detach_next((uint64_t)v28);
        uint64_t v31 = v30;
      }
      else
      {
        uint64_t v31 = 0;
      }
      uint64_t v40 = (void *)v33[1];
      if (v40)
      {
        do
        {
          unint64_t v24 = v40;
          uint64_t v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          unint64_t v24 = (void *)v33[2];
          BOOL v41 = *v24 == (void)v33;
          std::string::size_type v33 = v24;
        }
        while (!v41);
      }
      if (!v28) {
        break;
      }
      std::string::size_type v32 = v28;
      std::string::size_type v33 = v24;
    }
    while (v24 != (void *)&unk_268C3FDF0);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v1 + 32, v28);
  p_uint64_t shared_owners = (uint64_t *)(v1 + 80);
  if (!v30) {
    goto LABEL_96;
  }
  long long v52 = (uint64_t *)v30[2];
  for (uint64_t i = (uint64_t *)(v1 + 56); v52; v52 = (uint64_t *)v52[2])
    uint64_t v30 = v52;
  std::__tree<std::shared_ptr<RIO_MTLX::Element const>>::destroy(v1 + 32, v30);
LABEL_97:
  if (v24 != (void *)&unk_268C3FDF0)
  {
    long long v53 = (uint64_t **)(v1 + 40);
    do
    {
      unint64_t v54 = v24[4];
      uint64_t v55 = v24[5];
      uint64_t v56 = (uint64_t *)operator new(0x30uLL);
      v56[4] = v54;
      v56[5] = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      long long v57 = *v53;
      long long v58 = (uint64_t **)(v1 + 40);
      uint64_t v59 = (uint64_t **)(v1 + 40);
      if (*v53)
      {
        do
        {
          while (1)
          {
            long long v58 = (uint64_t **)v57;
            if (v57[4] <= v54) {
              break;
            }
            long long v57 = (uint64_t *)*v57;
            uint64_t v59 = v58;
            if (!*v58) {
              goto LABEL_107;
            }
          }
          long long v57 = (uint64_t *)v57[1];
        }
        while (v57);
        uint64_t v59 = v58 + 1;
      }
LABEL_107:
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(v1 + 32), (uint64_t)v58, v59, v56);
      uint64_t v60 = (void *)v24[1];
      if (v60)
      {
        do
        {
          uint64_t v61 = v60;
          uint64_t v60 = (void *)*v60;
        }
        while (v60);
      }
      else
      {
        do
        {
          uint64_t v61 = (void *)v24[2];
          BOOL v41 = *v61 == (void)v24;
          unint64_t v24 = v61;
        }
        while (!v41);
      }
      unint64_t v24 = v61;
    }
    while (v61 != (void *)&unk_268C3FDF0);
  }
  uint64_t v63 = (void *)qword_268C3FE00;
  uint64_t v62 = *(void **)algn_268C3FE08;
  uint64_t v64 = *(void *)(v1 + 72);
  unint64_t v65 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)algn_268C3FE08 - qword_268C3FE00) >> 3);
  uint64_t v66 = *(void **)(v1 + 56);
  if (0xAAAAAAAAAAAAAAABLL * ((v64 - (uint64_t)v66) >> 3) >= v65)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 64) - (void)v66) >> 3) < v65)
    {
      uint64_t v71 = (uint64_t *)(qword_268C3FE00 + 8 * ((uint64_t)(*(void *)(v1 + 64) - (void)v66) >> 3));
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,0>((uint64_t *)qword_268C3FE00, v71, v66);
      long long v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v1 + 72, v71, v62, *(void **)(v1 + 64));
      goto LABEL_125;
    }
    uint64_t v72 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,0>((uint64_t *)qword_268C3FE00, *(uint64_t **)algn_268C3FE08, v66);
    for (uint64_t j = *(void **)(v1 + 64); j != v72; j -= 3)
    {
      uint64_t v75 = (std::__shared_weak_count *)*(j - 2);
      if (v75) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      }
    }
  }
  else
  {
    if (v66)
    {
      std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__clear[abi:ne180100](i);
      operator delete((void *)*i);
      uint64_t v64 = 0;
      *uint64_t i = 0;
      i[1] = 0;
      i[2] = 0;
    }
    if (v65 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * (v64 >> 3);
    uint64_t v68 = 2 * v67;
    if (2 * v67 <= v65) {
      uint64_t v68 = v65;
    }
    if (v67 >= 0x555555555555555) {
      unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v69 = v68;
    }
    std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__vallocate[abi:ne180100](i, v69);
    long long v70 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>*>(v1 + 72, v63, v62, *(void **)(v1 + 64));
LABEL_125:
    uint64_t v72 = v70;
  }
  *(void *)(v1 + 64) = v72;
LABEL_127:
  *(_OWORD *)p_uint64_t shared_owners = xmmword_268C3FE18;
  return v1;
}

void sub_23F75B804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  *(void *)(v19 + 64) = v20;
  _Unwind_Resume(exception_object);
}

void RIO_MTLX::GraphIterator::extendPathUpstream(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  std::__tree<std::shared_ptr<RIO_MTLX::Element>>::__emplace_unique_key_args<std::shared_ptr<RIO_MTLX::Element>,std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t **)(a1 + 32), a2, (uint64_t *)a2);
  unint64_t v7 = *a2;
  unint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v9;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void RIO_MTLX::GraphIterator::returnPathDownstream(void *a1, unint64_t a2)
{
  long long v4 = a1 + 5;
  uint64_t v3 = (uint64_t *)a1[5];
  if (v3)
  {
    unint64_t v5 = v4;
    unint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        unint64_t v5 = v6;
      }
      unint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          unint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[4] == v5) {
        a1[4] = v11;
      }
      --a1[6];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      unint64_t v14 = (std::__shared_weak_count *)v5[5];
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      operator delete(v5);
    }
  }
  uint64_t v15 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  int v16 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (v16)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

uint64_t RIO_MTLX::InheritanceIterator::operator++(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 40) = v2 - 1;
    return a1;
  }
  long long v4 = *(RIO_MTLX::Element **)a1;
  if (!*(void *)a1) {
    return a1;
  }
  Inherituint64_t String = (std::string *)RIO_MTLX::Element::getInheritString(*(RIO_MTLX::Element **)a1);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>((uint64_t)v4, InheritString, &v28);
  unint64_t v6 = v28;
  if (!v28) {
    goto LABEL_28;
  }
  unint64_t v7 = *(RIO_MTLX::Element **)a1;
  uint64_t v8 = *(unsigned __int8 *)(v28 + 47);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(v28 + 47);
  }
  else {
    uint64_t v9 = *(void *)(v28 + 32);
  }
  uint64_t v10 = *((unsigned __int8 *)v7 + 47);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)v7 + 4);
  }
  if (v9 == v10)
  {
    unint64_t v14 = (unsigned __int8 *)*((void *)v7 + 3);
    uint64_t v12 = (char *)v7 + 24;
    BOOL v13 = v14;
    if (v11 >= 0) {
      uint64_t v15 = (unsigned __int8 *)v12;
    }
    else {
      uint64_t v15 = v13;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v28 + 24), v15, *(void *)(v28 + 32))) {
        goto LABEL_22;
      }
    }
    else if (*(unsigned char *)(v28 + 47))
    {
      uint64_t v16 = 0;
      while (*(unsigned __int8 *)(v28 + v16 + 24) == v15[v16])
      {
        if (v8 == ++v16) {
          goto LABEL_24;
        }
      }
      goto LABEL_22;
    }
LABEL_25:
    uint64_t v18 = v29;
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      unint64_t v6 = v28;
      uint64_t v19 = v29;
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v22 = (uint64_t **)(a1 + 24);
    uint64_t v21 = *(uint64_t **)(a1 + 24);
    if (v21)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v23 = (uint64_t **)v21;
          unint64_t v24 = v21[4];
          if (v24 <= v6) {
            break;
          }
          uint64_t v21 = *v23;
          uint64_t v22 = v23;
          if (!*v23) {
            goto LABEL_38;
          }
        }
        if (v24 >= v6) {
          break;
        }
        uint64_t v21 = v23[1];
        if (!v21)
        {
          uint64_t v22 = v23 + 1;
          goto LABEL_38;
        }
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
    else
    {
      unint64_t v23 = (uint64_t **)(a1 + 24);
LABEL_38:
      uint64_t v25 = (uint64_t *)operator new(0x30uLL);
      v25[4] = v6;
      v25[5] = (uint64_t)v19;
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)(a1 + 16), (uint64_t)v23, v22, v25);
    }
    unint64_t v20 = v28;
    goto LABEL_40;
  }
LABEL_22:
  int64x2_t v17 = v29;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    unint64_t v6 = v28;
LABEL_24:
    if (v6) {
      goto LABEL_25;
    }
  }
LABEL_28:
  unint64_t v20 = 0;
LABEL_40:
  uint64_t v26 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v20;
  *(void *)(a1 + 8) = v26;
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return a1;
}

void sub_23F75BC00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if ((v11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long> *,0>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    unint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      a3[2] = v5[2];
      a3 += 3;
      v5 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::vector<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::__swap_out_circular_buffer(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)(v4 - pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v5;
    v4 -= 24;
    void *v2 = 0;
    v2[1] = 0;
    *(void *)(v4 + 16) = v2[2];
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::shared_ptr<RIO_MTLX::Element>,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 24;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 16);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void realityio::MaterialXStandalone::makeSource(realityio::MaterialXStandalone *this@<X0>, const __CFURL *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)a2);
  realityio::mtlx::mtlxToDataSource((uint64_t)__p, this, (uint64_t)&v9);
  long long v6 = v9;
  long long v9 = 0uLL;
  *(unsigned char *)a3 = 1;
  *(_OWORD *)(a3 + 8) = v6;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_23F75BDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void realityio::MaterialXStandalone::makeSource(realityio::MaterialXStandalone *this@<X0>, char *__s@<X2>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v22, __s);
  realityio::stringFromCFData(this, &__p);
  realityio::mtlx::mtlxToDataSource((uint64_t)v22, (uint64_t)&__p, &v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  char v8 = v26;
  if (v26)
  {
    long long v9 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(unsigned char *)a3 = 1;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v9;
    if (v9) {
LABEL_9:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Error reading material \"");
    uint64_t v10 = std::system_category();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = __p.__r_.__value_.__l.__size_;
    }
    size_t v12 = strlen(__s);
    BOOL v13 = &v19;
    std::string::basic_string[abi:ne180100]((uint64_t)&v19, size + v12);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if (size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      memmove(v13, p_p, size);
    }
    uint64_t v15 = (char *)v13 + size;
    if (v12) {
      memmove(v15, __s, v12);
    }
    v15[v12] = 0;
    uint64_t v16 = std::string::append(&v19, "\"");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v20 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    realityio::DetailedError::DetailedError(v22, 0, (uint64_t)v10, (long long *)v20);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)v22;
    uint64_t v18 = v24;
    *(void *)(a3 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v23;
    *(void *)(a3 + 32) = v18;
    *(void *)(a3 + 39) = *(void *)((char *)&v24 + 7);
    LOBYTE(v18) = HIBYTE(v24);
    long long v24 = 0uLL;
    uint64_t v23 = 0;
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 47) = v18;
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v9 = v27;
    if (v27) {
      goto LABEL_9;
    }
  }
}

void sub_23F75BFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 64);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(exception_object);
}

void realityio::MaterialXStandalone::generateSyncOnEngineQueue(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v12[3] = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  long long v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<__CFData const* ()(char const*)>::__value_func[abi:ne180100]((uint64_t)v9, a3);
  v8[0] = v7;
  v8[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<__CFData const* ()(char const*)>::__value_func[abi:ne180100]((uint64_t)&v11, (uint64_t)v9);
  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](&v11);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    v10[0] = &unk_26F349DD8;
    std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](v9);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    v10[0] = &unk_26F349DD8;
    std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](v9);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)v10[8]);
  realityio::buildMaterialXAsset((realityio *)v10, (uint64_t (***)(void))v10[6], &v11);
  *a4 = v11;
  uint64_t v11 = 0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(v12);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v11);
}

void sub_23F75C1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100]((void *)(v4 - 72));
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](va);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void realityio::MaterialXStandalone::generateAsync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  char v8 = (char *)operator new(0x100uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)char v8 = &unk_26F349F08;
  uint64_t v10 = *a2;
  long long v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<__CFData const* ()(char const*)>::__value_func[abi:ne180100]((uint64_t)v32, a3);
  v26[0] = v10;
  v26[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<__CFData const* ()(char const*)>::__value_func[abi:ne180100]((uint64_t)block, (uint64_t)v32);
  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](block);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *((void *)v8 + 12) = &unk_26F348130;
  MEMORY[0x2455D2A10](v8 + 104);
  *((void *)v8 + 30) = 0;
  uint64_t v11 = (char **)(v8 + 240);
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *((void *)v8 + 3) = &unk_26F349F58;
  *((void *)v8 + 12) = &unk_26F349FB0;
  *((void *)v8 + 25) = 0;
  *((void *)v8 + 26) = 0;
  *((void *)v8 + 31) = 0;
  dispatch_queue_t v12 = dispatch_queue_create("com.apple.realityio.materialX-async", 0);
  BOOL v13 = (void *)*((void *)v8 + 25);
  *((void *)v8 + 25) = v12;

  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](v32);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  *(void *)&long long v27 = v8 + 24;
  *((void *)&v27 + 1) = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::__value_func[abi:ne180100]((uint64_t)v28, a4);
  uint64_t v31 = 0;
  unint64_t v14 = (char *)operator new(0x38uLL);
  uint64_t v15 = v14;
  *(void *)unint64_t v14 = &unk_26F34A060;
  *(_OWORD *)(v14 + 8) = v27;
  long long v27 = 0uLL;
  if (!v29)
  {
    uint64_t v16 = v14 + 48;
    goto LABEL_13;
  }
  if (v29 != v28)
  {
    uint64_t v16 = &v29;
    *((void *)v14 + 6) = v29;
LABEL_13:
    *uint64_t v16 = 0;
    goto LABEL_15;
  }
  *((void *)v14 + 6) = v14 + 24;
  (*(void (**)(void *))(v28[0] + 24))(v28);
LABEL_15:
  uint64_t v31 = v15;
  uint64_t v17 = std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::__value_func[abi:ne180100]((uint64_t)block, (uint64_t)v30);
  uint64_t v18 = v8 + 216;
  std::string v19 = v34;
  unint64_t v20 = *v11;
  if (v34 == (char *)block)
  {
    if (v20 == v18)
    {
      (*(void (**)(uint64_t, void *))(block[0] + 24))(v17, v32);
      (*(void (**)(char *))(*(void *)v34 + 32))(v34);
      uint64_t v34 = 0;
      (*(void (**)(char *, void *))(*(void *)*v11 + 24))(*v11, block);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)*v11 + 32))(*v11, v23, v24);
      *uint64_t v11 = 0;
      uint64_t v34 = (char *)block;
      (*(void (**)(void *, char *))(v32[0] + 24))(v32, v8 + 216);
      (*(void (**)(void *))(v32[0] + 32))(v32);
    }
    else
    {
      (*(void (**)(uint64_t, char *))(block[0] + 24))(v17, v8 + 216);
      (*(void (**)(char *))(*(void *)v34 + 32))(v34);
      uint64_t v34 = *v11;
    }
    *uint64_t v11 = v18;
  }
  else if (v20 == v18)
  {
    (*(void (**)(char *, void *))(*(void *)v18 + 24))(v8 + 216, block);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)*v11 + 32))(*v11, v21, v22);
    *uint64_t v11 = v34;
    uint64_t v34 = (char *)block;
  }
  else
  {
    uint64_t v34 = *v11;
    *uint64_t v11 = v19;
  }
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](block);
  uint64_t v25 = *((void *)v8 + 25);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke;
  uint64_t v34 = (char *)&__block_descriptor_40_e5_v8__0l;
  uint64_t v35 = v8 + 24;
  dispatch_async(v25, block);
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](v30);
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](v28);
  if (*((void *)&v27 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
}

void sub_23F75C72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0::~$_0(uint64_t a1)
{
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *realityio::anonymous namespace'::Standalone::Standalone(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  *a1 = &unk_26F349E58;
  std::__function::__value_func<__CFData const* ()(char const*)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a4);
  a1[5] = a2;
  if (a2) {
    RERetain();
  }
  uint64_t v7 = a3[1];
  a1[6] = *a3;
  a1[7] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[8] = 0;
  REEngineConfigurationCreateFromEngine();
  uint64_t v8 = REEngineConfigurationGetEngineQueue();
  long long v9 = (void *)a1[8];
  a1[8] = v8;

  RERelease();
  return a1;
}

void sub_23F75C8DC(_Unwind_Exception *a1)
{
  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t realityio::anonymous namespace'::Standalone::engine(realityio::_anonymous_namespace_::Standalone *this)
{
  return *((void *)this + 5);
}

uint64_t realityio::anonymous namespace'::StandaloneSynchronous::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

uint64_t realityio::anonymous namespace'::Standalone::addExtraAsset()
{
  return 1;
}

uint64_t realityio::anonymous namespace'::StandaloneSynchronous::queueForDeferredAssetLoad(uint64_t a1, void *a2)
{
  return MEMORY[0x270F1C450](*a2);
}

void realityio::anonymous namespace'::Standalone::resolveImageAssets(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath **a2@<X1>, uint64_t *a3@<X8>)
{
  v34[0] = &unk_26F349EA8;
  v34[1] = a1;
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v35 = v36;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  long long v6 = *a2;
  long long v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v22 = 0;
  }
  else
  {
    do
    {
      uint64_t v7 = *(void *)(a1 + 48);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(&v33, v6);
      uint64_t v8 = realityio::mtlx::NeoDataSource::primFromPath(v7, &v33);
      LODWORD(v7) = v9;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v33);
      NameTokeuint64_t n = (atomic_uint **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v6);
      uint64_t v30 = v8;
      int v31 = v7;
      uint64_t v11 = *NameToken;
      uint64_t v32 = v11;
      if ((v11 & 7) != 0)
      {
        dispatch_queue_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v32 = v12;
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)&v28);
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 48) + 224))(v26);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v23, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else {
        std::string v23 = v28;
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v29;
      }
      realityio::TextureBuilder::createStandaloneTextureAsset((uint64_t)v34, &v23, (uint64_t)v26, &v25);
      unint64_t v14 = (void *)a3[1];
      unint64_t v13 = a3[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = ((uint64_t)v14 - *a3) >> 3;
        if ((unint64_t)(v16 + 1) >> 61) {
          std::vector<realityio::WrappedRERef<REAsset *>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v13 - *a3;
        uint64_t v18 = v17 >> 2;
        if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
          uint64_t v18 = v16 + 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v18;
        }
        unsigned char v37[4] = a3 + 2;
        if (v19) {
          unint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)(a3 + 2), v19);
        }
        else {
          unint64_t v20 = 0;
        }
        uint64_t v21 = &v20[8 * v16];
        v37[0] = v20;
        v37[1] = v21;
        void v37[3] = &v20[8 * v19];
        *(void *)uint64_t v21 = v25;
        std::string::size_type v25 = 0;
        uint64_t v37[2] = v21 + 8;
        std::vector<realityio::WrappedRERef<REAsset *>>::__swap_out_circular_buffer(a3, v37);
        uint64_t v15 = (void *)a3[1];
        std::__split_buffer<realityio::WrappedRERef<REAsset *>>::~__split_buffer((uint64_t)v37);
      }
      else
      {
        *unint64_t v14 = v25;
        uint64_t v15 = v14 + 1;
        std::string::size_type v25 = 0;
        a3[1] = (uint64_t)v15;
      }
      a3[1] = (uint64_t)v15;
      realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if ((v32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      long long v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
    }
    while (v6 != v5);
    uint64_t v22 = (void *)v36[0];
  }
  v34[0] = &unk_26F349EA8;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy((uint64_t)&v35, v22);
}

void sub_23F75CC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&a20);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath(&a11);
  if (a26 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::~SdfAssetPath((void **)&a28);
  if ((a36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::vector<realityio::WrappedRERef<REAsset *>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  *(void *)(v37 - 168) = a9;
  std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::destroy(a10, *(void **)(v37 - 144));
  _Unwind_Resume(a1);
}

void realityio::anonymous namespace'::StandaloneSynchronous::~StandaloneSynchronous(id *this)
{
  JUMPOUT(0x2455D2BD0);
}

uint64_t realityio::anonymous namespace'::LocalTextureContext::engine(realityio::_anonymous_namespace_::LocalTextureContext *this)
{
  return (***((uint64_t (****)(void))this + 1))(*((void *)this + 1));
}

uint64_t realityio::anonymous namespace'::LocalTextureContext::getTextureAssetWithKey@<X0>(uint64_t result@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = result + 24;
  uint64_t v5 = *(void *)(result + 24);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = result + 32;
  uint64_t v8 = result + 24;
  do
  {
    __n128 result = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a2);
    int v9 = (uint64_t *)(v5 + 8);
    if (!result)
    {
      int v9 = (uint64_t *)v5;
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v8 == v4
    || (__n128 result = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v8 + 32)), (result & 1) != 0))
  {
LABEL_8:
    *a3 = 0;
  }
  else
  {
    __n128 result = *(void *)(v8 + 56);
    *a3 = result;
    if (result)
    {
      return RERetain();
    }
  }
  return result;
}

void *realityio::anonymous namespace'::LocalTextureContext::getBundleInfo@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1 + 3, "");
}

void sub_23F75CEC4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *realityio::anonymous namespace'::LocalTextureContext::insertTextureIntoCache(uint64_t a1, long long *a2, uint64_t *a3)
{
  long long v6 = a2;
  uint64_t v4 = std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v6);
  return realityio::WrappedRERef<REAsset *>::operator=(v4 + 7, a3);
}

uint64_t realityio::anonymous namespace'::LocalTextureContext::queueForDeferredAssetLoad(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t realityio::anonymous namespace'::LocalTextureContext::dataFromRawPath@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 32);
  if (result)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = (uint64_t *)*a2;
    }
    long long v6 = v5;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t **))(*(void *)result + 48))(result, &v6);
    *a3 = result;
  }
  return result;
}

void sub_23F75CFD4(_Unwind_Exception *a1)
{
  realityio::WrappedCFRef<__CFData const*>::~WrappedCFRef(v1);
  _Unwind_Resume(a1);
}

void realityio::anonymous namespace'::Standalone::~Standalone(id *this)
{
  *this = &unk_26F349E58;

  uint64_t v2 = (std::__shared_weak_count *)this[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  realityio::WrappedRERef<REEngine *>::~WrappedRERef(this + 5);
  std::__function::__value_func<__CFData const* ()(char const*)>::~__value_func[abi:ne180100](this + 1);
}

void ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  realityio::buildMaterialXAsset((realityio *)v1, *(uint64_t (****)(void))(v1 + 48), &v5);
  uint64_t v2 = *(void *)(v1 + 224);
  if (v2 != v5)
  {
    *(void *)(v1 + 2pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v5;
    uint64_t v5 = v2;
  }
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v5);
  uint64_t v3 = *(NSObject **)(v1 + 64);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke_2;
  void block[3] = &__block_descriptor_40_e5_v8__0l;
  void block[4] = v1;
  dispatch_async(v3, block);
}

void ___ZN9realityio12_GLOBAL__N_115StandaloneAsync7executeENSt3__18functionIFvNS_12WrappedRERefIP7REAssetEEEEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (****)(void))(a1 + 32);
  uint64_t v2 = (uint64_t)(v1 + 9);
  uint64_t v3 = (**v1)(v1);

  realityio::AssetLoadTracker::loadAssets(v2, v3, 0);
}

uint64_t std::__function::__value_func<__CFData const* ()(char const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
  }
  return a1;
}

void std::__shared_ptr_emplace<realityio::anonymous namespace'::StandaloneAsync>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<realityio::anonymous namespace'::StandaloneAsync>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F349F08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x2455D2BD0);
}

uint64_t std::__shared_ptr_emplace<realityio::anonymous namespace'::StandaloneAsync>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

void *realityio::anonymous namespace'::StandaloneAsync::performBlockSyncOnEngineQueue(uint64_t a1, uint64_t a2)
{
  void v9[4] = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 184))
  {
    uint64_t v3 = *(void *)(a2 + 24);
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return (void *)v4();
  }
  else
  {
    uint64_t v7 = *(id *)(a1 + 64);
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 3321888768;
    void v8[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync29performBlockSyncOnEngineQueueENSt3__18functionIFvvEEE_block_invoke;
    v8[3] = &__block_descriptor_72_ea8_40c27_ZTSNSt3__18functionIFvvEEE_e5_v8__0l;
    void v8[4] = a1;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
    dispatch_sync(v7, v8);

    return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v9);
  }
}

void sub_23F75D480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void realityio::anonymous namespace'::StandaloneAsync::queueForDeferredAssetLoad(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26F348090;
  v4[1].__shared_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26F33E4A8;
  v4[2].__vftable = 0;
  v4[2].__shared_owners_ = 0;
  v4[1].__shared_weak_owners_ = 0;
  uint64_t v6 = *a2;
  realityio::WrappedRERef<REAsset *>::operator=(&v4[1].__shared_owners_, &v6);
  *(void *)&long long v5 = v4 + 1;
  *((void *)&v5 + 1) = v4;
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  realityio::AssetLoadTracker::add(a1 + 72, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_23F75D564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void realityio::anonymous namespace'::StandaloneAsync::~StandaloneAsync(realityio::_anonymous_namespace_::StandaloneAsync *this)
{
  *(void *)this = &unk_26F349F58;
  *((void *)this + 9) = &unk_26F349FB0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 28);
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100]((void *)this + 24);

  *((void *)this + 9) = &unk_26F348130;
  uint64_t v2 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 80));
}

{
  void **v2;

  *(void *)this = &unk_26F349F58;
  *((void *)this + 9) = &unk_26F349FB0;
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((void *)this + 28);
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100]((void *)this + 24);

  *((void *)this + 9) = &unk_26F348130;
  uint64_t v2 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 80));
  MEMORY[0x2455D2BD0]();
}

void *realityio::anonymous namespace'::StandaloneAsync::onComplete(id *this)
{
  void v8[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (char *)(this + 24);
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(this + 24));
  uint64_t v3 = this[8];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3321888768;
  v6[2] = ___ZN9realityio12_GLOBAL__N_115StandaloneAsync10onCompleteEv_block_invoke;
  void v6[3] = &__block_descriptor_72_ea8_40c63_ZTSNSt3__18functionIFvN9realityio12WrappedRERefIP7REAssetEEEEE_e5_v8__0l;
  void v6[4] = this;
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)v8);
  dispatch_async(v3, v6);

  uint64_t v4 = (char *)this[27];
  this[27] = 0;
  if (v4 == v2)
  {
    (*(void (**)(char *))(*(void *)v2 + 32))(v2);
  }
  else if (v4)
  {
    (*(void (**)(char *))(*(void *)v4 + 40))(v4);
  }
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](v7);
  return std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](v8);
}

void sub_23F75D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *non-virtual thunk to'realityio::anonymous namespace'::StandaloneAsync::onComplete(uint64_t a1)
{
}

uint64_t ___ZN9realityio12_GLOBAL__N_115StandaloneAsync29performBlockSyncOnEngineQueueENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  ++*(void *)(v1 + 184);
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  --*(void *)(v1 + 184);
  return result;
}

uint64_t __copy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_ea8_40c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *___ZN9realityio12_GLOBAL__N_115StandaloneAsync10onCompleteEv_block_invoke(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 224);
  if (v4) {
    RERetain();
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v4);
}

void sub_23F75D984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c63_ZTSNSt3__18functionIFvN9realityio12WrappedRERefIP7REAssetEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_ea8_40c63_ZTSNSt3__18functionIFvN9realityio12WrappedRERefIP7REAssetEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(void *a1)
{
  *a1 = &unk_26F34A060;
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::~__func(void *a1)
{
  *a1 = &unk_26F34A060;
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100](a1 + 3);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x2455D2BD0);
}

void *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &unk_26F34A060;
  std::__compressed_pair_elem<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_23F75DAC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26F34A060;
  return std::__compressed_pair_elem<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0 const&,0ul>(a2 + 1, (void *)(a1 + 8));
}

void std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy(uint64_t a1)
{
}

void std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v6 = v3;
  uint64_t v7 = v3;
  *a2 = 0;
  if (v3) {
    RERetain();
  }
  uint64_t v4 = *(void *)(a1 + 48);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v7);
  realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v7);
  return realityio::WrappedRERef<REAsset *>::~WrappedRERef(&v6);
}

void sub_23F75DBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::target_type()
{
}

void *std::__compressed_pair_elem<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0 const&,0ul>(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_23F75DC80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0,std::allocator<realityio::MaterialXStandalone::generateAsync(REEngine *,std::shared_ptr<realityio::mtlx::NeoDataSource>,std::function<__CFData const* ()(char const*)>,std::function<void ()(realityio::WrappedRERef<REAsset *>)>)::$_0>,void ()(realityio::WrappedRERef<REAsset *>)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__function::__value_func<void ()(realityio::WrappedRERef<REAsset *>)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void ___ZN9realityio16AssetLoadTracker5Asset10setTrackerEPS0__block_invoke(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(v2 + 8));
  uint64_t v3 = (realityio *)(**(uint64_t (***)(uint64_t))v1)(v1);
  *(unsigned char *)(v1 + 16) = 1;
  ++*(_DWORD *)(v2 + 96);
  uint64_t v4 = *(NSObject **)(realityio::logObjects(v3) + 16);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v5)
  {
    uint64_t v7 = *(void *)(v1 + 8);
    int v8 = *(_DWORD *)(v2 + 96);
    uint64_t v9 = (uint64_t)(*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 4;
    int v10 = 134218496;
    uint64_t v11 = v7;
    __int16 v12 = 1024;
    int v13 = v8;
    __int16 v14 = 2048;
    uint64_t v15 = v9;
    _os_log_debug_impl(&dword_23F4EA000, v4, OS_LOG_TYPE_DEBUG, "AssetLoadTracker::complete @ %p -- assets completed: %d / %zu\n", (uint8_t *)&v10, 0x1Cu);
  }
  if (*(_DWORD *)(v2 + 96) == (uint64_t)(*(void *)(v2 + 80) - *(void *)(v2 + 72)) >> 4)
  {
    uint64_t v6 = *(NSObject **)(realityio::logObjects((realityio *)v5) + 16);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_23F4EA000, v6, OS_LOG_TYPE_DEFAULT, "AssetLoadTracker::complete - onComplete\n", (uint8_t *)&v10, 2u);
    }
    *(_DWORD *)(v2 + 100) = 2;
    (**(void (***)(uint64_t))v2)(v2);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v2 + 8));
}

void sub_23F75DE94(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::AssetLoadTracker::add(uint64_t a1, long long *a2)
{
  uint64_t v4 = (std::recursive_mutex *)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 8));
  std::vector<std::shared_ptr<realityio::AssetLoadTracker::Asset>>::push_back[abi:ne180100]((uint64_t *)(a1 + 72), a2);

  std::recursive_mutex::unlock(v4);
}

void sub_23F75DF08(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::AssetLoadTracker::loadAssets(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  BOOL v5 = (std::recursive_mutex *)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 8));
  *(_DWORD *)(a1 + 100) = 1;
  uint64_t v7 = *(NSObject **)(realityio::logObjects(v6) + 16);
  RequestAddunint64_t Asset = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (RequestAddAsset)
  {
    uint64_t v9 = (uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 4;
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl(&dword_23F4EA000, v7, OS_LOG_TYPE_DEFAULT, "AssetLoadTracker::loadAssets -- asset count = %zu\n", (uint8_t *)&buf, 0xCu);
  }
  int v10 = *(uint64_t **)(a1 + 72);
  uint64_t v11 = *(uint64_t **)(a1 + 80);
  if (v10 == v11) {
    goto LABEL_14;
  }
  int v12 = a3;
  do
  {
    uint64_t v13 = *v10;
    *(void *)(*v10 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = a1;
    REAssetGetAssetManager();
    uint64_t AssetRequest = REAssetManagerCreateAssetRequest();
    if (*(void *)(v13 + 32)) {
      RERelease();
    }
    *(void *)(v13 + 32) = AssetRequest;
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 3221225472;
    uint64_t v18 = ___ZN9realityio16AssetLoadTracker5Asset10setTrackerEPS0__block_invoke;
    unint64_t v19 = &__block_descriptor_40_e8_v12__0B8l;
    uint64_t v20 = v13;
    REAssetLoadRequestSetCompletionHandler();
    REAssetLoadRequestSetLoadAndWaitForResourceSharingClients();
    RequestAddunint64_t Asset = REAssetLoadRequestAddAsset();
    v10 += 2;
  }
  while (v10 != v11);
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72))
  {
LABEL_14:
    uint64_t v16 = *(NSObject **)(realityio::logObjects((realityio *)RequestAddAsset) + 16);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_23F4EA000, v16, OS_LOG_TYPE_DEFAULT, "AssetLoadTracker::loadAssets - onComplete due to zero-size asset list\n", (uint8_t *)&buf, 2u);
    }
    *(_DWORD *)(a1 + 100) = 2;
    (**(void (***)(uint64_t))a1)(a1);
  }
  else if (*(_DWORD *)(a1 + 100) != 2 && v12)
  {
    uint64_t ServiceLocator = REEngineGetServiceLocator();
    MEMORY[0x2455CDC30](ServiceLocator);
    while (*(_DWORD *)(a1 + 100) == 1)
      REAssetManagerUpdate();
  }
  std::recursive_mutex::unlock(v5);
}

void sub_23F75E184(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void realityio::AssetLoadTracker::clear(realityio::AssetLoadTracker *this)
{
  uint64_t v2 = (std::recursive_mutex *)((char *)this + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 8));
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  *((void *)this + 12) = 0;

  std::recursive_mutex::unlock(v2);
}

void realityio::mtlx::UsdMtlxRead(uint64_t *a1, char **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v706 = *MEMORY[0x263EF8340];
  if (!*a1)
  {
    v621 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v622 = "UsdMtlxRead";
    uint64_t v623 = 2344;
    v624 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    LOBYTE(v625) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(a2);
  if (!(v5 & 1 | (unint64_t)v4))
  {
    v621 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v622 = "UsdMtlxRead";
    uint64_t v623 = 2348;
    v624 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    LOBYTE(v625) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3) & 1) == 0)
  {
    v621 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v622 = "UsdMtlxRead";
    uint64_t v623 = 2352;
    v624 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    LOBYTE(v625) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a4) & 1) == 0)
  {
    v621 = "CoreRealityIO/mtlxToUsdShade.cpp";
    v622 = "UsdMtlxRead";
    uint64_t v623 = 2356;
    v624 = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStagePtr &, const SdfPath &, "
           "const SdfPath &)";
    LOBYTE(v625) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return;
  }
  uint64_t v6 = a2[1];
  v621 = *a2;
  v622 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)v6 + 2, 1u, memory_order_relaxed);
  }
  MEMORY[0x2455CF810](v695, "Collections");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v623, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v695);
  if ((v695[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v695 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](v695, "Looks");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v624, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v695);
  if ((v695[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v695 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](v695, "Materials");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v625, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v695);
  if ((v695[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v695 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](v695, "NodeGraphs");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v626, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v695);
  if ((v695[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v695 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  MEMORY[0x2455CF810](v695, "Shaders");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v627, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v695);
  if ((v695[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v695 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __str = 0;
  uint64_t v630 = 0;
  v629 = 0;
  v628 = &v629;
  unint64_t v633 = 0;
  v632 = 0;
  v635[0] = 0;
  v634 = v635;
  v638[0] = 0;
  v637 = 0;
  v635[1] = 0;
  v636 = &v637;
  uint64_t v639 = 0;
  v638[1] = &v639;
  v642 = 0;
  uint64_t v643 = 0;
  uint64_t v640 = 0;
  v641 = &v642;
  v645 = 0;
  v644 = &v645;
  v648 = 0;
  uint64_t v649 = 0;
  uint64_t v646 = 0;
  v647 = (uint64_t *)&v648;
  int __val = 1;
  v651 = 0;
  v652 = 0;
  *(_DWORD *)v695 = 1;
  *(void *)&v695[8] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(void *)&v695[24] = 0;
  uint64_t v602 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v653 = MEMORY[0x263F90740] + 16;
  if ((v695[24] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
  uint64_t v7 = *(realityio::mtlx::_anonymous_namespace_ **)&v695[8];
  if (*(void *)&v695[8]) {
    uint64_t v7 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
  }
  if (*(char *)(*(void *)v695 + 23) < 0)
  {
    if (!*(void *)(*(void *)v695 + 8)) {
      goto LABEL_31;
    }
  }
  else if (!*(unsigned char *)(*(void *)v695 + 23))
  {
    goto LABEL_31;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
  MEMORY[0x2455CF830](v685, *(void *)v695);
  int v8 = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdStage::SetColorManagementSystem(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)v685);
  if (((uint64_t)v685[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v685[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_31:
  if ((*((char *)v685[0] + 23) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)v685[0] + 23)) {
      goto LABEL_39;
    }
LABEL_35:
    int v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
    MEMORY[0x2455CE830](v695, v685[0]);
    pxrInternal__aapl__pxrReserved__::UsdStage::SetColorConfiguration(v10, (const pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v695);
    if (SHIBYTE(v696) < 0) {
      operator delete(*(void **)&v695[24]);
    }
    if ((v695[23] & 0x80000000) != 0) {
      operator delete(*(void **)v695);
    }
    goto LABEL_39;
  }
  if (*((void *)v685[0] + 1)) {
    goto LABEL_35;
  }
LABEL_39:
  ActiveColorSpace = RIO_MTLX::Element::getActiveColorSpace((RIO_MTLX::Element *)*a1);
  uint64_t v12 = *((unsigned __int8 *)ActiveColorSpace + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = ActiveColorSpace[1];
  }
  if (v12)
  {
    v685[0] = 0;
    *(void *)&v695[8] = &pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<std::string>(void)::ti;
    pxrInternal__aapl__pxrReserved__::VtValue::_RemoteTypeInfo<std::string>::_PlaceCopy();
  }
  uint64_t v14 = *a1;
  uint64_t v13 = (std::__shared_weak_count *)a1[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v587 = v13;
  uint64_t v15 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)ActiveColorSpace);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::NodeGraph>(v14, (uint64_t)v15, (uint64_t *)&v694);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer first = v694.__first_;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = v694.__begin_;
  if (v694.__first_ != v694.__begin_)
  {
    uint64_t v17 = &v634;
    uint64_t v18 = (char *)&v688 + 4;
    unint64_t v19 = &v688;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        uint64_t v21 = (void *)(first->first.__r_.__value_.__r.__words[0] + 48);
        if (*(char *)(first->first.__r_.__value_.__r.__words[0] + 71) < 0) {
          uint64_t v21 = (void *)*v21;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Read node graph %s\n", v20, v21);
      }
      std::string v23 = (RIO_MTLX::NodeGraph *)first->first.__r_.__value_.__r.__words[0];
      size_t size = (std::__shared_weak_count *)first->first.__r_.__value_.__l.__size_;
      if (size) {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char IsValid = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v24);
      if (v23) {
        char v26 = IsValid;
      }
      else {
        char v26 = 1;
      }
      if ((v26 & 1) == 0)
      {
        RIO_MTLX::NodeGraph::getNodeDef(v23, &v657);
        if (v657)
        {
          if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
          {
            std::string v28 = v657 + 6;
            if (*((char *)v657 + 71) < 0) {
              std::string v28 = (void *)*v28;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Add mtlxNodeDef %s\n", v27, v28);
          }
          std::string v29 = v19;
          uint64_t v30 = v18;
          int v31 = v17;
          uint64_t v32 = (uint64_t)v657;
          uint64_t v33 = v658;
          if (v658)
          {
            atomic_fetch_add_explicit(&v658->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v34 = *(std::__shared_weak_count **)&v695[8];
          *(void *)v695 = v32;
          *(void *)&v695[8] = v33;
          if (v34) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
          }
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          if (size)
          {
            atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v35 = *(std::__shared_weak_count **)&v695[24];
          *(void *)&v695[16] = v23;
          *(void *)&v695[24] = size;
          uint64_t v17 = v31;
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          uint64_t v18 = v30;
          if (size) {
            std::__shared_weak_count::__release_shared[abi:ne180100](size);
          }
          uint64_t v36 = (std::string *)v657;
          uint64_t v37 = v658;
          unint64_t v19 = v29;
          if (v658) {
            atomic_fetch_add_explicit(&v658->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
        }
        if (v658) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v658);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v19);
      std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*((void **)&v686[1] + 1));
      if ((BYTE8(v686[0]) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
      if (v685[1]) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
      }
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
      std::__split_buffer<std::pair<std::string, std::string>>::pointer first = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)first + 16);
    }
    while (first != begin);
  }
  *(void *)v695 = &v694;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
  char v38 = (RIO_MTLX *)v587;
  if (v587) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v587);
  }
  uint64_t v40 = *a1;
  char v39 = (std::__shared_weak_count *)a1[1];
  if (v39) {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v570 = v39;
  BOOL v41 = RIO_MTLX::MATERIAL_TYPE_STRING(v38);
  RIO_MTLX::GraphElement::getNodesOfType((RIO_MTLX *)&v681, v40, (uint64_t)v41);
  uint64_t v568 = v40;
  std::string::size_type v599 = v681.__r_.__value_.__l.__size_;
  for (uint64_t i = (std::string **)v681.__r_.__value_.__r.__words[0]; i != (std::string **)v599; i += 2)
  {
    if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
    {
      uint64_t v44 = (std::string::__raw *)&(*i)[2];
      if (SHIBYTE((*i)[2].__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v44 = (std::string::__raw *)v44->__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding mtlxMaterial '%s'\n", v43, v44);
    }
    uint64_t v46 = *i;
    long long v45 = (std::__shared_weak_count *)i[1];
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v654
      || (v654[2].__shared_owners_ & 0x800) != 0
      || !(*(unsigned int (**)(uint64_t))(v653 + 32))(v602)
      || (*(void *)v695 = "CoreRealityIO/mtlxToUsdShade.cpp",
          *(void *)&v695[8] = "BeginMaterial",
          *(void *)&v695[16] = 1357,
          *(void *)&v695[24] = "UsdShadeMaterial realityio::mtlx::(anonymous namespace)::_Context::BeginMaterial(const "
                                 "mx::ConstNodePtr &)",
          LOBYTE(v696) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper() & 1) != 0))
    {
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v46) {
      else
      }
        *(void *)v695 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)v604, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v625, (const pxrInternal__aapl__pxrReserved__::TfToken *)v695);
      if ((v695[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v695 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::Define();
      if (v658
        && (v658[2].__shared_owners_ & 0x800) == 0
        && ((unsigned int (*)(std::pair<std::string, std::string> ***))v657[4])(&v657))
      {
        uint64_t v47 = pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v695, (uint64_t *)&v658, &v659);
        v685[0] = v46;
        v685[1] = v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        if ((v695[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
        if (*(void *)&v695[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        *((void *)&v686[0] + 1) = 0;
        v685[0] = (void *)(MEMORY[0x263F90790] + 16);
        *(void *)v695 = v46 + 2;
        unint64_t v48 = std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v647, (const void **)&v46[2].__r_.__value_.__l.__data_, (long long **)v695);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        unint64_t v49 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)(v48 + 7), &v613, (const void **)__p);
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v50 = *v49;
        if (!*v49)
        {
          std::string v51 = (uint64_t **)v49;
          long long v52 = (std::pair<std::string, std::string> *)operator new(0x58uLL);
          v694.__first_ = v52;
          v694.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(v48 + 8);
          LOBYTE(v694.__end_) = 0;
          *(_OWORD *)&v52->second.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
          v52[1].first.__r_.__value_.__r.__words[0] = v678;
          __p[1] = 0;
          __p[0] = 0;
          *(void *)&long long v678 = 0;
          *(_DWORD *)v695 = 1;
          *(void *)&v695[8] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          *(void *)&v695[24] = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
          v52[1].second.__r_.__value_.__l.__size_ = 0;
          v52[1].first.__r_.__value_.__l.__size_ = MEMORY[0x263F90790] + 16;
          if ((v695[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
          if (*(void *)&v695[8]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
          }
          LOBYTE(v694.__end_) = 1;
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v50 = v694.__first_;
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at((uint64_t **)v48 + 7, (uint64_t)v613, v51, (uint64_t *)v694.__first_);
          v694.__first_ = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v694);
        }
        long long v53 = v685[1];
        if (v685[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v685[1] + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v54 = v50[1].first.__r_.__value_.__r.__words[2];
        v50[1].first.__r_.__value_.__r.__words[2] = (std::string::size_type)v53;
        if (v54) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v50[1].second, v686);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v50[1].second.__r_.__value_.__r.__words + 4, (_DWORD *)v686 + 1);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v50[1].second.__r_.__value_.__l.__size_, (void *)v686 + 1);
        if (SBYTE7(v678) < 0) {
          operator delete(__p[0]);
        }
        MEMORY[0x2455CF2C0](v685);
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v55 = v652;
        v651 = v46;
        v652 = v45;
        if (v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
        }
        uint64_t v56 = v658;
        if (v658) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)&v658[2], 1uLL, memory_order_relaxed);
        }
        uint64_t v57 = (uint64_t)v654;
        v654 = v56;
        if (v57) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v57);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v655, &v659);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v656, (_DWORD *)&v659 + 1);
      }
      MEMORY[0x2455CEF40](&v657);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v604);
    }
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    v675.__r_.__value_.__r.__words[0] = MEMORY[0x263F90740] + 16;
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
    if (v675.__r_.__value_.__l.__size_
      && (*(unsigned char *)(v675.__r_.__value_.__l.__size_ + 57) & 8) == 0
      && (long long v58 = (RIO_MTLX *)(*(uint64_t (**)(std::string *))(v675.__r_.__value_.__r.__words[0] + 32))(&v675),
          v58))
    {
      uint64_t v59 = (unsigned __int8 *)RIO_MTLX::SURFACE_SHADER_TYPE_STRING(v58);
      uint64_t v61 = (unsigned __int8 *)RIO_MTLX::VOLUME_SHADER_TYPE_STRING(v60);
      uint64_t v63 = (unsigned __int8 *)RIO_MTLX::DISPLACEMENT_SHADER_TYPE_STRING(v62);
      unint64_t v65 = (unsigned __int8 *)RIO_MTLX::LIGHT_SHADER_TYPE_STRING(v64);
      if (v654
        && (v654[2].__shared_owners_ & 0x800) == 0
        && ((*(uint64_t (**)(uint64_t))(v653 + 32))(v602) & 1) != 0
        || (*(void *)v695 = "CoreRealityIO/mtlxToUsdShade.cpp",
            *(void *)&v695[8] = "EndMaterial",
            *(void *)&v695[16] = 1375,
            *(void *)&v695[24] = "void realityio::mtlx::(anonymous namespace)::_Context::EndMaterial()",
            LOBYTE(v696) = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper() & 1) != 0))
      {
        uint64_t v66 = v651;
        unint64_t v67 = v637;
        uint64_t v68 = v651 + 2;
        unint64_t v69 = &v637;
        long long v70 = (void **)&v637;
        if (!v637) {
          goto LABEL_164;
        }
        long long v70 = (void **)&v637;
        while (1)
        {
          while (1)
          {
            unint64_t v69 = (uint64_t **)v67;
            uint64_t v71 = (const void **)(v67 + 4);
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v638, (const void **)&v68->__r_.__value_.__l.__data_, (const void **)v67 + 4))break; {
            unint64_t v67 = *v69;
            }
            long long v70 = (void **)v69;
            if (!*v69) {
              goto LABEL_164;
            }
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v638, v71, (const void **)&v68->__r_.__value_.__l.__data_))break; {
          long long v70 = (void **)(v69 + 1);
          }
          unint64_t v67 = v69[1];
          if (!v67) {
            goto LABEL_164;
          }
        }
        uint64_t v72 = *v70;
        if (!*v70)
        {
LABEL_164:
          uint64_t v73 = (char *)operator new(0x50uLL);
          v685[0] = v73;
          v685[1] = &v637;
          LOBYTE(v686[0]) = 0;
          if (SHIBYTE(v66[2].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v73 + 32), v66[2].__r_.__value_.__l.__data_, v66[2].__r_.__value_.__l.__size_);
          }
          else
          {
            long long v74 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
            *((void *)v73 + 6) = *((void *)&v68->__r_.__value_.__l + 2);
            *((_OWORD *)v73 + 2) = v74;
          }
          *(_DWORD *)v695 = 1;
          *(void *)&v695[8] = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
          *(void *)&v695[24] = 0;
          *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase() = MEMORY[0x263F90740] + 16;
          if ((v695[24] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
          if (*(void *)&v695[8]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
          }
          LOBYTE(v686[0]) = 1;
          uint64_t v75 = (uint64_t *)v685[0];
          *(void *)v685[0] = 0;
          v75[1] = 0;
          v75[2] = (uint64_t)v69;
          *long long v70 = v75;
          if (*v636)
          {
            v636 = (uint64_t **)*v636;
            uint64_t v75 = (uint64_t *)*v70;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v637, v75);
          ++v638[0];
          uint64_t v72 = v685[0];
          v685[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,void *>>>>::reset[abi:ne180100]((uint64_t)v685);
        }
        uint64_t v76 = v654;
        if (v654) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)&v654[2], 1uLL, memory_order_relaxed);
        }
        uint64_t v77 = v72[8];
        v72[8] = v76;
        if (v77) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v77);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v72 + 9), &v655);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v72 + 76, &v656);
        long long v78 = v652;
        v651 = 0;
        v652 = 0;
        if (v78) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v78);
        }
        *(_DWORD *)v695 = 1;
        *(void *)&v695[8] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(void *)&v695[24] = 0;
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        v685[0] = (void *)(MEMORY[0x263F90740] + 16);
        long long v79 = (std::__shared_weak_count *)v685[1];
        if (v685[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v685[1] + 6, 1uLL, memory_order_relaxed);
        }
        uint64_t v80 = (uint64_t)v654;
        v654 = v79;
        if (v80) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v80);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v655, v686);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v656, (_DWORD *)v686 + 1);
        MEMORY[0x2455CEF40](v685);
        if ((v695[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
        if (*(void *)&v695[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
        }
      }
    }
    else
    {
      *(void *)v695 = "CoreRealityIO/mtlxToUsdShade.cpp";
      *(void *)&v695[8] = "ReadMaterials";
      *(void *)&v695[16] = 2142;
      *(void *)&v695[24] = "void realityio::mtlx::(anonymous namespace)::ReadMaterials(mx::ConstDocumentPtr, _Context &)";
      LOBYTE(v696) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    }
    MEMORY[0x2455CEF40](&v675);
  }
  *(void *)v695 = &v681;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
  long long v82 = RIO_MTLX::MATERIAL_TYPE_STRING(v81);
  RIO_MTLX::GraphElement::getNodesOfType((RIO_MTLX *)&v694, v568, (uint64_t)v82);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v83 = v694.__first_;
  for (std::__split_buffer<std::pair<std::string, std::string>>::pointer j = v694.__begin_;
        v83 != j;
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v83 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)v83 + 16))
  {
    if (v658)
    {
      if ((v658[2].__shared_owners_ & 0x800) == 0)
      {
        long long v85 = (realityio::mtlx::_anonymous_namespace_ *)((uint64_t (*)(std::pair<std::string, std::string> ***))v657[4])(&v657);
        if (v85)
        {
          if (*(char *)(v681.__r_.__value_.__r.__words[0] + 23) < 0)
          {
            if (*(void *)(v681.__r_.__value_.__r.__words[0] + 8))
            {
LABEL_200:
              if (__p[1]
                && (*((unsigned char *)__p[1] + 57) & 8) == 0
                && (*((unsigned int (**)(void **))__p[0] + 4))(__p))
              {
                pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v685, (uint64_t *)&v658, &v659);
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetSpecializes((uint64_t *)v695, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v685);
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p, &v675);
                MEMORY[0x2455CECC0](v695, &v675, 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v675);
                if ((v695[24] & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
                if (*(void *)&v695[8]) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
                }
                if ((BYTE8(v686[0]) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
                if (v685[1]) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
                }
                if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
                {
                  long long v87 = (void *)(v83->first.__r_.__value_.__r.__words[0] + 48);
                  if (*(char *)(v83->first.__r_.__value_.__r.__words[0] + 71) < 0) {
                    long long v87 = (void *)*v87;
                  }
                  std::string::size_type v88 = v681.__r_.__value_.__r.__words[0];
                  if (*(char *)(v681.__r_.__value_.__r.__words[0] + 23) < 0) {
                    std::string::size_type v88 = *(void *)v681.__r_.__value_.__l.__data_;
                  }
                  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Material '%s' inherit from  '%s'\n", v86, v87, v88);
                }
              }
              else
              {
                *(void *)v695 = "CoreRealityIO/mtlxToUsdShade.cpp";
                *(void *)&v695[8] = "ReadMaterials";
                *(void *)&v695[16] = 2162;
                *(void *)&v695[24] = "void realityio::mtlx::(anonymous namespace)::ReadMaterials(mx::ConstDocumentPtr, _Context &)";
                LOBYTE(v696) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
              }
              MEMORY[0x2455CEF40](__p);
            }
          }
          else if (*(unsigned char *)(v681.__r_.__value_.__r.__words[0] + 23))
          {
            goto LABEL_200;
          }
        }
      }
    }
    MEMORY[0x2455CEF40](&v657);
  }
  *(void *)v695 = &v694;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
  uint64_t v89 = (RIO_MTLX *)v570;
  if (v570) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v570);
  }
  uint64_t v90 = *a1;
  unint64_t v91 = RIO_MTLX::EMPTY_STRING(v89);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v90, (uint64_t)v91, (uint64_t *)v695);
  long long v92 = *(_OWORD *)v695;
  v685[0] = v695;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
  if ((void)v92 == *((void *)&v92 + 1)) {
    goto LABEL_1170;
  }
  uint64_t v95 = *a1;
  long long v94 = (std::__shared_weak_count *)a1[1];
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v583 = v94;
  v685[1] = 0;
  v685[0] = 0;
  *(void *)&v686[0] = 0;
  long long v97 = *(long long **)(v95 + 136);
  long long v98 = *(long long **)(v95 + 144);
  if (v97 == v98) {
    goto LABEL_350;
  }
  do
  {
    uint64_t v99 = *(unsigned __int8 *)(*(void *)v97 + 47);
    if ((v99 & 0x80u) == 0) {
      uint64_t v100 = *(unsigned __int8 *)(*(void *)v97 + 47);
    }
    else {
      uint64_t v100 = *(void *)(*(void *)v97 + 32);
    }
    uint64_t v101 = byte_268C4121F;
    if (byte_268C4121F < 0) {
      uint64_t v101 = qword_268C41210;
    }
    if (v100 == v101)
    {
      long long v102 = (const void **)(*(void *)v97 + 24);
      if (byte_268C4121F >= 0) {
        long long v103 = &qword_268C41208;
      }
      else {
        long long v103 = (uint64_t *)qword_268C41208;
      }
      if ((v99 & 0x80) != 0)
      {
        long long v96 = (void **)memcmp(*v102, v103, *(void *)(*(void *)v97 + 32));
        if (v96) {
          goto LABEL_242;
        }
LABEL_241:
        long long v96 = std::vector<std::shared_ptr<RIO_MTLX::Element>>::emplace_back<std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t *)v685, v97);
        goto LABEL_242;
      }
      if (!*(unsigned char *)(*(void *)v97 + 47)) {
        goto LABEL_241;
      }
      while (*(unsigned __int8 *)v102 == *(unsigned __int8 *)v103)
      {
        long long v102 = (const void **)((char *)v102 + 1);
        long long v103 = (uint64_t *)((char *)v103 + 1);
        if (!--v99) {
          goto LABEL_241;
        }
      }
    }
LABEL_242:
    ++v97;
  }
  while (v97 != v98);
  v585 = (char *)v685[1];
  v588 = (char *)v685[0];
  if (v685[0] == v685[1]) {
    goto LABEL_350;
  }
  p_std::__split_buffer<std::pair<std::string, std::string>>::pointer end = &v694.__end_;
  while (2)
  {
    v694.__begin_ = 0;
    v694.__end_ = 0;
    v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v694.__begin_;
    v658 = 0;
    v657 = 0;
    v659 = 0;
    long long v106 = *(long long **)(*(void *)v588 + 136);
    long long v105 = *(long long **)(*(void *)v588 + 144);
    if (v106 == v105) {
      goto LABEL_323;
    }
    while (2)
    {
      uint64_t v107 = *(unsigned __int8 *)(*(void *)v106 + 47);
      if ((v107 & 0x80u) == 0) {
        uint64_t v108 = *(unsigned __int8 *)(*(void *)v106 + 47);
      }
      else {
        uint64_t v108 = *(void *)(*(void *)v106 + 32);
      }
      uint64_t v109 = byte_268C411EF;
      if (byte_268C411EF < 0) {
        uint64_t v109 = qword_268C411E0;
      }
      if (v108 == v109)
      {
        uint64_t v110 = (const void **)(*(void *)v106 + 24);
        if (byte_268C411EF >= 0) {
          long long v111 = &qword_268C411D8;
        }
        else {
          long long v111 = (uint64_t *)qword_268C411D8;
        }
        if ((v107 & 0x80) != 0)
        {
          if (memcmp(*v110, v111, *(void *)(*(void *)v106 + 32))) {
            goto LABEL_262;
          }
        }
        else if (*(unsigned char *)(*(void *)v106 + 47))
        {
          while (*(unsigned __int8 *)v110 == *(unsigned __int8 *)v111)
          {
            uint64_t v110 = (const void **)((char *)v110 + 1);
            long long v111 = (uint64_t *)((char *)v111 + 1);
            if (!--v107) {
              goto LABEL_261;
            }
          }
          goto LABEL_262;
        }
LABEL_261:
        std::vector<std::shared_ptr<RIO_MTLX::Element>>::emplace_back<std::shared_ptr<RIO_MTLX::Element> const&>((uint64_t *)&v657, v106);
      }
LABEL_262:
      if (++v106 != v105) {
        continue;
      }
      break;
    }
    uint64_t v112 = v657;
    long long v113 = v658;
    v592 = v658;
    while (v112 != (std::pair<std::string, std::string> **)v113)
    {
      __p[1] = 0;
      *(void *)&long long v678 = 0;
      __p[0] = &__p[1];
      memset(&v681, 0, sizeof(v681));
      v600 = v112;
      long long v114 = *v112;
      uint64_t v115 = (uint64_t *)v114[2].second.__r_.__value_.__r.__words[2];
      data = (uint64_t *)v114[3].first.__r_.__value_.__l.__data_;
      if (v115 != data)
      {
        do
        {
          RIO_MTLX::Element::asA<RIO_MTLX::ValueElement>(*v115, &v675);
          if (v675.__r_.__value_.__r.__words[0])
          {
            std::string::size_type v117 = v681.__r_.__value_.__l.__size_;
            if (v681.__r_.__value_.__l.__size_ >= v681.__r_.__value_.__r.__words[2])
            {
              uint64_t v119 = (uint64_t)(v681.__r_.__value_.__l.__size_ - v681.__r_.__value_.__r.__words[0]) >> 4;
              unint64_t v120 = v119 + 1;
              if ((unint64_t)(v119 + 1) >> 60) {
                std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
              }
              int64_t v121 = v681.__r_.__value_.__r.__words[2] - v681.__r_.__value_.__r.__words[0];
              if ((uint64_t)(v681.__r_.__value_.__r.__words[2] - v681.__r_.__value_.__r.__words[0]) >> 3 > v120) {
                unint64_t v120 = v121 >> 3;
              }
              if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v122 = v120;
              }
              *(void *)&long long v696 = (char *)&v681.__r_.__value_.__l + 16;
              uint64_t v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<realityio::DirtyStageDescriptor const>>>((uint64_t)&v681.__r_.__value_.__r.__words[2], v122);
              uint64_t v124 = &v123[16 * v119];
              *(void *)v695 = v123;
              *(void *)&v695[8] = v124;
              *(void *)&v695[24] = &v123[16 * v125];
              *(_OWORD *)uint64_t v124 = *(_OWORD *)&v675.__r_.__value_.__l.__data_;
              *(_OWORD *)&v675.__r_.__value_.__l.__data_ = 0uLL;
              *(void *)&v695[16] = v124 + 16;
              std::vector<std::shared_ptr<RIO_MTLX::ValueElement>>::__swap_out_circular_buffer((uint64_t *)&v681, v695);
              std::string::size_type v118 = v681.__r_.__value_.__l.__size_;
              std::__split_buffer<std::shared_ptr<RIO_MTLX::GeomInfo>>::~__split_buffer((void **)v695);
            }
            else
            {
              *(void *)v681.__r_.__value_.__l.__size_ = v675.__r_.__value_.__r.__words[0];
              *(void *)(v117 + 8) = v675.__r_.__value_.__l.__size_;
              *(_OWORD *)&v675.__r_.__value_.__l.__data_ = 0uLL;
              std::string::size_type v118 = v117 + 16;
            }
            v681.__r_.__value_.__l.__size_ = v118;
          }
          if (v675.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v675.__r_.__value_.__l.__size_);
          }
          v115 += 2;
        }
        while (v115 != data);
        std::string::size_type v127 = v681.__r_.__value_.__l.__size_;
        for (uint64_t k = (uint64_t *)v681.__r_.__value_.__r.__words[0]; k != (uint64_t *)v127; k += 2)
        {
          uint64_t v128 = p_end;
          uint64_t v129 = *k;
          uint64_t v130 = *k + 48;
          uint64_t v131 = (char *)__p[1];
          uint64_t v132 = &__p[1];
          std::string v133 = &__p[1];
          if (!__p[1]) {
            goto LABEL_291;
          }
          uint64_t v132 = &__p[1];
          while (1)
          {
            while (1)
            {
              std::string v133 = (void **)v131;
              uint64_t v134 = (const void **)(v131 + 32);
              if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v678, (const void **)v130, (const void **)v131 + 4))break; {
              uint64_t v131 = (char *)*v133;
              }
              uint64_t v132 = v133;
              if (!*v133) {
                goto LABEL_291;
              }
            }
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v678, v134, (const void **)v130)) {
              break;
            }
            uint64_t v132 = v133 + 1;
            uint64_t v131 = (char *)v133[1];
            if (!v131) {
              goto LABEL_291;
            }
          }
          uint64_t v135 = *v132;
          if (!*v132)
          {
LABEL_291:
            uint64_t v136 = (uint64_t *)operator new(0x48uLL);
            *(void *)v695 = v136;
            *(void *)&v695[8] = &__p[1];
            v695[16] = 0;
            std::string v137 = (std::string *)(v136 + 4);
            if (*(char *)(v129 + 71) < 0)
            {
              std::string::__init_copy_ctor_external(v137, *(const std::string::value_type **)(v129 + 48), *(void *)(v129 + 56));
            }
            else
            {
              long long v138 = *(_OWORD *)v130;
              v136[6] = *(void *)(v130 + 16);
              *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v138;
            }
            v136[7] = 0;
            v136[8] = 0;
            v695[16] = 1;
            uint64_t *v136 = 0;
            v136[1] = 0;
            v136[2] = (uint64_t)v133;
            pxrInternal__aapl__pxrReserved__::VtValue *v132 = v136;
            if (*(void *)__p[0])
            {
              __p[0] = *(void **)__p[0];
              uint64_t v136 = (uint64_t *)*v132;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)__p[1], v136);
            *(void *)&long long v678 = v678 + 1;
            uint64_t v135 = *(void **)v695;
            *(void *)v695 = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v695);
          }
          uint64_t v140 = *k;
          uint64_t v139 = k[1];
          if (v139) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v139 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v141 = (std::__shared_weak_count *)*((void *)v135 + 8);
          *((void *)v135 + 7) = v140;
          *((void *)v135 + 8) = v139;
          p_std::__split_buffer<std::pair<std::string, std::string>>::pointer end = v128;
          if (v141) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v141);
          }
        }
      }
      *(void *)v695 = &v681;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
      if ((void)v678)
      {
        p_std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = &v694.__begin_;
        std::string v143 = *v600;
        uint64_t v144 = (uint64_t)&(*v600)[1];
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v145 = v694.__begin_;
        uint64_t v146 = &v694.__begin_;
        if (!v694.__begin_) {
          goto LABEL_313;
        }
        uint64_t v146 = &v694.__begin_;
        while (1)
        {
          while (1)
          {
            p_std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v145;
            p_size_t size = (const void **)&v145->second.__r_.__value_.__l.__size_;
            if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)p_end, (const void **)v144, (const void **)&v145->second.__r_.__value_.__l.__size_))break; {
            std::__split_buffer<std::pair<std::string, std::string>>::pointer v145 = *p_begin;
            }
            uint64_t v146 = p_begin;
            if (!*p_begin) {
              goto LABEL_313;
            }
          }
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)p_end, p_size, (const void **)v144)) {
            break;
          }
          uint64_t v146 = p_begin + 1;
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v145 = p_begin[1];
          if (!v145) {
            goto LABEL_313;
          }
        }
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v149 = *v146;
        if (!*v146)
        {
LABEL_313:
          uint64_t v150 = (uint64_t *)operator new(0x50uLL);
          *(void *)v695 = v150;
          *(void *)&v695[8] = &v694.__begin_;
          v695[16] = 0;
          std::string v151 = (std::string *)(v150 + 4);
          if (SHIBYTE(v143[1].first.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v151, v143[1].first.__r_.__value_.__l.__data_, v143[1].first.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v152 = *(_OWORD *)v144;
            v150[6] = *(void *)(v144 + 16);
            *(_OWORD *)&v151->__r_.__value_.__l.__data_ = v152;
          }
          v150[9] = 0;
          v150[8] = 0;
          v150[7] = (uint64_t)(v150 + 8);
          v695[16] = 1;
          uint64_t *v150 = 0;
          v150[1] = 0;
          v150[2] = (uint64_t)p_begin;
          *uint64_t v146 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v150;
          if (v694.__first_->first.__r_.__value_.__r.__words[0])
          {
            v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v694.__first_->first.__r_.__value_.__l.__data_;
            uint64_t v150 = (uint64_t *)*v146;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v694.__begin_, v150);
          ++v694.__end_;
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v149 = *(std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v695;
          *(void *)v695 = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v695);
        }
        uint64_t v153 = &v149[1].first.__r_.__value_.__s.__data_[16];
        std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy((void *)v149[1].first.__r_.__value_.__r.__words[2]);
        uint64_t v148 = __p[1];
        v149[1].first.__r_.__value_.__l.__size_ = (std::string::size_type)__p[0];
        v149[1].first.__r_.__value_.__r.__words[2] = (std::string::size_type)v148;
        uint64_t v154 = v678;
        v149[1].second.__r_.__value_.__r.__words[0] = v678;
        if (v154)
        {
          v148[2] = v153;
          __p[0] = &__p[1];
          __p[1] = 0;
          *(void *)&long long v678 = 0;
          uint64_t v148 = 0;
        }
        else
        {
          v149[1].first.__r_.__value_.__l.__size_ = (std::string::size_type)v153;
        }
      }
      else
      {
        uint64_t v148 = __p[1];
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(v148);
      uint64_t v112 = v600 + 2;
      long long v113 = v592;
    }
LABEL_323:
    *(void *)v695 = &v657;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
    if (v694.__end_)
    {
      uint64_t v155 = *(void *)v588;
      uint64_t v156 = *(void *)v588 + 48;
      std::string v157 = v629;
      uint64_t v158 = &v629;
      std::string v159 = &v629;
      if (!v629) {
        goto LABEL_333;
      }
      std::string v159 = &v629;
      while (1)
      {
        while (1)
        {
          uint64_t v158 = (uint64_t **)v157;
          uint64_t v160 = (const void **)(v157 + 4);
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v630, (const void **)v156, (const void **)v157 + 4))break; {
          std::string v157 = *v158;
          }
          std::string v159 = v158;
          if (!*v158) {
            goto LABEL_333;
          }
        }
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v630, v160, (const void **)v156)) {
          break;
        }
        std::string v159 = v158 + 1;
        std::string v157 = v158[1];
        if (!v157) {
          goto LABEL_333;
        }
      }
      uint64_t v161 = *v159;
      if (!*v159)
      {
LABEL_333:
        uint64_t v162 = (uint64_t *)operator new(0x50uLL);
        *(void *)v695 = v162;
        *(void *)&v695[8] = &v629;
        v695[16] = 0;
        uint64_t v163 = (std::string *)(v162 + 4);
        if (*(char *)(v155 + 71) < 0)
        {
          std::string::__init_copy_ctor_external(v163, *(const std::string::value_type **)(v155 + 48), *(void *)(v155 + 56));
        }
        else
        {
          long long v164 = *(_OWORD *)v156;
          v162[6] = *(void *)(v156 + 16);
          *(_OWORD *)&v163->__r_.__value_.__l.__data_ = v164;
        }
        v162[9] = 0;
        v162[8] = 0;
        v162[7] = (uint64_t)(v162 + 8);
        v695[16] = 1;
        *uint64_t v162 = 0;
        v162[1] = 0;
        v162[2] = (uint64_t)v158;
        *std::string v159 = v162;
        if (*v628)
        {
          v628 = (uint64_t **)*v628;
          uint64_t v162 = *v159;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v629, v162);
        ++v630;
        uint64_t v161 = *(uint64_t **)v695;
        *(void *)v695 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v695);
      }
      std::string::size_type v165 = (std::string::size_type)(v161 + 8);
      std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy((void *)v161[8]);
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v166 = v694.__begin_;
      v161[7] = (uint64_t)v694.__first_;
      v161[8] = (uint64_t)v166;
      std::__split_buffer<std::pair<std::string, std::string>>::pointer end = v694.__end_;
      v161[9] = (uint64_t)v694.__end_;
      if (end)
      {
        v166->first.__r_.__value_.__r.__words[2] = v165;
        v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v694.__begin_;
        v694.__begin_ = 0;
        v694.__end_ = 0;
      }
      else
      {
        v161[7] = v165;
      }
      uint64_t v168 = v632;
      if ((unint64_t)v632 >= v633)
      {
        uint64_t v170 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__str, (long long *)v156);
      }
      else
      {
        if (*(char *)(v155 + 71) < 0)
        {
          std::string::__init_copy_ctor_external(v632, *(const std::string::value_type **)(v155 + 48), *(void *)(v155 + 56));
        }
        else
        {
          long long v169 = *(_OWORD *)v156;
          v632->__r_.__value_.__r.__words[2] = *(void *)(v156 + 16);
          *(_OWORD *)&v168->__r_.__value_.__l.__data_ = v169;
        }
        uint64_t v170 = v168 + 1;
      }
      v632 = v170;
    }
    std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(v694.__begin_->first.__r_.__value_.__r.__words);
    v588 += 16;
    if (v588 != v585) {
      continue;
    }
    break;
  }
LABEL_350:
  *(void *)v695 = v685;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
  std::string v171 = (RIO_MTLX *)v583;
  if (v583) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v583);
  }
  uint64_t v173 = *a1;
  uint64_t v172 = (std::__shared_weak_count *)a1[1];
  if (v172) {
    atomic_fetch_add_explicit(&v172->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v571 = v172;
  uint64_t v174 = RIO_MTLX::EMPTY_STRING(v171);
  uint64_t v175 = *(uint64_t **)(v173 + 136);
  uint64_t v176 = *(uint64_t **)(v173 + 144);
  v685[1] = 0;
  v685[0] = 0;
  *(void *)&v686[0] = 0;
  if (v175 == v176)
  {
LABEL_388:
    char v569 = 1;
    goto LABEL_389;
  }
  uint64_t v177 = v174;
  while (2)
  {
    uint64_t v179 = *v175;
    uint64_t v178 = (std::__shared_weak_count *)v175[1];
    if (v178) {
      atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Collection>(v179, v695);
    if (*(void *)v695)
    {
      int v180 = *((char *)v177 + 23);
      uint64_t v181 = v177[1];
      if (v180 >= 0) {
        uint64_t v181 = *((unsigned __int8 *)v177 + 23);
      }
      if (v181)
      {
        uint64_t v182 = *(unsigned __int8 *)(v179 + 47);
        if ((v182 & 0x80u) == 0) {
          uint64_t v183 = *(unsigned __int8 *)(v179 + 47);
        }
        else {
          uint64_t v183 = *(void *)(v179 + 32);
        }
        if (v183 != v181) {
          goto LABEL_376;
        }
        uint64_t v184 = (const void **)(v179 + 24);
        if (v180 >= 0) {
          std::string v185 = (unsigned __int8 *)v177;
        }
        else {
          std::string v185 = (unsigned __int8 *)*v177;
        }
        if ((v182 & 0x80) != 0)
        {
          if (memcmp(*v184, v185, *(void *)(v179 + 32))) {
            goto LABEL_376;
          }
        }
        else if (*(unsigned char *)(v179 + 47))
        {
          while (*(unsigned __int8 *)v184 == *v185)
          {
            uint64_t v184 = (const void **)((char *)v184 + 1);
            ++v185;
            if (!--v182) {
              goto LABEL_375;
            }
          }
          goto LABEL_376;
        }
      }
LABEL_375:
      std::vector<std::shared_ptr<RIO_MTLX::Collection>>::push_back[abi:ne180100]((uint64_t *)v685, (long long *)v695);
    }
LABEL_376:
    if (*(void *)&v695[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v695[8]);
    }
    if (v178) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v178);
    }
    v175 += 2;
    if (v175 != v176) {
      continue;
    }
    break;
  }
  uint64_t v186 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v685[0];
  std::string v187 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)v685[1];
  if (v685[0] == v685[1]) {
    goto LABEL_388;
  }
  do
  {
    v694.__first_ = *v186;
    uint64_t v188 = v186[1];
    v694.__begin_ = v188;
    if (v188) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v188->first.__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
    }
    *(void *)&v695[8] = 0;
    *(void *)&v695[16] = 0;
    *(void *)v695 = &v695[8];
    std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(*(void **)&v695[8]);
    MEMORY[0x2455CEEA0](__p);
    if (v188) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v188);
    }
    v186 += 2;
  }
  while (v186 != v187);
  char v569 = 0;
LABEL_389:
  *(void *)v695 = v685;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
  uint64_t v190 = RIO_MTLX::EMPTY_STRING(v189);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v173, (uint64_t)v190, (uint64_t *)&Name);
  uint64_t v192 = Name;
  v572 = v674;
  if (Name == v674) {
    goto LABEL_549;
  }
  v584 = *(uint64_t (**)(void **))(MEMORY[0x263F90718] + 48);
  while (2)
  {
    v577 = v192;
    uint64_t v193 = *v192;
    uint64_t v194 = RIO_MTLX::EMPTY_STRING(v191);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>(v193, (uint64_t)v194, (uint64_t *)&v670);
    std::string v195 = v670;
    uint64_t v196 = v671;
    v586 = v671;
    while (2)
    {
      if (v195 != v196)
      {
        uint64_t v198 = *(RIO_MTLX::Element **)v195;
        std::string v197 = (std::__shared_weak_count *)*((void *)v195 + 1);
        if (v197) {
          atomic_fetch_add_explicit(&v197->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_DWORD *)v695 = 1;
        *(void *)&v695[8] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(void *)&v695[24] = 0;
        v685[0] = 0;
        pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v694, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v695, (const pxrInternal__aapl__pxrReserved__::TfToken *)v685);
        v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)(MEMORY[0x263F90718] + 16);
        if ((v695[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
        uint64_t v199 = *(realityio::mtlx::_anonymous_namespace_ **)&v695[8];
        if (*(void *)&v695[8]) {
          uint64_t v199 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
        }
        long long v201 = (const void **)v618;
        if (*((char *)v618 + 23) < 0)
        {
          if (!v618[1]) {
            goto LABEL_416;
          }
LABEL_401:
          uint64_t v202 = v639;
          if (!v639) {
            goto LABEL_411;
          }
          uint64_t v203 = &v639;
          do
          {
            uint64_t v204 = v203;
            long long v205 = (const void **)(v202 + 32);
            BOOL v206 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v640, (const void **)(v202 + 32), v201);
            uint64_t v207 = (uint64_t *)(v202 + 8);
            if (!v206)
            {
              uint64_t v207 = (uint64_t *)v202;
              uint64_t v203 = (uint64_t *)v202;
            }
            uint64_t v202 = *v207;
          }
          while (*v207);
          if (v203 == &v639
            || (!v206 ? (long long v208 = v205) : (long long v208 = (const void **)(v204 + 4)),
                std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v640, v201, v208)))
          {
LABEL_411:
            *(void *)v695 = "CoreRealityIO/mtlxToUsdShade.cpp";
            *(void *)&v695[8] = "AddGeometryReference";
            *(void *)&v695[16] = 1588;
            *(void *)&v695[24] = "UsdCollectionAPI realityio::mtlx::(anonymous namespace)::_Context::AddGeometryReferen"
                                   "ce(const mx::ConstGeomElementPtr &)";
            LOBYTE(v696) = 0;
            v658 = 0;
            v657 = 0;
            RIO_MTLX::Element::getNamePath(v198, (uint64_t)&v657, (uint64_t)v685);
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
            if (SBYTE7(v686[0]) < 0) {
              operator delete(v685[0]);
            }
            if (v658) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v658);
            }
          }
          else
          {
            uint64_t v222 = (std::pair<std::string, std::string> *)v203[8];
            if (v222) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)&v222[1], 1uLL, memory_order_relaxed);
            }
            std::__split_buffer<std::pair<std::string, std::string>>::pointer v223 = v694.__begin_;
            v694.__begin_ = v222;
            if (v223) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v223);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v694.__end_, (_DWORD *)v203 + 18);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v694.__end_ + 4, (_DWORD *)v203 + 19);
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v694.__end_cap_.__value_, v203 + 10);
          }
        }
        else
        {
          if (*((unsigned char *)v618 + 23)) {
            goto LABEL_401;
          }
LABEL_416:
          uint64_t v210 = v668;
          if (SHIBYTE(v668->__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v668->__r_.__value_.__l.__size_) {
              goto LABEL_433;
            }
LABEL_418:
            long long v211 = (unsigned __int8 **)RIO_MTLX::ARRAY_VALID_SEPARATORS((RIO_MTLX *)v209);
            RIO_MTLX::splitString(v210, v211, (uint64_t)&v613);
            unint64_t v212 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v614 - (char *)v613) >> 3));
            if (v614 == v613) {
              uint64_t v213 = 0;
            }
            else {
              uint64_t v213 = v212;
            }
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((unint64_t)v613, (const void **)&v614->__r_.__value_.__l.__data_, (uint64_t)v695, v213, 1);
            uint64_t v214 = v613;
            long long v215 = v614;
            if (v613 != v614)
            {
              do
              {
                uint64_t v216 = v214 + 1;
                if (&v214[1] == v215)
                {
                  uint64_t v214 = v215;
                  goto LABEL_445;
                }
                int v217 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v695, (unsigned __int8 *)v214, (unsigned __int8 *)&v214[1]);
                uint64_t v214 = v216;
              }
              while (!v217);
              uint64_t v218 = v216 + 1;
              long long v219 = v216 - 1;
              if (v218 == v215)
              {
                p_data = (void **)&v219->__r_.__value_.__l.__data_;
              }
              else
              {
                do
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v695, (unsigned __int8 *)v219, (unsigned __int8 *)v218))
                  {
                    p_data = (void **)&v219->__r_.__value_.__l.__data_;
                  }
                  else
                  {
                    p_data = (void **)&v219[1].__r_.__value_.__l.__data_;
                    if (SHIBYTE(v219[1].__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(*p_data);
                    }
                    long long v221 = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
                    v219[1].__r_.__value_.__r.__words[2] = v218->__r_.__value_.__r.__words[2];
                    *(_OWORD *)p_data = v221;
                    *((unsigned char *)&v218->__r_.__value_.__s + 23) = 0;
                    v218->__r_.__value_.__s.__data_[0] = 0;
                    ++v219;
                  }
                  ++v218;
                }
                while (v218 != v215);
              }
              uint64_t v214 = (std::string *)(p_data + 3);
            }
LABEL_445:
            if (v214 != v614)
            {
              std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)v685, (long long *)v614, (long long *)v614, (uint64_t)v214);
              std::string v225 = v224;
              for (uint64_t m = v614; m != (std::string *)v225; --m)
              {
                if (SHIBYTE(m[-1].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(m[-1].__r_.__value_.__l.__data_);
                }
              }
              v614 = (std::string *)v225;
            }
            pxrInternal__aapl__pxrReserved__::TfStringJoin();
            LODWORD(v685[0]) = 1;
            v685[1] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            *((void *)&v686[0] + 1) = 0;
            uint64_t v666 = 0;
            pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v695, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v685, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v666);
            *(void *)v695 = MEMORY[0x263F90718] + 16;
            long long v227 = (uint64_t **)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)&v641, &v680, (const void **)v604);
            uint64_t v228 = (char *)*v227;
            uint64_t v229 = (char *)*v227;
            if (!*v227)
            {
              uint64_t v230 = v227;
              uint64_t v229 = (char *)operator new(0x58uLL);
              v675.__r_.__value_.__r.__words[0] = (std::string::size_type)v229;
              v675.__r_.__value_.__l.__size_ = (std::string::size_type)&v642;
              v675.__r_.__value_.__s.__data_[16] = 0;
              *((_OWORD *)v229 + 2) = *(_OWORD *)v604;
              *((void *)v229 + 6) = v605;
              v604[0] = 0;
              v604[1] = 0;
              uint64_t v605 = 0;
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              *((void *)v229 + 7) = MEMORY[0x263F90710] + 16;
              uint64_t v231 = *(void *)&v695[24];
              *((void *)v229 + 10) = *(void *)&v695[24];
              if ((v231 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v231 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *((void *)v229 + 10) &= 0xFFFFFFFFFFFFFFF8;
              }
              *((void *)v229 + 7) = MEMORY[0x263F90718] + 16;
              v675.__r_.__value_.__s.__data_[16] = 1;
              std::string::size_type v232 = v680.__r_.__value_.__r.__words[0];
              *(void *)uint64_t v229 = 0;
              *((void *)v229 + 1) = 0;
              *((void *)v229 + 2) = v232;
              *uint64_t v230 = (uint64_t *)v229;
              char v233 = (uint64_t *)v229;
              if (*v641)
              {
                v641 = (uint64_t **)*v641;
                char v233 = *v230;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v642, v233);
              ++v643;
              v675.__r_.__value_.__r.__words[0] = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)&v675);
            }
            MEMORY[0x2455CEEA0](v695);
            if ((BYTE8(v686[0]) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
            if (v685[1]) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
            }
            if (v228)
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              uint64_t v234 = *((void *)v229 + 10);
              v657 = (std::pair<std::string, std::string> **)(MEMORY[0x263F90710] + 16);
              uint64_t v660 = v234;
              if ((v234 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v234 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v660 &= 0xFFFFFFFFFFFFFFF8;
              }
              v657 = (std::pair<std::string, std::string> **)(MEMORY[0x263F90718] + 16);
            }
            else
            {
              unint64_t v235 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)&v621);
              v685[0] = 0;
              pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)v695, v235, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v623, (const pxrInternal__aapl__pxrReserved__::TfToken *)v685);
              if (((uint64_t)v685[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v685[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              for (int n = __val; ; int n = ++__val)
              {
                std::to_string(&v680, n);
                long long v237 = std::string::insert(&v680, 0, "geom_");
                long long v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
                v675.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v675.__r_.__value_.__l.__data_ = v238;
                v237->__r_.__value_.__l.__size_ = 0;
                v237->__r_.__value_.__r.__words[2] = 0;
                v237->__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x2455CF830](&v666, &v675);
                pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v685, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v695, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v666);
                v685[0] = (void *)(MEMORY[0x263F90718] + 16);
                if (!v685[1] || (*((unsigned char *)v685[1] + 57) & 8) != 0) {
                  int v239 = 0;
                }
                else {
                  int v239 = v584(v685);
                }
                MEMORY[0x2455CEEA0](v685);
                if ((v666 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v666 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v675.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v680.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v680.__r_.__value_.__l.__data_);
                }
                if (!v239) {
                  break;
                }
              }
              std::to_string(&v680, __val);
              uint64_t v240 = std::string::insert(&v680, 0, "geom_");
              long long v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
              v675.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v675.__r_.__value_.__l.__data_ = v241;
              v240->__r_.__value_.__l.__size_ = 0;
              v240->__r_.__value_.__r.__words[2] = 0;
              v240->__r_.__value_.__r.__words[0] = 0;
              MEMORY[0x2455CF830](&v666, &v675);
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply();
              uint64_t v242 = v685[1];
              if (v685[1]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)v685[1] + 6, 1uLL, memory_order_relaxed);
              }
              uint64_t v243 = *((void *)v229 + 8);
              *((void *)v229 + 8) = v242;
              if (v243) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v243);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v229 + 72), v686);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v229 + 76), (_DWORD *)v686 + 1);
              uint64_t v244 = (uint64_t *)(v229 + 80);
              pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)v229 + 10, (void *)v686 + 1);
              MEMORY[0x2455CEEA0](v685);
              if ((v666 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v666 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v675.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v680.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v680.__r_.__value_.__l.__data_);
              }
              ActiveGeomPrefix = RIO_MTLX::Element::getActiveGeomPrefix(v198);
              v246 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v229 + 56);
              std::string v247 = v613;
              uint64_t v248 = v614;
              if (v613 != v614)
              {
                unint64_t v249 = (const void **)ActiveGeomPrefix;
                do
                {
                  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel((uint64_t *)v685, v246);
                  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v249, (const void **)&v247->__r_.__value_.__l.__data_, (uint64_t)&v675);
                  if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v675.__r_.__value_.__l.__data_);
                  }
                  if ((BYTE8(v686[0]) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
                  if (v685[1]) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
                  }
                  ++v247;
                }
                while (v247 != v248);
              }
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              uint64_t v250 = *v244;
              v657 = (std::pair<std::string, std::string> **)(MEMORY[0x263F90710] + 16);
              uint64_t v660 = v250;
              if ((v250 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v250 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v660 &= 0xFFFFFFFFFFFFFFF8;
              }
              v657 = (std::pair<std::string, std::string> **)(MEMORY[0x263F90718] + 16);
              if ((v695[24] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
              if (*(void *)&v695[8]) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
              }
            }
            if (SHIBYTE(v605) < 0) {
              operator delete(v604[0]);
            }
            *(void *)v695 = &v613;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
          }
          else
          {
            if (*((unsigned char *)&v668->__r_.__value_.__s + 23)) {
              goto LABEL_418;
            }
LABEL_433:
            *(_DWORD *)v695 = 1;
            *(void *)&v695[8] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            *(void *)&v695[24] = 0;
            v685[0] = 0;
            pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v657, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v695, (const pxrInternal__aapl__pxrReserved__::TfToken *)v685);
            v657 = (std::pair<std::string, std::string> **)(MEMORY[0x263F90718] + 16);
            if ((v695[24] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
            if (*(void *)&v695[8]) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
            }
          }
          if (v658
            && (v658[2].__shared_owners_ & 0x800) == 0
            && ((unsigned int (*)(std::pair<std::string, std::string> ***))v657[4])(&v657))
          {
            long long v251 = (std::pair<std::string, std::string> *)v658;
            if (v658) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)&v658[2], 1uLL, memory_order_relaxed);
            }
            std::__split_buffer<std::pair<std::string, std::string>>::pointer v252 = v694.__begin_;
            v694.__begin_ = v251;
            if (v252) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v252);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v694.__end_, &v659);
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v694.__end_ + 4, (_DWORD *)&v659 + 1);
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v694.__end_cap_.__value_, &v660);
          }
          MEMORY[0x2455CEEA0](&v657);
        }
        uint64_t v253 = v645;
        for (iuint64_t i = &v645; ; v253 = *ii)
        {
          unsigned __int8 v255 = ii;
          if (!v253) {
            break;
          }
          while (1)
          {
            iuint64_t i = (uint64_t **)v253;
            unint64_t v256 = v253[4];
            if (v256 > (unint64_t)v198) {
              break;
            }
            if (v256 >= (unint64_t)v198) {
              goto LABEL_538;
            }
            uint64_t v253 = ii[1];
            if (!v253)
            {
              unsigned __int8 v255 = ii + 1;
              goto LABEL_529;
            }
          }
        }
LABEL_529:
        v257 = operator new(0x50uLL);
        v685[0] = v257;
        v685[1] = &v645;
        LOBYTE(v686[0]) = 0;
        void v257[4] = v198;
        _DWORD v257[5] = v197;
        if (v197) {
          atomic_fetch_add_explicit(&v197->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_DWORD *)v695 = 1;
        *(void *)&v695[8] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        *(void *)&v695[24] = 0;
        v675.__r_.__value_.__r.__words[0] = 0;
        *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)(v257 + 6), (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v695, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v675) = MEMORY[0x263F90718] + 16;
        if ((v695[24] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v695[24] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v695[16]);
        if (*(void *)&v695[8]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*(uint64_t *)&v695[8]);
        }
        LOBYTE(v686[0]) = 1;
        uint64_t v258 = (uint64_t *)v685[0];
        *(void *)v685[0] = 0;
        v258[1] = 0;
        v258[2] = (uint64_t)ii;
        *unsigned __int8 v255 = v258;
        if (*v644)
        {
          v644 = (uint64_t **)*v644;
          uint64_t v258 = *v255;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v645, v258);
        ++v646;
        iuint64_t i = (uint64_t **)v685[0];
        v685[0] = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,void *>>>>::reset[abi:ne180100]((uint64_t)v685);
LABEL_538:
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v259 = v694.__begin_;
        if (v694.__begin_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)&v694.__begin_[1], 1uLL, memory_order_relaxed);
        }
        uint64_t v260 = (uint64_t)ii[7];
        ii[7] = (uint64_t *)v259;
        if (v260) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v260);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(ii + 8), &v694.__end_);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)ii + 68, (_DWORD *)&v694.__end_ + 1);
        uint64_t v261 = (uint64_t *)(ii + 9);
        pxrInternal__aapl__pxrReserved__::TfToken::operator=(v261, &v694.__end_cap_.__value_);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v262 = *v261;
        v681.__r_.__value_.__r.__words[0] = MEMORY[0x263F90710] + 16;
        uint64_t v682 = v262;
        if ((v262 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v262 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v682 &= 0xFFFFFFFFFFFFFFF8;
        }
        v681.__r_.__value_.__r.__words[0] = MEMORY[0x263F90718] + 16;
        MEMORY[0x2455CEEA0](&v694);
        MEMORY[0x2455CEEA0](&v681);
        if (v197) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v197);
        }
        v195 += 16;
        uint64_t v196 = v586;
        continue;
      }
      break;
    }
    *(void *)v695 = &v670;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
    uint64_t v192 = v577 + 2;
    if (v577 + 2 != v572) {
      continue;
    }
    break;
  }
LABEL_549:
  *(void *)v695 = &Name;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
  v263 = (RIO_MTLX *)v571;
  if (v571) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v571);
  }
  uint64_t v620 = 0;
  v619 = 0;
  v618 = &v619;
  uint64_t v264 = *a1;
  uint64_t v265 = RIO_MTLX::EMPTY_STRING(v263);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v264, (uint64_t)v265, (uint64_t *)&v681);
  std::string::size_type v578 = v681.__r_.__value_.__l.__size_;
  std::string::size_type v266 = v681.__r_.__value_.__r.__words[0];
  if (v681.__r_.__value_.__r.__words[0] != v681.__r_.__value_.__l.__size_)
  {
    while (2)
    {
      v698 = 0;
      uint64_t v699 = 0;
      memset(v695, 0, sizeof(v695));
      long long v696 = 0u;
      v701 = 0;
      uint64_t v702 = 0;
      v700 = 0;
      v704 = 0;
      uint64_t v705 = 0;
      v697 = &v698;
      v703 = &v704;
      int v267 = *(std::__shared_weak_count **)(v266 + 8);
      v685[0] = *(void **)v266;
      v685[1] = v267;
      if (v267) {
        atomic_fetch_add_explicit(&v267->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v267) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v267);
      }
      std::string::size_type v581 = v266;
      long long v269 = *(void **)v266;
      uint64_t v270 = RIO_MTLX::EMPTY_STRING(v268);
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>((uint64_t)v269, (uint64_t)v270, (uint64_t *)&v675);
      std::string::size_type v271 = v675.__r_.__value_.__l.__size_;
      std::string::size_type v593 = v675.__r_.__value_.__l.__size_;
      std::string::size_type v272 = v675.__r_.__value_.__r.__words[0];
LABEL_557:
      if (v272 == v271)
      {
        v685[0] = &v675;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
        std::__tree<std::string>::destroy((uint64_t)&v703, v704);
        v685[0] = &v700;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
        std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(v698);
        v685[0] = &v695[24];
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
        v685[0] = v695;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
        std::string::size_type v266 = v581 + 16;
        if (v581 + 16 == v578) {
          goto LABEL_623;
        }
        continue;
      }
      break;
    }
    long long v688 = 0uLL;
    *(_OWORD *)v685 = 0u;
    memset(v686, 0, sizeof(v686));
    value = 0;
    long long v689 = 0uLL;
    uint64_t v692 = 0;
    uint64_t v693 = 0;
    v687 = (uint64_t *)&v688;
    v691 = &v692;
    v273 = *(std::string **)(v272 + 8);
    v613 = *(std::string **)v272;
    v614 = v273;
    if (v273) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v273->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
    }
    v274 = (long long *)__p[0];
    v275 = (char *)__p[1];
    if ((char *)__p[1] - (char *)__p[0] >= 1)
    {
      int64_t v276 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 4);
      unint64_t v277 = *((void *)&v689 + 1);
      uint64_t v278 = v689;
      uint64_t v279 = (*((void *)&v689 + 1) - (void)v689) / 48;
      uint64_t v280 = v689 + 48 * v279;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)value - *((void *)&v689 + 1)) >> 4)) >= v276)
      {
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((*((void *)&v689 + 1) - v280) >> 4)) >= v276)
        {
          v284 = (long long *)((char *)__p[0] + 16 * (((char *)__p[1] - (char *)__p[0]) >> 4));
          uint64_t v285 = *((void *)&v689 + 1);
        }
        else
        {
          uint64_t v582 = *((void *)&v689 + 1) - v280;
          v657 = (std::pair<std::string, std::string> **)*((void *)&v689 + 1);
          v604[0] = *((void **)&v689 + 1);
          v284 = (long long *)((char *)__p[0] + 16 * ((*((void *)&v689 + 1) - v280) >> 4));
          v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&value;
          v694.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v604;
          v694.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v657;
          uint64_t v285 = *((void *)&v689 + 1);
          if (v284 != __p[1])
          {
            v286 = (char *)__p[0] + 16 * ((*((void *)&v689 + 1) - v280) >> 4);
            uint64_t v287 = *((void *)&v689 + 1);
            do
            {
              long long v288 = *(_OWORD *)v286;
              *(void *)(v287 + 16) = *((void *)v286 + 2);
              *(_OWORD *)uint64_t v287 = v288;
              *((void *)v286 + 1) = 0;
              *((void *)v286 + 2) = 0;
              *(void *)v286 = 0;
              long long v289 = *(_OWORD *)(v286 + 24);
              *(void *)(v287 + 40) = *((void *)v286 + 5);
              *(_OWORD *)(v287 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v289;
              *((void *)v286 + 4) = 0;
              *((void *)v286 + 5) = 0;
              *((void *)v286 + 3) = 0;
              v287 += 48;
              v285 += 48;
              v286 += 48;
            }
            while (v286 != v275);
            v657 = (std::pair<std::string, std::string> **)v287;
          }
          LOBYTE(v694.__end_cap_.__value_) = 1;
          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v694);
          *((void *)&v689 + 1) = v285;
          if (v582 < 1) {
            goto LABEL_594;
          }
        }
        v290 = (long long *)(v285 - 48 * v276);
        uint64_t v291 = v285;
        while ((unint64_t)v290 < v277)
        {
          long long v292 = *v290;
          *(void *)(v291 + 16) = *((void *)v290 + 2);
          *(_OWORD *)uint64_t v291 = v292;
          *((void *)v290 + 1) = 0;
          *((void *)v290 + 2) = 0;
          *(void *)v290 = 0;
          long long v293 = *(long long *)((char *)v290 + 24);
          *(void *)(v291 + 40) = *((void *)v290 + 5);
          *(_OWORD *)(v291 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v293;
          *((void *)v290 + 4) = 0;
          *((void *)v290 + 5) = 0;
          *((void *)v290 + 3) = 0;
          v291 += 48;
          v290 += 3;
        }
        uint64_t v294 = v280 + 48 * v276;
        *((void *)&v689 + 1) = v291;
        if (v285 != v294)
        {
          uint64_t v295 = v285 - 48;
          uint64_t v296 = 16 * ((v285 - v294) >> 4);
          do
          {
            uint64_t v295 = std::pair<std::string,std::string>::operator=[abi:ne180100](v295, (long long *)(v278 + 48 * v279 - 48 + v296))- 48;
            v296 -= 48;
          }
          while (v296);
        }
        for (; v274 != v284; v280 += 48)
        {
          std::pair<std::string,std::string>::operator=[abi:ne180100](v280, v274);
          v274 += 3;
        }
      }
      else
      {
        unint64_t v281 = v279 - 0x5555555555555555 * (((char *)__p[1] - (char *)__p[0]) >> 4);
        if (v281 > 0x555555555555555) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)((uint64_t)value - v689) >> 4) > v281) {
          unint64_t v281 = 0x5555555555555556 * ((uint64_t)((uint64_t)value - v689) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)value - v689) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v282 = 0x555555555555555;
        }
        else {
          unint64_t v282 = v281;
        }
        v694.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)&value;
        if (v282) {
          v283 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<RESRT>>((uint64_t)&value, v282);
        }
        else {
          v283 = 0;
        }
        v297 = &v283[v279];
        v694.__first_ = v283;
        v694.__begin_ = v297;
        v694.__end_cap_.__value_ = &v283[v282];
        v298 = v297;
        do
        {
          long long v299 = *v274;
          v298->first.__r_.__value_.__r.__words[2] = *((void *)v274 + 2);
          *(_OWORD *)&v298->first.__r_.__value_.__l.__data_ = v299;
          *((void *)v274 + 1) = 0;
          *((void *)v274 + 2) = 0;
          *(void *)v274 = 0;
          long long v300 = *(long long *)((char *)v274 + 24);
          v298->second.__r_.__value_.__r.__words[2] = *((void *)v274 + 5);
          *(_OWORD *)&v298->second.__r_.__value_.__l.__data_ = v300;
          *((void *)v274 + 4) = 0;
          *((void *)v274 + 5) = 0;
          *((void *)v274 + 3) = 0;
          ++v298;
          v274 += 3;
        }
        while (v298 != v297 + v276);
        v694.__end_ = v297 + v276;
        std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&value, v280, v280, v689, v689, (uint64_t)v297, (uint64_t)v297);
        v694.__begin_ = v301;
        uint64_t v302 = *((void *)&v689 + 1);
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v303 = v694.__end_;
        v604[0] = v694.__end_;
        v680.__r_.__value_.__r.__words[0] = (std::string::size_type)v694.__end_;
        v657 = &value;
        v658 = (std::__shared_weak_count *)&v680;
        v659 = v604;
        if (*((void *)&v689 + 1) != v280)
        {
          do
          {
            long long v304 = *(_OWORD *)v280;
            v303->first.__r_.__value_.__r.__words[2] = *(void *)(v280 + 16);
            *(_OWORD *)&v303->first.__r_.__value_.__l.__data_ = v304;
            *(void *)(v280 + 8) = 0;
            *(void *)(v280 + 16) = 0;
            *(void *)uint64_t v280 = 0;
            long long v305 = *(_OWORD *)(v280 + 24);
            v303->second.__r_.__value_.__r.__words[2] = *(void *)(v280 + 40);
            *(_OWORD *)&v303->second.__r_.__value_.__l.__data_ = v305;
            *(void *)(v280 + 32) = 0;
            *(void *)(v280 + 40) = 0;
            *(void *)(v280 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
            ++v303;
            v280 += 48;
          }
          while (v280 != v302);
          v604[0] = v303;
        }
        LOBYTE(v660) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v657);
        long long v306 = v689;
        *(void *)&long long v689 = v694.__begin_;
        *((void *)&v689 + 1) = v303;
        *(_OWORD *)&v694.__begin_ = v306;
        v307 = value;
        value = v694.__end_cap_.__value_;
        v694.__end_cap_.__value_ = v307;
        v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v306;
        std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&v694);
      }
    }
LABEL_594:
    v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)__p;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v694);
    if (v273) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v273);
    }
    v308 = *(std::string **)v272;
    v309 = *(std::__shared_weak_count **)(v272 + 8);
    if (v309) {
      atomic_fetch_add_explicit(&v309->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v310 = v619;
    v311 = &v619;
LABEL_599:
    v312 = v311;
    if (v310)
    {
      while (1)
      {
        v311 = (uint64_t **)v310;
        unint64_t v313 = v310[4];
        if ((unint64_t)v308 < v313)
        {
          v310 = *v311;
          goto LABEL_599;
        }
        if (v313 >= (unint64_t)v308) {
          break;
        }
        v310 = v311[1];
        if (!v310)
        {
          v312 = v311 + 1;
          goto LABEL_606;
        }
      }
      v314 = v311;
    }
    else
    {
LABEL_606:
      v315 = (uint64_t **)operator new(0xA8uLL);
      v314 = v315;
      v315[4] = (uint64_t *)v308;
      v315[5] = (uint64_t *)v309;
      if (v309) {
        atomic_fetch_add_explicit(&v309->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v315[14] = 0;
      v315[15] = 0;
      *((_OWORD *)v315 + 5) = 0u;
      *((_OWORD *)v315 + 6) = 0u;
      *((_OWORD *)v315 + 3) = 0u;
      *((_OWORD *)v315 + 4) = 0u;
      v315[12] = (uint64_t *)(v315 + 13);
      v315[16] = 0;
      v315[17] = 0;
      v315[20] = 0;
      v315[19] = 0;
      v315[18] = (uint64_t *)(v315 + 19);
      *v315 = 0;
      v315[1] = 0;
      v315[2] = (uint64_t *)v311;
      *v312 = (uint64_t *)v315;
      v316 = (uint64_t *)v315;
      if (*v618)
      {
        v618 = (uint64_t **)*v618;
        v316 = *v312;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v619, v316);
      ++v620;
    }
    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)v314 + 2);
    *((_OWORD *)v314 + 3) = *(_OWORD *)v685;
    v318 = (void **)(v314 + 9);
    v317 = v314[9];
    v314[8] = *(uint64_t **)&v686[0];
    *(void *)&v686[0] = 0;
    v685[1] = 0;
    v685[0] = 0;
    if (v317)
    {
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__clear[abi:ne180100]((uint64_t *)v314 + 9);
      operator delete(*v318);
      *v318 = 0;
      v314[10] = 0;
      v314[11] = 0;
    }
    v320 = (uint64_t *)(v314 + 13);
    v319 = v314[13];
    *(_OWORD *)(v314 + 9) = *(_OWORD *)((char *)v686 + 8);
    v314[11] = (uint64_t *)*((void *)&v686[1] + 1);
    memset((char *)v686 + 8, 0, 24);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(v319);
    v321 = (uint64_t *)v688;
    v314[12] = v687;
    v314[13] = v321;
    uint64_t v322 = *((void *)&v688 + 1);
    v314[14] = (uint64_t *)*((void *)&v688 + 1);
    if (v322)
    {
      v321[2] = (uint64_t)v320;
      v687 = (uint64_t *)&v688;
      long long v688 = 0uLL;
    }
    else
    {
      v314[12] = v320;
    }
    std::vector<std::pair<std::string,std::string>>::__vdeallocate((std::vector<std::pair<std::string, std::string>> *)v314 + 5);
    *(_OWORD *)(v314 + 15) = v689;
    v324 = (char *)v314[19];
    v323 = v314 + 19;
    *(v323 - 2) = value;
    value = 0;
    long long v689 = 0uLL;
    std::__tree<std::string>::destroy((uint64_t)(v323 - 1), v324);
    uint64_t v325 = v692;
    *(v323 - 1) = v691;
    void *v323 = v325;
    uint64_t v326 = v693;
    v323[1] = v693;
    if (v326)
    {
      *(void *)(v325 + 16) = v323;
      uint64_t v325 = 0;
      v691 = &v692;
      uint64_t v692 = 0;
      uint64_t v693 = 0;
      if (v309) {
        goto LABEL_618;
      }
    }
    else
    {
      *(v323 - 1) = v323;
      if (v309)
      {
LABEL_618:
        std::__shared_weak_count::__release_shared[abi:ne180100](v309);
        uint64_t v325 = v692;
      }
    }
    std::__tree<std::string>::destroy((uint64_t)&v691, (char *)v325);
    v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)&v689;
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v694);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy((void *)v688);
    v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)((char *)v686 + 8);
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v694);
    v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v685;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v694);
    v272 += 16;
    std::string::size_type v271 = v593;
    goto LABEL_557;
  }
LABEL_623:
  *(void *)v695 = &v681;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v695);
  memset(v695, 0, sizeof(v695));
  long long v696 = 0u;
  v697 = &v698;
  v698 = 0;
  uint64_t v699 = 0;
  v700 = 0;
  v701 = 0;
  uint64_t v702 = 0;
  v704 = 0;
  uint64_t v705 = 0;
  v703 = &v704;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v695, __str, (long long *)v632, 0xAAAAAAAAAAAAAAABLL * (((char *)v632 - (char *)__str) >> 3));
  v328 = (uint64_t *)v618;
  if (v618 != &v619)
  {
    do
    {
      v329 = v698;
      v330 = &v698;
      v331 = &v698;
      if (v698)
      {
        unint64_t v332 = v328[4];
        while (1)
        {
          while (1)
          {
            v330 = (uint64_t **)v329;
            unint64_t v333 = v329[4];
            if (v333 <= v332) {
              break;
            }
            v329 = *v330;
            v331 = v330;
            if (!*v330) {
              goto LABEL_632;
            }
          }
          if (v333 >= v332) {
            break;
          }
          v329 = v330[1];
          if (!v329)
          {
            v331 = v330 + 1;
            goto LABEL_632;
          }
        }
        v335 = v330;
      }
      else
      {
LABEL_632:
        v334 = (uint64_t *)operator new(0x48uLL);
        v335 = (uint64_t **)v334;
        v334[4] = v328[4];
        uint64_t v336 = v328[5];
        v334[5] = v336;
        if (v336) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v336 + 8), 1uLL, memory_order_relaxed);
        }
        v334[8] = 0;
        v334[7] = 0;
        v334[6] = (uint64_t)(v334 + 7);
        uint64_t *v334 = 0;
        v334[1] = 0;
        v334[2] = (uint64_t)v330;
        *v331 = v334;
        v337 = v334;
        if (*v697)
        {
          v697 = (uint64_t **)*v697;
          v337 = *v331;
        }
        v327 = (realityio::mtlx::_anonymous_namespace_ *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v698, v337);
        ++v699;
      }
      if (*((char *)v685[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v694, *(const std::string::value_type **)v685[0], *((void *)v685[0] + 1));
      }
      else
      {
        long long v338 = *(_OWORD *)v685[0];
        v694.__end_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)*((void *)v685[0] + 2);
        *(_OWORD *)&v694.__first_ = v338;
      }
      long long v339 = *((_OWORD *)v328 + 2);
      v340 = (void *)v696;
      if ((unint64_t)v696 >= *((void *)&v696 + 1))
      {
        v342 = *(void **)&v695[24];
        uint64_t v343 = (uint64_t)(v696 - *(void *)&v695[24]) >> 4;
        unint64_t v344 = v343 + 1;
        if ((unint64_t)(v343 + 1) >> 60) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        long long v601 = *((_OWORD *)v328 + 2);
        uint64_t v345 = *((void *)&v696 + 1) - *(void *)&v695[24];
        if ((uint64_t)(*((void *)&v696 + 1) - *(void *)&v695[24]) >> 3 > v344) {
          unint64_t v344 = v345 >> 3;
        }
        if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v346 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v346 = v344;
        }
        if (v346 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v327 = (realityio::mtlx::_anonymous_namespace_ *)operator new(16 * v346);
        v347 = (_OWORD *)((char *)v327 + 16 * v343);
        _OWORD *v347 = v601;
        if (*((void *)&v601 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v601 + 1) + 8), 1uLL, memory_order_relaxed);
          v342 = *(void **)&v695[24];
          v340 = (void *)v696;
        }
        v348 = (char *)v327 + 16 * v346;
        v341 = v347 + 1;
        if (v340 == v342)
        {
          *(void *)&v695[24] = (char *)v327 + 16 * v343;
          *(void *)&long long v696 = v347 + 1;
          *((void *)&v696 + 1) = v348;
        }
        else
        {
          do
          {
            long long v349 = *((_OWORD *)v340 - 1);
            v340 -= 2;
            *--v347 = v349;
            void *v340 = 0;
            v340[1] = 0;
          }
          while (v340 != v342);
          v342 = *(void **)&v695[24];
          v350 = (void *)v696;
          *(void *)&v695[24] = v347;
          *(void *)&long long v696 = v341;
          *((void *)&v696 + 1) = v348;
          while (v350 != v342)
          {
            v327 = (realityio::mtlx::_anonymous_namespace_ *)*(v350 - 1);
            if (v327) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v327);
            }
            v350 -= 2;
          }
        }
        if (v342) {
          operator delete(v342);
        }
      }
      else
      {
        *(_OWORD *)long long v696 = v339;
        if (*((void *)&v339 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        v341 = v340 + 2;
      }
      *(void *)&long long v696 = v341;
      uint64_t v351 = v328[15];
      uint64_t v352 = v328[16];
      if (v351 != v352)
      {
        v353 = v335 + 7;
        do
        {
          v354 = (char *)operator new(0x50uLL);
          v355 = (uint64_t *)v354;
          v685[0] = v354;
          v685[1] = v335 + 7;
          LOBYTE(v686[0]) = 0;
          v356 = (const void **)(v354 + 32);
          if (*(char *)(v351 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v354 + 32), *(const std::string::value_type **)v351, *(void *)(v351 + 8));
          }
          else
          {
            long long v357 = *(_OWORD *)v351;
            *((void *)v354 + 6) = *(void *)(v351 + 16);
            *(_OWORD *)v356 = v357;
          }
          v358 = (std::string *)(v355 + 7);
          if (*(char *)(v351 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(v358, *(const std::string::value_type **)(v351 + 24), *(void *)(v351 + 32));
          }
          else
          {
            long long v359 = *(_OWORD *)(v351 + 24);
            v355[9] = *(void *)(v351 + 40);
            *(_OWORD *)&v358->__r_.__value_.__l.__data_ = v359;
          }
          LOBYTE(v686[0]) = 1;
          v360 = *v353;
          v361 = v335 + 7;
          v362 = v335 + 7;
          if (*v353)
          {
            while (1)
            {
              while (1)
              {
                v362 = (uint64_t **)v360;
                v363 = (const void **)(v360 + 4);
                if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](v356, (const void **)v360 + 4))break; {
                v360 = *v362;
                }
                v361 = v362;
                if (!*v362) {
                  goto LABEL_679;
                }
              }
              if (!std::less<std::pair<std::string,std::string>>::operator()[abi:ne180100](v363, v356)) {
                break;
              }
              v360 = v362[1];
              if (!v360)
              {
                v361 = v362 + 1;
                goto LABEL_679;
              }
            }
          }
          else
          {
LABEL_679:
            uint64_t *v355 = 0;
            v355[1] = 0;
            v355[2] = (uint64_t)v362;
            *v361 = v355;
            v364 = (uint64_t *)*v335[6];
            if (v364)
            {
              v335[6] = v364;
              v355 = *v361;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v335[7], v355);
            v335[8] = (uint64_t *)((char *)v335[8] + 1);
            v685[0] = 0;
          }
          std::unique_ptr<std::__tree_node<std::pair<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::pair<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v685);
          v351 += 48;
        }
        while (v351 != v352);
      }
      if (SHIBYTE(v694.__end_) < 0) {
        operator delete(v694.__first_);
      }
      v365 = (uint64_t *)v328[1];
      if (v365)
      {
        do
        {
          v366 = (uint64_t **)v365;
          v365 = (uint64_t *)*v365;
        }
        while (v365);
      }
      else
      {
        do
        {
          v366 = (uint64_t **)v328[2];
          BOOL v367 = *v366 == v328;
          v328 = (uint64_t *)v366;
        }
        while (!v367);
      }
      v328 = (uint64_t *)v366;
    }
    while (v366 != &v619);
  }
  uint64_t v620 = 0;
  v618 = &v619;
  v619 = 0;
  v594 = *(uint64_t **)&v695[24];
  for (jstd::__split_buffer<std::pair<std::string, std::string>>::pointer j = (uint64_t *)v696; v594 != jj; v594 += 2)
  {
    if (*((char *)v685[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v681, *(const std::string::value_type **)v685[0], *((void *)v685[0] + 1));
    }
    else
    {
      long long v369 = *(_OWORD *)v685[0];
      v681.__r_.__value_.__r.__words[2] = *((void *)v685[0] + 2);
      *(_OWORD *)&v681.__r_.__value_.__l.__data_ = v369;
    }
    memset(&v675, 0, sizeof(v675));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v675, *(long long **)v695, *(long long **)&v695[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v695[8] - *(void *)v695) >> 3));
    std::string::size_type v370 = v675.__r_.__value_.__l.__size_;
    std::string::size_type v590 = v675.__r_.__value_.__l.__size_;
    for (kuint64_t k = (const void **)v675.__r_.__value_.__r.__words[0]; kk != (const void **)v370; kk += 3)
    {
      v373 = (const void **)*VariantSelections;
      v603 = VariantSelections + 1;
      if ((uint64_t *)*VariantSelections != VariantSelections + 1)
      {
        do
        {
          v374 = v648;
          if (v648)
          {
            v375 = &v648;
            do
            {
              v376 = v375;
              v377 = v374 + 4;
              BOOL v378 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v649, (const void **)v374 + 4, (const void **)&v681.__r_.__value_.__l.__data_);
              v379 = v374 + 1;
              if (!v378)
              {
                v379 = v374;
                v375 = v374;
              }
              v374 = (void *)*v379;
            }
            while (*v379);
            if (v375 != &v648)
            {
              v380 = (const void **)(v378 ? v376 + 4 : v377);
              if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v649, (const void **)&v681.__r_.__value_.__l.__data_, v380))
              {
                v381 = v629;
                if (v629)
                {
                  v382 = &v629;
                  do
                  {
                    v383 = v382;
                    v384 = v381 + 4;
                    BOOL v385 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v630, (const void **)v381 + 4, kk);
                    v386 = v381 + 1;
                    if (!v385)
                    {
                      v386 = v381;
                      v382 = (uint64_t **)v381;
                    }
                    v381 = (uint64_t *)*v386;
                  }
                  while (*v386);
                  if (v382 != &v629)
                  {
                    v387 = v385 ? (const void **)(v383 + 4) : (const void **)v384;
                    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v630, kk, v387))
                    {
                      v389 = v382 + 8;
                      v388 = v382[8];
                      if (v388)
                      {
                        uint64_t v390 = (uint64_t)(v382 + 9);
                        v391 = v382 + 8;
                        do
                        {
                          BOOL v392 = std::less<std::string>::operator()[abi:ne180100](v390, (const void **)v388 + 4, v373 + 7);
                          v393 = (uint64_t **)(v388 + 1);
                          if (!v392)
                          {
                            v393 = (uint64_t **)v388;
                            v389 = (uint64_t **)v388;
                          }
                          v388 = *v393;
                        }
                        while (*v393);
                        if (v389 != v391
                          && !std::less<std::string>::operator()[abi:ne180100](v390, v373 + 7, (const void **)v389 + 4))
                        {
                          pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)v685, (uint64_t *)&__p[1], &v678);
                          pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet();
                          if ((BYTE8(v686[0]) & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
                          if (v685[1]) {
                            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
                          }
                          if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant())
                          {
                            pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
                            v613 = 0;
                            v614 = 0;
                            pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext();
                            MEMORY[0x2455CEBE0](v685, &v694);
                            pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)&v694.__end_cap_.std::__compressed_pair_elem<std::allocator<std::pair<std::string, std::string>> &, 1, false>);
                            v394 = v694.__end_cap_.__value_;
                            if (v694.__end_cap_.__value_
                              && atomic_fetch_add_explicit((atomic_uint *volatile)&v694.__end_cap_.__value_->first.__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
                            {
                              (*(void (**)(std::pair<std::string, std::string> *))(v394->first.__r_.__value_.__r.__words[0]
                                                                                            + 8))(v394);
                            }
                            std::__split_buffer<std::pair<std::string, std::string>>::pointer v395 = v694.__begin_;
                            if (v694.__begin_
                              && atomic_fetch_add_explicit((atomic_uint *volatile)&v694.__begin_->first.__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
                            {
                              (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v395->first.__r_.__value_.__r.__words[0] + 8))(v395);
                            }
                            v396 = v614;
                            if (v614
                              && atomic_fetch_add_explicit((atomic_uint *volatile)&v614->__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
                            {
                              (*(void (**)(std::string *))(v396->__r_.__value_.__r.__words[0] + 8))(v396);
                            }
                            std::string::basic_string[abi:ne180100]<0>(&v694, "");
                            v398 = (const void **)(v375 + 8);
                            uint64_t v397 = v375[8];
                            if (!v397) {
                              goto LABEL_746;
                            }
                            v399 = (const void **)(v375 + 8);
                            do
                            {
                              BOOL v400 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v375 + 9), (const void **)(v397 + 32), (const void **)&v694.__first_);
                              v401 = (uint64_t *)(v397 + 8);
                              if (!v400)
                              {
                                v401 = (uint64_t *)v397;
                                v399 = (const void **)v397;
                              }
                              uint64_t v397 = *v401;
                            }
                            while (*v401);
                            if (v399 == v398
                              || std::less<std::string>::operator()[abi:ne180100]((uint64_t)(v375 + 9), (const void **)&v694.__first_, v399 + 4))
                            {
LABEL_746:
                              v399 = (const void **)(v375 + 8);
                            }
                            if (SHIBYTE(v694.__end_) < 0) {
                              operator delete(v694.__first_);
                            }
                            if (v398 != v399)
                            {
                              v402 = (void **)v389[7];
                              if (v402 != (void **)(v389 + 8))
                              {
                                v403 = (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)(v399 + 7);
                                do
                                {
                                  v404 = (std::string *)v402[8];
                                  v613 = (std::string *)v402[7];
                                  v614 = v404;
                                  if (v404) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)&v404->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
                                  }
                                  if (((uint64_t)v694.__end_cap_.__value_ & 7) != 0) {
                                    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v694.__end_cap_.__value_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                                  }
                                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694.__end_);
                                  if (v694.__begin_) {
                                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v694.__begin_);
                                  }
                                  if (v614) {
                                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v614);
                                  }
                                  v405 = (uint64_t *)v402[1];
                                  if (v405)
                                  {
                                    do
                                    {
                                      v406 = (uint64_t **)v405;
                                      v405 = (uint64_t *)*v405;
                                    }
                                    while (v405);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v406 = (uint64_t **)v402[2];
                                      BOOL v367 = *v406 == (uint64_t *)v402;
                                      v402 = (void **)v406;
                                    }
                                    while (!v367);
                                  }
                                  v402 = (void **)v406;
                                }
                                while (v406 != v389 + 8);
                              }
                            }
                            MEMORY[0x2455CEBF0](v685);
                            pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v657);
                          }
                          else
                          {
                            v685[0] = "CoreRealityIO/mtlxToUsdShade.cpp";
                            v685[1] = "AddMaterialVariant";
                            *(void *)&v686[0] = 1556;
                            *((void *)&v686[0] + 1) = "void realityio::mtlx::(anonymous namespace)::_Context::AddMateri"
                                                        "alVariant(const std::string &, const VariantSetName &, const Var"
                                                        "iantName &) const";
                            LOBYTE(v686[1]) = 0;
                            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)__p, &v694);
                            pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v694);
                            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
                            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694);
                          }
                          if (v662 < 0) {
                            operator delete(v661);
                          }
                          if ((v660 & 7) != 0) {
                            atomic_fetch_add_explicit((atomic_uint *volatile)(v660 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                          }
                          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v659);
                          if (v658) {
                            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v658);
                          }
                          MEMORY[0x2455CEF40](__p);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v407 = (uint64_t *)v373[1];
          if (v407)
          {
            do
            {
              v408 = v407;
              v407 = (uint64_t *)*v407;
            }
            while (v407);
          }
          else
          {
            do
            {
              v408 = (uint64_t *)v373[2];
              BOOL v367 = *v408 == (void)v373;
              v373 = (const void **)v408;
            }
            while (!v367);
          }
          v373 = (const void **)v408;
        }
        while (v408 != v603);
      }
      std::string::size_type v370 = v590;
    }
    v685[0] = &v675;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
    if (SHIBYTE(v681.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v681.__r_.__value_.__l.__data_);
    }
  }
  MEMORY[0x2455CF810](v685, "Looks");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v617, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v685);
  if (((uint64_t)v685[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v685[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v409 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
  v685[0] = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&v613, v409, a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)v685);
  if (((uint64_t)v685[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v685[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v613);
  std::string::basic_string[abi:ne180100]<0>(&v694, "LookVariant");
  pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet();
  if (SHIBYTE(v694.__end_) < 0) {
    operator delete(v694.__first_);
  }
  if ((BYTE8(v686[0]) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
  v410 = (RIO_MTLX *)v685[1];
  if (v685[1]) {
    v410 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
  }
  uint64_t v411 = *a1;
  v412 = RIO_MTLX::EMPTY_STRING(v410);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Look>(v411, (uint64_t)v412, (uint64_t *)&v611);
  v413 = v611;
  v566 = v612;
  if (v611 != v612)
  {
    while (2)
    {
      unint64_t v608 = 0;
      v609 = 0;
      uint64_t v610 = 0;
      v685[1] = 0;
      *(void *)&v686[0] = 0;
      v685[0] = &v685[1];
      v414 = v413;
      RIO_MTLX::Element::getDocument(*v413, &v694);
      v416 = *v414;
      v415 = (atomic_ullong *)v414[1];
      v567 = v414;
      __p[0] = *v414;
      __p[1] = v415;
      if (v415) {
        atomic_fetch_add_explicit(v415 + 1, 1uLL, memory_order_relaxed);
      }
      while (v416)
      {
        v417 = (atomic_ullong *)__p[1];
        v418 = (void **)v685[1];
        v419 = &v685[1];
        v420 = &v685[1];
        if (v685[1])
        {
          while (1)
          {
            while (1)
            {
              v420 = v418;
              unint64_t v421 = (unint64_t)v418[4];
              if (v421 <= (unint64_t)v416) {
                break;
              }
              v418 = (void **)*v420;
              v419 = v420;
              if (!*v420) {
                goto LABEL_805;
              }
            }
            if (v421 >= (unint64_t)v416) {
              break;
            }
            v418 = (void **)v420[1];
            if (!v418)
            {
              v419 = v420 + 1;
              goto LABEL_805;
            }
          }
        }
        else
        {
LABEL_805:
          v422 = (uint64_t *)operator new(0x30uLL);
          v423 = v422;
          v422[4] = (uint64_t)v416;
          v422[5] = (uint64_t)v417;
          if (v417) {
            atomic_fetch_add_explicit(v417 + 1, 1uLL, memory_order_relaxed);
          }
          uint64_t *v422 = 0;
          v422[1] = 0;
          v422[2] = (uint64_t)v420;
          *v419 = v422;
          if (*(void *)v685[0])
          {
            v685[0] = *(void **)v685[0];
            v423 = (uint64_t *)*v419;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v685[1], v423);
          ++*(void *)&v686[0];
        }
        v424 = std::vector<std::shared_ptr<RIO_MTLX::Look>>::push_back[abi:ne180100]((uint64_t *)&v608, (long long *)__p);
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v425 = v694.__first_;
        v426 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)__p[0] + 20, (unsigned __int8 *)&qword_268C40FC8);
        if (v426)
        {
          v427 = (uint64_t *)((char *)v426 + 40);
        }
        else
        {
          v426 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
          v427 = (uint64_t *)v426;
        }
        uint64_t v428 = *((unsigned __int8 *)v427 + 23);
        if ((v428 & 0x80u) != 0) {
          uint64_t v428 = v427[1];
        }
        if (!v428) {
          v427 = RIO_MTLX::EMPTY_STRING(v426);
        }
        v429 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v425[2].first.__r_.__value_.__r.__words, (unsigned __int8 *)v427);
        v430 = v429;
        if (v429)
        {
          v431 = (void *)*((void *)v429 + 5);
          v432 = (std::__shared_weak_count *)*((void *)v430 + 6);
          if (v432) {
            atomic_fetch_add_explicit(&v432->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v431)
          {
            v433 = 0;
            if (v431) {
              v434 = 0;
            }
            else {
              v434 = v432;
            }
            if (v432 && v431)
            {
              atomic_fetch_add_explicit(&v432->__shared_owners_, 1uLL, memory_order_relaxed);
              v433 = v432;
            }
            else
            {
              v432 = v434;
            }
          }
          else
          {
            v433 = 0;
          }
        }
        else
        {
          v432 = 0;
          v433 = 0;
          v431 = 0;
        }
        v435 = (std::__shared_weak_count *)__p[1];
        __p[0] = v431;
        __p[1] = v433;
        if (v435) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v435);
        }
        if (v432) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v432);
        }
        v416 = (RIO_MTLX::Element *)__p[0];
      }
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
      v436 = (uint64_t *)v608;
      if ((void *)v608 != v609)
      {
        v437 = v609 - 2;
        if ((unint64_t)(v609 - 2) > v608)
        {
          do
          {
            uint64_t v438 = *v436;
            uint64_t *v436 = *v437;
            uint64_t *v437 = v438;
            uint64_t v439 = v436[1];
            v436[1] = v437[1];
            v437[1] = v439;
            v436 += 2;
            v437 -= 2;
          }
          while (v436 < v437);
        }
      }
      if (v694.__begin_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v694.__begin_);
      }
      std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy((void *)v685[1]);
      v440 = (void *)v608;
      v441 = v609;
      v579 = v609;
LABEL_844:
      if (v440 == v441)
      {
        v685[0] = &v608;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
        v413 = v567 + 2;
        if (v567 + 2 == v566) {
          goto LABEL_1159;
        }
        continue;
      }
      break;
    }
    v595 = v440;
    uint64_t v442 = *v440;
    if (*(char *)(v442 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v607, *(const std::string::value_type **)(v442 + 48), *(void *)(v442 + 56));
    }
    else {
      std::string v607 = *(std::string *)(v442 + 48);
    }
    v443 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)a2);
    MEMORY[0x2455CF830](&v694, &v607);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v617, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v694);
    __p[0] = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)v604, v443, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v685, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v685);
    if (((uint64_t)v694.__first_ & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v694.__first_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((pxrInternal__aapl__pxrReserved__::UsdPrim::HasAuthoredReferences((pxrInternal__aapl__pxrReserved__::UsdPrim *)v604) & 1) == 0)
    {
      v445 = (void *)*v595;
      v444 = (std::__shared_weak_count *)v595[1];
      if (v444) {
        atomic_fetch_add_explicit(&v444->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v589 = v444;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40E18, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_268C40E18))
      {
        MEMORY[0x2455CF810](&unk_268C40E10, "Materials");
        __cxa_guard_release(&qword_268C40E18);
      }
      v685[0] = v445;
      v685[1] = v589;
      if (v589) {
        atomic_fetch_add_explicit(&v589->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v446 = (realityio::mtlx::_anonymous_namespace_ *)v589;
      if (v589) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v589);
      }
      v447 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v445 + 20, (unsigned __int8 *)&qword_268C40FC8);
      if (v447)
      {
        v448 = (uint64_t *)((char *)v447 + 40);
      }
      else
      {
        v447 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        v448 = (uint64_t *)v447;
      }
      uint64_t v449 = *((unsigned __int8 *)v448 + 23);
      if ((v449 & 0x80u) == 0) {
        uint64_t v450 = *((unsigned __int8 *)v448 + 23);
      }
      else {
        uint64_t v450 = v448[1];
      }
      if (v450)
      {
        if ((v449 & 0x80) == 0) {
          goto LABEL_868;
        }
LABEL_871:
        if (v448[1]) {
          goto LABEL_872;
        }
      }
      else
      {
        v448 = RIO_MTLX::EMPTY_STRING(v447);
        uint64_t v449 = *((unsigned __int8 *)v448 + 23);
        if ((v449 & 0x80) != 0) {
          goto LABEL_871;
        }
LABEL_868:
        if (v449)
        {
LABEL_872:
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v604, &v694);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v694);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v681, (pxrInternal__aapl__pxrReserved__::SdfPath *)v685, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p);
          if (((uint64_t)__p[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v685);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694);
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v604);
          pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v694, 0.0, 1.0);
          pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
          if ((BYTE8(v686[0]) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
          if (v685[1]) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v681);
        }
      }
      if ((v569 & 1) == 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v604);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(__p, &v623);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)__p + 1, (_DWORD *)&v623 + 1);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v694, 0.0, 1.0);
        pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
        if ((BYTE8(v686[0]) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
        if (v685[1]) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
        }
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdObject *)v604);
      v451 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v685);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v604, __p);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v694, (pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_268C40E10);
      v675.__r_.__value_.__r.__words[0] = 0;
      pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&v681, v451, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v694, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v675);
      if ((v675.__r_.__value_.__s.__data_[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v675.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)__p);
      v452 = (RIO_MTLX *)v685[1];
      if (v685[1]
        && atomic_fetch_add_explicit((atomic_uint *volatile)v685[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
      {
        v452 = (RIO_MTLX *)(*(uint64_t (**)(RIO_MTLX *))(*(void *)v452 + 8))(v452);
      }
      *(_OWORD *)&v680.__r_.__value_.__r.__words[1] = 0uLL;
      v680.__r_.__value_.__r.__words[0] = (std::string::size_type)&v680.__r_.__value_.__l.__size_;
      v453 = RIO_MTLX::EMPTY_STRING(v452);
      v596 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v445;
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>((uint64_t)v445, (uint64_t)v453, (uint64_t *)v685);
      v454 = (std::string **)v685[0];
      v455 = (std::string **)v685[1];
      while (v454 != v455)
      {
        v456 = *v454;
        v457 = (std::__shared_weak_count *)v454[1];
        if (v457) {
          atomic_fetch_add_explicit(&v457->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v456) {
        else
        }
          __p[0] = 0;
        v458 = (void **)std::__tree<pxrInternal__aapl__pxrReserved__::TfToken>::__find_equal<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v680, &v694, (uint64_t *)__p);
        v459 = (void **)*v458;
        if (!*v458)
        {
          v459 = (void **)operator new(0x30uLL);
          v459[4] = __p[0];
          __p[0] = 0;
          *((_DWORD *)v459 + 10) = 0;
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v460 = v694.__first_;
          *v459 = 0;
          v459[1] = 0;
          v459[2] = v460;
          *v458 = v459;
          v461 = (uint64_t *)v459;
          if (*(void *)v680.__r_.__value_.__l.__data_)
          {
            v680.__r_.__value_.__r.__words[0] = *(void *)v680.__r_.__value_.__l.__data_;
            v461 = (uint64_t *)*v458;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v680.__r_.__value_.__l.__size_, v461);
          ++v680.__r_.__value_.__r.__words[2];
        }
        *((_DWORD *)v459 + 10) = 0;
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v457) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v457);
        }
        v454 += 2;
      }
      v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v685;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v694);
      uint64_t UsdPrimAllPrimsPredicate = pxrInternal__aapl__pxrReserved__::GetUsdPrimAllPrimsPredicate(v462);
      unint64_t v465 = *(void *)UsdPrimAllPrimsPredicate;
      unint64_t v464 = *(void *)(UsdPrimAllPrimsPredicate + 8);
      v466 = *(std::pair<std::string, std::string> **)(UsdPrimAllPrimsPredicate + 16);
      if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
        && ((v465 & 0x2000) != 0 || (v464 & 0x2000) == 0))
      {
        v465 |= 0x2000uLL;
        v464 &= ~0x2000uLL;
      }
      v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v465;
      v694.__begin_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v464;
      v694.__end_ = v466;
      pxrInternal__aapl__pxrReserved__::UsdPrim::_MakeSiblingRange((uint64_t)&v681, (uint64_t *)&v694, (uint64_t)v685);
      v694.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v685[0];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&v694.__begin_, &v685[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&v694.__begin_ + 1, (_DWORD *)&v685[1] + 1);
      *(_OWORD *)&v694.__end_ = v686[0];
      __p[0] = *((void **)&v686[1] + 1);
      v694.__end_cap_.__value_ = *(std::allocator<std::pair<std::string, std::string>> **)&v686[1];
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl(&__p[1], &v687);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)&__p[1] + 1, (_DWORD *)&v687 + 1);
      long long v678 = v688;
      uint64_t v679 = v689;
      while (v694.__first_ != __p[0]
           || v694.__begin_ != __p[1]
           || !pxrInternal__aapl__pxrReserved__::operator==((uint64_t)&v694.__end_, (uint64_t)&v678))
      {
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::dereference((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v694, (uint64_t)&v675);
        uint64_t Name = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)&v675);
        *((_DWORD *)std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&v680, Name, &Name)+ 10) = 1;
        if ((v676 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v676 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v675.__r_.__value_.__r.__words[2]);
        if (v675.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v675.__r_.__value_.__l.__size_);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimSiblingIterator *)&v694);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__p[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694.__begin_);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v687);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v685[1]);
      pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply();
      PropertyOrder = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyOrder((uint64_t *)&Name, (pxrInternal__aapl__pxrReserved__::UsdPrim *)v604);
      v671 = 0;
      v670 = 0;
      unint64_t v672 = 0;
      v468 = RIO_MTLX::EMPTY_STRING(PropertyOrder);
      RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::MaterialAssign>((uint64_t)v596, (uint64_t)v468, (uint64_t *)&v668);
      v470 = (uint64_t *)v668;
      v471 = v669;
      v591 = v669;
      if (v668 != (std::string *)v669)
      {
        while (2)
        {
          v472 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(*v470 + 160), (unsigned __int8 *)&qword_268C41028);
          if (v472)
          {
            v473 = (uint64_t *)((char *)v472 + 40);
          }
          else
          {
            v472 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
            v473 = (uint64_t *)v472;
          }
          uint64_t v474 = *((unsigned __int8 *)v473 + 23);
          if ((v474 & 0x80u) != 0) {
            uint64_t v474 = v473[1];
          }
          if (!v474) {
            v473 = RIO_MTLX::EMPTY_STRING(v472);
          }
          if (v667
            && (*(unsigned char *)(v667 + 57) & 8) == 0
            && ((*(uint64_t (**)(uint64_t *))(v666 + 32))(&v666) & 1) != 0)
          {
            v475 = (std::string *)*v470;
            v476 = (std::__shared_weak_count *)v470[1];
            if (v476) {
              atomic_fetch_add_explicit(&v476->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v475)
            {
              if (v476) {
                goto LABEL_933;
              }
            }
            else
            {
              uint64_t v665 = 0;
              if (v476) {
LABEL_933:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v476);
            }
            v675.__r_.__value_.__r.__words[0] = (std::string::size_type)&v665;
            v477 = std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::__emplace_unique_key_args<pxrInternal__aapl__pxrReserved__::TfToken,std::piecewise_construct_t const&,std::tuple<pxrInternal__aapl__pxrReserved__::TfToken const&>,std::tuple<>>((uint64_t **)&v680, &v665, (uint64_t **)&v675);
            v478 = v477;
            if (*((_DWORD *)v477 + 10))
            {
              pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v663, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v681);
              Path = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v681, &v684);
              if ((v665 & 0xFFFFFFFFFFFFFFF8) != 0) {
                unint64_t EmptyString = (v665 & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else {
                unint64_t EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Path);
              }
              if (*(char *)(EmptyString + 23) >= 0) {
                size_t v481 = *(unsigned __int8 *)(EmptyString + 23);
              }
              else {
                size_t v481 = *(void *)(EmptyString + 8);
              }
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v481 + 1);
              if ((SBYTE7(v678) & 0x80u) == 0) {
                v482 = __p;
              }
              else {
                v482 = (void **)__p[0];
              }
              if (v481)
              {
                if (*(char *)(EmptyString + 23) >= 0) {
                  v483 = (const void *)EmptyString;
                }
                else {
                  v483 = *(const void **)EmptyString;
                }
                memmove(v482, v483, v481);
              }
              *(_WORD *)((char *)v482 + v481) = 95;
              do
              {
                int v484 = *((_DWORD *)v478 + 10);
                *((_DWORD *)v478 + 10) = v484 + 1;
                std::to_string(&v675, v484);
                if ((SBYTE7(v678) & 0x80u) == 0) {
                  v485 = __p;
                }
                else {
                  v485 = (void **)__p[0];
                }
                if ((SBYTE7(v678) & 0x80u) == 0) {
                  std::string::size_type v486 = BYTE7(v678);
                }
                else {
                  std::string::size_type v486 = (std::string::size_type)__p[1];
                }
                v487 = std::string::insert(&v675, 0, (const std::string::value_type *)v485, v486);
                long long v488 = *(_OWORD *)&v487->__r_.__value_.__l.__data_;
                *(void *)&v686[0] = *((void *)&v487->__r_.__value_.__l + 2);
                *(_OWORD *)v685 = v488;
                v487->__r_.__value_.__l.__size_ = 0;
                v487->__r_.__value_.__r.__words[2] = 0;
                v487->__r_.__value_.__r.__words[0] = 0;
                MEMORY[0x2455CF830](&v683, v685);
                if ((v665 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v665 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                uint64_t v665 = v683;
                uint64_t v683 = 0;
                if (SBYTE7(v686[0]) < 0) {
                  operator delete(v685[0]);
                }
                if (SHIBYTE(v675.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v675.__r_.__value_.__l.__data_);
                }
                v489 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v663);
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v675, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v684, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v665);
                pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath((uint64_t *)v685, v489, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v675);
                char v490 = pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v685);
                if ((BYTE8(v686[0]) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
                if (v685[1]) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v675);
              }
              while ((v490 & 1) != 0);
              if (SBYTE7(v678) < 0) {
                operator delete(__p[0]);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v684);
              uint64_t v491 = v664;
              if (v664
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v664 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v491 + 8))(v491);
              }
            }
            else
            {
              *((_DWORD *)v477 + 10) = 1;
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdObject *)&v681);
            v492 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->((uint64_t *)v685);
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v681, &v663);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v675, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v663, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v665);
            uint64_t v684 = 0;
            pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)__p, v492, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v675, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v684);
            if ((v684 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v684 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v675);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v663);
            v493 = v685[1];
            if (v685[1]
              && atomic_fetch_add_explicit((atomic_uint *volatile)v685[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(void *))(*(void *)v493 + 8))(v493);
            }
            v494 = (std::__shared_weak_count *)v470[1];
            v685[0] = (void *)*v470;
            v685[1] = v494;
            if (v494) {
              atomic_fetch_add_explicit(&v494->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v494) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v494);
            }
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdPrim *)__p);
            pxrInternal__aapl__pxrReserved__::UsdSchemaBase::GetPath((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v666, &v663);
            pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v675, 0.0, 1.0);
            pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v663);
            if ((BYTE8(v686[0]) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
            if (v685[1]) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
            }
            unint64_t v495 = *v470;
            v496 = (std::__shared_weak_count *)v470[1];
            if (v496)
            {
              atomic_fetch_add_explicit(&v496->__shared_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v496);
            }
            else
            {
            }
            uint64_t v500 = *v497;
            v499 = v497 + 1;
            v498 = (void *)v500;
            if ((uint64_t *)v500 != v499)
            {
              do
              {
                pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSet();
                pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
                if (SHIBYTE(v687) < 0) {
                  operator delete(*(void **)&v686[1]);
                }
                if ((BYTE8(v686[0]) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
                if (v685[1]) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
                }
                v501 = (uint64_t *)v498[1];
                if (v501)
                {
                  do
                  {
                    v502 = v501;
                    v501 = (uint64_t *)*v501;
                  }
                  while (v501);
                }
                else
                {
                  do
                  {
                    v502 = (uint64_t *)v498[2];
                    BOOL v367 = *v502 == (void)v498;
                    v498 = v502;
                  }
                  while (!v367);
                }
                v498 = v502;
              }
              while (v502 != v499);
            }
            unint64_t v504 = *v470;
            v503 = (atomic_ullong *)v470[1];
            if (v503) {
              atomic_fetch_add_explicit(v503 + 1, 1uLL, memory_order_relaxed);
            }
            v597 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v503;
            v505 = v645;
            if (!v645) {
              goto LABEL_1016;
            }
            v506 = &v645;
            do
            {
              v507 = v505;
              v508 = v506;
              unint64_t v509 = v505[4];
              v510 = (uint64_t **)(v505 + 1);
              if (v509 >= v504)
              {
                v510 = (uint64_t **)v507;
                v506 = (uint64_t **)v507;
              }
              v505 = *v510;
            }
            while (v505);
            if (v506 != &v645 && (v509 >= v504 ? (v511 = v507) : (v511 = v508), v504 >= v511[4]))
            {
              if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)v604))
              {
                if (v509 >= v504) {
                  v528 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v507 + 6);
                }
                else {
                  v528 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)(v508 + 6);
                }
                pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(&v663, v528);
                pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v663);
                pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v604, &v683);
                pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v663, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v685, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v683);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v683);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v685);
                if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
                {
                  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdObject *)v604);
                  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection();
                  v529 = v685[1];
                  if (v685[1]
                    && atomic_fetch_add_explicit((atomic_uint *volatile)v685[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
                  {
                    (*(void (**)(void *))(*(void *)v529 + 8))(v529);
                  }
                }
                else
                {
                  LODWORD(v685[0]) = 1;
                  v685[1] = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
                  *((void *)&v686[0] + 1) = 0;
                  uint64_t v683 = 0;
                  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v675, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v685, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v683);
                  v675.__r_.__value_.__r.__words[0] = MEMORY[0x263F90718] + 16;
                  if ((BYTE8(v686[0]) & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
                  if (v685[1]) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
                  }
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v684);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v663);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
                if (v509 >= v504) {
                  v530 = v507;
                }
                else {
                  v530 = v508;
                }
                uint64_t v531 = v530[9];
                v675.__r_.__value_.__r.__words[0] = MEMORY[0x263F90710] + 16;
                uint64_t v676 = v531;
                if ((v531 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v531 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  v676 &= 0xFFFFFFFFFFFFFFF8;
                }
                v675.__r_.__value_.__r.__words[0] = MEMORY[0x263F90718] + 16;
              }
            }
            else
            {
LABEL_1016:
              LODWORD(v685[0]) = 1;
              v685[1] = 0;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
              *((void *)&v686[0] + 1) = 0;
              uint64_t v663 = 0;
              pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&v675, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v685, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v663);
              v675.__r_.__value_.__r.__words[0] = MEMORY[0x263F90718] + 16;
              if ((BYTE8(v686[0]) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
              if (v685[1]) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
              }
            }
            if (v597) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v597);
            }
            if (v675.__r_.__value_.__l.__size_
              && (*(unsigned char *)(v675.__r_.__value_.__l.__size_ + 57) & 8) == 0
              && (*(unsigned int (**)(std::string *))(v675.__r_.__value_.__r.__words[0] + 32))(&v675))
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              v685[0] = (void *)(MEMORY[0x263F90740] + 16);
              unint64_t v512 = atomic_load(MEMORY[0x263F90550]);
              if (!v512) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
              }
              v513 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
              if (!v513) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
              }
              int v514 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v694, (const pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v675, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v685, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v665, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v512 + 40), v513);
              MEMORY[0x2455CEF40](v685);
              if (v514)
              {
                v515 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
                if (!v515) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetCollectionBindingRel((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v694, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v665, v515);
                v516 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v685);
                v517 = v671;
                if ((unint64_t)v671 >= v672)
                {
                  v519 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v670, v516);
                }
                else
                {
                  uint64_t v518 = *v516;
                  *(void *)v671 = *v516;
                  if ((v518 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v518 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    *(void *)v517 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  v519 = v517 + 8;
                }
                v671 = v519;
                if ((BYTE8(v686[0]) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                goto LABEL_1046;
              }
            }
            else
            {
              pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
              v685[0] = (void *)(MEMORY[0x263F90740] + 16);
              unint64_t v520 = atomic_load(MEMORY[0x263F90550]);
              if (!v520) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
              }
              v521 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
              if (!v521) {
                pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
              }
              int v522 = pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Bind((pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v694, (const pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)v685, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v520 + 40), v521);
              MEMORY[0x2455CEF40](v685);
              if (v522)
              {
                v523 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(MEMORY[0x263F90550]);
                if (!v523) {
                  pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType,pxrInternal__aapl__pxrReserved__::Tf_StaticDataDefaultFactory<pxrInternal__aapl__pxrReserved__::UsdShadeTokensType>>::_TryToCreateData();
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetDirectBindingRel((uint64_t *)v685, (pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *)&v694, v523);
                v524 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdObject::GetName((pxrInternal__aapl__pxrReserved__::UsdObject *)v685);
                v525 = v671;
                if ((unint64_t)v671 >= v672)
                {
                  v527 = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__push_back_slow_path<pxrInternal__aapl__pxrReserved__::TfToken const&>(&v670, v524);
                }
                else
                {
                  uint64_t v526 = *v524;
                  *(void *)v671 = *v524;
                  if ((v526 & 7) != 0
                    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v526 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                  {
                    *(void *)v525 &= 0xFFFFFFFFFFFFFFF8;
                  }
                  v527 = v525 + 8;
                }
                v671 = v527;
                if ((BYTE8(v686[0]) & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v686[0] + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
LABEL_1046:
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v686);
                if (v685[1]) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v685[1]);
                }
              }
            }
            MEMORY[0x2455CEEA0](&v675);
            if ((BYTE8(v678) & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v678 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            v471 = v591;
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v678);
            if (__p[1]) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)__p[1]);
            }
            if ((v665 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v665 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          v469 = (realityio::mtlx::_anonymous_namespace_ *)MEMORY[0x2455CEF40](&v666);
          v470 += 2;
          if (v470 == v471) {
            break;
          }
          continue;
        }
      }
      v685[0] = &v668;
      std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
      v532 = v671;
      if (v670 != v671)
      {
        v533 = Name;
        v534 = v674;
        if ((char *)v674 - (char *)Name < 1) {
          goto LABEL_1126;
        }
        uint64_t v535 = v674 - Name;
        uint64_t v536 = v671 - v670;
        v537 = &v670[(v671 - v670) & 0xFFFFFFFFFFFFFFF8];
        if (v535 > (uint64_t)(v672 - (void)v671) >> 3)
        {
          uint64_t v538 = v536 >> 3;
          unint64_t v539 = v535 + (v536 >> 3);
          if (v539 >> 61) {
            std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v672 - (void)v670) >> 2 > v539) {
            unint64_t v539 = (uint64_t)(v672 - (void)v670) >> 2;
          }
          if (v672 - (unint64_t)v670 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v540 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v540 = v539;
          }
          *(void *)&v686[1] = &v672;
          if (v540) {
            v541 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pxrInternal__aapl__pxrReserved__::TfToken>>((uint64_t)&v672, v540);
          }
          else {
            v541 = 0;
          }
          v552 = (uint64_t *)&v541[8 * v538];
          v685[0] = v541;
          v685[1] = v552;
          *((void *)&v686[0] + 1) = &v541[8 * v540];
          uint64_t v553 = 8 * v535;
          v554 = (char *)&v552[v535];
          do
          {
            uint64_t v555 = *v533;
            uint64_t *v552 = *v533;
            if ((v555 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v555 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v552 &= 0xFFFFFFFFFFFFFFF8;
            }
            ++v552;
            ++v533;
            v553 -= 8;
          }
          while (v553);
          *(void *)&v686[0] = v554;
          v556 = (char *)v685[1];
          v557 = v670;
          if (v670 != v537)
          {
            v558 = v537;
            do
            {
              uint64_t v559 = *((void *)v558 - 1);
              v558 -= 8;
              *((void *)v556 - 1) = v559;
              v556 -= 8;
              *(void *)v558 = 0;
            }
            while (v558 != v557);
            v554 = *(char **)&v686[0];
          }
          v685[1] = v556;
          v560 = v671;
          if (v671 != v537)
          {
            do
            {
              *(void *)v554 = *(void *)v537;
              v554 += 8;
              *(void *)v537 = 0;
              v537 += 8;
            }
            while (v537 != v560);
            v556 = (char *)v685[1];
            v537 = v671;
          }
          v561 = v670;
          unint64_t v562 = v672;
          v670 = v556;
          v671 = v554;
          unint64_t v672 = *((void *)&v686[0] + 1);
          *(void *)&v686[0] = v537;
          *((void *)&v686[0] + 1) = v562;
          v685[1] = v561;
          v685[0] = v561;
          std::__split_buffer<pxrInternal__aapl__pxrReserved__::TfToken>::~__split_buffer((uint64_t)v685);
          goto LABEL_1126;
        }
        uint64_t v542 = v671 - v537;
        uint64_t v543 = (v671 - v537) >> 3;
        if (v543 >= v535)
        {
          v544 = &Name[v535];
          uint64_t v545 = (uint64_t)v671;
        }
        else
        {
          v544 = &Name[v543];
          uint64_t v545 = (uint64_t)v671;
          if (v544 != v674)
          {
            v546 = &Name[v543];
            v547 = v671;
            do
            {
              uint64_t v548 = *v546;
              void *v547 = *v546;
              if ((v548 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v548 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *v547 &= 0xFFFFFFFFFFFFFFF8;
              }
              ++v546;
              ++v547;
              v545 += 8;
            }
            while (v546 != v534);
          }
          v671 = (char *)v545;
          if (v542 < 1) {
LABEL_1126:
          }
            pxrInternal__aapl__pxrReserved__::UsdPrim::SetPropertyOrder((uint64_t)v604);
        }
        uint64_t v549 = v545 - 8 * v535;
        v550 = (char *)v545;
        v551 = (char *)v549;
        if (v549 < (unint64_t)v532)
        {
          do
          {
            *(void *)v550 = *(void *)v551;
            v550 += 8;
            *(void *)v551 = 0;
            v551 += 8;
          }
          while (v551 < v532);
        }
        v671 = v550;
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,pxrInternal__aapl__pxrReserved__::TfToken *,0>((uint64_t)v537, v549, v545);
        for (; v533 != v544; v537 += 8)
          pxrInternal__aapl__pxrReserved__::TfToken::operator=(v537, v533++);
        goto LABEL_1126;
      }
      v685[0] = &v670;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
      v685[0] = &Name;
      std::vector<pxrInternal__aapl__pxrReserved__::TfToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
      MEMORY[0x2455CF4B0](&v694);
      std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::TfToken,std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>,std::less<pxrInternal__aapl__pxrReserved__::TfToken>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::TfToken,int>>>::destroy((void *)v680.__r_.__value_.__l.__size_);
      if ((v682 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v682 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v681.__r_.__value_.__r.__words[2]);
      if (v681.__r_.__value_.__l.__size_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v681.__r_.__value_.__l.__size_);
      }
      if (v589) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v589);
      }
      if (pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant())
      {
        pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection();
        __p[1] = 0;
        __p[0] = 0;
        pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext();
        MEMORY[0x2455CEBE0](v685, &v694);
        pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)&v694.__end_cap_.std::__compressed_pair_elem<std::allocator<std::pair<std::string, std::string>> &, 1, false>);
        v563 = v694.__end_cap_.__value_;
        if (v694.__end_cap_.__value_
          && atomic_fetch_add_explicit((atomic_uint *volatile)&v694.__end_cap_.__value_->first.__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(std::pair<std::string, std::string> *))(v563->first.__r_.__value_.__r.__words[0] + 8))(v563);
        }
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v564 = v694.__begin_;
        if (v694.__begin_
          && atomic_fetch_add_explicit((atomic_uint *volatile)&v694.__begin_->first.__r_.__value_.__r.__words[1], 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(std::__split_buffer<std::pair<std::string, std::string>>::pointer))(v564->first.__r_.__value_.__r.__words[0] + 8))(v564);
        }
        v565 = __p[1];
        if (__p[1]
          && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(void *))(*(void *)v565 + 8))(v565);
        }
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences((uint64_t *)&v694, (pxrInternal__aapl__pxrReserved__::UsdPrim *)&v613);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)v604, &v681);
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)__p, 0.0, 1.0);
        pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v681);
        if (((uint64_t)v694.__end_cap_.__value_ & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v694.__end_cap_.__value_ & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694.__end_);
        if (v694.__begin_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v694.__begin_);
        }
        MEMORY[0x2455CEBF0](v685);
      }
      else
      {
        v685[0] = "CoreRealityIO/mtlxToUsdShade.cpp";
        v685[1] = "UsdMtlxRead";
        *(void *)&v686[0] = 2457;
        *((void *)&v686[0] + 1) = "void realityio::mtlx::UsdMtlxRead(const MaterialX::ConstDocumentPtr &, const UsdStag"
                                    "ePtr &, const SdfPath &, const SdfPath &)";
        LOBYTE(v686[1]) = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v613, &v694);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v694);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v694);
      }
    }
    if ((v606 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v606 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v605);
    if (v604[1]) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v604[1]);
    }
    if (SHIBYTE(v607.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v607.__r_.__value_.__l.__data_);
    }
    v440 = v595 + 2;
    v441 = v579;
    goto LABEL_844;
  }
LABEL_1159:
  v685[0] = &v611;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection((pxrInternal__aapl__pxrReserved__::UsdVariantSet *)&v657);
  if (v662 < 0) {
    operator delete(v661);
  }
  if ((v660 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v660 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v659);
  if (v658) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v658);
  }
  if ((v616 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v616 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v615);
  if (v614) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v614);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v617);
  std::__tree<std::string>::destroy((uint64_t)&v703, v704);
  v685[0] = &v700;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
  std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(v698);
  v685[0] = &v695[24];
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
  v685[0] = v695;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v685);
LABEL_1170:
}

void sub_23F763E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  __cxa_guard_abort(&qword_268C40E18);
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a55);
  if (a64 < 0) {
    operator delete(__p);
  }
  STACK[0x410] = (unint64_t)&a65;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x410]);
  STACK[0x410] = (unint64_t)&a68;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x410]);
  pxrInternal__aapl__pxrReserved__::UsdVariantSet::~UsdVariantSet((void **)&STACK[0x340]);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a71);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&a72);
  _Unwind_Resume(a1);
}

void realityio::mtlx::anonymous namespace'::_names(realityio::mtlx::_anonymous_namespace_ *this)
{
  {
    if (v1)
    {
    }
  }
}

void sub_23F7653AC(_Unwind_Exception *a1)
{
}

uint64_t **realityio::mtlx::anonymous namespace'::_Attr::_Attr<RIO_MTLX::Document const>(uint64_t **a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(a2 + 160), a3);
  if (v4) {
    char v5 = (uint64_t *)(v4 + 40);
  }
  else {
    char v5 = RIO_MTLX::EMPTY_STRING(0);
  }
  uint64_t v6 = *((unsigned __int8 *)v5 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = v5[1];
  }
  if (!v6) {
    char v5 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v5);
  }
  *a1 = v5;
  return a1;
}

uint64_t *RIO_MTLX::Element::getActiveColorSpace(RIO_MTLX::Element *this)
{
  uint64_t v1 = (std::__shared_weak_count *)std::shared_ptr<RIO_MTLX::Element>::shared_ptr[abi:ne180100]<RIO_MTLX::Element,void>(&v10, (void *)this + 1);
  ColorSpace = v10;
  if (v10)
  {
    while (1)
    {
      uint64_t v3 = (unsigned __int8 *)RIO_MTLX::Element::COLOR_SPACE_ATTRIBUTE((RIO_MTLX::Element *)v1);
      uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)ColorSpace + 20, v3);
      char v5 = v10;
      if (v4) {
        break;
      }
      uint64_t v1 = (std::__shared_weak_count *)*((void *)v10 + 29);
      if (v1 && (uint64_t v1 = std::__shared_weak_count::lock(v1)) != 0) {
        ColorSpace = (RIO_MTLX::Element *)*((void *)v5 + 28);
      }
      else {
        ColorSpace = 0;
      }
      uint64_t v6 = v11;
      int v10 = ColorSpace;
      uint64_t v11 = v1;
      if (v6)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        ColorSpace = v10;
      }
      if (!ColorSpace) {
        goto LABEL_10;
      }
    }
    ColorSpace = (RIO_MTLX::Element *)RIO_MTLX::Element::getColorSpace(v10);
    int v7 = 0;
  }
  else
  {
LABEL_10:
    int v7 = 1;
  }
  int v8 = (RIO_MTLX *)v11;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7) {
    return RIO_MTLX::EMPTY_STRING(v8);
  }
  return (uint64_t *)ColorSpace;
}

void sub_23F7654E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::VariantAssignments::AddInherited(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v9 = *(RIO_MTLX::Element **)a2;
  int v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v8[0] = (void **)&v11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](v8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *(void *)a2;
  Inherituint64_t String = (std::string *)RIO_MTLX::Element::getInheritString(*(RIO_MTLX::Element **)a2);
  RIO_MTLX::Element::resolveRootNameReference<RIO_MTLX::Element>(v5, InheritString, &v11);
  if (v11)
  {
    RIO_MTLX::Element::asA<RIO_MTLX::Look>((uint64_t)v11, &v9);
    if (v9)
    {
      int v7 = v10;
      v8[0] = (void **)v9;
      v8[1] = (void **)&v10->__vftable;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_23F7655FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, std::__shared_weak_count *a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::VariantAssignments::~VariantAssignments(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 12), this[13]);
  uint64_t v2 = this + 9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>,std::less<std::shared_ptr<RIO_MTLX::MaterialAssign const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::MaterialAssign const>,std::set<std::pair<std::string,std::string>>>>>::destroy(this[7]);
  uint64_t v2 = this + 3;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
  uint64_t v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v2);
}

void *std::pair<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::UsdStage>,pxrInternal__aapl__pxrReserved__::UsdEditTarget>::~pair(void *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data::~_Data((pxrInternal__aapl__pxrReserved__::PcpMapFunction::_Data *)(a1 + 4));
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (atomic_uint *)a1[1];
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void realityio::mtlx::anonymous namespace'::_Context::~_Context(realityio::mtlx::_anonymous_namespace_::_Context *this)
{
  MEMORY[0x2455CEF40]((char *)this + 272);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(*((void **)this + 29));
  std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*((void **)this + 26));
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*((void **)this + 23));
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*((void **)this + 20));
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(*((void **)this + 17));
  uint64_t v4 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(*((void **)this + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 40);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = (atomic_uint *)*((void *)this + 1);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI>,0>(uint64_t a1)
{
  MEMORY[0x2455CF2C0](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*a1);
    std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::GeomElement const>,std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::shared_ptr<RIO_MTLX::GeomElement const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::GeomElement const>,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::GeomElement const> const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<RIO_MTLX::GeomElement const> const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>(uint64_t a1)
{
  MEMORY[0x2455CEEA0](a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdCollectionAPI>,0>(uint64_t a1)
{
  MEMORY[0x2455CEEA0](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeMaterial>,0>(uint64_t a1)
{
  MEMORY[0x2455CEF40](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::anonymous namespace'::_NodeGraph>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::NodeGraph const>,std::__value_type<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::anonymous namespace'::_NodeGraph>,std::less<std::shared_ptr<RIO_MTLX::NodeGraph const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::anonymous namespace'::_NodeGraph>>>::destroy(void *a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 13));
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy((void *)a1[11]);
    uint64_t v2 = a1[9];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(a1 + 8));
    uint64_t v3 = a1[7];
    if (v3) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)a1[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a1);
  }
}

void realityio::mtlx::anonymous namespace'::_NodeGraph::~_NodeGraph(realityio::mtlx::_anonymous_namespace_::_NodeGraph *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 56);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*((void **)this + 5));
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 16);
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
}

void std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::TfToken>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::TfToken>,0>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(*(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<RIO_MTLX::ValueElement const>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *realityio::mtlx::anonymous namespace'::_AttributeNames::_AttributeNames(realityio::mtlx::_anonymous_namespace_::_AttributeNames *this)
{
  uint64_t v1 = std::string::basic_string[abi:ne180100]<0>(&qword_268C40E78, "channels");
  std::string::basic_string[abi:ne180100]<0>(v1 + 3, "cms");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40EA8, "cmsconfig");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40EC0, "collection");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40ED8, "context");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40EF0, "default");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40F08, "doc");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40F20, "enum");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40F38, "enumvalues");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40F50, "excludegeom");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40F68, "geom");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40F80, "helptext");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40F98, "includegeom");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40FB0, "includecollection");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40FC8, "inherit");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40FE0, "interfacename");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C40FF8, "isdefaultversion");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41010, "look");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41028, "material");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41040, "member");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41058, "nodedef");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41070, "nodegraph");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41088, "nodename");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C410A0, "node");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C410B8, "output");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C410D0, "semantic");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C410E8, "token");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41100, "type");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41118, "uicolor");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41130, "uifolder");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41148, "uimax");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41160, "uimin");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41178, "uiname");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41190, "value");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C411A8, "valuecurve");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C411C0, "valuerange");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C411D8, "variant");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C411F0, "variantassign");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41208, "variantset");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41220, "version");
  std::string::basic_string[abi:ne180100]<0>(&qword_268C41238, "xpos");
  return std::string::basic_string[abi:ne180100]<0>(qword_268C41250, "ypos");
}

void sub_23F766278(_Unwind_Exception *exception_object)
{
  if (byte_268C4124F < 0) {
    operator delete((void *)qword_268C41238);
  }
  if (byte_268C41237 < 0) {
    operator delete((void *)qword_268C41220);
  }
  if (byte_268C4121F < 0) {
    operator delete((void *)qword_268C41208);
  }
  if (byte_268C41207 < 0) {
    operator delete((void *)qword_268C411F0);
  }
  if (byte_268C411EF < 0) {
    operator delete((void *)qword_268C411D8);
  }
  if (byte_268C411D7 < 0) {
    operator delete((void *)qword_268C411C0);
  }
  if (byte_268C411BF < 0) {
    operator delete((void *)qword_268C411A8);
  }
  if (byte_268C411A7 < 0) {
    operator delete((void *)qword_268C41190);
  }
  if (byte_268C4118F < 0) {
    operator delete((void *)qword_268C41178);
  }
  if (byte_268C41177 < 0) {
    operator delete((void *)qword_268C41160);
  }
  if (byte_268C4115F < 0) {
    operator delete((void *)qword_268C41148);
  }
  if (byte_268C41147 < 0) {
    operator delete((void *)qword_268C41130);
  }
  if (byte_268C4112F < 0) {
    operator delete((void *)qword_268C41118);
  }
  if (byte_268C41117 < 0) {
    operator delete((void *)qword_268C41100);
  }
  if (byte_268C410FF < 0) {
    operator delete((void *)qword_268C410E8);
  }
  if (byte_268C410E7 < 0) {
    operator delete((void *)qword_268C410D0);
  }
  if (byte_268C410CF < 0) {
    operator delete((void *)qword_268C410B8);
  }
  if (byte_268C410B7 < 0) {
    operator delete((void *)qword_268C410A0);
  }
  if (byte_268C4109F < 0) {
    operator delete((void *)qword_268C41088);
  }
  if (byte_268C41087 < 0) {
    operator delete((void *)qword_268C41070);
  }
  if (byte_268C4106F < 0) {
    operator delete((void *)qword_268C41058);
  }
  if (byte_268C41057 < 0) {
    operator delete((void *)qword_268C41040);
  }
  if (byte_268C4103F < 0) {
    operator delete((void *)qword_268C41028);
  }
  if (byte_268C41027 < 0) {
    operator delete((void *)qword_268C41010);
  }
  if (byte_268C4100F < 0) {
    operator delete((void *)qword_268C40FF8);
  }
  if (byte_268C40FF7 < 0) {
    operator delete((void *)qword_268C40FE0);
  }
  if (byte_268C40FDF < 0) {
    operator delete((void *)qword_268C40FC8);
  }
  if (byte_268C40FC7 < 0) {
    operator delete((void *)qword_268C40FB0);
  }
  if (byte_268C40FAF < 0) {
    operator delete((void *)qword_268C40F98);
  }
  if (byte_268C40F97 < 0) {
    operator delete((void *)qword_268C40F80);
  }
  if (byte_268C40F7F < 0) {
    operator delete((void *)qword_268C40F68);
  }
  if (byte_268C40F67 < 0) {
    operator delete((void *)qword_268C40F50);
  }
  if (byte_268C40F4F < 0) {
    operator delete((void *)qword_268C40F38);
  }
  if (byte_268C40F37 < 0) {
    operator delete((void *)qword_268C40F20);
  }
  if (byte_268C40F1F < 0) {
    operator delete((void *)qword_268C40F08);
  }
  if (byte_268C40F07 < 0) {
    operator delete((void *)qword_268C40EF0);
  }
  if (byte_268C40EEF < 0) {
    operator delete((void *)qword_268C40ED8);
  }
  if (byte_268C40ED7 < 0) {
    operator delete((void *)qword_268C40EC0);
  }
  if (byte_268C40EBF < 0) {
    operator delete((void *)qword_268C40EA8);
  }
  if (byte_268C40EA7 < 0) {
    operator delete((void *)qword_268C40E90);
  }
  if (byte_268C40E8F < 0) {
    operator delete((void *)qword_268C40E78);
  }
  _Unwind_Resume(exception_object);
}

void sub_23F76669C()
{
}

void sub_23F7666A4()
{
}

void sub_23F7666AC()
{
}

void sub_23F7666B4()
{
}

void sub_23F7666BC()
{
}

void sub_23F7666C4()
{
}

void sub_23F7666CC()
{
}

void sub_23F7666D4()
{
}

void sub_23F7666DC()
{
}

void sub_23F7666E4()
{
}

void sub_23F7666EC()
{
}

void sub_23F7666F4()
{
}

void sub_23F7666FC()
{
}

void sub_23F766704()
{
}

void sub_23F76670C()
{
}

void sub_23F766714()
{
}

void sub_23F76671C()
{
}

void sub_23F766724()
{
}

void sub_23F76672C()
{
}

void sub_23F766734()
{
}

void sub_23F76673C()
{
}

void sub_23F766744()
{
}

void sub_23F76674C()
{
}

void sub_23F766754()
{
}

void sub_23F76675C()
{
}

void sub_23F766764()
{
}

void sub_23F76676C()
{
}

void sub_23F766774()
{
}

void sub_23F76677C()
{
}

void sub_23F766784()
{
}

void sub_23F76678C()
{
}

void sub_23F766794()
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>()
{
  uint64_t v0 = (unsigned int *)pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes();
  unsigned int v1 = atomic_load(v0);
  if (!v1)
  {
    uint64_t v3 = v0;
    pxrInternal__aapl__pxrReserved__::TfDebug::_Data<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>::nodes();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode();
    unsigned int v1 = atomic_load(v3);
  }
  return v1 == 2;
}

uint64_t *std::map<std::shared_ptr<RIO_MTLX::NodeGraph const>,realityio::mtlx::anonymous namespace'::_NodeGraph>::operator[](uint64_t **a1, unint64_t a2, uint64_t a3)
{
  int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v6;
        unint64_t v9 = v6[4];
        if (v9 <= a2) {
          break;
        }
        uint64_t v6 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v6 = v8[1];
      if (!v6)
      {
        int v7 = v8 + 1;
        goto LABEL_9;
      }
    }
    uint64_t v11 = (uint64_t *)v8;
  }
  else
  {
    int v8 = a1 + 1;
LABEL_9:
    int v10 = (uint64_t *)operator new(0x70uLL);
    uint64_t v11 = v10;
    _OWORD v10[4] = a2;
    void v10[5] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
    *uint64_t v11 = 0;
    v11[1] = 0;
    _OWORD v11[2] = (uint64_t)v8;
    *int v7 = v11;
    uint64_t v12 = (uint64_t *)**a1;
    uint64_t v13 = v11;
    if (v12)
    {
      *a1 = v12;
      uint64_t v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11 + 6;
}

realityio::mtlx::_anonymous_namespace_::_NodeGraphBuilder *realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::_NodeGraphBuilder(realityio::mtlx::_anonymous_namespace_::_NodeGraphBuilder *this)
{
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)this + 8) = 0;
  *((void *)this + 7) = (char *)this + 64;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 15) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = (char *)this + 112;
  return this;
}

uint64_t realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::SetTarget(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, std::string *a4)
{
  if (a4) {
  else
  }
    uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v9, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_23F7669E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)va);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t realityio::mtlx::anonymous namespace'::_NodeGraph::SetImplementation(uint64_t a1, uint64_t *a2)
{
  if (pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v7))
  {
    *(_DWORD *)a1 = v7;
    uint64_t v3 = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 48), 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v3;
    if (v4) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 16, &v9);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 20, &v10);
    pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(a1 + 24), &v11);
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 56, (int *)&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 60);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v6);
  }
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v9);
  uint64_t result = v8;
  if (v8) {
    return pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v8);
  }
  return result;
}

void sub_23F766B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)va);
  _Unwind_Resume(a1);
}

void realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::~_NodeGraphBuilder(char **this)
{
  std::__tree<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>>>>::destroy(this[14]);
  std::__tree<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::shared_ptr<RIO_MTLX::Input const>,std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::shared_ptr<RIO_MTLX::Input const>>,true>,std::allocator<std::__value_type<std::shared_ptr<RIO_MTLX::Input const>,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(this[11]);
  std::__tree<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::__map_value_compare<std::string,std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>>>::destroy(this[8]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)(this + 6));
  uint64_t v2 = (atomic_uint *)this[5];
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[3];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t realityio::mtlx::anonymous namespace'::_NodeGraph::_NodeGraph(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  std::map<std::string,pxrInternal__aapl__pxrReserved__::TfToken>::map[abi:ne180100](a1 + 32, (const void ***)(a2 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 56), (_DWORD *)(a2 + 56));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 60), (_DWORD *)(a2 + 60));
  return a1;
}

void sub_23F766CB0(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 24);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(v2);
  uint64_t v5 = *(void *)(v1 + 8);
  if (v5) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v5);
  }
  _Unwind_Resume(a1);
}

realityio::mtlx::_anonymous_namespace_::_NodeGraph *realityio::mtlx::anonymous namespace'::_NodeGraph::_NodeGraph(realityio::mtlx::_anonymous_namespace_::_NodeGraph *this)
{
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)this + 6) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = (char *)this + 40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  return this;
}

uint64_t realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::SetTarget(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *(void *)(a1 + 32) = *(void *)a2;
  pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator=((atomic_uint **)(a1 + 40), (atomic_uint **)(a2 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 48, a3);

  return pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(a1 + 52, a3 + 1);
}

void realityio::mtlx::anonymous namespace'::_MakeName(uint64_t a1, std::string *this)
{
  std::string::size_type v4 = std::string::find(this, 58, 0);
  if (v4 == -1)
  {
    JUMPOUT(0x2455CF830);
  }
  std::string::size_type v5 = v4;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = *this;
  }
  std::string::replace(&__p, v5, 1uLL, "__");
  MEMORY[0x2455CF830](a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_23F766E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdPrim *realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::Build(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v216 = *MEMORY[0x263EF8340];
  std::string::size_type v4 = a2 + 4;
  std::string::size_type v5 = pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator pxrInternal__aapl__pxrReserved__::UsdStage* (pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::*)(void)const(a2 + 4);
  if (!(v6 & 1 | (unint64_t)v5))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 689;
    uint64_t v214 = "UsdPrim realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    char v215 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper() & 1) == 0) {
      return pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 6))
    || (uint64_t IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 6)),
        (IsPrimPath & 1) == 0))
  {
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)"Build";
    __str.__r_.__value_.__r.__words[2] = 692;
    uint64_t v214 = "UsdPrim realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::Build(ShaderNamesByOutputName *)";
    char v215 = 0;
    uint64_t IsPrimPath = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
    if ((IsPrimPath & 1) == 0) {
      return pxrInternal__aapl__pxrReserved__::UsdPrim::UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)a1);
    }
  }
  uint64_t v8 = a2[2];
  std::string v171 = a2 + 2;
  int v9 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)IsPrimPath);
  BOOL v10 = RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v8, (unsigned __int8 *)v9);
  int data = 1;
  uint64_t v184 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  unint64_t v187 = 0;
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Define();
    if (!v193
      || (*(unsigned char *)(v193 + 57) & 8) != 0
      || ((*(uint64_t (**)(uint64_t *))(v192 + 32))(&v192) & 1) == 0)
    {
      *(_DWORD *)a1 = 1;
      *(void *)(a1 + 8) = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = 0;
      MEMORY[0x2455CF040](&v192);
      if ((v187 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_417;
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&__str, &v193, &v194);
    int data = (int)__str.__r_.__value_.__l.__data_;
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    uint64_t v184 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)size;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v185, (int *)&__str.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v186);
    if ((v187 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v187 = (unint64_t)v214;
    uint64_t v214 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
    if (__str.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
    }
    if (*a2)
    {
      BOOL v167 = v10;
      uint64_t v13 = (uint64_t *)v188;
      for (uint64_t i = v189; v13 != (uint64_t *)i; v13 += 2)
      {
        uint64_t v15 = *v13;
        uint64_t v14 = (std::__shared_weak_count *)v13[1];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((uint64_t *)&v208, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v192);
        uint64_t v17 = RIO_MTLX::EMPTY_STRING(v16);
        RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v15, (uint64_t)v17, (uint64_t *)&v196);
        unint64_t v19 = v196;
        uint64_t v18 = v197;
        while (v19 != (uint64_t *)v18)
        {
          std::string::size_type v20 = *v19;
          uint64_t v21 = (std::__shared_weak_count *)v19[1];
          if (v21)
          {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v207.__r_.__value_.__r.__words[0] = v20;
          v207.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
          if ((v214 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
          if (__str.__r_.__value_.__l.__size_) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
          }
          if (v207.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
          }
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          v19 += 2;
        }
        v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
        std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
        MEMORY[0x2455CF2C0](&v208);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v188;
      std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      BOOL v10 = v167;
    }
    BOOL v22 = v10;
    uint64_t v23 = *v171;
    uint64_t v24 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v12);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v23, (uint64_t)v24, (uint64_t *)&v208);
    unint64_t v25 = v208;
    for (uint64_t j = v209; v25 != j; v25 += 16)
    {
      char v27 = *(uint64_t **)v25;
      std::string v28 = *(std::__shared_weak_count **)(v25 + 8);
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v196 = v27;
      std::string v197 = v28;
      pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((uint64_t *)&__str, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v192);
      if ((v182 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v182 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v181);
      if (v180) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v180);
      }
      MEMORY[0x2455CF2C0](&__str);
      if (v197) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v197);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    std::string v29 = (RIO_MTLX *)MEMORY[0x2455CF040](&v192);
    BOOL v10 = v22;
  }
  else
  {
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(v4);
    unint64_t v208 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)&__str, v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 6), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v208);
    int data = (int)__str.__r_.__value_.__l.__data_;
    std::string::size_type v31 = __str.__r_.__value_.__l.__size_;
    __str.__r_.__value_.__l.__size_ = 0;
    uint64_t v184 = (pxrInternal__aapl__pxrReserved__::UsdPrim *)v31;
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v185, (int *)&__str.__r_.__value_.__r.__words[2]);
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v186);
    if ((v187 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v187 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unint64_t v187 = (unint64_t)v214;
    uint64_t v214 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
    std::string v29 = (RIO_MTLX *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_) {
      std::string v29 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
    }
    if ((v208 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v208 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  BOOL v168 = v10;
  uint64_t v32 = *v171;
  uint64_t v33 = RIO_MTLX::EMPTY_STRING(v29);
  RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Node>(v32, (uint64_t)v33, (uint64_t *)&v177);
  uint64_t v35 = v177;
  uint64_t v172 = v178;
  while (v35 != v172)
  {
    uint64_t v36 = (uint64_t *)__str.__r_.__value_.__r.__words[0];
    if (*(char *)(__str.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      uint64_t v38 = *(void *)(__str.__r_.__value_.__r.__words[0] + 8);
      if (v38 == 8)
      {
        uint64_t v36 = *(uint64_t **)__str.__r_.__value_.__l.__data_;
LABEL_67:
        if (*v36 != 0x6C6169726574616DLL) {
          goto LABEL_68;
        }
        goto LABEL_277;
      }
      if (v38 != 13) {
        goto LABEL_68;
      }
      uint64_t v36 = *(uint64_t **)__str.__r_.__value_.__l.__data_;
    }
    else
    {
      int v37 = *(unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + 23);
      if (v37 == 8) {
        goto LABEL_67;
      }
      if (v37 != 13) {
        goto LABEL_68;
      }
    }
    uint64_t v39 = *v36;
    uint64_t v40 = *(uint64_t *)((char *)v36 + 5);
    BOOL v41 = v39 == 0x7365636166727573 && v40 == 0x7265646168736563;
    if (!v41)
    {
LABEL_68:
      uint64_t v42 = v35[1];
      *(void *)&long long v176 = *v35;
      *((void *)&v176 + 1) = v42;
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      if (__str.__r_.__value_.__r.__words[0]) {
        MEMORY[0x2455CF830](&v203, __str.__r_.__value_.__r.__words[0] + 48);
      }
      else {
        std::string::size_type v203 = 0;
      }
      if (__str.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
      if (!v203 && *a2) {
        goto LABEL_275;
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v201, (pxrInternal__aapl__pxrReserved__::UsdObject *)&data);
      LODWORD(__str.__r_.__value_.__l.__data_) = 1;
      __str.__r_.__value_.__l.__size_ = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v214 = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
      uint64_t v212 = 0;
      unint64_t v208 = MEMORY[0x263F90790] + 16;
      if ((v214 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      uint64_t v173 = v35;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
      if (__str.__r_.__value_.__l.__size_) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
      }
      uint64_t v43 = v200;
      if (!(void)v200) {
        goto LABEL_188;
      }
      uint64_t v44 = (std::__shared_weak_count *)*((void *)&v200 + 1);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v200;
      if (*((void *)&v200 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v200 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t SourceURI = realityio::mtlx::UsdMtlxGetSourceURI((uint64_t *)&__str);
      if (*(char *)(SourceURI + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v207, *(const std::string::value_type **)SourceURI, *(void *)(SourceURI + 8));
      }
      else
      {
        long long v46 = *(_OWORD *)SourceURI;
        v207.__r_.__value_.__r.__words[2] = *(void *)(SourceURI + 16);
        *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v46;
      }
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      uint64_t IsRelativePath = pxrInternal__aapl__pxrReserved__::TfIsRelativePath();
      if (IsRelativePath)
      {
        unint64_t v48 = *(std::__shared_weak_count **)(v43 + 232);
        if (v48)
        {
          unint64_t v49 = std::__shared_weak_count::lock(v48);
          if (v49) {
            std::string::size_type v50 = *(void *)(v43 + 224);
          }
          else {
            std::string::size_type v50 = 0;
          }
        }
        else
        {
          std::string::size_type v50 = 0;
          unint64_t v49 = 0;
        }
        v206.__r_.__value_.__r.__words[0] = v50;
        v206.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
        uint64_t v51 = realityio::mtlx::UsdMtlxGetSourceURI((uint64_t *)&v206);
        if (*(char *)(v51 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v51, *(void *)(v51 + 8));
        }
        else
        {
          long long v52 = *(_OWORD *)v51;
          __str.__r_.__value_.__r.__words[2] = *(void *)(v51 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v52;
        }
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        std::string::size_type v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        {
          std::string::size_type v53 = __str.__r_.__value_.__l.__size_;
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v53)
        {
          uint64_t v55 = (unsigned __int8 *)p_str + v53;
          uint64_t v56 = p_str;
          uint64_t v57 = (std::string *)v55;
          do
          {
            long long v58 = v56;
            uint64_t v59 = (unsigned __int8 *)v56;
            while (1)
            {
              int v60 = *v59++;
              if (v60 == 47) {
                break;
              }
              long long v58 = (std::string *)v59;
              if (v59 == v55)
              {
                long long v58 = v57;
                goto LABEL_110;
              }
            }
            uint64_t v56 = (std::string *)((char *)&v58->__r_.__value_.__l.__data_ + 1);
            uint64_t v57 = v58;
          }
          while (v59 != v55);
LABEL_110:
          if (v58 != (std::string *)v55)
          {
            int64_t v61 = (char *)v58 - (char *)p_str;
            if (v61 != -1)
            {
              std::string::basic_string(&v206, &__str, 0, v61 + 1, (std::allocator<char> *)&v204);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v206;
            }
          }
        }
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v207.__r_.__value_.__l.__data_, (uint64_t)&v204);
        uint64_t IsRelativePath = pxrInternal__aapl__pxrReserved__::ArchNormPath();
        if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v207.__r_.__value_.__l.__data_);
        }
        std::string v207 = v206;
        *((unsigned char *)&v206.__r_.__value_.__s + 23) = 0;
        v206.__r_.__value_.__s.__data_[0] = 0;
        if (v205 < 0) {
          operator delete((void *)v204);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40DF8, memory_order_acquire) & 1) == 0)
      {
        uint64_t IsRelativePath = __cxa_guard_acquire(&qword_268C40DF8);
        if (IsRelativePath)
        {
          qword_268C40E40 = 0;
          qword_268C40E38 = 0;
          qword_268C40E30 = (uint64_t)&qword_268C40E38;
          __cxa_guard_release(&qword_268C40DF8);
        }
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_268C40E00, memory_order_acquire) & 1) == 0)
      {
        uint64_t IsRelativePath = __cxa_guard_acquire(&qword_268C40E00);
        if (IsRelativePath)
        {
          long long v114 = std::string::basic_string[abi:ne180100]<0>(&__str, "");
          realityio::mtlx::UsdMtlxGetDocument((uint64_t)v114, &v206);
          RIO_MTLX::Document::getReferencedSourceUris((RIO_MTLX::Document *)v206.__r_.__value_.__l.__data_, (uint64_t)&unk_268C40E48);
          if (v206.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v206.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          __cxa_guard_release(&qword_268C40E00);
        }
      }
      uint64_t v62 = qword_268C40E50;
      if (!qword_268C40E50) {
        goto LABEL_130;
      }
      uint64_t v63 = &qword_268C40E50;
      do
      {
        uint64_t IsRelativePath = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_268C40E58, (const void **)(v62 + 32), (const void **)&v207.__r_.__value_.__l.__data_);
        uint64_t v64 = (uint64_t *)(v62 + 8);
        if (!IsRelativePath)
        {
          uint64_t v64 = (uint64_t *)v62;
          uint64_t v63 = (uint64_t *)v62;
        }
        uint64_t v62 = *v64;
      }
      while (*v64);
      if (v63 == &qword_268C40E50
        || (uint64_t IsRelativePath = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_268C40E58, (const void **)&v207.__r_.__value_.__l.__data_, (const void **)v63 + 4), IsRelativePath))
      {
LABEL_130:
        uint64_t v65 = qword_268C40E30;
        uint64_t v66 = (std::string *)v200;
        unint64_t v67 = (const void **)(v200 + 48);
        if ((uint64_t *)qword_268C40E30 != &qword_268C40E38)
        {
          char v68 = *(unsigned char *)(v200 + 71);
          if (v68 >= 0) {
            uint64_t v69 = *(unsigned __int8 *)(v200 + 71);
          }
          else {
            uint64_t v69 = *(void *)(v200 + 56);
          }
          if (v68 >= 0) {
            long long v70 = (unsigned __int8 *)(v200 + 48);
          }
          else {
            long long v70 = *(unsigned __int8 **)(v200 + 48);
          }
          do
          {
            uint64_t v71 = *(unsigned __int8 *)(v65 + 55);
            if ((v71 & 0x80u) == 0) {
              uint64_t v72 = *(unsigned __int8 *)(v65 + 55);
            }
            else {
              uint64_t v72 = *(void *)(v65 + 40);
            }
            if (v72 == v69)
            {
              if ((v71 & 0x80) != 0)
              {
                uint64_t IsRelativePath = memcmp(*(const void **)(v65 + 32), v70, *(void *)(v65 + 40));
                if (!IsRelativePath)
                {
LABEL_156:
                  int v76 = 1;
                  goto LABEL_166;
                }
              }
              else
              {
                if (!*(unsigned char *)(v65 + 55)) {
                  goto LABEL_156;
                }
                uint64_t v73 = 0;
                while (*(unsigned __int8 *)(v65 + v73 + 32) == v70[v73])
                {
                  if (v71 == ++v73)
                  {
                    if ((uint64_t *)v65 == &qword_268C40E38) {
                      goto LABEL_157;
                    }
                    goto LABEL_156;
                  }
                }
              }
            }
            long long v74 = *(uint64_t **)(v65 + 8);
            if (v74)
            {
              do
              {
                uint64_t v75 = v74;
                long long v74 = (uint64_t *)*v74;
              }
              while (v74);
            }
            else
            {
              do
              {
                uint64_t v75 = *(uint64_t **)(v65 + 16);
                BOOL v41 = *v75 == v65;
                uint64_t v65 = (uint64_t)v75;
              }
              while (!v41);
            }
            uint64_t v65 = (uint64_t)v75;
          }
          while (v75 != &qword_268C40E38);
        }
LABEL_157:
        uint64_t v77 = RIO_MTLX::EMPTY_STRING((RIO_MTLX *)IsRelativePath);
        RIO_MTLX::NodeDef::getImplementation(v66, (uint64_t)v77, &__str);
        uint64_t v79 = __str.__r_.__value_.__r.__words[0];
        if (__str.__r_.__value_.__r.__words[0])
        {
          uint64_t v80 = RIO_MTLX::EMPTY_STRING(v78);
          if (RIO_MTLX::Element::isA<RIO_MTLX::NodeGraph>(v79, (unsigned __int8 *)v80))
          {
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&qword_268C40E30, v67, (uint64_t)v67);
            if (__str.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
            }
            int v76 = 1;
LABEL_166:
            if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v207.__r_.__value_.__l.__data_);
              if (!v76) {
                goto LABEL_188;
              }
LABEL_168:
              pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&data, (uint64_t)&__str);
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&__str, &v207);
              MEMORY[0x2455CF830](&v206, v200 + 48);
              pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v204, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v207, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v206);
              if ((v206.__r_.__value_.__s.__data_[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v206.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v207);
              if ((v214 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__l.__size_) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
              }
              pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::Get();
              pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph::ConnectableAPI((uint64_t *)&__str, (pxrInternal__aapl__pxrReserved__::UsdShadeNodeGraph *)&v207);
              std::string::size_type v81 = __str.__r_.__value_.__l.__size_;
              if (__str.__r_.__value_.__l.__size_) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 48), 1uLL, memory_order_relaxed);
              }
              uint64_t v82 = v209;
              std::string::size_type v209 = v81;
              if (v82) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v82);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v210, &__str.__r_.__value_.__r.__words[2]);
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v211, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v212, &v214);
              uint64_t v83 = MEMORY[0x2455CF2C0](&__str);
              uint64_t v84 = pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(v83, (uint64_t *)&v207.__r_.__value_.__l.__size_, &v207.__r_.__value_.__r.__words[2]);
              long long v85 = (std::__shared_weak_count *)*((void *)&v176 + 1);
              *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v176;
              if (*((void *)&v176 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v176 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              if (v85) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v85);
              }
              if ((v214 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__l.__size_) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
              }
              MEMORY[0x2455CF040](&v207);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              goto LABEL_229;
            }
            if (v76) {
              goto LABEL_168;
            }
LABEL_188:
            if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
            {
              unint64_t v86 = (void *)(v176 + 48);
              if (*(char *)(v176 + 71) < 0) {
                unint64_t v86 = (void *)*v86;
              }
              pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&data, &__str);
              uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&__str);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Processing shader node (%s) to be added under parent (%s).\n", v88, v86, Text);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str);
            }
            pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&data, &__str);
            long long v89 = v176;
            if (*((void *)&v176 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v176 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            if ((void)v89) {
            else
            }
              v207.__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((uint64_t *)&v204, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__str, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v207);
            if ((v207.__r_.__value_.__s.__data_[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v207.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((void *)&v89 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v89 + 1));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str);
            pxrInternal__aapl__pxrReserved__::UsdShadeShader::Define();
            std::string::size_type v90 = v203;
            if (!v203) {
              goto LABEL_216;
            }
            if ((v203 & 7) != 0)
            {
              if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v203 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)v90 &= 0xFFFFFFFFFFFFFFF8; {
              __str.__r_.__value_.__r.__words[0] = v90;
              }
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                                              + 1;
              if ((v90 & 7) != 0)
              {
                char v91 = 0;
                if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)__str.__r_.__value_.__r.__words[0] &= 0xFFFFFFFFFFFFFFF8; {
LABEL_210:
                }
                pxrInternal__aapl__pxrReserved__::UsdShadeShader::CreateIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v207, (const pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
                if ((v199 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v199 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v198);
                if (v197) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v197);
                }
                pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&__str);
                if ((v91 & 1) == 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
LABEL_216:
                pxrInternal__aapl__pxrReserved__::UsdShadeShader::ConnectableAPI((uint64_t *)&__str, (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v207);
                std::string::size_type v92 = __str.__r_.__value_.__l.__size_;
                if (__str.__r_.__value_.__l.__size_) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 48), 1uLL, memory_order_relaxed);
                }
                uint64_t v93 = v209;
                std::string::size_type v209 = v92;
                if (v93) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v93);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v210, &__str.__r_.__value_.__r.__words[2]);
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v211, (_DWORD *)&__str.__r_.__value_.__r.__words[2] + 1);
                pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v212, &v214);
                uint64_t v94 = MEMORY[0x2455CF2C0](&__str);
                uint64_t v95 = pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(v94, (uint64_t *)&v207.__r_.__value_.__l.__size_, &v207.__r_.__value_.__r.__words[2]);
                long long v96 = (std::__shared_weak_count *)*((void *)&v176 + 1);
                *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v176;
                if (*((void *)&v176 + 1)) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v176 + 1) + 8), 1uLL, memory_order_relaxed);
                }
                if (v96) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v96);
                }
                if ((v214 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
                if (__str.__r_.__value_.__l.__size_) {
                  pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
                }
                MEMORY[0x2455CECB0](&v207);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_229:
                long long v97 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v204);
                uint64_t v98 = v176;
                uint64_t v99 = RIO_MTLX::EMPTY_STRING(v97);
                RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Input>(v98, (uint64_t)v99, (uint64_t *)&__str);
                std::string::size_type v101 = __str.__r_.__value_.__l.__size_;
                for (uint64_t k = (std::string::size_type *)__str.__r_.__value_.__r.__words[0];
                      k != (std::string::size_type *)v101;
                      k += 2)
                {
                  std::string::size_type v102 = *k;
                  long long v103 = (std::__shared_weak_count *)k[1];
                  if (v103)
                  {
                    atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  v207.__r_.__value_.__r.__words[0] = v102;
                  v207.__r_.__value_.__l.__size_ = (std::string::size_type)v103;
                  if ((v195 & 7) != 0) {
                    atomic_fetch_add_explicit((atomic_uint *volatile)(v195 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                  }
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v194);
                  if (v193) {
                    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v193);
                  }
                  if (v207.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v207.__r_.__value_.__l.__size_);
                  }
                  if (v103) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
                  }
                }
                v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                if ((void)v200)
                {
                  std::string::size_type v174 = __str.__r_.__value_.__l.__size_;
                  for (uint64_t m = (uint64_t *)__str.__r_.__value_.__r.__words[0]; m != (uint64_t *)v174; m += 2)
                  {
                    uint64_t v107 = *m;
                    long long v106 = (std::__shared_weak_count *)m[1];
                    if (v106) {
                      atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    uint64_t v108 = RIO_MTLX::EMPTY_STRING(v104);
                    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v107, (uint64_t)v108, (uint64_t *)&v207);
                    std::string::size_type v109 = v207.__r_.__value_.__l.__size_;
                    for (int n = (std::string::size_type *)v207.__r_.__value_.__r.__words[0];
                          n != (std::string::size_type *)v109;
                          n += 2)
                    {
                      std::string::size_type v111 = *n;
                      uint64_t v112 = (std::__shared_weak_count *)n[1];
                      if (v112)
                      {
                        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
                        atomic_fetch_add_explicit(&v112->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v206.__r_.__value_.__r.__words[0] = v111;
                      v206.__r_.__value_.__l.__size_ = (std::string::size_type)v112;
                      long long v204 = v176;
                      if (*((void *)&v176 + 1)) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v176 + 1) + 8), 1uLL, memory_order_relaxed);
                      }
                      if ((v191 & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(v191 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
                      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v190);
                      if (v189) {
                        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v189);
                      }
                      if (*((void *)&v204 + 1)) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v204 + 1));
                      }
                      if (v206.__r_.__value_.__l.__size_) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v206.__r_.__value_.__l.__size_);
                      }
                      if (v112) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v112);
                      }
                    }
                    v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v207;
                    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v206);
                    if (v106) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v106);
                    }
                  }
                  v207.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                  std::vector<std::shared_ptr<realityio::SkeletalAnimationAggregationBuilder::SkeletalAnimationSceneDataT>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v207);
                  uint64_t v35 = v173;
                }
                else
                {
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
                  __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddNode";
                  __str.__r_.__value_.__r.__words[2] = 874;
                  uint64_t v214 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_AddNode(const mx::ConstNodePtr"
                         " &, const UsdPrim &)";
                  char v215 = 0;
                  uint64_t v35 = v173;
                  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
                }
                MEMORY[0x2455CF2C0](&v208);
                if (*((void *)&v200 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v200 + 1));
                }
                uint64_t v113 = v202;
                if (v202
                  && atomic_fetch_add_explicit((atomic_uint *volatile)(v202 + 8), 0xFFFFFFFF, memory_order_release) == 1)
                {
                  (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
                }
                if ((v203 & 7) != 0) {
                  atomic_fetch_add_explicit((atomic_uint *volatile)(v203 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                }
LABEL_275:
                uint64_t v34 = (uint64_t **)*((void *)&v176 + 1);
                if (*((void *)&v176 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v176 + 1));
                }
                goto LABEL_277;
              }
            }
            else
            {
              __str.__r_.__value_.__r.__words[0] = v203;
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::TfToken>(void)::ti
                                              + 1;
            }
            char v91 = 1;
            goto LABEL_210;
          }
        }
        if (__str.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_IsLocalCustomNode";
        __str.__r_.__value_.__r.__words[2] = 805;
        uint64_t v214 = "BOOL realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_IsLocalCustomNode(const mx::ConstNodeDefPtr &)";
        char v215 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      }
      int v76 = 0;
      goto LABEL_166;
    }
LABEL_277:
    v35 += 2;
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v177;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  uint64_t v116 = (uint64_t *)a2[10];
  if (v116 != a2 + 11)
  {
    do
    {
      uint64_t v118 = v116[4];
      std::string::size_type v117 = (std::__shared_weak_count *)v116[5];
      if (v117) {
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(v208 + 23) < 0)
      {
        if (!*(void *)(v208 + 8)) {
          goto LABEL_326;
        }
      }
      else if (!*(unsigned char *)(v208 + 23))
      {
        goto LABEL_326;
      }
      uint64_t v119 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(a2 + 13), (const void **)v208);
      if (a2 + 14 == (uint64_t *)v119)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
        __str.__r_.__value_.__r.__words[2] = 979;
        uint64_t v214 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstPortElementP"
               "tr &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeInput]";
        char v215 = 0;
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v116 + 6), &v196);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v196);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        uint64_t v115 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v196);
        goto LABEL_326;
      }
      uint64_t v120 = v119;
      uint64_t v121 = *(void *)(v119 + 56);
      if ((unint64_t)(*(void *)(v119 + 64) - v121) < 0x21)
      {
        if (v117)
        {
          atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v121 = *(void *)(v119 + 56);
        }
        if (!v117) {
          goto LABEL_328;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
LABEL_327:
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
        goto LABEL_328;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 3;
      __str.__r_.__value_.__l.__size_ = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      unint64_t v122 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      uint64_t v214 = 0;
      if (*((char *)v196 + 23) < 0)
      {
        if (v196[1])
        {
LABEL_305:
          uint64_t v124 = *(void *)(v120 + 56);
          uint64_t v123 = *(void *)(v120 + 64);
          while (v124 != v123)
          {
            pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName(&v192, (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v124);
            MEMORY[0x2455CF830](&v188, v196);
            uint64_t v125 = v192;
            uint64_t v126 = (atomic_uint *)(v188 & 0xFFFFFFFFFFFFFFF8);
            if ((v188 & 7) != 0) {
              atomic_fetch_add_explicit(v126, 0xFFFFFFFE, memory_order_release);
            }
            if ((v192 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v192 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if ((atomic_uint *)(v125 & 0xFFFFFFFFFFFFFFF8) == v126)
            {
              LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v124;
              std::string::size_type v127 = *(void *)(v124 + 8);
              if (v127) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v127 + 48), 1uLL, memory_order_relaxed);
              }
              std::string::size_type v128 = __str.__r_.__value_.__l.__size_;
              __str.__r_.__value_.__l.__size_ = v127;
              if (v128) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v128);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v124 + 16));
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2] + 4, (_DWORD *)(v124 + 20));
              pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v214, (void *)(v124 + 24));
              break;
            }
            v124 += 32;
          }
        }
      }
      else if (*((unsigned char *)v196 + 23))
      {
        goto LABEL_305;
      }
      if (v117) {
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      if ((v214 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
      uint64_t v115 = (realityio::mtlx::_anonymous_namespace_ *)__str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_) {
        uint64_t v115 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
      }
LABEL_326:
      if (v117) {
        goto LABEL_327;
      }
LABEL_328:
      uint64_t v129 = (uint64_t *)v116[1];
      if (v129)
      {
        do
        {
          uint64_t v130 = v129;
          uint64_t v129 = (uint64_t *)*v129;
        }
        while (v129);
      }
      else
      {
        do
        {
          uint64_t v130 = (uint64_t *)v116[2];
          BOOL v41 = *v130 == (void)v116;
          uint64_t v116 = v130;
        }
        while (!v41);
      }
      uint64_t v116 = v130;
    }
    while (v130 != a2 + 11);
  }
  if (v168)
  {
    uint64_t v131 = (RIO_MTLX *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v199 = 0;
    uint64_t v196 = (uint64_t *)(MEMORY[0x263F90790] + 16);
    uint64_t v132 = *v171;
    std::string v133 = RIO_MTLX::EMPTY_STRING(v131);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v132, (uint64_t)v133, &v192);
    uint64_t v134 = v192;
    uint64_t v135 = v193;
    while (v134 != v135)
    {
      std::string v137 = *(RIO_MTLX::Element ***)v134;
      uint64_t v136 = *(std::__shared_weak_count **)(v134 + 8);
      if (v136)
      {
        atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v138 = *(std::__shared_weak_count **)(v134 + 8);
        unint64_t v188 = *(void *)v134;
        std::string v189 = v138;
        if (v138) {
          atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        unint64_t v188 = *(void *)v134;
        std::string v189 = 0;
      }
      if (*(char *)(v207.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        if (!*(void *)(v207.__r_.__value_.__r.__words[0] + 8)) {
          goto LABEL_376;
        }
      }
      else if (!*(unsigned char *)(v207.__r_.__value_.__r.__words[0] + 23))
      {
        goto LABEL_376;
      }
      uint64_t v140 = std::__tree<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<realityio::UntypedInputOutputWrapperObject>>>>::find<std::string>((uint64_t)(a2 + 13), (const void **)v207.__r_.__value_.__l.__data_);
      if (a2 + 14 != (uint64_t *)v140)
      {
        uint64_t v141 = v140;
        uint64_t v142 = *(void *)(v140 + 56);
        if ((unint64_t)(*(void *)(v140 + 64) - v142) < 0x21)
        {
          if (v136)
          {
            atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v142 = *(void *)(v140 + 56);
          }
          if (v136) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v136);
          }
          goto LABEL_376;
        }
        LODWORD(__str.__r_.__value_.__l.__data_) = 3;
        __str.__r_.__value_.__l.__size_ = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
        std::string v143 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
        uint64_t v214 = 0;
        if (*(char *)(v206.__r_.__value_.__r.__words[0] + 23) < 0)
        {
          if (!*(void *)(v206.__r_.__value_.__r.__words[0] + 8))
          {
LABEL_368:
            if (v136) {
              atomic_fetch_add_explicit(&v136->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v136) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v136);
            }
            if ((v214 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v214 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&__str.__r_.__value_.__r.__words[2]);
            if (__str.__r_.__value_.__l.__size_) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(__str.__r_.__value_.__l.__size_);
            }
            goto LABEL_376;
          }
        }
        else if (!*(unsigned char *)(v206.__r_.__value_.__r.__words[0] + 23))
        {
          goto LABEL_368;
        }
        uint64_t v145 = *(void *)(v141 + 56);
        uint64_t v144 = *(void *)(v141 + 64);
        while (v145 != v144)
        {
          pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetBaseName((uint64_t *)&v204, (pxrInternal__aapl__pxrReserved__::UsdShadeOutput *)v145);
          MEMORY[0x2455CF830](&v177, v206.__r_.__value_.__r.__words[0]);
          uint64_t v146 = v204;
          std::string v147 = (atomic_uint *)((unint64_t)v177 & 0xFFFFFFFFFFFFFFF8);
          if ((v177 & 7) != 0) {
            atomic_fetch_add_explicit(v147, 0xFFFFFFFE, memory_order_release);
          }
          if ((v204 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v204 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((atomic_uint *)(v146 & 0xFFFFFFFFFFFFFFF8) == v147)
          {
            LODWORD(__str.__r_.__value_.__l.__data_) = *(_DWORD *)v145;
            std::string::size_type v148 = *(void *)(v145 + 8);
            if (v148) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v148 + 48), 1uLL, memory_order_relaxed);
            }
            std::string::size_type v149 = __str.__r_.__value_.__l.__size_;
            __str.__r_.__value_.__l.__size_ = v148;
            if (v149) {
              pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v149);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2], (_DWORD *)(v145 + 16));
            pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&__str.__r_.__value_.__r.__words[2] + 4, (_DWORD *)(v145 + 20));
            pxrInternal__aapl__pxrReserved__::TfToken::operator=(&v214, (void *)(v145 + 24));
            goto LABEL_368;
          }
          v145 += 32;
        }
        goto LABEL_368;
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
      __str.__r_.__value_.__r.__words[2] = 979;
      uint64_t v214 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstPortElementPtr"
             " &, const D &) [D = pxrInternal__aapl__pxrReserved__::UsdShadeOutput]";
      char v215 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v208, &v206);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v206);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v206);
LABEL_376:
      if ((v212 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v212 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v210);
      if (v209) {
        pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v209);
      }
      if (v189) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v189);
      }
      if (v136) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v136);
      }
      v134 += 16;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    MEMORY[0x2455CF2C0](&v196);
    goto LABEL_416;
  }
  if (a3)
  {
    uint64_t v150 = *v171;
    std::string v151 = RIO_MTLX::EMPTY_STRING(v115);
    RIO_MTLX::Element::getChildrenOfType<RIO_MTLX::Output>(v150, (uint64_t)v151, (uint64_t *)&v208);
    unint64_t v153 = v208;
    uint64_t v154 = v209;
    while (v153 != v154)
    {
      long long v152 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(*(void *)v153 + 160), (unsigned __int8 *)&qword_268C41088);
      if (v152)
      {
        uint64_t v155 = v152 + 40;
      }
      else
      {
        long long v152 = (unsigned __int8 *)RIO_MTLX::EMPTY_STRING(0);
        uint64_t v155 = v152;
      }
      uint64_t v156 = v155[23];
      if ((v156 & 0x80u) == 0) {
        uint64_t v157 = v155[23];
      }
      else {
        uint64_t v157 = *((void *)v155 + 1);
      }
      if (v157)
      {
        if ((v156 & 0x80) == 0) {
          goto LABEL_398;
        }
      }
      else
      {
        long long v152 = (unsigned __int8 *)RIO_MTLX::EMPTY_STRING((RIO_MTLX *)v152);
        uint64_t v155 = v152;
        uint64_t v156 = v152[23];
        if ((v156 & 0x80) == 0)
        {
LABEL_398:
          if (v156) {
            goto LABEL_402;
          }
          goto LABEL_414;
        }
      }
      if (*((void *)v155 + 1))
      {
LABEL_402:
        MEMORY[0x2455CF830](&v192, v155);
        uint64_t v158 = *(void *)v153;
        uint64_t v159 = *(void *)v153 + 48;
        long long v152 = (unsigned __int8 *)std::__tree<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::__map_value_compare<std::string,std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,realityio::WrappedRERef<REAsset *>>>>::__find_equal<std::string>((uint64_t)a3, &v196, (const void **)v159);
        uint64_t v160 = *(uint64_t **)v152;
        if (!*(void *)v152)
        {
          uint64_t v161 = (uint64_t **)v152;
          uint64_t v160 = (uint64_t *)operator new(0x40uLL);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
          __str.__r_.__value_.__l.__size_ = (std::string::size_type)(a3 + 1);
          __str.__r_.__value_.__s.__data_[16] = 0;
          uint64_t v162 = (std::string *)(v160 + 4);
          if (*(char *)(v158 + 71) < 0)
          {
            std::string::__init_copy_ctor_external(v162, *(const std::string::value_type **)(v158 + 48), *(void *)(v158 + 56));
          }
          else
          {
            long long v163 = *(_OWORD *)v159;
            v160[6] = *(void *)(v159 + 16);
            *(_OWORD *)&v162->__r_.__value_.__l.__data_ = v163;
          }
          v160[7] = 0;
          __str.__r_.__value_.__s.__data_[16] = 1;
          std::__tree<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::__map_value_compare<pxrInternal__aapl__pxrReserved__::SdfPath,std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>,std::less<pxrInternal__aapl__pxrReserved__::SdfPath>,true>,std::allocator<std::__value_type<pxrInternal__aapl__pxrReserved__::SdfPath,std::set<pxrInternal__aapl__pxrReserved__::TfToken>>>>::__insert_node_at(a3, (uint64_t)v196, v161, v160);
          __str.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::TfToken>,void *>>>>::reset[abi:ne180100]((uint64_t)&__str);
        }
        long long v164 = v160 + 7;
        if (&v192 == v160 + 7)
        {
          uint64_t v165 = v192;
        }
        else
        {
          if ((*v164 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v165 = 0;
          *long long v164 = v192;
          uint64_t v192 = 0;
        }
        if ((v165 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v165 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
LABEL_414:
      v153 += 16;
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
    std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  }
LABEL_416:
  *(_DWORD *)a1 = data;
  *(void *)(a1 + 8) = v184;
  uint64_t v184 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), &v185);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), &v186);
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v187;
  unint64_t v187 = 0;
LABEL_417:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v185);
  uint64_t result = v184;
  if (v184) {
    return (pxrInternal__aapl__pxrReserved__::UsdPrim *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v184);
  }
  return result;
}

void sub_23F768B98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,std::__shared_weak_count *a63)
{
  char v68 = *(std::__shared_weak_count **)(v66 - 224);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (*(char *)(v66 - 121) < 0) {
    operator delete(*(void **)(v66 - 144));
  }
  __cxa_guard_abort(&qword_268C40E00);
  if (*(char *)(v66 - 185) < 0) {
    operator delete(*(void **)(v66 - 208));
  }
  MEMORY[0x2455CF2C0](v66 - 176);
  if (a63) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a63);
  }
  uint64_t v69 = a65;
  if (a65 && atomic_fetch_add_explicit((atomic_uint *volatile)(a65 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  if ((a66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a38);
  }
  *(void *)(v66 - 176) = &a39;
  std::vector<std::shared_ptr<realityio::DirtyStageDescriptor const>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v66 - 176));
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a46);
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::anonymous namespace'::_SetCoreUIAttributes(uint64_t a1, uint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a1 == 1)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v14, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
    uint64_t v13 = 0;
    uint64_t v11 = MEMORY[0x263F90780] + 16;
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v16);
    if (v15) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v15);
    }
    if (v12)
    {
      if ((*(unsigned char *)(v12 + 57) & 8) == 0)
      {
        std::string::size_type v5 = (realityio::mtlx::_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))(v11 + 32))(&v11);
        if (v5)
        {
          uint64_t v10 = 0;
          if (v6)
          {
            if (v6)
            {
              uint64_t v15 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(void)::ti
                  + 3;
              uint64_t v14 = (RIO_MTLX *)__PAIR64__(v10, HIDWORD(v10));
              pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI::CreatePosAttr((pxrInternal__aapl__pxrReserved__::UsdUINodeGraphNodeAPI *)&v11, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v14);
              if ((v9 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
              pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v8);
              if (v7) {
                pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v7);
              }
              pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)&v14);
            }
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(*a2 + 160), (unsigned __int8 *)&qword_268C41118))
          {
            RIO_MTLX::fromValueString<RIO_MTLX::Vector3>(v14);
            uint64_t v15 = (uint64_t)&pxrInternal__aapl__pxrReserved__::VtValue::GetTypeInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(void)::ti
                + 2;
            operator new();
          }
        }
      }
    }
    return (uint64_t **)MEMORY[0x2455CF250](&v11);
  }
  return result;
}

void sub_23F7694CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::_GetInheritanceStack<RIO_MTLX::NodeDef const>(RIO_MTLX::Element ***a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  BOOL v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = &v41;
  RIO_MTLX::Element::getDocument(*(RIO_MTLX::Element **)a2, &v38);
  BOOL v6 = *(RIO_MTLX::Element **)a2;
  std::string::size_type v5 = *(std::__shared_weak_count **)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    while (1)
    {
      uint64_t v7 = v41;
      uint64_t v8 = &v41;
      uint64_t v9 = &v41;
      if (v41)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v9 = (uint64_t **)v7;
            unint64_t v10 = v7[4];
            if (v10 <= (unint64_t)v6) {
              break;
            }
            uint64_t v7 = *v9;
            uint64_t v8 = v9;
            if (!*v9) {
              goto LABEL_11;
            }
          }
          if (v10 >= (unint64_t)v6) {
            break;
          }
          uint64_t v7 = v9[1];
          if (!v7)
          {
            uint64_t v8 = v9 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        uint64_t v11 = (uint64_t *)operator new(0x30uLL);
        uint64_t v12 = v11;
        void v11[4] = (uint64_t)v6;
        void v11[5] = (uint64_t)v5;
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *uint64_t v11 = 0;
        v11[1] = 0;
        _OWORD v11[2] = (uint64_t)v9;
        *uint64_t v8 = v11;
        if (*v40)
        {
          uint64_t v40 = (uint64_t **)*v40;
          uint64_t v12 = *v8;
        }
        uint64_t shared_weak_owners = (std::__shared_weak_count *)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v41, v12);
        ++v42;
      }
      uint64_t v14 = a1[1];
      unint64_t v13 = (unint64_t)a1[2];
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v16 = *a1;
        uint64_t v17 = ((char *)v14 - (char *)*a1) >> 4;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60) {
          std::vector<pxrInternal__aapl__pxrReserved__::UsdShadeOutput>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v19 = v13 - (void)v16;
        if (v19 >> 3 > v18) {
          unint64_t v18 = v19 >> 3;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t shared_weak_owners = (std::__shared_weak_count *)operator new(16 * v20);
        uint64_t v21 = (RIO_MTLX::Element **)(&shared_weak_owners->std::__shared_count + v17);
        std::__shared_weak_count *v21 = v6;
        v21[1] = (RIO_MTLX::Element *)v5;
        if (v5)
        {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v16 = *a1;
          uint64_t v14 = a1[1];
        }
        BOOL v22 = (std::__shared_weak_count *)((char *)shared_weak_owners + 16 * v20);
        uint64_t v15 = v21 + 2;
        if (v14 == v16)
        {
          *a1 = v21;
          a1[1] = v15;
          a1[2] = (RIO_MTLX::Element **)v22;
          if (v16) {
            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v23 = v14;
          do
          {
            long long v24 = *((_OWORD *)v23 - 1);
            v23 -= 2;
            *((_OWORD *)v21 - 1) = v24;
            v21 -= 2;
            *uint64_t v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v16);
          *a1 = v21;
          a1[1] = v15;
          a1[2] = (RIO_MTLX::Element **)v22;
          do
          {
            uint64_t shared_weak_owners = (std::__shared_weak_count *)*(v14 - 1);
            if (shared_weak_owners) {
              std::__shared_weak_count::__release_shared[abi:ne180100](shared_weak_owners);
            }
            v14 -= 2;
          }
          while (v14 != v16);
          if (v16) {
LABEL_37:
          }
            operator delete(v16);
        }
      }
      else
      {
        *uint64_t v14 = v6;
        v14[1] = (RIO_MTLX::Element *)v5;
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = v14 + 2;
      }
      a1[1] = v15;
      uint64_t v25 = v38;
      char v26 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)v6 + 20, (unsigned __int8 *)&qword_268C40FC8);
      if (v26)
      {
        char v27 = (uint64_t *)((char *)v26 + 40);
      }
      else
      {
        char v26 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
        char v27 = (uint64_t *)v26;
      }
      uint64_t v28 = *((unsigned __int8 *)v27 + 23);
      if ((v28 & 0x80u) != 0) {
        uint64_t v28 = v27[1];
      }
      if (!v28) {
        char v27 = RIO_MTLX::EMPTY_STRING(v26);
      }
      uint64_t shared_weak_owners = (std::__shared_weak_count *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(v25 + 96), (unsigned __int8 *)v27);
      std::string v29 = shared_weak_owners;
      if (shared_weak_owners)
      {
        uint64_t shared_weak_owners = (std::__shared_weak_count *)shared_weak_owners[1].__shared_weak_owners_;
        uint64_t v30 = (std::__shared_weak_count *)v29[2].__vftable;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (shared_weak_owners)
        {
          BOOL v6 = (RIO_MTLX::Element *)shared_weak_owners;
          std::string::size_type v31 = 0;
          if (shared_weak_owners) {
            uint64_t v32 = 0;
          }
          else {
            uint64_t v32 = v30;
          }
          if (v30 && shared_weak_owners)
          {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            std::string::size_type v31 = v30;
            if (!v5) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v30 = v32;
            if (!v5) {
              goto LABEL_59;
            }
          }
LABEL_58:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v30 = 0;
      }
      std::string::size_type v31 = 0;
      BOOL v6 = 0;
      if (v5) {
        goto LABEL_58;
      }
LABEL_59:
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      std::string::size_type v5 = v31;
      if (!v6) {
        goto LABEL_68;
      }
    }
  }
  std::string::size_type v31 = v5;
LABEL_68:
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v33 = *a1;
  uint64_t v34 = a1[1];
  if (*a1 != v34)
  {
    for (uint64_t i = v34 - 2; v33 < i; i -= 2)
    {
      uint64_t v36 = *v33;
      *uint64_t v33 = *i;
      *uint64_t i = v36;
      int v37 = v33[1];
      v33[1] = i[1];
      i[1] = v37;
      v33 += 2;
    }
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  std::__tree<std::shared_ptr<RIO_MTLX::Collection>>::destroy(v41);
}

void sub_23F7698D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13)
{
}

void realityio::mtlx::anonymous namespace'::_NodeGraphBuilder::_AddInput(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, int a5)
{
  uint64_t v11 = *a3;
  unint64_t v10 = (std::__shared_weak_count *)a3[1];
  long long v87 = *a3;
  std::string::size_type v88 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
  {
    uint64_t v12 = v11 + 6;
    if (*((char *)v11 + 71) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdObject *)pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v107, (uint64_t *)(a4 + 8), (_DWORD *)(a4 + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(v13, &v95);
    uint64_t Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v95);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Adding input (%s) to connectable prim: (%s)\n", v15, v12, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
    if ((v108 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107.__r_.__value_.__r.__words[2]);
    if (v107.__r_.__value_.__l.__size_) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107.__r_.__value_.__l.__size_);
    }
    uint64_t v11 = v87;
    unint64_t v10 = v88;
  }
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  v107.__r_.__value_.__l.__size_ = (std::string::size_type)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v102 = (uint64_t)v11;
  long long v103 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(char *)(v107.__r_.__value_.__r.__words[0] + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v107.__r_.__value_.__r.__words[0] + 23)) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (*(void *)(v107.__r_.__value_.__r.__words[0] + 8)) {
LABEL_21:
  }
    uint64_t v17 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetDocumentation();
LABEL_22:
  memset(&v104, 0, sizeof(v104));
  unint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(v11 + 20, (unsigned __int8 *)&qword_268C40F20);
  if (v18)
  {
    RIO_MTLX::fromValueString<std::vector<std::string>>(v106, (uint64_t *)&v107);
    std::vector<std::string>::__vdeallocate(&v104);
    std::vector<std::string> v104 = (std::vector<std::string>)v107;
    memset(&v107, 0, sizeof(v107));
    *(void *)&long long v95 = &v107;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    if (v104.__begin_ != v104.__end_)
    {
      pxrInternal__aapl__pxrReserved__::UsdProperty::GetPropertyStack();
      uint64_t v19 = *(atomic_uint **)v107.__r_.__value_.__l.__data_;
      *(void *)&long long v95 = v19;
      if (v19)
      {
        atomic_fetch_add(v19, 1u);
        long long v106 = (RIO_MTLX *)v95;
        if ((void)v95) {
          atomic_fetch_add((atomic_uint *volatile)v95, 1u);
        }
      }
      else
      {
        long long v106 = 0;
      }
      MEMORY[0x2455CF7B0](&v95);
      *(void *)&long long v95 = &v107;
      std::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      long long v97 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::reserve((uint64_t *)&v95, 0xAAAAAAAAAAAAAAABLL * (((char *)v104.__end_ - (char *)v104.__begin_) >> 3));
      std::vector<std::string>::pointer begin = v104.__begin_;
      std::vector<std::string>::pointer end = v104.__end_;
      if (v104.__begin_ != v104.__end_)
      {
        while (1)
        {
          MEMORY[0x2455CF830](&v101, begin);
          if (DWORD2(v95))
          {
            v107.__r_.__value_.__r.__words[0] = (std::string::size_type)"vt/array.h";
            v107.__r_.__value_.__l.__size_ = (std::string::size_type)"emplace_back";
            v107.__r_.__value_.__r.__words[2] = 433;
            uint64_t v108 = "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::emplace_ba"
                   "ck(Args &&...) [T = pxrInternal__aapl__pxrReserved__::TfToken, Args = <pxrInternal__aapl__pxrReserved__::TfToken>]";
            char v109 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
            goto LABEL_38;
          }
          uint64_t v22 = v95;
          uint64_t v23 = v97;
          if (*((void *)&v96 + 1)) {
            break;
          }
          if (v97)
          {
            unint64_t v24 = atomic_load((unint64_t *)v97 - 2);
            uint64_t v23 = v97;
            if (v24 != 1) {
              break;
            }
            uint64_t v25 = *(v97 - 1);
          }
          else
          {
            uint64_t v25 = 0;
          }
          if ((void)v95 == v25) {
            break;
          }
          v23[(void)v95] = v101;
          uint64_t v101 = 0;
LABEL_37:
          *(void *)&long long v95 = v95 + 1;
LABEL_38:
          if ((v101 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v101 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (++begin == end) {
            goto LABEL_46;
          }
        }
        uint64_t v26 = 1;
        do
        {
          unint64_t v27 = v26;
          v26 *= 2;
        }
        while (v27 < (uint64_t)v95 + 1);
        Copy = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateCopy((uint64_t)&v95, v23, v27, v95);
        Copy[v22] = v101;
        uint64_t v101 = 0;
        std::string v29 = Copy;
        pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v95);
        long long v97 = v29;
        goto LABEL_37;
      }
LABEL_46:
      pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::operator->((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v106);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetAllowedTokens();
      pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DecRef(&v95);
      unint64_t v18 = (unsigned __int8 *)MEMORY[0x2455CF7B0](&v106);
    }
  }
  uint64_t v30 = v102;
  if (*(char *)(v95 + 23) < 0)
  {
    std::string::size_type v33 = *(void *)(v95 + 8);
    if (!v33) {
      goto LABEL_60;
    }
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v95, v33);
  }
  else
  {
    if (!*(unsigned char *)(v95 + 23)) {
      goto LABEL_60;
    }
    long long v32 = *(_OWORD *)v95;
    v107.__r_.__value_.__r.__words[2] = *(void *)(v95 + 16);
    *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v32;
  }
  std::string::size_type size = HIBYTE(v107.__r_.__value_.__r.__words[2]);
  uint64_t v35 = &v107;
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = v107.__r_.__value_.__l.__size_;
    uint64_t v35 = (std::string *)v107.__r_.__value_.__r.__words[0];
  }
  for (; size; --size)
  {
    if (v35->__r_.__value_.__s.__data_[0] == 47) {
      v35->__r_.__value_.__s.__data_[0] = 58;
    }
    uint64_t v35 = (std::string *)((char *)v35 + 1);
  }
  std::string::size_type v31 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdProperty::SetDisplayGroup();
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
LABEL_60:
  if (*(char *)(v107.__r_.__value_.__r.__words[0] + 23) < 0)
  {
    if (!*(void *)(v107.__r_.__value_.__r.__words[0] + 8)) {
      goto LABEL_65;
    }
    goto LABEL_64;
  }
  if (*(unsigned char *)(v107.__r_.__value_.__r.__words[0] + 23)) {
LABEL_64:
  }
    pxrInternal__aapl__pxrReserved__::UsdObject::SetDisplayName();
LABEL_65:
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  uint64_t v36 = (realityio::mtlx::_anonymous_namespace_ *)v103;
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  if (!a5)
  {
    uint64_t v43 = v94;
    if (*((char *)v94 + 23) < 0)
    {
      if (!v94[1]) {
        goto LABEL_100;
      }
    }
    else if (!*((unsigned char *)v94 + 23))
    {
      goto LABEL_100;
    }
    uint64_t v44 = *(void *)(a2 + 64);
    if (!v44) {
      goto LABEL_87;
    }
    uint64_t v45 = a2 + 64;
    do
    {
      BOOL v46 = std::less<std::string>::operator()[abi:ne180100](a2 + 72, (const void **)(v44 + 32), v43);
      uint64_t v47 = (uint64_t *)(v44 + 8);
      if (!v46)
      {
        uint64_t v47 = (uint64_t *)v44;
        uint64_t v45 = v44;
      }
      uint64_t v44 = *v47;
    }
    while (*v47);
    if (v45 == a2 + 64 || std::less<std::string>::operator()[abi:ne180100](a2 + 72, v43, (const void **)(v45 + 32)))
    {
LABEL_87:
      v107.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
      v107.__r_.__value_.__l.__size_ = (std::string::size_type)"_AddInputCommon";
      v107.__r_.__value_.__r.__words[2] = 908;
      uint64_t v108 = "UsdShadeInput realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_AddInputCommon(const mx::ConstVal"
             "ueElementPtr &, const UsdShadeConnectableAPI &, BOOL)";
      char v109 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      goto LABEL_100;
    }
    uint64_t v70 = (uint64_t)v87;
    uint64_t v71 = v88;
    if (v88) {
      atomic_fetch_add_explicit(&v88->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    RIO_MTLX::Element::asA<RIO_MTLX::Input>(v70, &v95);
    if (!(void)v95)
    {
LABEL_145:
      if (*((void *)&v95 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
      }
      if (pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v45 + 56), &v107);
        uint64_t v74 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v107);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, &v95);
        uint64_t v75 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v95);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" - Getting referencedPrim for (%s) under (%s).\n", v76, v74, v75);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v95);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
      }
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v45 + 56), &v106);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v95, &v90, &v91);
      pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject((uint64_t)&v104, (uint64_t *)(v45 + 64), (_DWORD *)(v45 + 72));
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v95, (uint64_t)&v107);
      if (LODWORD(v107.__r_.__value_.__l.__data_) == LODWORD(v104.__begin_)
        && *(_OWORD *)&v107.__r_.__value_.__r.__words[1] == *(_OWORD *)&v104.__end_
        && (unint64_t v77 = (unint64_t)v108,
            ((unint64_t)v108 & 0xFFFFFFFFFFFFFFF8) == (v105 & 0xFFFFFFFFFFFFFFF8)))
      {
        int v78 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
        uint64_t v102 = MEMORY[0x263F90760] + 16;
        if (!v103 || (v103[2].__shared_owners_ & 0x800) != 0) {
          int v78 = 0;
        }
        else {
          int v78 = (*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90760] + 48))(&v102);
        }
        MEMORY[0x2455CF040](&v102);
        unint64_t v77 = (unint64_t)v108;
      }
      if ((v77 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107.__r_.__value_.__r.__words[2]);
      uint64_t v79 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)v107.__r_.__value_.__l.__size_;
      if (v107.__r_.__value_.__l.__size_) {
        uint64_t v79 = (pxrInternal__aapl__pxrReserved__::UsdShadeShader *)pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107.__r_.__value_.__l.__size_);
      }
      if (v78)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::_GetStaticTfType(v79);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo();
        if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA())
        {
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetParent((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v95, (uint64_t)&v107);
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, &v102);
          if ((v108 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107.__r_.__value_.__r.__words[2]);
          if (v107.__r_.__value_.__l.__size_) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107.__r_.__value_.__l.__size_);
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v95, &v102);
        }
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v104, &v107);
        NameTokeint n = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v107);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(&v101, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v102, NameToken);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        std::string::size_type v81 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v107, &v99);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v45 + 56), &v98);
        uint64_t v82 = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(&v100, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v99, v82);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v106, (int *)&v100);
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)&v106 + 4);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v100);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v98);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v99);
        if ((v108 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v107.__r_.__value_.__r.__words[2]);
        if (v107.__r_.__value_.__l.__size_) {
          pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v107.__r_.__value_.__l.__size_);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v101);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
      }
      if (MEMORY[0x2455D0DD0](&v89, &v106))
      {
        if (!pxrInternal__aapl__pxrReserved__::TfDebug::IsEnabled<pxrInternal__aapl__pxrReserved__::RIO_USDMTLX_READER__DebugCodes>())
        {
LABEL_178:
          if ((v105 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v105 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v104.__end_cap_);
          if (v104.__end_) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v104.__end_);
          }
          if ((BYTE8(v96) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v96 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v96);
          if (*((void *)&v95 + 1)) {
            pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(*((uint64_t *)&v95 + 1));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
          if (v71) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
          }
          goto LABEL_100;
        }
        uint64_t v83 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, &v107);
        uint64_t v84 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v107);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    + Connected <%s> -> <%s>\n", v85, v83, v84);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        unint64_t v86 = &v107;
      }
      else
      {
        v107.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
        v107.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
        v107.__r_.__value_.__r.__words[2] = 1054;
        uint64_t v108 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstElementPtr &"
               ", const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrR"
               "eserved__::UsdShadeInput]";
        char v109 = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
        pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, &v102);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v102);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        unint64_t v86 = (std::string *)&v102;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)v86);
      goto LABEL_178;
    }
    if (SHIBYTE(v104.__begin_->__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v104.__begin_->__r_.__value_.__l.__size_) {
        goto LABEL_140;
      }
    }
    else if (!*((unsigned char *)&v104.__begin_->__r_.__value_.__s + 23))
    {
LABEL_140:
      if (SHIBYTE(v104.__begin_->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v104.__begin_->__r_.__value_.__l.__size_) {
          goto LABEL_145;
        }
      }
      else if (!*((unsigned char *)&v104.__begin_->__r_.__value_.__s + 23))
      {
        goto LABEL_145;
      }
      v107.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
      v107.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
      v107.__r_.__value_.__r.__words[2] = 1021;
      uint64_t v108 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstElementPtr &, "
             "const U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReser"
             "ved__::UsdShadeInput]";
      char v109 = 0;
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v45 + 56), &v102);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v102);
      pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, &v106);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
      goto LABEL_145;
    }
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)"CoreRealityIO/mtlxToUsdShade.cpp";
    v107.__r_.__value_.__l.__size_ = (std::string::size_type)"_ConnectPorts";
    v107.__r_.__value_.__r.__words[2] = 1013;
    uint64_t v108 = "void realityio::mtlx::(anonymous namespace)::_NodeGraphBuilder::_ConnectPorts(const mx::ConstElementPtr &, co"
           "nst U &, const D &) [U = pxrInternal__aapl__pxrReserved__::UsdShadeInput, D = pxrInternal__aapl__pxrReserved_"
           "_::UsdShadeInput]";
    char v109 = 0;
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)(v45 + 56), &v102);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v102);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath((pxrInternal__aapl__pxrReserved__::UsdObject *)&v89, &v106);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v106);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v106);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    uint64_t v73 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v102);
    goto LABEL_140;
  }
  int v37 = v87;
  uint64_t v38 = (const void **)(v87 + 48);
  std::string::size_type v39 = *(void *)(a2 + 64);
  uint64_t v40 = (std::string::size_type *)(a2 + 64);
  BOOL v41 = (std::string::size_type *)(a2 + 64);
  if (!v39) {
    goto LABEL_89;
  }
  uint64_t v40 = (std::string::size_type *)(a2 + 64);
  while (1)
  {
    while (1)
    {
      BOOL v41 = (std::string::size_type *)v39;
      uint64_t v42 = (const void **)(v39 + 32);
      if (!std::less<std::string>::operator()[abi:ne180100](a2 + 72, v38, (const void **)(v39 + 32))) {
        break;
      }
      std::string::size_type v39 = *v41;
      uint64_t v40 = v41;
      if (!*v41) {
        goto LABEL_89;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100](a2 + 72, v42, v38)) {
      break;
    }
    uint64_t v40 = v41 + 1;
    std::string::size_type v39 = v41[1];
    if (!v39) {
      goto LABEL_89;
    }
  }
  std::string::size_type v48 = *v40;
  if (!*v40)
  {
LABEL_89:
    unint64_t v49 = (char *)operator new(0x58uLL);
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    v107.__r_.__value_.__l.__size_ = a2 + 64;
    v107.__r_.__value_.__s.__data_[16] = 0;
    std::string::size_type v50 = (std::string *)(v49 + 32);
    if (v37[71] < 0)
    {
      std::string::__init_copy_ctor_external(v50, *((const std::string::value_type **)v37 + 6), *((void *)v37 + 7));
    }
    else
    {
      long long v51 = *(_OWORD *)v38;
      *((void *)v49 + 6) = v38[2];
      *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
    }
    *((_DWORD *)v49 + 14) = 3;
    *((void *)v49 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *((void *)v49 + 10) = 0;
    v107.__r_.__value_.__s.__data_[16] = 1;
    *(void *)unint64_t v49 = 0;
    *((void *)v49 + 1) = 0;
    *((void *)v49 + 2) = v41;
    std::string::size_type *v40 = (std::string::size_type)v49;
    uint64_t v52 = **(void **)(a2 + 56);
    if (v52)
    {
      *(void *)(a2 + 56) = v52;
      unint64_t v49 = (char *)*v40;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 64), (uint64_t *)v49);
    ++*(void *)(a2 + 72);
    std::string::size_type v48 = v107.__r_.__value_.__r.__words[0];
    v107.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>>>>::reset[abi:ne180100]((uint64_t)&v107);
  }
  *(_DWORD *)(v48 + 56) = v89;
  uint64_t v53 = v90;
  if (v90) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v90 + 48), 1uLL, memory_order_relaxed);
  }
  uint64_t v54 = *(void *)(v48 + 64);
  *(void *)(v48 + 64) = v53;
  if (v54) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v54);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v48 + 72, &v91);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=(v48 + 76, &v92);
  pxrInternal__aapl__pxrReserved__::TfToken::operator=((void *)(v48 + 80), &v93);
LABEL_100:
  uint64_t v55 = *a3;
  uint64_t v57 = (uint64_t **)(a2 + 88);
  uint64_t v56 = *(uint64_t **)(a2 + 88);
  if (v56)
  {
    while (1)
    {
      while (1)
      {
        long long v58 = (uint64_t **)v56;
        unint64_t v59 = v56[4];
        if (v59 <= (unint64_t)v55) {
          break;
        }
        uint64_t v56 = *v58;
        uint64_t v57 = v58;
        if (!*v58) {
          goto LABEL_108;
        }
      }
      if (v59 >= (unint64_t)v55) {
        break;
      }
      uint64_t v56 = v58[1];
      if (!v56)
      {
        uint64_t v57 = v58 + 1;
        goto LABEL_108;
      }
    }
    int64_t v61 = (uint64_t *)v58;
  }
  else
  {
    long long v58 = (uint64_t **)(a2 + 88);
LABEL_108:
    int v60 = (uint64_t *)operator new(0x50uLL);
    int64_t v61 = v60;
    uint64_t v62 = a3[1];
    v60[4] = (uint64_t)v55;
    v60[5] = (uint64_t)v62;
    if (v62) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v60 + 12) = 3;
    v60[7] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    v61[9] = 0;
    *int64_t v61 = 0;
    v61[1] = 0;
    v61[2] = (uint64_t)v58;
    std::string *v57 = v61;
    uint64_t v63 = **(void **)(a2 + 80);
    uint64_t v64 = v61;
    if (v63)
    {
      *(void *)(a2 + 80) = v63;
      uint64_t v64 = *v57;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a2 + 88), v64);
    ++*(void *)(a2 + 96);
  }
  *((_DWORD *)v61 + 12) = v89;
  uint64_t v65 = v90;
  uint64_t v90 = 0;
  uint64_t v66 = v61[7];
  v61[7] = v65;
  if (v66) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v66);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)(v61 + 8), &v91);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::operator=((uint64_t)v61 + 68);
  if (&v89 != (int *)(v61 + 6))
  {
    uint64_t v67 = v61[9];
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v61[9] = v93;
    uint64_t v93 = 0;
  }
  *(_DWORD *)a1 = *((_DWORD *)v61 + 12);
  uint64_t v68 = v61[7];
  *(void *)(a1 + 8) = v68;
  if (v68) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 48), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 16), (_DWORD *)v61 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)(a1 + 20), (_DWORD *)v61 + 17);
  uint64_t v69 = v61[9];
  *(void *)(a1 + pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)this + 24) = v69;
  if ((v69 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((v93 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v91);
  if (v90) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v90);
  }
  if (v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v88);
  }
}

void sub_23F76A93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a31);
  pxrInternal__aapl__pxrReserved__::UsdPrim::~UsdPrim((pxrInternal__aapl__pxrReserved__::UsdPrim *)&a19);
  pxrInternal__aapl__pxrReserved__::SdfPath::~SdfPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v32 - 152));
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeInput::~UsdShadeInput((pxrInternal__aapl__pxrReserved__::UsdShadeInput *)&a14);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t **realityio::mtlx::anonymous namespace'::_SetGlobalCoreUIAttributes(realityio::mtlx::_anonymous_namespace_ *a1, uint64_t *a2)
{
  if (*((char *)v4 + 23) < 0)
  {
    if (!v4[1]) {
      return result;
    }
  }
  else if (!*((unsigned char *)v4 + 23))
  {
    return result;
  }
  return (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdObject::SetDocumentation();
}

BOOL realityio::mtlx::anonymous namespace'::_Value<float>(_DWORD *a1, uint64_t *a2, unsigned __int8 *a3)
{
  BOOL v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((void *)(*a2 + 160), a3);
  if (v6)
  {
    int v9 = 0;
    *a1 = v9;
  }
  return v6 != 0;
}

void realityio::mtlx::anonymous namespace'::_MakeInput<pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI const>(realityio::mtlx::_anonymous_namespace_ *a1, pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *a2, std::string **a3)
{
  BOOL v6 = (RIO_MTLX *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>(&(*a3)[6].__r_.__value_.__r.__words[2], (unsigned __int8 *)&qword_268C41100);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)((char *)v6 + 40);
  }
  else
  {
    BOOL v6 = (RIO_MTLX *)RIO_MTLX::EMPTY_STRING(0);
    uint64_t v7 = (uint64_t *)v6;
  }
  uint64_t v8 = *((unsigned __int8 *)v7 + 23);
  char v9 = v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = v7[1];
  }
  if (v8)
  {
    if ((v9 & 0x80) == 0) {
      goto LABEL_8;
    }
LABEL_22:
    if (v7[1]) {
      goto LABEL_9;
    }
LABEL_23:
    *(_DWORD *)a1 = 3;
    *((void *)a1 + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *((void *)a1 + 3) = 0;
    return;
  }
  uint64_t v7 = RIO_MTLX::EMPTY_STRING(v6);
  char v9 = *((unsigned char *)v7 + 23);
  if (v9 < 0) {
    goto LABEL_22;
  }
LABEL_8:
  if (!v9) {
    goto LABEL_23;
  }
LABEL_9:
  uint64_t v16 = 0;
  realityio::mtlx::UsdMtlxGetUsdType((unsigned __int8 *)v7, (uint64_t)&v13);
  uint64_t v15 = v13;
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v15))
  {
    Data = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x263F90560]);
    if (!Data) {
      Data = pxrInternal__aapl__pxrReserved__::TfStaticData<pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType const,pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init>::_TryToCreateData(MEMORY[0x263F90560]);
    }
    uint64_t v15 = *((void *)Data + 11);
    MEMORY[0x2455CF830](&v13, v7);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v16 = v13;
  }
  uint64_t v11 = *a3;
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11) {
  else
  }
    uint64_t v13 = 0;
  pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::CreateInput(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v15);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v16)
  {
    pxrInternal__aapl__pxrReserved__::UsdShadeInput::SetRenderType(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_23F76AEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void realityio::mtlx::anonymous namespace'::_CopyValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, void **a2)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  std::string::size_type v4 = (std::__shared_weak_count *)a2[1];
  std::string __p = *a2;
  unint64_t v59 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  realityio::mtlx::UsdMtlxGetUsdValue((uint64_t)&__p, 0, (uint64_t)v69);
  std::string::size_type v5 = (realityio::mtlx::_anonymous_namespace_ *)v59;
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v70) {
    std::string::size_type v5 = (realityio::mtlx::_anonymous_namespace_ *)pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
  }
  if (*((char *)v68 + 23) < 0)
  {
    if (!v68[1]) {
      goto LABEL_53;
    }
  }
  else if (!*((unsigned char *)v68 + 23))
  {
    goto LABEL_53;
  }
  if (*((char *)v67 + 23) < 0)
  {
    if (!v67[1]) {
      goto LABEL_53;
    }
LABEL_15:
    realityio::mtlx::UsdMtlxGetPackedUsdValues((unsigned __int8 *)__p, &v65);
    if (v65 == v66)
    {
      std::string __p = "CoreRealityIO/mtlxToUsdShade.cpp";
      unint64_t v59 = (std::__shared_weak_count *)"_CopyValue";
      uint64_t v60 = 474;
      int64_t v61 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
      char v62 = 0;
      uint64_t v14 = v68;
      if (*((char *)v68 + 23) < 0) {
        uint64_t v14 = (uint64_t *)*v68;
      }
      uint64_t v15 = (RIO_MTLX::Element *)*a2;
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      RIO_MTLX::Element::getNamePath(v15, (uint64_t)&v46, (uint64_t)v56);
      if (v57 >= 0) {
        uint64_t v17 = v56;
      }
      else {
        uint64_t v17 = (void **)v56[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v63, (pxrInternal__aapl__pxrReserved__ *)"Failed to parse valuecurve '%s' on '%s';  ignoring",
        v16,
        v14,
        v17);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      if (v64 < 0) {
        operator delete(v63[0]);
      }
      if (v57 < 0) {
        operator delete(v56[0]);
      }
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "integer");
    realityio::mtlx::UsdMtlxGetPackedUsdValues((unsigned __int8 *)&__p, (uint64_t *)v63);
    if (SHIBYTE(v60) < 0) {
      operator delete(__p);
    }
    if ((void *)((char *)v63[1] - (char *)v63[0]) == (void *)32)
    {
      uint64_t v8 = *(unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)v63[0]);
      uint64_t v9 = *(unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::Get<int>((pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v63[0] + 16));
      if ((int)v9 >= (int)v8)
      {
        uint64_t v40 = v65;
        uint64_t v41 = v66;
        uint64_t v42 = (v66 - v65) >> 4;
        if (v42 == v9 - v8 + 1)
        {
          while (v40 != v41)
          {
            pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
            LODWORD(v8) = v8 + 1;
            v40 += 16;
          }
          goto LABEL_51;
        }
        std::string __p = "CoreRealityIO/mtlxToUsdShade.cpp";
        unint64_t v59 = (std::__shared_weak_count *)"_CopyValue";
        uint64_t v60 = 461;
        int64_t v61 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
        char v62 = 0;
        uint64_t v43 = (RIO_MTLX::Element *)*a2;
        uint64_t v50 = 0;
        long long v51 = 0;
        RIO_MTLX::Element::getNamePath(v43, (uint64_t)&v50, (uint64_t)v54);
        if (v55 >= 0) {
          uint64_t v45 = v54;
        }
        else {
          uint64_t v45 = (void **)v54[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v56, (pxrInternal__aapl__pxrReserved__ *)"valuerange [%d,%d] doesn't match valuecurve size %zd on '%s';  ignoring",
          v44,
          v8,
          v9,
          v42,
          v45);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        uint64_t v13 = v51;
        if (!v51) {
          goto LABEL_51;
        }
      }
      else
      {
        std::string __p = "CoreRealityIO/mtlxToUsdShade.cpp";
        unint64_t v59 = (std::__shared_weak_count *)"_CopyValue";
        uint64_t v60 = 454;
        int64_t v61 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
        char v62 = 0;
        unint64_t v10 = (RIO_MTLX::Element *)*a2;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        RIO_MTLX::Element::getNamePath(v10, (uint64_t)&v52, (uint64_t)v54);
        if (v55 >= 0) {
          uint64_t v12 = v54;
        }
        else {
          uint64_t v12 = (void **)v54[0];
        }
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v56, (pxrInternal__aapl__pxrReserved__ *)"Invalid valuerange [%d,%d] on '%s';  ignoring",
          v11,
          v8,
          v9,
          v12);
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
        if (v57 < 0) {
          operator delete(v56[0]);
        }
        if (v55 < 0) {
          operator delete(v54[0]);
        }
        uint64_t v13 = v53;
        if (!v53) {
          goto LABEL_51;
        }
      }
    }
    else
    {
      std::string __p = "CoreRealityIO/mtlxToUsdShade.cpp";
      unint64_t v59 = (std::__shared_weak_count *)"_CopyValue";
      uint64_t v60 = 470;
      int64_t v61 = "void realityio::mtlx::(anonymous namespace)::_CopyValue(const UsdShadeInput &, const mx::ConstValueElementPtr &)";
      char v62 = 0;
      unint64_t v18 = v67;
      if (*((char *)v67 + 23) < 0) {
        unint64_t v18 = (uint64_t *)*v67;
      }
      uint64_t v19 = (RIO_MTLX::Element *)*a2;
      uint64_t v48 = 0;
      unint64_t v49 = 0;
      RIO_MTLX::Element::getNamePath(v19, (uint64_t)&v48, (uint64_t)v54);
      if (v55 >= 0) {
        uint64_t v21 = v54;
      }
      else {
        uint64_t v21 = (void **)v54[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((uint64_t *)v56, (pxrInternal__aapl__pxrReserved__ *)"Malformed valuerange '%s' on '%s';  ignoring",
        v20,
        v18,
        v21);
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
      if (v57 < 0) {
        operator delete(v56[0]);
      }
      if (v55 < 0) {
        operator delete(v54[0]);
      }
      uint64_t v13 = v49;
      if (!v49) {
        goto LABEL_51;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_51:
    std::string __p = v63;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_52:
    std::string __p = &v65;
    std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    goto LABEL_53;
  }
  if (*((unsigned char *)v67 + 23)) {
    goto LABEL_15;
  }
LABEL_53:
  ActiveColorSpace = RIO_MTLX::Element::getActiveColorSpace((RIO_MTLX::Element *)*a2);
  uint64_t v23 = ActiveColorSpace;
  uint64_t v24 = *((unsigned __int8 *)ActiveColorSpace + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = ActiveColorSpace[1];
  }
  if (v24)
  {
    RIO_MTLX::Element::getDocument((RIO_MTLX::Element *)*a2, &__p);
    uint64_t v25 = RIO_MTLX::Element::getActiveColorSpace((RIO_MTLX::Element *)__p);
    uint64_t v27 = *((unsigned __int8 *)v23 + 23);
    if ((v27 & 0x80u) == 0) {
      uint64_t v28 = *((unsigned __int8 *)v23 + 23);
    }
    else {
      uint64_t v28 = v23[1];
    }
    uint64_t v29 = *((unsigned __int8 *)v25 + 23);
    int v30 = (char)v29;
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = v25[1];
    }
    if (v28 == v29)
    {
      uint64_t v26 = v30 >= 0 ? v25 : (uint64_t *)*v25;
      if ((v27 & 0x80) != 0)
      {
        BOOL v36 = memcmp((const void *)*v23, v26, v23[1]) != 0;
      }
      else if (*((unsigned char *)v23 + 23))
      {
        uint64_t v31 = v27 - 1;
        uint64_t v32 = v23;
        do
        {
          int v34 = *(unsigned __int8 *)v32;
          uint64_t v32 = (uint64_t *)((char *)v32 + 1);
          int v33 = v34;
          int v35 = *(unsigned __int8 *)v26;
          uint64_t v26 = (uint64_t *)((char *)v26 + 1);
          BOOL v36 = v33 != v35;
        }
        while (v33 == v35 && v31-- != 0);
      }
      else
      {
        BOOL v36 = 0;
      }
    }
    else
    {
      BOOL v36 = 1;
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v36)
    {
      uint64_t v38 = (*(uint64_t (**)(void *, uint64_t *))(*(void *)*a2 + 56))(*a2, v26);
      if (std::string::compare((const std::string *)v38, 0, 5uLL, "color"))
      {
        int v39 = *(char *)(v38 + 23);
        if (v39 < 0)
        {
          if (*(void *)(v38 + 8) != 8) {
            goto LABEL_89;
          }
          uint64_t v38 = *(void *)v38;
        }
        else if (v39 != 8)
        {
          goto LABEL_89;
        }
        if (*(void *)v38 != 0x656D616E656C6966) {
          goto LABEL_89;
        }
      }
      MEMORY[0x2455CF830](&__p, v23);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&__p);
      if ((__p & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
  }
LABEL_89:
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)v69);
}

void sub_23F76B5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  a33 = (void *)(v38 - 152);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a33 = (void *)(v38 - 128);
  std::vector<pxrInternal__aapl__pxrReserved__::VtValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  pxrInternal__aapl__pxrReserved__::VtValue::~VtValue((pxrInternal__aapl__pxrReserved__::VtValue *)(v38 - 88));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,pxrInternal__aapl__pxrReserved__::UsdShadeInput>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release(v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::size_type v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t realityio::mtlx::anonymous namespace'::_AddReference(realityio::mtlx::_anonymous_namespace_ *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if ((pxrInternal__aapl__pxrReserved__::UsdObject::IsValid(a2) & 1) == 0)
  {
    *(_DWORD *)this = 1;
    *((void *)this + 1) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *((void *)this + 3) = 0;
    return result;
  }
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(&v25, a2);
  BOOL v6 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v25);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(&v20, v6, a3);
  if (!pxrInternal__aapl__pxrReserved__::UsdObject::IsValid((pxrInternal__aapl__pxrReserved__::UsdObject *)&v20)) {
    goto LABEL_17;
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase();
  uint64_t v15 = MEMORY[0x263F90760] + 16;
  if (!v16 || (v16[57] & 8) != 0)
  {
    MEMORY[0x2455CF040](&v15);
  }
  else
  {
    int v7 = (*(uint64_t (**)(uint64_t *))(MEMORY[0x263F90760] + 48))(&v15);
    MEMORY[0x2455CF040](&v15);
    if (v7)
    {
      *(_DWORD *)this = v20;
      *((void *)this + 1) = v21;
      uint64_t v21 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 4, &v22);
      pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle,false,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::Sdf_PathNodeHandleImpl((_DWORD *)this + 5, &v23);
      *((void *)this + 3) = v24;
      uint64_t v24 = 0;
      goto LABEL_33;
    }
  }
  unint64_t v10 = v21;
  if (!v21 || (*((unsigned char *)v21 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v21, v8);
  }
  if (!**((void **)v10 + 3))
  {
LABEL_17:
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
    if (v21) {
      pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v21);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr,pxrInternal__aapl__pxrReserved__::UsdStage>::operator->(&v25);
    uint64_t v15 = 0;
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim((uint64_t *)this, v12, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v15);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(&v15, this);
    pxrInternal__aapl__pxrReserved__::UsdObject::GetPath(a2, &v14);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)&v20, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::UsdReferences::AddInternalReference();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v14);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v17);
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__ *)v16;
    if (!v16) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v15 = (uint64_t)"CoreRealityIO/mtlxToUsdShade.cpp";
  uint64_t v16 = "_AddReference";
  uint64_t v17 = 603;
  unint64_t v18 = (unint64_t)"UsdPrim realityio::mtlx::(anonymous namespace)::_AddReference(const UsdPrim &, const SdfPath &)";
  char v19 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
  if (!v21 || (*((unsigned char *)v21 + 57) & 8) != 0) {
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v21, v11);
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper();
  *(_DWORD *)this = 1;
  *((void *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *((void *)this + 3) = 0;
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_33:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  pxrInternal__aapl__pxrReserved__::Sdf_PathNodeHandleImpl<pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle,true,pxrInternal__aapl__pxrReserved__::Sdf_PathNode const>::~Sdf_PathNodeHandleImpl((uint64_t)&v22);
  uint64_t v13 = v21;
  if (v21) {
LABEL_26:
  }
    pxrInternal__aapl__pxrReserved__::intrusive_ptr_release((uint64_t)v13);
LABEL_27:
  uint64_t result = v26;
  if (v26)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}